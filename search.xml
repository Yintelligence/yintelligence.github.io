<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Car Sales Company</title>
      <link href="2021/03/16/2021-03-16-Car-Sales-Company/"/>
      <url>2021/03/16/2021-03-16-Car-Sales-Company/</url>
      
        <content type="html"><![CDATA[<h1 id="car-sales-company">Car Sales Company</h1><p><em>Note: Some parts of this description are intentionally left vague to allow you to implement parts with your own inspiration. Make sure to check question 4 during the modelling for a list of functional requirements. You can of course expand entities with additional attributes if needed.</em></p><p>In this project you will design a database for a car sales company. This company sells cars through dealerships in different cities throughout Belgium.</p><p>Each dealership has its own employees, an inventory of cars available for sale and its own workshop to perform maintenance and repairs of the cars sold by the company. Each dealership is identified by a name and there is only one in the city where it is located. Among the employees of a dealership is one manager, who is in charge of directing other employees. The rest of the employees can be either a salesperson or a mechanic. Each employee’s <a href="https://en.wikipedia.org/wiki/Belgian_identity_card">ID card number</a>, telephone number, name, surname, address, date of hiring in the company, professional category and gross annual salary are recorded. In addition, the total number of sales is recorded for salespeople and, in the case of mechanics, the repairs they have carried out.</p><p>Each dealership has an inventory of cars available for sale and the number of cars in stock for each model. A car is identified by its <a href="https://en.wikipedia.org/wiki/Vehicle_identification_number">VIN</a>, in addition to its colour, the corresponding brand and model are registered. A car brand may have several models and for each model a set of basic characteristics such as name, engine, fuel type (diesel, gasoline, electric, hybrid) and base price are registered. In addition to the basic features, each model may contain extra features or accessories (LED daytime running lights front and rear, Traffic Sign Recognition, Emergency Brake Assist, Lane Keeping Assist, ...), each of them will have a different price for each model. The basic features of a car will always depend on the model of the vehicle, while the extra features vary in each sale.</p><p>The sale of a car will always be made by a salesperson. When a sale is made, the details of the vehicle sold are registered, including the basic characteristics and the selected extras, if any, the customer’s and the salesperson’s details and the total sale price. When a sale is made, it is also important to register the car’s plate number and date in order to be able to notify the customer when corresponding <a href="https://www.vlaanderen.be/en/vehicle-inspection">inspection</a>s are due.</p><p>The payment of the car can be in cash or by instalment financing, in which case it would be necessary to make it through a financial institution. If it is by means of financing, the initial payment, the number of months and the payment for each month must also be registered.</p><p>Customers can be individuals or companies. In the case of individual customers, the ID card number, telephone number, name, surname, address and email address are registered. In the case of companies, the name, address and <a href="https://en.wikipedia.org/wiki/VAT_identification_number">commercial identification number</a> are registered.</p><p>In the workshop of each dealership the mechanics carry out the revision and repair of the cars sold. For each of these maintenance tasks, the vehicle involved, the type of failure (Alternator, Electrical, Brakes, Clutch...), or failures in case there are several, the date and time of entry and exit of the workshop, the mechanics who have participated in the repair, time spent by each one and the customer’s data must be registered.</p><h2 id="question-1-eer-modelling">Question 1: (E)ER Modelling</h2><p>For the first question you have to create a complete (E)ER-model for the database with the above description. Additionally, we expect a small description (1 paragraph) for each entity and relation inside this model. This description is very important as an ER model is something unique for each student that can be implemented in various different ways.</p><p><em>Tip: Check question 4 for the queries that you will have to perform on this database. This can help you to determine the functional requirements.</em></p><p><strong>Instructions</strong></p><p>You can use any drawing utility for the model. However, we do request a digitally created copy (not a scanned picture) creating using a tool such as <a href="https://draw.io">draw.io</a>. When including the image in your report, make sure it can be zoomed in. To do this in draw.io, you can export the image as an SVG or PDF. Some PDF renderers will cause draw.io primary keys to no longer be underlined after exporting it as a PDF (it will show an error underneath the drawing saying “svg 1.0 compatibility issue” or similar). Make sure and confirm that this is not the case. You can always include the SVG file to accompany your report PDF.</p><h2 id="question-2-eer-reducing-functional-dependencies-and-normalisation">Question 2: (E)ER Reducing, Functional Dependencies and Normalisation</h2><p>Reduce the above (E)ER-model to schemas. If you made changes to the names of entities, attributes or relations - add a small sentence where you explain your reasoning.</p><p>Using the schemas from above, provide all possible functional dependencies for each schema. If not already, put the schemas in BCNF (Boyce-Codd Normal Form). Explain what you did in your schemas to reduce it in BCNF.</p><p><em>Note: Make sure to clearly describe any changes that you make when converting it to BCNF.</em></p><h2 id="question-3-sql-creating">Question 3: SQL (Creating)</h2><p>Provide SQL queries to create the schemas reduced in question 2. Adding some test data can be useful for question 3.</p><p><strong>Instructions</strong></p><p>You can provide the SQL CREATE statements to create the database. This can be as a separate SQL file or included in your report. While optional, we encourage extra checks and constraints on the data.</p><h2 id="question-4-relational-algebra-sql-and-optimising">Question 4: Relational Algebra, SQL and Optimising</h2><p>For this question we expect both SQL queries and Relational Algebra formulas to get the required information.</p><p>For each query, provide a description on how to optimise the query. This should include the columns that you create an index on, the type of index and a motivation on your choices.</p><ol type="1"><li><p>List all the car dealerships and the total amount of cars they have in stock.</p><ol type="1"><li>SQL Query to get the above information</li><li>Relational Algebra formula to get the above information</li><li>How would you optimise this query (provide indexes, types of indexes and a motivation)</li></ol></li><li><p>List all cars with a base price below X euros that were sold last week and the name of the dealership they belong to.</p><ol type="1"><li>SQL Query to get the above information</li><li>Relational Algebra formula to get the above information</li><li>How would you optimise this query (provide indexes, types of indexes and a motivation)</li></ol></li><li><p>Obtain the best-selling car brand for electric or hybrid models.</p><ol type="1"><li>SQL Query to get the above information</li><li>Relational Algebra formula to get the above information</li><li>How would you optimise this query (provide indexes, types of indexes and a motivation)</li></ol></li><li><p>Obtain a list with the brand and model of the 10 models that have been repaired the most.</p><ol type="1"><li>SQL Query to get the above information</li><li>Relational Algebra formula to get the above information</li><li>How would you optimise this query (provide indexes, types of indexes and a motivation)</li></ol></li><li><p>Calculate how much money the company has earned through sales of extra features in the year 2020.</p><ol type="1"><li>SQL Query to get the above information</li><li>Relational Algebra formula to get the above information</li><li>How would you optimise this query (provide indexes, types of indexes and a motivation)</li></ol></li><li><p>Calculate how much money a certain salesperson has made in 2020 based on his gross annual salary and a 5% commission fee per car sold.</p><ol type="1"><li>SQL Query to get the above information</li><li>Relational Algebra formula to get the above information</li><li>How would you optimise this query (provide indexes, types of indexes and a motivation)</li></ol></li><li><p>List the names of all salespersons who have only made sales paid for by instalment financing.</p><ol type="1"><li>SQL Query to get the above information</li><li>Relational Algebra formula to get the above information</li><li>How would you optimise this query (provide indexes, types of indexes and a motivation)</li></ol></li><li><p>List the name of all mechanics who have performed repairs to vehicles purchased by companies, sorted by time spent.</p><p><em>Note: The time spent should only include repairs to vehicles purchased by companies.</em></p><ol type="1"><li>SQL Query to get the above information</li><li>Relational Algebra formula to get the above information</li><li>How would you optimise this query (provide indexes, types of indexes and a motivation)</li></ol></li><li><p>Obtain the name of the dealership where the most repairs have been made with type X.</p><ol type="1"><li>SQL Query to get the above information</li><li>Relational Algebra formula to get the above information</li><li>How would you optimise this query (provide indexes, types of indexes and a motivation)</li></ol></li><li><p>Obtain a list with the personal data and the name of the dealership to which they belong, of the most successful salespersons.</p><p><em>Note: The success is based on: the total value of the sales made by the salesperson is higher than the average value of the sales made by the salespersons of the dealership to which he/she belongs.</em></p><ol type="1"><li>SQL Query to get the above information</li><li>Relational Algebra formula to get the above information</li><li>How would you optimise this query (provide indexes, types of indexes and a motivation)</li></ol></li></ol><p><strong>Instructions</strong></p><p>SQL queries have to be included in your report as written text (no photo or scan). Relational Algebra formulas also need to be included in your report. Preferably these formulas are created using LaTeX or <a href="https://support.microsoft.com/en-us/office/insert-mathematical-symbols-91a4b04c-84a8-4de9-bd13-8609e14bed58?ui=en-us&amp;rs=en-us&amp;ad=us">the equation function in MS Word</a>. In case there is still an issue including the formulas, you can write them on paper an include a scanned copy of those formulas in your report.</p><p>Do not forget to also provide the index columns, the types of indexes and a motivation on your choices.</p>]]></content>
      
      
      <categories>
          
          <category> Assignments </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Databases </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Secondary structure prediction, influence of protein family and using evolutionary information.</title>
      <link href="2021/03/16/2021-03-13-Secondary-structure-prediction,-influence-of-protein-family-and-using-evolutionary-information/"/>
      <url>2021/03/16/2021-03-13-Secondary-structure-prediction,-influence-of-protein-family-and-using-evolutionary-information/</url>
      
        <content type="html"><![CDATA[<h1 id="secondary-structure-prediction-influence-of-protein-family-and-using-evolutionary-information.">Secondary structure prediction, influence of protein family and using evolutionary information.</h1><p><strong>Detailed discussion methodologies:</strong></p><ul><li><strong>GOR III</strong>: Gibrat, J.F., Garnier, J., Robson, B. (1987) <em>J. Mol. Bio.</em> <strong>198</strong>, 425-443.</li><li><strong>MCC</strong> : Matthews, B.W. (1975) <em>Biochim. Biophys. Acta</em> <strong>405</strong>, 442–451.</li></ul><h2 id="introduction">Introduction</h2><p>The aim of this assignment is to give you insight in the data and concepts behind secondary structure prediction. You will implement the <strong>GOR III algorithm</strong> and apply the ‘jack-knife’/‘leave-one-out’ for internal cross-validation. If you have already implement GOR III before, you may implement <strong>another prediction approach</strong> (<em>e.g.</em> an SVM) with 10-fold cross-validation. You will then investigate the influence of using evolutionary information on the prediction performance, and interpret the results.</p><ol type="1"><li>The provided <strong>starting data set</strong> is the secondary structure data per residue for a set of 494 proteins (single chains from the Protein Data Bank (PDB)). Three data sets are available:<ol type="1"><li>The per-residue secondary structure from STRIDE (<em>stride_info.txt</em>)</li><li>The per-residue secondary structure from DSSP (<em>dssp_info.txt</em>).</li><li>The per-protein CATH protein family (<em>cath_info.txt</em>).</li></ol></li><li>You implement the GOR III algorithm (or another approach), separately trained on the STRIDE and DSSP per-residue secondary structure data sets.</li><li>To assess the performance of your approach, you apply a ‘jack-knife’/‘leave-one-out’ approach for GOR III (a 10-fold cross validation is also acceptable for other methods). This means that you take the protein(s) you want to predict out of your training data set, parameterise your prediction algorithm on this reduced dataset, and then predict the secondary structure for the protein(s) you removed.</li><li>You compare the results from STRIDE and from DSSP with the Q<sub>3</sub> and MCC quality scores (see below) to look at the variation in the prediction performance, both overall (for the whole set) and per protein family (make subsets per CATH protein family).</li><li>You then predict the protein family of each sequence, based on the secondary structure prediction results you obtained for each protein. To do so, you can determine your own criteria and approach, and then assess the performance of your method on the actual protein family as determined by CATH.</li><li>The final part of this assignment is <strong>not required</strong> if you run out of time, but is interesting to perform, and will give you ‘bonus’ points. The task is to explore the improvement in the GOR III approach by combining it with a sequence alignment search from UniProt. This should improve the reliability of the prediction, as described for GOR V and many other secondary structure prediction methods.</li></ol><h2 id="additional-details-for-steps-above">Additional details for steps above</h2><ol type="1"><li><p>The STRIDE (<em>stride_info.txt</em>), and DSSP (<em>dssp_info.txt</em>) files are tab delimited and contain the following information per column:</p><table><thead><tr class="header"><th>PDB_code</th><th>PDB_chain_code</th><th>PDB_seq_code</th><th>residue_name</th><th>secondary_structure</th></tr></thead><tbody><tr class="odd"><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>Only use the data if <em>residue_name</em> is one of the 20 natural amino acids. The <em>secondary_structure</em> field is <strong>Helix</strong>, <strong>Beta</strong>, <strong>Other</strong> or <strong>Coil</strong>. For the purposes of this assignment, classify residues with <strong>Other</strong> secondary structure as <strong>Coil</strong>. The (PDB_code, PDB_chain_code) combination is the unique identifier for each protein.</p><p>The file with the protein family information (<em>cath_info.txt</em>) is also tab delimited and contains the following information per column:</p><table><thead><tr class="header"><th>PDB_code</th><th>PDB_chain_code</th><th>protein_family</th></tr></thead><tbody><tr class="odd"><td></td><td></td><td></td></tr></tbody></table><p>Where protein_family is <strong>Alpha</strong> (helical), <strong>Beta</strong> (sheet), <strong>Alpha/beta</strong> (mix of both) or <strong>None</strong>. There will be small inconsistencies in the input data, which you will have to deal with.</p></li><li><p>In the original GOR III implementation the authors used ‘dummy’ frequencies because they did not have enough data. The dataset provided here is much larger so you will not have to do this; just implement with the data as is.</p><p>The short one-letter codes to be used for the secondary structure are H for alpha helix, E for beta sheet and C for coil.</p><p><em>Note that amino acids can be indicated by their three-letter code (e.g. ALA) or by their one-letter code (e.g. A). You can find mappings between these online, or via Biopython.</em></p></li><li><p>Efficiency is necessary for this step; think about how to do this ‘leave-one-out’ as quickly as possible without having to recount all data. The general approach you should take is to first count the frequencies for all proteins, keep track of the values for the individual proteins while you do so, and then subtract the values from the protein you are predicting from the total values (but make sure you always start from the original total values!). You then only have to recalculate the log scores.</p></li><li><p>The formulas for the Q<sub>3</sub> and MCC scores are: <span class="math display">\[Q_3 = \frac{N_{residues\_correctly\_predicted}}{N_{residues\_total}}\]</span></p><p><span class="math display">\[MCC = \frac{TP×TN-TP×FN}{\sqrt{(TP+FP)(TP+FN)(TN+FP)(TN+FN)}}\]</span></p></li><li><p>In this step you can show some creativity and understanding; what criteria would you use to determine the protein family from the secondary structure prediction?</p></li><li><p>The basic procedure for this step is that you get a set of similar sequences from Uniprot, run your GOR III predictor on each of them, and then combine the results as described in the lesson – basically the ‘highest count’ for the predicted secondary structure per column in the multiple sequence alignment. You should check <strong>at least two</strong> of the protein sequences below; first the amino acid sequence is given, then in green the corresponding secondary structure assignment (for validation purposes).</p><p><img src="/images/ADVMB/p1.png" /></p><p><img src="/images/ADVMB/p2.png" /></p></li></ol><p>You do <strong>not</strong> have to implement a procedure to do a multiple sequence alignment (MSA) to get sequences to compare to. You can just go to UniProt to download the alignment and start from there: I will describe that procedure here, but you may choose a different one to get your MSA.</p><ol type="1"><li>Go to http://www.uniprot.org/</li><li>Click on the top left ‘<strong>Blast</strong>’ tab</li><li>Enter your one-letter amino acid sequence in the ‘<strong>Sequence or UniProt identifier</strong>’ box</li><li>Set the number of Hits to 100.</li><li>Press the ‘<strong>Run blast</strong>’ button below the box</li><li>Wait for the results…</li><li>After the results show up, there will be a table of sequences under the Alignment header. Click the top left box next to ‘Alignments’ title. This will select all the sequences that were found by BLAST.</li><li>Now click on the ‘<strong>Align’</strong> button just below the ‘Alignments’ title.</li><li>Wait for the results…</li><li>You can now download the multiple sequence alignment (MSA) for the proteins with the ‘Download’ button above the ‘Alignment’ title.</li></ol><p><em>Note that, in order to predict each sequence, you have to first remove the gaps from the sequence, then predict the secondary structure, and finally map the predictions back to the MSA. Then you count the predominant secondary structure code for each non-gap column in the original sequence!</em></p><h2 id="evaluation">Evaluation</h2><p>You should implement your work on the Jupyter platform, and comment your code and analysis results. On there we should find:</p><ol type="1"><li><p>The code, the secondary structure prediction per protein (as done from the DSSP and STRIDE data), with the Q<sub>3</sub> and MCC scores for each, and your protein family prediction. An example line in this output file would be:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">9xyz   ACCHHHHHHCCEEEECCEEEEECCCHHHH67.30.523Alpha&#x2F;beta</span><br></pre></td></tr></table></figure><p>with the first column the PDB code, the second the chain code, the third the prediction, the fourth the Q<sub>3</sub> score, the fifth the MCC score, and the sixth your protein family prediction.</p></li><li><p>An analysis and report on the implementation of the GOR III and the ‘leave-one-out’ approach, and a discussion of the results from steps 4, 5 and 6. For step 6 this report should describe the Q<sub>3</sub> and per-secondary structure MCC quality indicators for 2 proteins, with only GOR III (or your improved version of it) and with the combined GOR III/sequence alignment method. Use graphs to clarify your results and indicate distribution ranges where appropriate!</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Assignments </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computational Biology and Bioinformatics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data Analytics in Healthcare and Connected Care/Health Information Systems</title>
      <link href="2021/03/16/2021-03-16-Data-Analytics-in-Healthcare-and-Connected-CareHealth-Information-Systems---working-with-data-from-a-real-he/"/>
      <url>2021/03/16/2021-03-16-Data-Analytics-in-Healthcare-and-Connected-CareHealth-Information-Systems---working-with-data-from-a-real-he/</url>
      
        <content type="html"><![CDATA[<h1 id="data-analytics-in-healthcare-and-connected-carehealth-information-systems---working-with-data-from-a-real-healthcare-database">Data Analytics in Healthcare and Connected Care/Health Information Systems - working with data from a real healthcare database</h1><p><a href="https://vub.cloud.panopto.eu/Panopto/Pages/Viewer.aspx?id=48566814-3764-4e17-b649-aced00be2dbb">Introduction Video 3:13 ~ 10:34</a></p><p>The goals of this practical session are:</p><ul><li>Make you work with (a subset of) data from a real healthcare database, MIMIC-III (Medical Information Mart for Intensive Care III);</li><li>Explore the data available using simple and complex SQL queries;</li><li>Analyse more in details patient's data.</li></ul><h2 id="getting-started-with-sqlite-in-python">Getting started with SQLite in Python</h2><p>Accessing data from a database like Structured Query Language (SQL) is not only efficient, but it allows you also to subset and import only the parts of the data that you need.</p><p>During this practical session, you will use <a href="https://sqlite.org/docs.html">SQLite</a> (a C-language library that implements a small, fast, self-contained SQL database engine) and the 'mimicdata.sqlite' file shared in Canvas.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#import libraries </span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np, pandas <span class="keyword">as</span> pd, matplotlib.pyplot <span class="keyword">as</span> plt, seaborn <span class="keyword">as</span> sns, matplotlib.pyplot <span class="keyword">as</span> plt, bokeh, sqlite3</span><br></pre></td></tr></table></figure><p>In this first part of the lab session, you should:</p><ul><li>connect to the MIMIC database using sqlite3 library.</li><li>list all the table names present in the database.</li><li>read <a href="https://mimic.physionet.org/mimictables/">here</a> the description about the MIMIC-III tables present in the 'sqlite' file you will be using.</li><li>choose two tables of your choice and find out for each of them, their corresponding column names and the number of records present.</li><li>read these two tables into a dataframe.</li></ul><p>Keywords: <a href="https://docs.python.org/3/library/sqlite3.html#connection-objects">sqlite 3 connection</a>, <a href="https://mimic.physionet.org/mimictables/">MIMIC tables</a> ,<a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.execute">query execution</a>, <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_sql_query.html">read sql query into a DataFrame.</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="explore-the-data-using-sql-queries">Explore the data using SQL queries</h2><p>The main goal of this part of the lab session is to familiarize yourself with simple and complex sql queries that you can write in order to retrieve only a part of the data you have interest to perform analysis. We suggest that you save your queries into variables to avoid having to re-think/re-write them each time you want to use again. Towards reaching the main goal mentioned, you need to:</p><p><strong>Write sql queries to query single tables</strong></p><ul><li>Display only the 'microbiologyevents' information for which a blood culture was performed.</li><li>Display the number of urine specimen tested for bacterial growth.</li><li>Display all the distinct drug values (from prescription table) used among all the records present.</li><li>Considering the information available at 'ransfers' table, find out the numbers of patients admitted; transfered or discharged from the hospital.</li><li>Display only the records from outputevents table for substances whose level of injection was higher than 100 mL (ordered based on the injection value) and caregiver id was 21452 and 21108.</li></ul><p><strong>Write sql queries to query multiple tables:</strong></p><ul><li>Join 'admissions' and 'patient' table.</li><li>Join 'admissions', 'patient' and 'icustays' table (pay attention to the keys).</li><li>Get the length of stay for all patients (measured in fractional days) and plot their distribution for male and female patients.</li><li>Write a query that selects SUBJECT_ID, GENDER, ICUSTAY_ID and adds a column 'LOS_nominal' that converts the 'LOS' into a nominal variable ('Short' if los value &lt;= 3 else 'Long').</li></ul><p>Keywords: <a href="https://docs.python.org/3/library/sqlite3.html#module-functions-and-constants">sqlite</a>, <a href="https://www.sqlitetutorial.net/sqlite-select/">sqlite select</a>, <a href="https://www.sqlitetutorial.net/sqlite-where/">sqlite where</a>, <a href="https://www.sqlitetutorial.net/sqlite-select-distinct">sqlite select distinct</a>, <a href="https://www.sqlitetutorial.net/sqlite-order-by/">sqlite order by</a>, <a href="https://www.sqlitetutorial.net/sqlite-in/">sqlite IN operator</a>, <a href="https://www.sqlitetutorial.net/sqlite-group-by/">sqlite group by</a>, <a href="https://www.sqlitetutorial.net/sqlite-join/">sqlite join</a>.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="analysing-patients-laboratory-measurements">Analysing patient's laboratory measurements</h2><p>Table 'LABEVENTS' contains all laboratory measurements for some specific patients. 'D_LABITEMS' contains definitions for all ITEM_ID associated with lab measurements in the MIMIC database. In this part of the lab session, you should analyse the glucose levels for subject with id 40161. Query the database to retrive only the relevant information; plot the glucose levels for the given subject and interpret the results.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="analysing-patients-vital-signs">Analysing patient's vital signs</h2><p>During an intensive care unit (ICU) stay, the primary repository of a patient’s information is their electronic chart which displays patients’ routine vital signs,laboratory values, mental status, etc. 'CHARTEVENTS' table contains all the charted data available for a patient. 'ICUSTAYS' table (derived from the 'TRANSFERS' table) provides information about the date and time when the patient was transferred into/out the ICU. 'D_ITEMS' provides information about all items in the ICU databases. Considering the information you get from these three tables, find out how does the oxygen saturation level for patient with icu_stay_id 256307 change over time and interpret the results.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Lab sessions </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Analytics in Health Care and Connected Care </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Context-Free Grammars</title>
      <link href="2021/03/16/2021-03-16-Context-Free-Grammars/"/>
      <url>2021/03/16/2021-03-16-Context-Free-Grammars/</url>
      
        <content type="html"><![CDATA[<h1 id="context-free-grammars">Context-Free Grammars</h1><h2 id="introduction">Introduction</h2><ul><li>FAs and REs allow to define <strong>regular languages (RLs)</strong></li><li><strong>Context-Free Languages (CFLs)</strong> form a language class containing all regular languages, and also many non-regular languages</li><li>CFLs can be specified using <strong>Context-Free Grammars (CFGs)</strong> or a <strong>push-down automata (PDAs)</strong></li><li>CFLs are more flexible than RLs but less flexible than the languages accepted by <strong>Turing Machines</strong></li></ul><h2 id="examples">Examples</h2><ul><li><p>Balancing parentheses (algebra, programming languages, logic)</p><ul><li>e.g. <span class="math display">\[log(a(b + c)(d + e)): (()())\]</span></li></ul></li><li><p>The strings of n occurrences of a followed by n occurrences of b</p></li></ul><h2 id="definition-context-free-grammar">Definition: Context-Free Grammar</h2><p>A context-free grammar G is a quadruple, (V, Σ, S, P), where</p><ul><li>V is the set of nonterminal symbols (also called variables);</li><li>Σ is the set of terminal symbols, the symbol set for the strings of L(G);</li><li>S is the start symbol, which must be a member of V;</li><li>P is a set of rules, each of the form a → ω, where a ∈ V and ω ∈ (V ∪ Σ)<sup>*</sup>. That is, the left side of a rule is a nonterminal and the right side is any sequence of terminals and/or nonterminals.</li></ul><h3 id="example">Example</h3><p>G<sub>1</sub> = ({S}, {a, b}, S, {S → a S b, S → Λ}). We soon see that <em>L</em>(G<sub>1</sub>), the language of G<sub>1</sub>, is the language L<sub>1</sub> = {a<sup>n</sup>b<sup>n</sup>}.</p><h2 id="definition-replacement-operator-and-its-closure">Definition: Replacement Operator and its Closure</h2><p>The replacement of α by ω in the string Φαψ, using the rule α → ω, is written Φαψ ⇒ Φωψ.</p><p>The closure of this replacement operator, written "⇒<sup>*</sup>" expresses the result of 0 or more replacements. Thus, if ψ<sub>0</sub> ⇒ ψ<sub>1</sub> ⇒ ψ<sub>2</sub> ⇒ ... ⇒ ψ<sub>n</sub>, we can write ψ<sub>0</sub> ⇒<sup>*</sup> ψ<sub>i</sub> for any i from 0 to n.</p><h3 id="deriving-strings">Deriving strings</h3><ul><li><p>Derivation of <em>aaabbb</em> from start symbol S using:</p><p>G<sub>1</sub> = ({S}, {a, b}, S, {S → a S b, S → Λ})</p></li></ul><table><thead><tr class="header"><th>S</th></tr></thead><tbody><tr class="odd"><td>a S b</td></tr><tr class="even"><td>a a S b b</td></tr><tr class="odd"><td>a a a S b b b</td></tr><tr class="even"><td>a a a Λ b b b = a a a b b b</td></tr></tbody></table><p>S ⇒ a S b ⇒ a a S b b ⇒ a a a S b b b ⇒ a a a b b b.</p><h3 id="deriving-trees">Deriving trees</h3><ul><li>Let G = (V, T, S, P) be a CFG</li><li>An ordered tree is a <strong>derivation tree</strong> for G iff:<ol type="1"><li>The root is labeled S</li><li>Every leaf has a label from T ∪ {λ}</li><li>Every interior vertex has a label from V</li><li>If a vertex has label A ∈ V and its children are labeled a<sub>1</sub> , a<sub>2</sub>, ...an from left to right, then P must contain a production A → a<sub>1</sub>a<sub>2</sub>...a<sub>n</sub></li><li>A leaf labeled λ has no siblings</li></ol></li></ul><p><img src="/images/FOCS/1145040.png" /></p><h3 id="dfa-to-cfg">DFA to CFG</h3><p><strong>Theorem</strong>: Every regular language can be generated by a context-free grammar</p><ul><li>DFA: M = (Q, Σ, q<sub>0</sub>, δ, A)</li><li>CFG: G = (V, Σ, S, P)<ul><li>V = Q</li><li>S = Q<sub>0</sub></li><li>P = {q → σq<sub>0</sub> |q<sub>0</sub> = δ(q, σ)} ∪ {q → Λ|q ∈ A}</li></ul></li><li><strong>For each DFA transition, there is a grammar rule</strong></li><li><strong>If the state reached is an accepting state, a grammar rule lets replace the state name with an empty string</strong></li></ul><p><strong>Example:</strong></p><p><img src="/images/FOCS/1145041.png" /></p><h2 id="regular-grammars">Regular grammars</h2><h3 id="definition-regular-grammar">Definition: Regular Grammar</h3><p>G = (V, Σ, S, P) is a regular grammar iff:</p><ul><li>if there exists a Λ-production, it is of the from S → Λ and S does not appear as a substring of the right-hand side of any other production in P</li><li>All other production are of the form A → a, where A ∈ V and a ∈ Σ or A → aB where A, B ∈ V and a ∈ Σ</li></ul><h2 id="regular-languages">Regular languages</h2><p><strong>Conclusion</strong>: Three ways to specify regular languages:</p><ul><li>Finite State Automata</li><li>Regular Expressions</li><li>Regular Grammars</li></ul>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fundamentals of Computer Science </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Iterators and Iterables</title>
      <link href="2021/03/16/2021-03-16-Iterators-and-Iterables/"/>
      <url>2021/03/16/2021-03-16-Iterators-and-Iterables/</url>
      
        <content type="html"><![CDATA[<h1 id="iterators-and-iterables">Iterators and Iterables</h1><p><a href="https://www.youtube.com/watch?v=P5sU_MGW9kI">Video</a></p><h2 id="iterators-warmup">Iterators Warmup</h2><p>If we were to define a class that implements the interface Iterable, what method(s) would this class need to define? Write the function signature(s) below.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;Integer&gt; <span class="title">iterator</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>If we were to define a class that implements the interface Iterator, what method(s) would this class need to define? Write the function signature(s) below.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">next</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>What’s one difference between Iterator and Iterable?</p><p><strong>Iterators are the actual object we can iterate over. Iterables are object that can produce an iterator that somehow iterate over their contents. If we have a class called CS61B, it itself cannot be iterated over, but it can produce an iterator that iterates over all of the students in the class.</strong></p><h2 id="ohqueue">OHQueue</h2><p>The goal for this question is to create an iterable Office Hours queue. We’ll do so step by step.</p><p>The code below for OHRequest represents a single request. Like an IntNode, it has a reference to the next request. description and name contain the description of the bug and name of the person on the queue.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OHRequest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String description;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> OHRequest next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OHRequest</span><span class="params">(String description, String name, OHRequest next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.description = description;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>First, let’s define an iterator. Create a class OHIterator that implements an iterator over OHRequest objects that only returns requests with good descriptions. Our OHIterator’s constructor will take in an OHRequest object that represents the first OHRequest object on the queue. We’ve provided a function, isGood, that accepts a description and says if the description is good or not. If we run out of office hour requests, we should throw a NoSuchElementException when our iterator tries to get another request.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.NoSuchElementException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OHIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">OHRequest</span>&gt; </span>&#123;</span><br><span class="line">    OHRequest curr;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OHIterator</span><span class="params">(OHRequest queue)</span> </span>&#123;</span><br><span class="line">        curr = queue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isGood</span><span class="params">(String description)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> description != <span class="keyword">null</span> &amp;&amp; description.length() &gt; <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (curr != <span class="keyword">null</span> &amp;&amp; !isGood(curr.description)) &#123;</span><br><span class="line">        curr = curr.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (curr == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OHRequest <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!hasNext()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        &#125;</span><br><span class="line">        OHRequest currRequest = curr;</span><br><span class="line">        curr = curr.next;</span><br><span class="line">        <span class="keyword">return</span> currRequest;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, define a class OHQueue. We want our OHQueue to be iterable, so that we can process OHRequest objects with good descriptions. Our constructor will take in an OHRequest object representing the first request on the queue.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OHQueue</span> <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">OHRequest</span>&gt; </span>&#123;</span><br><span class="line">    OHRequest queue;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OHQueue</span> <span class="params">(OHRequest queue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.queue = queue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;OHRequest&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OHIterator(queue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Fill in the main method below so that you make a new OHQueue object and print the names of people with good descriptions. Note : the main method is part of the OHQueue class.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OHQueue</span> ... </span>&#123;</span><br><span class="line">    ....</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</span><br><span class="line">        OHRequest s5 = <span class="keyword">new</span> OHRequest(<span class="string">&quot;I deleted all of my files&quot;</span>, <span class="string">&quot;Alex&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">        OHRequest s4 = <span class="keyword">new</span> OHRequest(<span class="string">&quot;conceptual: what is Java&quot;</span>, <span class="string">&quot;Omar&quot;</span>, s5);</span><br><span class="line">        OHRequest s3 = <span class="keyword">new</span> OHRequest(<span class="string">&quot;git: I never did lab 1&quot;</span>, <span class="string">&quot;Connor&quot;</span>, s4);</span><br><span class="line">        OHRequest s2 = <span class="keyword">new</span> OHRequest(<span class="string">&quot;help&quot;</span>, <span class="string">&quot;Hug&quot;</span>, s3);</span><br><span class="line">        OHRequest s1 = <span class="keyword">new</span> OHRequest(<span class="string">&quot;no I haven&#x27;t tried</span></span><br><span class="line"><span class="string">stepping through&quot;</span>, <span class="string">&quot;Itai&quot;</span>, s2);</span><br><span class="line">        OHQueue q = <span class="keyword">new</span> OHQueue(s1);</span><br><span class="line">        <span class="keyword">for</span> (OHRequest o : q) &#123;</span><br><span class="line">System.out.println(o.name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="thank-u-next">Thank u, next</h2><p>Now that we have our OHQueue from problem 2, we’d like to add some functionality. We’ve noticed that occasionally in office hours, the system will put someone on the queue twice. It seems that this happens whenever the description contains the words “thank u.” To combat this, we’d like to define a new iterator, TYIterator.</p><p>If the current item’s description contains the words “thank u,” it should skip the next item on the queue. As an example, if there were 4 OHRequest objects on the queue with descriptions ["thank u", "thank u", "im bored", "help me"], calls to next() should return the 0th, 2nd, and 3rd OHRequest objects on the queue. Note: we are still enforcing good descriptions on the queue as well!</p><p><em>Hint - To check if a description contains the words “thank u”, you can use: curr.description.contains("thank u")</em>.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TYIterator</span> <span class="keyword">extends</span> <span class="title">OHIterator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TYIterator</span><span class="params">(OHRequest queue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(queue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OHRequest <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        OHRequest result = <span class="keyword">super</span>.next();</span><br><span class="line">        <span class="keyword">if</span> (curr != <span class="keyword">null</span> &amp;&amp; curr.description.contains(<span class="string">&quot;thank u&quot;</span>)) &#123;</span><br><span class="line">            curr = curr.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Discussions </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structures </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Exceptions, Iterators, Object Methods</title>
      <link href="2021/03/16/2021-03-16-Exceptions,-Iterators,-Object-Methods/"/>
      <url>2021/03/16/2021-03-16-Exceptions,-Iterators,-Object-Methods/</url>
      
        <content type="html"><![CDATA[<h1 id="exceptions-iterators-object-methods">Exceptions, Iterators, Object Methods</h1><p><a href="https://www.youtube.com/watch?v=DWr8YNXPH6k&amp;list=PL8FaHk7qbOD4vPE_Bd8QagarKi3kPw8rB">Video</a></p><h2 id="lists-and-sets-in-java"><a href="https://www.youtube.com/watch?v=DWr8YNXPH6k&amp;list=PL8FaHk7qbOD4vPE_Bd8QagarKi3kPw8rB">Lists and Sets in Java</a></h2><h3 id="lists">Lists</h3><p>We have build two types of lists: ALists and SLLists.</p><ul><li>Similar to Python lists.</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List61B&lt;Integer&gt; L = <span class="keyword">new</span> AList&lt;&gt;();</span><br><span class="line">L.addLast(<span class="number">5</span>);</span><br><span class="line">L.addLast(<span class="number">10</span>);</span><br><span class="line">L.addLast(<span class="number">15</span>);</span><br><span class="line">L.print();</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">L = []</span><br><span class="line">L.append(<span class="number">3</span>)</span><br><span class="line">L.append(<span class="number">4</span>)</span><br><span class="line">L.append(<span class="number">5</span>)</span><br><span class="line">print(L)</span><br></pre></td></tr></table></figure><h4 id="lists-in-real-java-code">Lists in Real Java Code</h4><p>We built a list from scratch, but Java provides a built-in List interface and several implementations, e.g. ArrayList.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List61B&lt;Integer&gt; L = <span class="keyword">new</span> AList&lt;&gt;();</span><br><span class="line">L.addLast(<span class="number">5</span>);</span><br><span class="line">L.addLast(<span class="number">10</span>);</span><br><span class="line">L.addLast(<span class="number">15</span>);</span><br><span class="line">L.print();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.util.List&lt;Integer&gt; L = <span class="keyword">new</span> java.util.ArrayList&lt;&gt;();</span><br><span class="line">L.add(<span class="number">5</span>);</span><br><span class="line">L.add(<span class="number">10</span>);</span><br><span class="line">L.add(<span class="number">15</span>);</span><br><span class="line">System.out.println(L);</span><br></pre></td></tr></table></figure><p>By including “import java.util.List” and “import java.util.ArrayList” at the top of the file, we can make our code more compact.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleBuiltInListExample</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; L = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// If we import, we can use the “simple name” (ArrayList) as opposed to the longer “canonical name” (java.util.ArrayList).</span></span><br><span class="line">    L.add(<span class="number">5</span>);</span><br><span class="line">    L.add(<span class="number">10</span>);</span><br><span class="line">    L.add(<span class="number">15</span>);</span><br><span class="line">    System.out.println(L);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sets-in-java-and-python">Sets in Java and Python</h3><p>Another handy data structure is the set.</p><ul><li>Stores a set of values with no duplicates. Has no sense of order.</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;String&gt; S = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">S.add(<span class="string">&quot;Tokyo&quot;</span>);</span><br><span class="line">S.add(<span class="string">&quot;Beijing&quot;</span>);</span><br><span class="line">S.add(<span class="string">&quot;Lagos&quot;</span>);</span><br><span class="line">S.add(<span class="string">&quot;São Paulo&quot;</span>);</span><br><span class="line">System.out.println(S.contains(<span class="string">&quot;Tokyo&quot;</span>));</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="built_in">set</span>()</span><br><span class="line">s.add(<span class="string">&quot;Tokyo&quot;</span>)</span><br><span class="line">s.add(<span class="string">&quot;Beijing&quot;</span>)</span><br><span class="line">s.add(<span class="string">&quot;Lagos&quot;</span>)</span><br><span class="line">s.add(<span class="string">&quot;São Paulo&quot;</span>)</span><br><span class="line">print(<span class="string">&quot;Tokyo&quot;</span> <span class="keyword">in</span> s)</span><br></pre></td></tr></table></figure><h4 id="arrayset">ArraySet</h4><p>Today we’re going to write our own Set called ArraySet.</p><ul><li>Won’t be implementing any specific interface (for now).</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArraySet&lt;String&gt; S = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line">S.add(<span class="string">&quot;Tokyo&quot;</span>);</span><br><span class="line">S.add(<span class="string">&quot;Beijing&quot;</span>);</span><br><span class="line">S.add(<span class="string">&quot;Lagos&quot;</span>);</span><br><span class="line">S.add(<span class="string">&quot;São Paulo&quot;</span>);</span><br><span class="line">System.out.println(S.contains(<span class="string">&quot;Tokyo&quot;</span>));</span><br><span class="line">System.out.println(S.size());</span><br></pre></td></tr></table></figure><h5 id="goals">Goals</h5><p>Goal 1: Create a class ArraySet with the following methods:</p><ul><li>add(value): Add the value to the ArraySet if it is not already present.</li><li>contains(value): Checks to see if ArraySet contains the key.</li><li>size(): Returns number of values.</li></ul><h5 id="basic-implementation"><a href="https://www.youtube.com/watch?v=gX9KFdZBg-k&amp;list=PL8FaHk7qbOD4vPE_Bd8QagarKi3kPw8rB&amp;index=2">Basic Implementation</a></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraySet</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> T[] items;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ArraySet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    items = (T[]) <span class="keyword">new</span> Object[<span class="number">100</span>];</span><br><span class="line">    size = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Array implementation of a Set:</p><ul><li>Use an array as the core data structure.</li><li>contains(x): Checks to see if x is in the underlying array.</li><li>add(x): Checks to see if x is in the underlying array, and if not, adds it.</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (items[i].equals(x)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!contains(x)) &#123;</span><br><span class="line">    items[size] = x;</span><br><span class="line">    size += <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="using-an-arrayset">Using An ArraySet</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraySet</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"><span class="comment">// Generic type variables</span></span><br><span class="line">  <span class="keyword">private</span> T[] items;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ArraySet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    items = (T[]) <span class="keyword">new</span> Object[<span class="number">100</span>];</span><br><span class="line">    size = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArraySet&lt;String&gt; S = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line"><span class="comment">// Actual type arguments</span></span><br><span class="line">S.add(<span class="string">&quot;horse&quot;</span>);</span><br><span class="line">S.add(<span class="string">&quot;fish&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="exceptions"><a href="https://www.youtube.com/watch?v=r5hp67RfWaY&amp;list=PL8FaHk7qbOD4vPE_Bd8QagarKi3kPw8rB&amp;index=3">Exceptions</a></h2><p>Basic idea:</p><ul><li>When something goes really wrong, break the normal flow of control.</li><li>So far, we’ve only seen implicit exceptions, like the one below.</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ArraySet&lt;String&gt; s = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line">    s.add(<span class="keyword">null</span>);</span><br><span class="line">    s.add(<span class="string">&quot;horse&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="explicit-exceptions">Explicit Exceptions</h3><p>We can also throw our own exceptions using the <strong>throw</strong> keyword.</p><ul><li>Can provide more informative message to a user.</li><li>Can provide more information to code that “catches” the exception.</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Cannot add null!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Arguably this is a bad exception.</p><ul><li>Our code now crashes when someone tries to add a null.</li><li>Other fixes:<ul><li>Ignore nulls.</li><li>Fix contains so that it doesn’t crash if items[i] is null.</li></ul></li></ul><h2 id="iteration"><a href="https://www.youtube.com/watch?v=Gv6LjusNBU0&amp;list=PL8FaHk7qbOD4vPE_Bd8QagarKi3kPw8rB&amp;index=4">Iteration</a></h2><h3 id="the-enhanced-for-loop">The Enhanced For Loop</h3><p>Java allows us to iterate through Lists and Sets using a convenient shorthand syntax sometimes called the “foreach” or “enhanced for” loop.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;Integer&gt; javaset = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">javaset.add(<span class="number">5</span>);</span><br><span class="line">javaset.add(<span class="number">23</span>);</span><br><span class="line">javaset.add(<span class="number">42</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : javaset) &#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>This doesn’t work with our ArraySet.</li><li>Let’s strip away the magic so we can build our own classes that support this.</li></ul><h4 id="how-iteration-really-works">How Iteration Really Works</h4><p>An alternate, uglier way to iterate through a List is to use the iterator() method.</p><p>Set.java:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>“Nice” iteration:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;Integer&gt; javaset =</span><br><span class="line">  <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">...</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x : javaset) &#123;</span><br><span class="line">   System.out.println(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>An alternate, uglier way to iterate through a List is to use the iterator() method.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;Integer&gt; javaset =</span><br><span class="line">  <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">...</span><br><span class="line">Iterator&lt;Integer&gt; seer</span><br><span class="line"> = javaset.iterator();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> (seer.hasNext()) &#123;</span><br><span class="line">  System.out.println(seer.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="the-secret-of-the-enhanced-for-loop">The Secret of the Enhanced For Loop</h4><p>The secret: The code on the left is just shorthand for the code on the right. For code on right to compile, which checks does the compiler need to do?</p><ul><li><strong>Does the Set interface have an iterator() method?</strong></li><li><del>Does the Set interface have next/hasNext() methods?</del></li><li><del>Does the Iterator interface have an iterator method?</del></li><li><strong>Does the Iterator interface have next/hasNext() methods?</strong></li></ul><h4 id="supporting-ugly-iteration-in-arraysets">Supporting Ugly Iteration in ArraySets</h4><p>To support ugly iteration:</p><ul><li>Add an iterator() method to ArraySet that returns an Iterator&lt;T&gt;.</li><li>The Iterator&lt;T&gt; that we return should have a useful hasNext() and next() method.</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">T <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Iterator&lt;Integer&gt; aseer</span><br><span class="line"> = aset.iterator();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (aseer.hasNext()) &#123;</span><br><span class="line">  System.out.println(aseer.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Completed ArraySet iterator Method:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraySetIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> wizPos;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">ArraySetIterator</span><span class="params">()</span> </span>&#123; wizPos = <span class="number">0</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> wizPos &lt; size; &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> T <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    T returnItem = items[wizPos];</span><br><span class="line">    wizPos += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> returnItem;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;T&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ArraySetIterator();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Our code now supports “ugly” iteration, but enhanced for loop still doesn’t work.</p><p>The problem: Java isn’t smart enough to realize that our ArraySet has an iterator() method.</p><ul><li>Luckily there’s an interface for that.</li></ul><h4 id="for-each-iteration-and-arraysets">For-each Iteration And ArraySets</h4><p>To support the enhanced for loop, we need to make ArraySet implement the Iterable interface.</p><ul><li>There are also some default methods in Iterable, not shown.</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Iterable&lt;T&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">Iterator&lt;T&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ArraySet&lt;T&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraySet</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    ...</span><br><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;T&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="the-iterable-interface">The Iterable Interface</h3><p>By the way, this is how Set works as well.</p><ul><li>Source code for Iterable: <a href="https://github.com/AdoptOpenJDK/openjdk-jdk11/blob/999dbd4192d0f819cb5224f26e9e7fa75ca6f289/src/java.base/share/classes/java/lang/Iterable.java">Link</a>, Set: <a href="https://github.com/AdoptOpenJDK/openjdk-jdk11/blob/999dbd4192d0f819cb5224f26e9e7fa75ca6f289/src/java.base/share/classes/java/util/Set.java">Link</a>, Collection: <a href="https://github.com/AdoptOpenJDK/openjdk-jdk11/blob/999dbd4192d0f819cb5224f26e9e7fa75ca6f289/src/java.base/share/classes/java/util/Collection.java">Link</a>.</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">Iterator&lt;T&gt; <span class="title">iterator</span><span class="params">()</span></span>; ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Iterable</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Set</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="summary">Summary</h3><p>To support the enhanced for loop:</p><ul><li>Add an iterator() method to your class that returns an Iterator&lt;T&gt;.</li><li>The Iterator&lt;T&gt; returned should have a useful hasNext() and next() method.</li><li>Add implements Iterable&lt;T&gt; to the line defining your class.</li></ul><h2 id="object-methods-equals-and-tostring"><a href="https://www.youtube.com/watch?v=AKnMv0ootkg&amp;list=PL8FaHk7qbOD4vPE_Bd8QagarKi3kPw8rB&amp;index=5">Object Methods: Equals and toString()</a></h2><h3 id="objects">Objects</h3><p>All classes are hyponyms of Object.</p><ul><li><strong>String toString()</strong></li><li><strong>boolean equals(Object obj)</strong></li><li>Class&lt;?&gt; getClass()</li><li><strong>int hashCode()</strong></li><li>protected Objectclone()</li><li>protected void finalize()</li><li>void notify()</li><li>void notifyAll</li><li>()void wait()</li><li>void wait(long timeout)</li><li>void wait(long timeout, int nanos)</li></ul><h3 id="tostring">toString()</h3><p>The toString() method provides a string representation of an object.</p><ul><li>System.out.println(Object x) calls x.toString()<ul><li>If you’re curious: <a href="https://github.com/AdoptOpenJDK/openjdk-jdk11/blob/999dbd4192d0f819cb5224f26e9e7fa75ca6f289/src/java.base/share/classes/java/io/PrintStream.java#L896">println</a> calls <a href="https://github.com/AdoptOpenJDK/openjdk-jdk11/blob/f0ef2826d2116f4e0c0ed21f8d54fe9d0706504e/src/java.base/share/classes/java/lang/String.java">String.valueOf</a> which calls toString</li></ul></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;Integer&gt; javaset = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">javaset.add(<span class="number">5</span>);</span><br><span class="line">javaset.add(<span class="number">23</span>);</span><br><span class="line">javaset.add(<span class="number">42</span>);</span><br><span class="line"> </span><br><span class="line">System.out.println(javaset);</span><br></pre></td></tr></table></figure><ul><li>The <a href="https://github.com/AdoptOpenJDK/openjdk-jdk11/blob/999dbd4192d0f819cb5224f26e9e7fa75ca6f289/src/java.base/share/classes/java/lang/Object.java#L245">implementation of toString() in Object</a> is the the name of the class, then an @ sign, then the memory location of the object.</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArraySet&lt;Integer&gt; aset = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line">aset.add(<span class="number">5</span>);</span><br><span class="line">aset.add(<span class="number">23</span>);</span><br><span class="line">aset.add(<span class="number">42</span>);</span><br><span class="line"> </span><br><span class="line">System.out.println(aset);</span><br></pre></td></tr></table></figure><h4 id="arrayset-tostring">ArraySet toString</h4><p>Let’s try implementing toString for ArraySet.</p><p>One approach is shown below.</p><ul><li>Warning: This code is slow. Intuition: Adding even a single character to a string creates an entirely new string. Will discuss why at end of course.<ul><li>Spoiler: It’s because Strings are “immutable”.</li></ul></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String returnString = <span class="string">&quot;&#123;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i += <span class="number">1</span>) &#123;</span><br><span class="line">        returnString += keys[i];</span><br><span class="line">        returnString += <span class="string">&quot;, &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    returnString += <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> returnString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Much faster approach is shown below.</p><ul><li>Intuition: Append operation for a StringBuilder is fast.</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    StringBuilder returnSB = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;&#123;&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i += <span class="number">1</span>) &#123;</span><br><span class="line">        returnSB.append(items[i]);</span><br><span class="line">        returnSB.append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    returnSB.append(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> returnSB.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="equals-vs."><a href="https://www.youtube.com/watch?v=qHuS1o97nfQ&amp;list=PL8FaHk7qbOD4vPE_Bd8QagarKi3kPw8rB&amp;index=6">Equals vs. ==</a></h3><p>As mentioned in an offhand manner previously, == and .equals() behave differently.</p><ul><li>== compares the bits. For references, == means “referencing the same object.”</li></ul><p>To test equality in the sense we usually mean it, use:</p><ul><li>.equals for classes. Requires writing a .equals method for your classes.<ul><li><a href="https://github.com/AdoptOpenJDK/openjdk-jdk11/blob/999dbd4192d0f819cb5224f26e9e7fa75ca6f289/src/java.base/share/classes/java/lang/Object.java#L157">Default implementation</a> of .equals uses == (probably not what you want)</li></ul></li><li>.BTW: Use Arrays.equal or Arrays.deepEquals for arrays.</li></ul><h4 id="the-default-implementation-of-equals">The Default Implementation of Equals</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArraySet&lt;Integer&gt; aset = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line">aset.add(<span class="number">5</span>);</span><br><span class="line">aset.add(<span class="number">23</span>);</span><br><span class="line">aset.add(<span class="number">42</span>);</span><br><span class="line"> </span><br><span class="line">System.out.println(aset);</span><br><span class="line"> </span><br><span class="line">ArraySet&lt;Integer&gt; aset2 = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line">aset2.add(<span class="number">5</span>);</span><br><span class="line">aset2.add(<span class="number">23</span>);</span><br><span class="line">aset2.add(<span class="number">42</span>);</span><br><span class="line"> </span><br><span class="line">System.out.println(aset.equals(aset2));</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Returns false because the default implementation of equals just uses ==.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="arrayset-equals">ArraySet equals</h4><p>Let’s try implementing equals for ArraySet.</p><p>The implementation below is a good start, but fails if o is null or another class.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">  ArraySet&lt;T&gt; other = (ArraySet&lt;T&gt;) o;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.size() != other.size()) &#123; <span class="keyword">return</span> <span class="keyword">false</span>; &#125;</span><br><span class="line">    <span class="keyword">for</span> (T item : <span class="keyword">this</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!other.contains(item)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The implementation below is much better, but we can speed things up.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123; <span class="keyword">return</span> <span class="keyword">false</span>; &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.getClass() != o.getClass()) &#123; <span class="keyword">return</span> <span class="keyword">false</span>; &#125;</span><br><span class="line">  ArraySet&lt;T&gt; other = (ArraySet&lt;T&gt;) o;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.size() != other.size()) &#123; <span class="keyword">return</span> <span class="keyword">false</span>; &#125;</span><br><span class="line">    <span class="keyword">for</span> (T item : <span class="keyword">this</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!other.contains(item)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The code below is pretty close to what a standard equals method looks like.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123; <span class="keyword">return</span> <span class="keyword">false</span>; &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span> == o) &#123; <span class="keyword">return</span> <span class="keyword">true</span>; &#125; <span class="comment">// optimization</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.getClass() != o.getClass()) &#123; <span class="keyword">return</span> <span class="keyword">false</span>; &#125;</span><br><span class="line">  ArraySet&lt;T&gt; other = (ArraySet&lt;T&gt;) o;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.size() != other.size()) &#123; <span class="keyword">return</span> <span class="keyword">false</span>; &#125;</span><br><span class="line">    <span class="keyword">for</span> (T item : <span class="keyword">this</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!other.contains(item)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="summary-1"><a href="https://www.youtube.com/watch?v=fm34ffDekgc&amp;list=PL8FaHk7qbOD4vPE_Bd8QagarKi3kPw8rB&amp;index=7">Summary</a></h2><p>We built our own Array based Set implementation.</p><p>To make it more industrial strength we:</p><ul><li>Added an exception if a user tried to add null to the set.<ul><li>There are other ways to deal with nulls. Our choice was arguably bad.</li></ul></li><li>Added support for “ugly” then “nice” iteration.<ul><li>Ugly iteration: Creating a subclass with next and hasNext methods.</li><li>Nice iteration: Declaring that ArraySet implements Iterable.</li></ul></li><li>Added a toString() method.<ul><li>Beware of String concatenation.</li></ul></li><li>Added an equals(Object) method.<ul><li>Make sure to deal with null and non-ArraySet arguments!</li><li>Used getClass to check the class of the passed object. Use sparingly.</li></ul></li></ul><h2 id="even-better-tostring-and-arrayset.of"><a href="https://www.youtube.com/watch?v=tjLpeVD0KWc&amp;list=PL8FaHk7qbOD4vPE_Bd8QagarKi3kPw8rB&amp;index=8">Even Better toString and ArraySet.of</a></h2><ol type="1"><li>Make ArraySet implement the Iterable<T> interface.</li><li>Implement a toString method.</li><li>Implement an equals() method.</li></ol><h2 id="overview">Overview</h2><h3 id="exceptions-1">Exceptions</h3><p>Most likely you have encountered an exception in your code such as a <code>NullPointerException</code> or an <code>IndexOutOfBoundsException</code>. Now we will learn about how we can “throw” exceptions ourselves, and also handle thrown exceptions. Here is an example of an exception that we throw:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;For no reason.&quot;</span>);</span><br></pre></td></tr></table></figure><p><em>Note: Try/Catch is out of scope for now!</em></p><p>Throwing exceptions is useful to notify your user of something wrong they have done. On the other hand, we can also “catch” exceptions that happen in our code! Here is an example:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    dog.run()</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Tried to run: &quot;</span> + e);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br></pre></td></tr></table></figure><p>There are a few key things to note. Firstly, the entirety of the <code>try</code> section is run until/if there is an exception thrown. If there never is an exception, the entire catch block is skipped. If there is an exception, the code immediately jumps into the catch block with the corresponding exception, and executes from there.</p><h3 id="iterators-and-iterables">Iterators and Iterables</h3><p>These two words are very closely related, but have two different meanings that are often easy to confuse. The first thing to know is that these are both Java interfaces, with different methods that need to be implemented. Here is a simplified interface for Iterator:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function">T <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here is a simplified interface for Iterable:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">Iterator&lt;T&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Notice that in order for an object (for example an ArrayList or LinkedList) to be <em>iterable</em>, it must include a method that returns an <em>iterator</em>. The iterator is the object that iterates over an iterable object. Keep this relationship and distinction in mind as you work with these two interfaces.</p><h3 id="tostring-1">toString</h3><p>The <code>toString()</code> method returns a string representation of objects.</p><h3 id="vs-.equals">== vs .equals</h3><p>We have two concepts of equality in Java- “==” and the “.equals()” method. The key difference is that when using ==, we are checking if two objects have the same address in memory (that they point to the same object). On the other hand, .equals() is a method that can be overridden by a class and can be used to define some custom way of determining equality.</p><p>For example, say we wanted to check if two stones are equal:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stone</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Stone</span><span class="params">(<span class="keyword">int</span> weight)</span></span>&#123;...&#125;</span><br><span class="line">&#125;</span><br><span class="line">Stone s = <span class="keyword">new</span> Stone(<span class="number">100</span>);</span><br><span class="line">Stone r = <span class="keyword">new</span> Stone(<span class="number">100</span>);</span><br></pre></td></tr></table></figure><p>If we want to consider s and r equal because they have the same weight. If we do check equality using ==, these Stones would not be considered equal because they do not have the same memory address.</p><p>On the other hand, if you override the equals method of Stone as follows</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.weight == ((Stone) o).weight</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We would have that the stones would be considered equal because they have the same weight.</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structures </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Photonics- Lasers and their applications</title>
      <link href="2021/03/15/2021-03-15-Photonics--Lasers-and-their-applications/"/>
      <url>2021/03/15/2021-03-15-Photonics--Lasers-and-their-applications/</url>
      
        <content type="html"><![CDATA[<h1 id="photonics-lasers-and-their-applications">Photonics: Lasers and their applications</h1><h2 id="overview">Overview</h2><ul><li>Lasers and their applications<ul><li>Lasers</li><li>Basic operation (energy state model, amplification, pumping)</li><li>Properties of laser light</li><li>Pulsed lasers</li><li>Future of high-power lasers</li></ul></li><li>Applications<ul><li>Digital holography</li><li>Medical user</li><li>Laser cooling</li><li>Optical tweezers</li><li>Two-photon excitation microscopy</li></ul></li></ul><h2 id="lasers">Lasers</h2><p><strong><u>L</u>ight <u>A</u>mplification by <u>S</u>timulated <u>E</u>mission of <u>R</u>adiation</strong></p><p><img src="/images/EP/1418200.png" /></p><h3 id="laser-operation">LASER operation</h3><h4 id="spontaneous-emission">Spontaneous emission</h4><p><img src="/images/EP/2158550.png" /> <span class="math display">\[N = N_1 + N_2\]</span></p><ul><li>N<sub>1</sub>: Lower energy state</li><li>N<sub>2</sub>: Higher energy state</li></ul><p><span class="math display">\[\frac{dN_2}{dt}_{\frac{sp}{nr}}=-AN_2\]</span></p><ul><li><strong>Radiative decay</strong>:</li></ul><p><span class="math display">\[A = \frac{1}{𝜏_{sp}}\]</span></p><ul><li><strong>Non-radiative decay</strong>:</li></ul><p><span class="math display">\[A = \frac{1}{𝜏_{nr}}\]</span></p><h4 id="stimulated-emission">Stimulated emission</h4><p><img src="/images/EP/2158551.png" /> <span class="math display">\[\frac{dN_2}{dt}_{\frac{sp}{nr}}=-W_{21}N_{2}\\W_{21} = 𝜎_{21}F\]</span></p><h4 id="stimulated-absorption">Stimulated absorption</h4><p><img src="/images/EP/2158552.png" /> <span class="math display">\[\frac{dN_2}{dt}_{\frac{sp}{nr}}=-W_{21}N_{2}\\W_{21} = 𝜎_{21}F\\g_2W_{12}=g_1W_{21}\]</span></p><ul><li>g: Energy level degeneracy</li></ul><p><img src="/images/EP/2158553.png" /></p><h4 id="photon-flux">Photon flux</h4><p><span class="math display">\[𝑆𝑑𝐹 = 𝑊_{21}𝑁_{2} − 𝑊_{12}𝑁_{1}(𝑆𝑑𝑧)⟹ 𝑑𝐹 = 𝜎_{21}𝐹[𝑁_{2}−\frac{𝑔_{2}}{𝑔_{1}}]𝑁_{1}dz\]</span></p><p><img src="/images/EP/2158554.png" /></p><p>To get amplification, we must pump energy into the system to get a “population inversion”, i.e. most members of the system are in higher, excited states (e.g. 𝑁<sub>2</sub>).</p><h3 id="laser-pumping">LASER pumping</h3><h4 id="multi-state-schemes">Multi-state schemes</h4><p><img src="/images/EP/2158555.png" /></p><p>2-level systems cannot be used (practically) for lasing due to <strong>saturation →</strong> Higher level systems with metastable states.</p><h4 id="pumping-processes">Pumping processes</h4><ul><li>Optical pumping<ul><li>Pumping with other light source</li><li>Cavities, arc lamps, flashlamps</li><li>Mostly used for solid-state or liquid lasers</li></ul></li><li>Electrical pumping<ul><li>Exciting atoms to higher states with electrons</li><li>Glow discharge, electric current, electron beams</li><li>Mostly used in gas lasers</li></ul></li></ul><figure><img src="/images/EP/2158556.png" alt="" /><figcaption>Pumping cavity configurations</figcaption></figure><h3 id="properties-of-laser-light">Properties of LASER light</h3><h4 id="narrow-bandwidth-highly-monochrome">Narrow bandwidth → highly monochrome</h4><p>Laser Two-arrangement forms a resonant cavity</p><ul><li>oscillation can occur only at the resonance frequencies</li><li>laser linewidth typically much narrower than the usual linewidth of the energy state transition as observed in spontaneous emission.</li></ul><p><img src="/images/EP/2158557.png" /></p><h4 id="high-spatial-and-temporal-coherence">High spatial and temporal coherence</h4><p><img src="/images/EP/2158558.png" /></p><p><img src="/images/EP/2158559.png" /></p><h4 id="directional-light-source-high-brightness">Directional light source + high brightness</h4><ul><li>Even if perfectly coherent, there is still beam spread due to diffraction</li><li>Lasers tend to have an almost Gaussian beam waist</li><li>Optimal shape for minimizing spread</li><li>Energy concentrated into small beam</li><li>Typical light bulb of 60W vs. Dangerous class 3B He-Ne laser of 20mW (632.8nm red light)</li></ul><figure><img src="/images/EP/2158561.png" alt="" /><figcaption>Gaussian beam waist</figcaption></figure><figure><img src="/images/EP/2158560.png" alt="" /><figcaption>Low curvature of laser wavefront</figcaption></figure><h4 id="laser-pulsing">Laser pulsing</h4><p><strong>Continuous wave laser vs. pulsed laser</strong></p><p>Three important (independent) techniques for getting high power laser pulses</p><ul><li>Q-switching</li><li>Mode locking</li><li>Chirped pulse amplification</li></ul><p>Power as a function of time for two laser types (including orders of magnitude for typical, commercially available lasers)</p><p><img src="/images/EP/2158562.png" /></p><h5 id="q-switching">Q-switching</h5><ul><li>Alters the Q-factor (quality factor → oscillator dampening)</li><li>Low Q phase → buildup of population inversion until gain saturation</li><li>High Q phase → quick release of energy, creating a short powerful laser pulse (can be &gt; GW).</li><li>Passive and Active Q-switches</li><li>Q-switch types: Mechanical, Electro-optical, Acousto-optical, Chemical</li></ul><figure><img src="/images/EP/2158563.png" alt="" /><figcaption>Simplified diagram of a Q-switch pulsed laser system</figcaption></figure><h5 id="mode-locking"><a href="https://www.youtube.com/watch?v=efxFduO2Yl8">Mode locking</a></h5><p>Mode locking aligns the longitudinal modes of the laser's resonant cavity.</p><ul><li>Active mode locking using<ul><li>e.g. electro-optic modulator</li></ul></li><li>Passive mode locking with<ul><li>e.g. saturable absorber causing a positive feedback loop.</li></ul></li></ul><p>Can produce from ps down to fs-length pulses.</p><figure><img src="/images/EP/2158564.png" alt="" /><figcaption>Different modes can exist within cavity (The laser is not “truly” monochromatic)</figcaption></figure><figure><img src="/images/EP/2158565.png" alt="" /><figcaption>Normally, phases are random → ~constant I</figcaption></figure><figure><img src="/images/EP/2158566.png" alt="" /><figcaption>Phase alignment with model locking → Pulsed laser behavior</figcaption></figure><h5 id="chirped-pulse-amplification">Chirped pulse amplification</h5><p><img src="/images/EP/2158567.png" /></p><p>Diffraction grating principle: 𝑑sin𝜃 = 𝑚λ</p><p><img src="/images/EP/2158568.png" /></p><p>Makes amplification of GW lasers possible by orders of magnitude, up to PW.</p><p>The Nobel prize in Physics of 2018 was awarded for this invention.</p><h3 id="future-of-high-power-lasers">Future of high-power lasers</h3><p>Extreme high-power laser pulses enable new kinds of applications:</p><ul><li>Particle acceleration</li><li>Fast ignition fusion</li><li>Gamma ray emission</li><li>Superhot matter</li><li>Super-high pressure</li><li>Nonlinear QED and horizon physics</li></ul><p><img src="/images/EP/2158569.png" /></p><h2 id="applications-of-lasers">Applications of Lasers</h2><h3 id="digital-holography">Digital holography</h3><h4 id="measuring-the-complex-valued-wavefield">Measuring the complex-valued wavefield</h4><p><img src="/images/EP/2158570.png" /></p><h4 id="phase-shifting-digital-holography">Phase shifting digital holography</h4><p><span class="math display">\[I = |𝑅 + 𝑂|^2\]</span></p><p><img src="/images/EP/2158571.png" /></p><ul><li><strong>Advantage</strong>: complex valued sample for every pixel.</li><li><strong>Drawback</strong>: not suitable for dynamic phenomena, high stability requirements</li></ul><h3 id="off-axis-digital-holography">Off-axis digital holography</h3><p>Recording a single hologram, separating terms in Fourier domain</p><p><img src="/images/EP/2158572.png" /></p><p><img src="/images/EP/2158573.png" /></p><ul><li><strong>Advantage</strong>: single measurements, suitable for dynamic phenomena</li><li><strong>Drawback</strong>: reduced bandwidth → lower resolution</li></ul><h3 id="holographic-microscopy">Holographic microscopy</h3><figure><img src="/images/EP/2158574.png" alt="" /><figcaption>Application examples</figcaption></figure><h3 id="medical-applications">Medical applications</h3><figure><img src="/images/EP/2158575.png" alt="" /><figcaption>Application examples</figcaption></figure><h3 id="laser-cooling">Laser cooling</h3><p><strong>Cooling atoms close to absolute zero</strong></p><figure><img src="/images/EP/2158576.png" alt="" /><figcaption>Doppler laser cooling</figcaption></figure><p>List of applications:</p><ul><li>Precise lithography with cold atom beams</li><li>High-resolution spectroscopy (w/o Doppler broadening)</li><li>Ultraprecise gravitational fuel</li><li>Quantum optics &amp; quantum computing</li><li>Studying Bose-Einstein condensates</li></ul><h3 id="optical-tweezers">Optical tweezers</h3><p>Trapping and manipulating particles with laser light</p><ul><li>Used for trapping molecular scale particles in biology, chromosome parts, viruses up to bacteria &amp; cells.</li><li>Measure minute forces (in fN range)</li><li>Manipulating &amp; characterizing atoms</li></ul><p><img src="/images/EP/2158577.png" /></p><figure><img src="/images/EP/2158578.png" alt="" /><figcaption>Simplified optical setup</figcaption></figure><h3 id="two-photon-excitation-microscopy">Two-photon excitation microscopy</h3><p><strong>Suitable for imaging deep within samples</strong></p><p><img src="/images/EP/2158579.png" /></p><p>Penetration deep within samples brings difficulties because of:</p><ul><li>Absorption</li><li>Scattering</li></ul><p>Solution: two-photon excitation imaging with infrared light</p><ul><li>→Infrared light has much less Rayleigh scattering ∝ 𝜆<sup>−4</sup></li><li>→Biological tissues absorb much less light in infrared than in visible light</li></ul><p>Photons must arrive near-simultaneously (&lt; 1fs) → high power laser pulses</p><p>Good system for thick tissues, live samples</p><p><strong>Physical principles</strong></p><p><img src="/images/EP/2158580.png" /></p><p><strong>Example: imaging live brain tissue</strong></p><p><img src="/images/EP/2158581.png" /></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Technology and Applications of Electronics and Photonics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Motivation and Getting Started</title>
      <link href="2021/03/15/2021-03-15-Motivation-and-Getting-Started/"/>
      <url>2021/03/15/2021-03-15-Motivation-and-Getting-Started/</url>
      
        <content type="html"><![CDATA[<h1 id="motivation-and-getting-started">Motivation and Getting Started</h1><h2 id="question-1">Question 1</h2><p>To find the solutions to an equation of the format ax<sup>2</sup> + bx +c, use the quadratic equation: <span class="math display">\[x \frac{-b ± \sqrt(b^2-4ac)}{2a}\]</span> What are the two solutions to 2x<sup>2</sup> - x - 4 = 0? Use the quadratic equation.</p><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">        options(digits = <span class="number">3</span>)</span><br><span class="line">a &lt;- 2</span><br><span class="line">b &lt;- -<span class="number">1</span></span><br><span class="line">c &lt;- -<span class="number">4</span></span><br><span class="line">(-b+<span class="built_in">sqrt</span>(b^<span class="number">2</span>-<span class="number">4</span>*a*<span class="built_in">c</span>))/(<span class="number">2</span>*a)</span><br><span class="line">(-b-<span class="built_in">sqrt</span>(b^<span class="number">2</span>-<span class="number">4</span>*a*<span class="built_in">c</span>))/(<span class="number">2</span>*a)</span><br><span class="line"><span class="comment"># 1.68</span></span><br><span class="line"><span class="comment"># -1.18</span></span><br></pre></td></tr></table></figure><h2 id="question-2">Question 2</h2><p>Use R to compute log base 4 of 1024. You can use the <code>help()</code> function to learn how to use arguments to change the base of the <code>log()</code> function.</p><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="built_in">log</span>(<span class="number">1024</span>, base = <span class="number">4</span>)</span><br><span class="line">5</span><br></pre></td></tr></table></figure><h2 id="question-3">Question 3</h2><p>Install the dslabs package if you have not done so:</p><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">install.packages(<span class="string">&quot;dslabs&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>Note that any time you get an error that a package is not found, try installing that package.</strong></p><p>The movielens dataset in the <strong>dslabs</strong> package includes data on a variety of movies and their rating by a particular user.</p><p>Load the movielens dataset:</p><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">library(dslabs)</span><br><span class="line">data(movielens)</span><br></pre></td></tr></table></figure><p>Begin your exploration of this dataset by looking at the structure of the dataset and variable types.</p><h3 id="question-3a">Question 3a</h3><p>How many rows are in the dataset?</p><p>100004</p><p>We can determine the number of rows in the dataset by examining its structure:</p><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">str(movielens)</span><br></pre></td></tr></table></figure><h3 id="question-3b">Question 3b</h3><p>How many different variables are in the dataset?</p><p>7</p><p>We can determine the number of variables in the dataset by examining its structure:</p><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">str(movielens)</span><br></pre></td></tr></table></figure><h3 id="question-3c">Question 3c</h3><p>What is the variable type of <code>title</code> ?</p><ul><li><del>It is a text (txt) variable</del></li><li><del>It is a chronological (chr) variable</del></li><li><del>It is a string (str) variable</del></li><li><del>It is a numeric (num) variable</del></li><li><del>It is an integer (int) variable</del></li><li><del>It is a factor (Factor) variable</del></li><li><strong>It is a character (chr) variable</strong></li></ul><p>We can determine the variable type of title by examining the dataset's structure:</p><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">str(movielens)</span><br></pre></td></tr></table></figure><h3 id="question-3d">Question 3d</h3><p>What is the variable type of <code>genres</code> ?</p><ul><li><del>It is a text (txt) variable</del></li><li><del>It is a chronological (chr) variable</del></li><li><del>It is a string (str) variable</del></li><li><del>It is a numeric (num) variable</del></li><li><del>It is an integer (int) variable</del></li><li><strong>It is a factor (Factor) variable</strong></li><li><del>It is a character (chr) variable</del></li></ul><p>We can determine the variable type of genres by examining the dataset's structure:</p><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">str(movielens)</span><br></pre></td></tr></table></figure><h2 id="question-4">Question 4</h2><p>We already know we can use the <code>levels()</code> function to determine the levels of a factor. A different function, <code>nlevels()</code>, may be used to determine the number of levels of a factor.</p><p>Use this function to determine how many levels are in the factor <code>genres</code> in the <code>movielens</code> data frame.</p><p>To determine how many levels are in the factor genres in the movielens data frame:</p><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">&gt; nlevels(movielens$genres)</span><br><span class="line">[<span class="number">1</span>] <span class="number">901</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Exercises </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R Basics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Motivation and Getting Started</title>
      <link href="2021/03/14/2021-03-14-Motivation-and-Getting-Started/"/>
      <url>2021/03/14/2021-03-14-Motivation-and-Getting-Started/</url>
      
        <content type="html"><![CDATA[<h1 id="motivation-and-getting-started"><a href="https://courses.edx.org/courses/course-v1:HarvardX+PH125.1x+1T2021/courseware/cfded5c208bc4e379606cb712cc54f25/9f677d4dd55d4d729d4b8163598146eb/">Motivation and Getting Started</a></h1><p>R is not a programming language like C or Java. It was not created by software engineers for software development. Instead, it was developed by statisticians and data analysts as an interactive environment for data analysis.</p><p>The interactivity is an indispensable feature in data science, because as you will soon learn, the ability to quickly explore data is a necessity for success in this field. However, like in any other programming language, you can save your work as scripts, which you can easily execute at any moment. These scripts serve as a record of the analysis you performed, a key feature that facilitates reproducible work.</p><p>Other attractive features of R are the following.</p><ul><li>R is free and open source, meaning that you can look at the code.</li><li>It runs across all major platforms -- Windows, Mac OS, Unix, Linux.</li><li>Data objects and scripts can be shared seamlessly across these platforms.</li><li>There's also a large and growing active community of R users.</li></ul><p>And as a result, there are numerous resources for learning and asking questions. It's easy for others to contribute add-ons, which enable developers to share software implementations of new data science techniques.</p><p>As a very quick and simple example, try using the console to calculate a 15% tip on a meal that costs $19.71.</p><p>Here's how you do it.</p><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">&gt; <span class="number">0.15</span> * <span class="number">19.71</span></span><br><span class="line">[<span class="number">1</span>]<span class="number">2.96</span></span><br></pre></td></tr></table></figure><p>You just write the numbers out, hit Return, and you get your answer. You should leave a tip of $2.96.</p><p>One of the great advantages of R over point and click analysis software is that you can save your work as scripts. You can edit and save these scripts using a text editor.</p><h2 id="installing-packages">Installing Packages</h2><ul><li>The base version of R is quite minimal, but you can supplement its functions by installing additional packages.</li><li>We will be using tidyverse and dslabs packages for this course.</li><li>Install packages from R console: install.packages("pkg_name") Install packages from RStudio interface: Tools &gt; Install Packages (allows autocomplete).</li><li>Once installed, we can use library(pkg_name) to load a package each time we want to use it.</li></ul><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">install.packages(<span class="string">&quot;dslabs&quot;</span>) <span class="comment"># to install a single package</span></span><br><span class="line">install packages(<span class="built_in">c</span>(<span class="string">&quot;tidyverse&quot;</span> <span class="string">&quot;dslabs&quot;</span>)） <span class="comment"># to install two packages at the same tim</span></span><br><span class="line">installed.package() <span class="comment"># to see the list of all installed packages</span></span><br></pre></td></tr></table></figure><h2 id="running-commands-while-editing-scripts">Running Commands While Editing Scripts</h2><p>RStudio has many useful features as an R editor, including the ability to test code easily as we write scripts and several autocomplete features.</p><ul><li>Save a script: Ctrl+S on Windows and Command+S on Mac</li><li>Run an entire script: Ctrl+Shift+Enter on Windows Command+Shift+Return on Mac, or click "Source" on the editor pane</li><li>Run a single line of script: Ctrl+Enter on Windows and Command+Return on Mac while the cursor is pointing to that line, or select the chunk and click "run"</li><li>Open a new script: Ctrl+Shift+N on Windows and Command+Shift+N on Mac</li></ul><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">library(tidyverse)</span><br><span class="line">library(dslabs)</span><br><span class="line">data(murders)</span><br><span class="line"></span><br><span class="line">murders %&gt;%</span><br><span class="line">ggplot(aes(population, total, label=abb, color=region)) +</span><br><span class="line">    geom_label()</span><br></pre></td></tr></table></figure><h2 id="r-basics">R Basics</h2><ul><li>To define a variable, we may use the assignment symbol, <strong>&lt;-</strong> .</li><li>There are two ways to see the value stored in a variable:<ol type="1"><li>type the variable name into the console and hit Return</li><li>use the print() function by typing print(variable_name) and hitting Return.</li></ol></li><li>Objects are things that are stored in named containers in R. They can be variables, functions, etc.</li><li>The ls() function shows the names of the objects saved in your workspace.</li><li>If you try to recover the value of a variable that is not in your workspace, you'll receive an error.<ul><li>For example, if you type x, which we haven't defined, you will receive an error message that says, "Error: object 'x' not found."</li></ul></li></ul><p><strong>Code: solving the equation: x<sup>2</sup> + x − 1 = 0</strong></p><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># assigning values to variables</span></span><br><span class="line">a &lt;-<span class="number">1</span></span><br><span class="line">b &lt;-<span class="number">1</span></span><br><span class="line"><span class="built_in">c</span> &lt;--<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># solving the quadratic equation</span></span><br><span class="line">(-b + <span class="built_in">sqrt</span>(b^<span class="number">2</span> - <span class="number">4</span>*a*<span class="built_in">c</span>))/(<span class="number">2</span>*a)</span><br><span class="line">(-b - <span class="built_in">sqrt</span>(b^<span class="number">2</span> - <span class="number">4</span>*a*<span class="built_in">c</span>))/(<span class="number">2</span>*a)</span><br></pre></td></tr></table></figure><h2 id="functions"><a href="https://rafalab.github.io/dsbook/r-basics.html#functions">Functions</a></h2><ul><li>In general, to evaluate a function we need to use parentheses. If we type a function without parenthesis, R shows us the code for the function. Most functions also require an argument, that is, something to be written inside the parenthesis.</li><li>To access help files, we may use the help function, <em>help(function_name)</em>, or write the question mark followed by the function name, <em>?function_name</em>.</li><li>The help file shows you the arguments the function is expecting, some of which are required and some are optional. <strong>If an argument is optional, a default value is assigned with the equal sign.</strong> The <em>args()</em> function also shows the arguments a function needs.</li><li>To specify arguments, we use the equals sign. If no argument name is used, R assumes you’re entering arguments in the order shown in the help file.</li><li>Creating and saving a script makes code much easier to execute.</li><li>To make your code more readable, use intuitive variable names and include comments (using the “#” symbol) to remind yourself why you wrote a particular line of code.</li></ul><p>Functions are not the only pre-built objects in R. There are also data sets that are included for users to practice and test out functions.</p><p>You can see all the available data sets by typing data, parentheses, parentheses. This shows you the object name for these data sets. And these data sets are objects that you can use by simply typing the name.</p><p>For example, if you type CO<sub>2</sub>, one of the pre-built data objects, you will see CO<sub>2</sub> measurements from a particular measurement station. There are also other mathematical objects that are also pre-built, such as the constant for pi and the infinity number. You can see them by typing pi or typing Inf.</p><h2 id="data-types"><a href="https://rafalab.github.io/dsbook/r-basics.html#data-types">Data Types</a></h2><p>Variables in R can be of different types.</p><ul><li>For example, we need to distinguish numbers from character strings and tables from simple lists of numbers. The function "class" helps us determine the type of an object. For example, if I define a as 2 and I look at its class, I will see it's a numeric.</li></ul><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">&gt;a &lt;- 2</span><br><span class="line">&gt;<span class="built_in">class</span>(a)</span><br><span class="line">[<span class="number">1</span>] <span class="string">&quot;numeric&quot;</span></span><br></pre></td></tr></table></figure><p>Let's look at the class of the function ls. Not surprisingly, we see that it's a function.</p><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">&gt;<span class="built_in">class</span>(ls)</span><br><span class="line">[<span class="number">1</span>] <span class="string">&quot;function&quot;</span></span><br></pre></td></tr></table></figure><p>The function "str" stands for structure, and it shows us the structure of an object. If we type str(murders), it shows us that</p><p>Up to now, the variables we have defined have been just one number. This is not very useful for storing data. The most common way of storing data sets in R is with <strong>data frames</strong>. Conceptually, we can think of data frames as tables. Rows represent observations, and different variables are represented by different columns.</p><p>Data frames are particularly useful for data sets because we can combine different types into one single object. We store the data for a motivating example in a data frame.</p><p>We can store characters in R as well. Because variables also use character strings, we're going to use quotes to distinguish between variable names and character strings. So if I type a and assign 1 to a, the variable a is 1, so if I type a in R, I get back a 1. However, if I want to now work with the character string a, I need to use quotes. So if I write quotes a, then I get back the character string a.</p><p>Logical vectors are another type of vector. These must be either true or false.</p><p>when we look at the class of the regions column, we see something new, it says factor. So let's learn about factors, as they appear often in R and in data science. Factors are useful for storing what is called categorical data. There is only four categories. Each state is in one of these four. We can see the four levels in this particular factor using the function levels.</p><p>In R, in the background, we store integers. We store the levels as integers. Technically, integers are smaller memory-wise than characters. So this is what makes it more efficient. However, factors are also a source of confusion, as they can easily be confused with characters. If we just look at this variable, they would appear to be characters. It's only when we ask using class what type it is that we see they are factors.</p><ul><li>The function class() helps us determine the type of an object.</li><li>Data frames can be thought of as tables with rows representing observations and columns representing different variables.</li><li>To access data from columns of a data frame, we use the dollar sign symbol, $, which is called the accessor.</li><li>A vector is an object consisting of several entries and can be a numeric vector, a character vector, or a logical vector.</li><li>We use quotes "" to distinguish between variable names and character strings.</li><li>Factors are useful for storing categorical data, and are more memory efficient than storing characters.</li></ul><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># loading the dslabs package and the murders dataset</span></span><br><span class="line">library(dslabs)</span><br><span class="line">data(murders)</span><br><span class="line"><span class="comment"># determining that the murders dataset is of the &quot;data frame&quot; class</span></span><br><span class="line"><span class="built_in">class</span>(murders)</span><br><span class="line"><span class="comment"># finding out more about the structure of the object</span></span><br><span class="line">str(murders)</span><br><span class="line"><span class="comment"># showing the first 6 lines of the dataset</span></span><br><span class="line">head(murders)</span><br><span class="line"><span class="comment"># using the accessor operator to obtain the population column</span></span><br><span class="line">murders$population</span><br><span class="line"><span class="comment"># displaying the variable names in the murders dataset</span></span><br><span class="line"><span class="built_in">names</span>(murders)</span><br><span class="line"><span class="comment"># determining how many entries are in a vector</span></span><br><span class="line">pop &lt;- murders$population</span><br><span class="line"><span class="built_in">length</span>(pop)</span><br><span class="line"><span class="comment"># vectors can be of class numeric and character</span></span><br><span class="line"><span class="built_in">class</span>(pop)</span><br><span class="line"><span class="built_in">class</span>(murders$state)</span><br><span class="line"><span class="comment"># logical vectors are either TRUE or FALSE</span></span><br><span class="line">z &lt;- 3 == <span class="number">2</span></span><br><span class="line">z</span><br><span class="line"><span class="built_in">class</span>(z)</span><br><span class="line"><span class="comment"># factors are another type of class</span></span><br><span class="line"><span class="built_in">class</span>(murders$region)</span><br><span class="line"><span class="comment"># obtaining the levels of a factor</span></span><br><span class="line">levels(murders$region)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R Basics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Course overview</title>
      <link href="2021/03/14/2021-03-13-Course-overview/"/>
      <url>2021/03/14/2021-03-13-Course-overview/</url>
      
        <content type="html"><![CDATA[<h1 id="course-overview">Course overview</h1><p><strong>Section 1: R Basics, Functions, Data types</strong></p><ul><li>Appreciate the rationale for data analysis using R.</li><li>Define objects and perform basic arithmetic and logical operations.</li><li>Use pre-defined functions to perform operations on objects.</li><li>Distinguish between various data types.</li></ul><p><strong>Section 2: Vectors, Sorting</strong></p><p>You will learn to operate on vectors and advanced functions such as sorting.</p><p><strong>Section 3: Indexing, Data Manipulation, Plots</strong></p><p><strong>Section 4: Programming Basics</strong></p><p>You will learn to use general programming features like ‘if-else,’ and ‘for loop’ commands, and write your own functions to perform various operations on datasets.</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R Basics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Institutional Conflicts of Interest</title>
      <link href="2021/03/13/2021-03-13-Institutional-Conflicts-of-Interest/"/>
      <url>2021/03/13/2021-03-13-Institutional-Conflicts-of-Interest/</url>
      
        <content type="html"><![CDATA[<h1 id="institutional-conflicts-of-interest">Institutional Conflicts of Interest</h1><h2 id="introduction">Introduction</h2><p>Conflicts of interest (COIs) have come to the forefront in American society, in areas of politics, investment banking, scientific research, and healthcare. The COIs most often discussed involve an individual's relationships that could reasonably appear to influence that person's professional judgment. Outcries from the public and elected officials have led to the creation or revision of federal policies and regulations pertaining to COIs at the individual level. For example, in August 2011, the U.S. Department of Health and Human Services (HHS) amended the regulations governing an investigator's financial conflicts of interest (FCOI) in research.</p><p>However, the relationship held by an institution or institutional official can cause another form of COI. It is an area of significant concern and should be considered when financial interests pose a risk of undue or inappropriate influence over research or other institutional activities. This form of COI is called an institutional conflict of interest (ICOI).</p><p>Despite reports from the Institute of Medicine (IOM 2009), the Association of American Universities (AAU 2001), the HHS's Office of Inspector General (OIG 2011), and others supporting the implementation of an ICOI policy and process, the updated HHS regulations did not address ICOI. In fact, there are currently no federal regulations for defining, identifying, reporting, and managing institutional conflicts. Nonetheless, many institutions have policies addressing the potential biases that might result from ICOIs. An ICOI can involve the financial interests of both the institution and its senior officials.</p><p><strong>Learning Objectives</strong></p><p>By the end of this module, you should be able to:</p><ul><li>Describe various forms of ICOIs.</li><li>Identify the core components of an ICOI policy.</li><li>Delineate possible governance models for ICOI identification, review, and management.</li><li>Describe approaches for managing ICOIs.</li></ul><h2 id="background">Background</h2><p>An ICOI may arise when the financial interests of an institution, or an institutional or senior official who is acting within that individual's authority on behalf of the institution, could influence or appear to influence the institution’s research, education, operations, business transactions, or other activities. Financial interests such as royalties, stockholdings, stock options, gifts, or equity might exist on the institution’s behalf.</p><p><img src="https://www.citiprogram.org/citidocuments/_001pic/1864.jpg" /></p><p>Moreover, an ICOI might exist when institutional or senior officials who act on behalf of the institution have personal financial interests that their administrative decisions may affect. An institutional or senior official might have financial interests in the form of stock holdings, stock options, equity, or consulting fees. For instance, a senior official who has a major equity holding in a learning management company could make decisions about institutional resource allocations that favour the company’s interests. Such decisions might compromise the institution’s overall research, educational, or clinical mission. Similarly, a hospital vice president with a personal financial interest in a medical device company could make a biased decision about the cost of a device manufactured by that company and used in the hospital.</p><p>Similar to individual conflicts of interest, ICOIs are defined in terms of the potential for undue influence and not actual favouritism or misconduct. ICOI policies intend to avoid compromised decision-making or the appearance of bias or undue influence.</p><p>The relationships that universities, academic medical centers, hospitals, professional societies, or other organizations have with industry are mutually interdependent and are not inherently inappropriate. Many of these relationships can generate significant benefits to an institution's primary mission. For example, gifts to fund the construction of research facilities can support the core research mission of academic institutions.</p><p>In addition, industry provides grant support to conduct basic and applied research, expanding fundamental knowledge, enhancing professional practice, and helping to develop technology. The challenge is whether a relationship with industry can achieve the desired benefits but avoid the risk of biased decision-making and the loss of public trust. When such relationships are managed appropriately or in a "principled" manner, the benefits can be significant.</p><h2 id="core-components-of-an-icoi-policy">Core Components of an ICOI Policy</h2><p>Institutions should consider several goals while creating an ICOI policy. These include adhering to all applicable federal and state regulations that address personal COIs, upholding the public trust, and maintaining the highest possible standards in research. In addition, maintaining the institution's mission and protecting its reputation and credibility, along with that of its employees, including the faculty in the case of academic institutions, must be considered.</p><p>There are no specific regulations that define and identify the required components of an ICOI policy. However, many ICOI policies have common core components that describe the process of identification, review, and mitigation of ICOIs. They are often based on guidance documents issued by the Association of American Medical Colleges (AAMC 2008), the AAU (2001), and the IOM (2009). In general, the core components of an ICOI policy are:</p><p><img src="https://www.citiprogram.org/citidocuments/_001pic/1865.jpg" /></p><p><img src="https://www.citiprogram.org/members/images/case-study.png" />An Entangled Clinical Trial**</p><h3 id="introduction-1">Introduction</h3><p>This section includes an institutional statement or philosophy on ICOI and why the institution has elected to create the policy. It might include reference to other institutional documents that describe the institutional mission or values. In the case of public entities, this section might reference any applicable public records or "sunshine" laws as well. Typically, it also describes to whom and to what portions of the institution's activities the policy applies. For example, some institutions have ICOI policies that only apply to research involving human subjects; others have been more inclusive covering all research activities or institutional operations.</p><h4 id="topics-to-consider-for-inclusion-or-exclusion-in-an-icoi-policy">Topics to Consider for Inclusion or Exclusion in an ICOI Policy</h4><p><img src="https://www.citiprogram.org/citidocuments/_001pic/1866.jpg" /></p><h3 id="definitions">Definitions</h3><p>This section includes specific descriptions about how the institution defines significant financial interest (SFI) and thresholds for disclosure. It delineates which individuals and components of a complex institution (for instance, a university) would be subject to the policy. It might list individuals in leadership positions, such as board of trustee members, governors, or directors. It might also list specific institutional or senior officials by title or provide descriptions of circumstances under which an individual would be viewed as acting as an institutional official (such as when making decisions about capital investment or vendor selection).</p><p>A key portion of this section relates to defining the specific types of ICOIs and thresholds for ICOIs. While there are no regulations that define specific types or thresholds for ICOIs, the financial and/or obligatory arrangements listed below might be considered for disclosure. Many institutions with ICOI policies define a threshold for consideration of financial interest for the institution and/or institutional officials. The ranges mentioned below originate from a random sample of ICOI policies within academic institutions. Specific thresholds are typically set after consideration of the institution's characteristics and culture.</p><ul><li>Royalty arrangements including payments and licensing fees resulting from technology transfer and business activities that, for each arrangement, exceed a set dollar amount in a defined time period. The specific thresholds reflect the size and scope of the institution's research portfolio. For example, they might range from $5,000 - $25,000 for individuals or $25,000 - $100,000 for the institution in the preceding 12-month period, calendar year, or fiscal year.</li><li>Concerning publicly traded entities, equity, and/or the value of ownership interests in any publicly traded, for-profit entity, the specific thresholds would reflect the size and scope of the institution's research portfolio. For example, they might range from a threshold of $5,000 - $25,000 for individuals or $25,000 - $100,000 for the institution in the preceding 12-month period, calendar year, or fiscal year.</li><li>Typically, any equity and/or ownership interest of any amount in any non-publicly traded, for-profit entity.</li><li>Large gifts from any for-profit entity or philanthropic unit associated with a for-profit entity. Institutions might consider the size of the gift relative to the endowment as well as other potentially influential outcomes such as the nature of the gift (for example, naming of a building, research institute, or school). For many institutions, the threshold for a "large gift" is one million dollars.</li><li>Sponsorship of institutes, research, educational activities, or personnel (including salary and travel).</li><li>Any fiduciary role held by an institutional official with a for-profit or non-profit entity, regardless of compensation or income, such as service on the board of directors, or a management role in a company (for example, President, CEO, COO, or Treasurer).</li></ul><h3 id="disclosure-process-or-other-means-to-identify-icois">Disclosure Process or Other Means to Identify ICOIs</h3><p>This section describes the process for gathering and/or tracking ICOIs. There are distinct considerations with respect to gathering data on ICOI both from the institution and institutional officials. Issues related to data integrity, management, security, and access are also important to consider. Institutional officials might need to complete an online or other electronic disclosure process. Submission of electronic information generally allows for easier data management but also carries its own set of challenges including system set up, maintenance, and security. Identification and review of institutional interests typically requires collaboration with several business units including finance, information technology, advancement or donor relations, and technology transfer. Other units involved in licensing, royalties, patents, and managing the board of trustees or institutional governing body might be part of the process as well. Depending on the institution’s structure, additional groups might also need to be involved.</p><p>This section typically includes the frequency of review or disclosure. An annual disclosure requirement is common, but if an institution elects to require the review or disclosure of new interests more often than annually, this section would include such language. This section might be developed keeping in mind the distinct considerations that public and private institutions have with respect to state-specific sunshine laws and relationships among the board of trustees or other governing entity.</p><h3 id="designation-of-persons-responsible-for-implementation-oversight-and-governance">Designation of Person(s) Responsible for Implementation, Oversight, and Governance</h3><p>This section names the individual or group of individuals responsible for policy oversight and implementation. Also, it typically includes information regarding the governance process or committee oversight. The size and complexity of the institution will impact the governance structure. Many institutions utilize an ICOI committee, and some elect to use the same committee for ICOIs as they do for individual COIs.</p><p>This section of the policy should set out whether there will be an ICOI committee and, if so, who will appoint committee members and what will be the term of service. Institutions might elect to include individuals with no affiliation to the institution to serve on the committee, as employment/affiliation with an institution is itself an inherent conflict with the review of its ICOIs. Seats on the committee intend to provide a true "outsider" view into ICOIs and minimize inherent bias that might be introduced by only including faculty, employees, alumni, or other affiliated persons. A member of the institution's general counsel or legal affairs office is often a member, either as a regular or non-voting participant, according to the institutional culture. This section also typically sets out to whom the ICOI committee reports and its function, such as whether it is advisory or acts with operational authority. Moreover, it may include a statement on when a member's recusal is necessary and set out alternative lines of authority when recusal is required.</p><p>This section could include a description of the criteria or principles that the designated responsible person(s) will use to evaluate and manage ICOIs. The specific factors should be carefully vetted and tailored to the scope of the policy and institutional culture, but the following are relevant factors to consider.</p><p><img src="https://www.citiprogram.org/citidocuments/_001pic/1867.jpg" /></p><p>Additional criteria could help address the risk associated with human subject research, specifically:</p><ul><li>Whether the institution has adopted the "rebuttable presumption" that human subject research should not be carried out when the institution has a significant FCOI (AAMC 2008)</li><li>The level of risk to human subjects in the research as determined by the Institutional Review Board (IRB) given the specific circumstances</li><li>The phase (I-IV) of the clinical study and associated aims of the research: Phase I - safety; Phase II - proof of concept; Phase III - regulatory proof; and Phase IV - marketing and safety monitoring</li><li>Whether a practical and effective plan can be implemented to prevent a conflicted institutional official from having oversight over the conduct of human subject research while remaining in a leadership position</li><li>The risk to the academic freedom and unbiased treatment of the faculty member who has proposed the research</li><li>Likelihood of an adverse effect on research if the institution is not used as a research site</li><li>Expertise of the institutional investigators and the availability of relevant experience elsewhere</li><li>Proximity of a limited patient population to the study site and the availability of a patient population elsewhere</li></ul><p>This section typically describes the potential results of the assessment. For example, the designated responsible person(s) may:</p><p><img src="https://www.citiprogram.org/citidocuments/_001pic/1868.jpg" /></p><h3 id="management-of-icoi">Management of ICOI</h3><p><img src="https://www.citiprogram.org/members/images/case-study.png" />The Online Assessment Tool**</p><p>There are varied approaches to managing ICOIs and the level of oversight within a management plan should be proportional to the risk to the institution's reputation or mission. While this section reinforces the evaluation of each ICOI on its own merit, it can be helpful to provide options for the designated person(s) to consider in crafting management plans.</p><h4 id="examples-of-management-strategies">Examples of Management Strategies</h4><ul><li>Public disclosure in publications and presentations</li><li>If applicable, disclosure to research subjects in informed consent forms</li><li>Formal recusal of the conflicted official from the chain of authority over the related project and possibly also from authority over salary, promotion, and space allocation decisions affecting the activity, as well as communication of the recusal arrangements to the official's superior and colleagues</li><li>Designation of a "safe haven" (for example, a non-conflicted senior individual) with whom the individuals involved in the activity can address ICOI-related concerns</li><li>Reduction or elimination of the institutional financial interest (for example, sale of an equity interest)</li><li>Severance of the relationship giving rise to the ICOI</li></ul><h4 id="examples-for-cases-specifically-involving-human-subject-research">Examples for Cases Specifically Involving Human Subject Research</h4><ul><li>Establishing an oversight board for the project made up of non-affiliated individuals (for example, the use of an outside data safety monitoring board or appointment of an independent monitor)</li><li>Disclosing the ICOI to human subjects</li><li>Requiring the work be carried out at multiple sites (for example, under the auspices of several institutions)</li><li>Requiring the institution take a relatively passive role in the conduct of the project (for example, avoid being involved in data gathering)</li><li>Limiting the number of research subjects under the institution's supervision</li></ul><h3 id="oversight-of-icoi-management">Oversight of ICOI Management</h3><p><img src="https://www.citiprogram.org/members/images/case-study.png" />Developing the New Drug**</p><p>Institutions might consider a section describing any monitoring or auditing of compliance with ICOI management plans. As with individual interests under COI management, plans executed to mitigate ICOIs can be monitored to ensure compliance by all parties involved. Periodic review of ICOI management plan components demonstrates continued adherence to institutional policy and process. It also facilitates communication to new personnel who might need to be aware of the ICOI management plan, and ultimately, contributes to maintaining an institution's integrity and public image.</p><h2 id="summary">Summary</h2><p>At the present time, there are no specific federal regulations that address ICOI. However, institutions may want to establish their own policies on ICOI to maintain the integrity of their research and protect their reputation.</p><h2 id="references">References</h2><ul><li>Association of American Medical Colleges (AAMC). 2008. "<a href="https://www.aamc.org/system/files/c/2/482216-protectingpatients.pdf">Protecting Patients, Preserving Integrity, Advancing Health: Accelerating the Implementation of COI Policies in Human Subjects Research</a>." Accessed December 1, 2014.</li><li>Association of American Universities (AAU). 2001. "<a href="https://www.aau.edu/node/9191">Report on Individual and Institutional Financial Conflict of Interest</a>." Accessed May 19, 2017.</li><li>Institute of Medicine (IOM) of the National Academies. 2009. "Institutional Conflict of Interest." In <em>Conflict of Interest in Medical Research, Education, and Practice</em>, edited by Bernard Lo and Marilyn J. Field, 216-29. Washington, DC: The National Academies Press.</li><li>U.S. Department of Health and Human Services (HHS). 2011. "Responsibility of Applicants for Promoting Objectivity in Research for Which Public Health Service Funding Is Sought and Responsible Prospective Contractors; Final Rule." <em>Federal Register</em> 76(165):Part IV.</li><li>U.S. Department of Health and Human Services (HHS), Office of Inspector General (OIG). 2011. "<a href="http://oig.hhs.gov/oei/reports/oei-03-09-00480.pdf">Institutional Conflicts of Interest at NIH Grantees</a>." Accessed December 1, 2014.</li></ul><h2 id="quiz">Quiz</h2><h3 id="question-1">Question 1</h3><p>Which of the following most accurately describes the status of U.S. federal regulations on institutional conflicts of interest?</p><ul><li><del>They are administered by the Office of the Inspector General (OIG).</del></li><li><del>They are administered by the Public Health Service (PHS).</del></li><li><del>They are administered by the Department of Health and Human Services (HHS).</del></li><li><strong>No federal agency has promulgated institutional conflict of interest regulations.</strong></li></ul><p><strong>Comment</strong>:</p><p>No U.S. federal agency has promulgated institutional conflict of interest regulations.</p><h3 id="question-2">Question 2</h3><p>Which of following most accurately describes an institutional conflict of interest?</p><ul><li><strong>It occurs when the interests of an institution can bias its decision making.</strong></li><li><del>It is a term used interchangeably with conflict of commitment.</del></li><li><del>It is typically considered to be an academic honour code violation.</del></li><li><del>It is a form of research misconduct in accordance with federal policy.</del></li></ul><p><strong>Comment</strong>:</p><p>An institutional conflict of interest occurs when the interests of an institution can bias its decision making.</p><h3 id="question-3">Question 3</h3><p>Which of the following statements most accurately describes the disclosure process for institutional conflicts of interest?</p><ul><li><del>The statutes of most states require institutional conflicts of interest to be disclosed to the public.</del></li><li><del>An institution’s institutional conflicts of interest must be revealed to all of its external funding sources.</del></li><li><del>Federal regulations require institutional conflicts of interest to be disclosed to the public.</del></li><li><strong>The manner for disclosing institutional conflicts of interest varies depending on institutional policy.</strong></li></ul><p><strong>Comment</strong>:</p><p>The manner for disclosing institutional conflicts of interest varies depending on institutional policy. There is no standard ICOI disclosure approach embraced by all institutions.</p><h3 id="question-4">Question 4</h3><p>Which of the following examples is the most likely to be considered an institutional conflict of interest?</p><ul><li><del>A staff member at an institution owning stock in a private company.</del></li><li><del>A department hiring its new chair from a rival school.</del></li><li><strong>A senior official serving on a board of a company that donates to the institution.</strong></li><li><del>A faculty member owning equity in a private company.</del></li></ul><p><strong>Comment</strong>:</p><p>Among the available options, an institutional conflict of interest is most likely to emerge from a senior official serving on a board of a company that donates to the institution.</p><h3 id="question-5">Question 5</h3><p>Which of the following is a standard management strategy for an institutional conflict of interest?</p><ul><li><del>Having the institution divest its interests in every private company.</del></li><li><del>Contact the federal government so that it can decide the appropriate course of action.</del></li><li><del>Contact the relevant state government so that it can decide the appropriate course of action.</del></li><li><strong>Restricting the conflicted individuals from making decisions connected to the institutional conflict of interest.</strong></li></ul><p><strong>Comment</strong>:</p><p>A standard management strategy for an institutional conflict of interest is to restrict the conflicted individuals from making decisions connected to the ICOI.</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Conflicts of Interest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Institutional Responsibilities as They Affect Investigators</title>
      <link href="2021/03/13/2021-03-13-Institutional-Responsibilities-as-They-Affect-Investigators/"/>
      <url>2021/03/13/2021-03-13-Institutional-Responsibilities-as-They-Affect-Investigators/</url>
      
        <content type="html"><![CDATA[<h1 id="institutional-responsibilities-as-they-affect-investigators">Institutional Responsibilities as They Affect Investigators</h1><h2 id="introduction">Introduction</h2><p>The public relies on the validity of research conducted at universities, academic medical centers, and other institutions. Public funds support much of the research done at these institutions, with the expectation that the work will adhere to the highest ethical standards and yield results that may benefit society. In response to congressional and public concerns regarding the objectivity of research due to the financial interests of investigators, U.S. institutions must take on increasing responsibilities regarding financial conflicts of interest (FCOIs).</p><p>This module explains the rationale for institutions to address investigators' FCOIs, defines the principles used to assess the possible impact of financial interests on research, and provides strategies that can help eliminate or minimize bias in research.</p><p><strong>Learning Objectives</strong></p><p>By the end of this module, you should be able to:</p><ul><li>Recognize that institutions receiving funding from the U.S. Public Health Service (PHS) agencies must require their investigators to disclose certain types of financial information.</li><li>Describe how institutions collaborating on research projects identify, review, and manage conflicts of interest (COIs).</li><li>Comprehend the expectations that institutions have as they review and evaluate their investigators’ financial interest reports.</li><li>Explain the circumstances under which an investigator's significant financial interest (SFI) or institutional financial interest could affect the objectivity of research.</li><li>Recognize why institutions must develop management strategies to address FCOIs.</li><li>Recognize that the U.S. Food and Drug Administration (FDA) requires the sponsor of research to collect and report investigators’ financial interests.</li><li>Describe the public accessibility requirement in the PHS regulations.</li><li>Describe the circumstances under which an institution must develop and implement a mitigation report.</li></ul><h2 id="overview-of-institutional-obligations-in-addressing-conflicts-of-interest-in-research">Overview of Institutional Obligations in Addressing Conflicts of Interest in Research</h2><p>Investigators seek to gain new knowledge and improve the health and welfare of the public. Society expects that relevant advances will be put to practical use. In the course of bringing an idea to fruition, investigators may receive compensation for the following:</p><ul><li>Their advice and consultation</li><li>The rights to their inventions</li><li>Speaking in educational forums</li></ul><p>In the case of PHS-funded research, institutions must ensure, however, that these financial interests do not create unacceptable risks to research objectivity. If an institution identifies an FCOI, it must develop and implement a management plan to mitigate bias due to the conflict.</p><p>These plans require active participation by the investigator and involve oversight by the institution. In addition, the institution must communicate the existence of an FCOI and details of the management plan to the funding agency.</p><h2 id="institutional-obligations-and-the-2011-final-rule">Institutional Obligations and the 2011 Final Rule</h2><p>As noted in the <em>Financial Conflicts of Interest: Overview, Investigator Responsibilities, and COI Rules (COI-Basic)</em> module, the U.S. Department of Health and Human Services (HHS) issued a Final Rule on FCOI in 2011. Institutions applying for or receiving PHS funding were required to comply with the new rule and revised regulations by 24 August 2012.</p><p>Institutions may choose to apply the standards of the revised regulations to all research, irrespective of whether there is PHS support.</p><p>Under the regulations (42 CFR 50, Subpart F [Promoting Objectivity in Research 2011]), institutions must take on additional responsibilities with respect to COIs in PHS-funded research. As such, institutions must:</p><ul><li>"Maintain an up-to-date, written, enforced policy on financial conflicts of interest that complies with this subpart, and make such policy available via a publicly accessible Web site."</li><li>"Designate an institutional official(s) to solicit and review disclosures of significant financial interests from each Investigator who is planning to participate in, or is participating in, the PHS-funded research."</li><li>"Provide guidelines consistent with this subpart for the designated institutional official(s) to determine whether an Investigator's significant financial interest is related to PHS-funded research and, if so related, whether the significant financial interest is a financial conflict of interest."</li><li>"Take such actions as necessary to manage financial conflicts of interest...Management of an identified financial conflict of interest requires development and implementation of a management plan and, if necessary, a retrospective review and a mitigation report."</li></ul><h2 id="disclosure-and-conflict-management">Disclosure and Conflict Management</h2><p><img src="https://www.citiprogram.org/members/images/case-study.png" /></p><p>New Grant Proposal to Test a New Diabetes Treatment</p><p>PHS-funded investigators must disclose SFIs related to their institutional responsibilities and reimbursed or sponsored travel to their institutions. That is, the institution must review the disclosed information and determine whether the interests:</p><p><img src="https://www.citiprogram.org/citidocuments/_001pic/1860.jpg" /></p><p>Some institutions require other researchers, including those not funded by the PHS, to adhere to similar disclosure requirements. Investigators should familiarize themselves with their institutions’ relevant policies and requirements.</p><h3 id="conflict-management">Conflict Management</h3><p>When an institution identifies an FCOI related to PHS-funded research, it must develop and implement a management plan. Management may simply consist of a disclosure in presentations and manuscripts. It may also include measures such as removing the conflicted individual from primary oversight of the research or reducing or eliminating the financial interest. When reporting FCOIs to the PHS-awarding component, institutions must affirm the investigator's agreement to comply with a management plan.</p><h3 id="reporting-to-phs-awarding-components">Reporting to PHS Awarding Components</h3><p>The regulations impose expanded reporting obligations on institutions for FCOIs in PHS-funded projects. Institutions must submit reports prior to the expenditure of funds and when competitive and non-competitive renewals are granted for ongoing projects. They must report newly disclosed FCOIs for PHS-funded research within 60 days of becoming aware of the new interest. They must also report annual updates at the times of submission of the annual progress reports.</p><p>Institutions must report the following information to the PHS awarding component:</p><ul><li>The grant/contract number</li><li>The name of the project director, principal investigator, or contact person (when there are multiple project directors or principal investigators)</li><li>The name of the investigator with the FCOI</li><li>The name of the entity with which the investigator has the FCOI</li><li>The nature of the FCOI (such as equity, consulting fees, travel reimbursement, or honoraria)</li><li>The value of the financial interest in specified ranges: $0-4,999, $5,000-9,999, $10,000-19,999, amounts between $20,000 and $100,000 by increments of $20,000, and amounts above $100,000 by increments of $50,000, or a statement that the interest is one whose value cannot be readily determined through reference to public prices or other reasonable measures of fair market value</li><li>A description of how the SFI relates to the PHS-funded research and the basis for the institution's determination that the SFI conflicts with the research</li></ul><h3 id="elements-of-a-management-plan">Elements of a Management Plan</h3><p>The institution must update the funding agency on the status of the FCOI and any changes to the management plan annually. In accordance with the regulations, an institution's management plan must describe the (Promoting Objectivity in Research 2011):</p><p><img src="https://www.citiprogram.org/citidocuments/_001pic/1861.jpg" /></p><h3 id="fda-reporting-requirements-for-investigational-new-druginvestigational-device-exemption-indide-holders">FDA Reporting Requirements for Investigational New Drug/Investigational Device Exemption (IND/IDE) Holders</h3><p>In accordance with the U.S. Food and Drug Administration (FDA) regulations (21 CFR 54 [Financial Disclosure by Clinical Investigators 1998]), financial disclosures must be submitted to and retained by the sponsor of the research. The sponsor is the individual or entity that holds the IND or IDE for FDA-regulated research. If researchers hold the IND or IDE, the sponsor-investigator is responsible for collecting and maintaining financial disclosures and related management plans. The FDA (2013) provides guidance on how clinical investigators should handle financial disclosures.</p><h3 id="public-disclosure-standards-and-requirements">Public Disclosure Standards and Requirements</h3><p>The revised PHS regulations require institutions to make certain information about the FCOIs of senior/key personnel publicly available, which they can do in one of two ways: on a public website or in response to a written request within five business days. The information to be publicly disclosed is a subset of the information reported to the National Institutes of Health (NIH). It includes the conflicted investigator's name, title, and role; the name of any entities in which the investigator has an SFI; the nature of the SFI; and the annual dollar value in specified ranges.</p><p>In addition to federal agencies, the <a href="https://www.aamc.org/">Association of American Medical Colleges</a> (AAMC), the <a href="http://www.icmje.org/">International Committee of Medical Journal Editors</a> (ICMJE), and other organizations recommend or require disclosure. Disclosure provides a measure of fairness to the recipient of the disclosure, whether a research subject, reader of a published work, or listener at a lecture. Yet disclosure may not have the intended effect on the target audience; it might not mitigate bias by itself (Cain et al. 2011; Cain et al. 2005). Despite this, disclosure is usually a best practice. In many cases, disclosing relevant financial interests and relationships in the course of one's professional activities is a necessary but insufficient step toward managing COI.</p><h3 id="retrospective-review-identification-of-bias-and-mitigation-reporting-requirement">Retrospective Review, Identification of Bias, and Mitigation Reporting Requirement</h3><p>If a researcher does not disclose an SFI in a timely manner, or if for any reason the institution did not previously review it, the institution must, within 60 days from that point, determine whether the SFI relates to PHS-funded research and if it is an FCOI. If it is an FCOI, the institution must implement, at least on an interim basis, a management plan.</p><p>When a researcher fails to disclose an FCOI in a timely manner or comply with a management plan, or where the institution fails to manage an FCOI, the institution must, within 120 days, complete a retrospective review of research to determine whether there was bias in the design, conduct, or reporting of the research conducted during the period of noncompliance. If an institution identifies bias, it must develop a mitigation report that outlines a plan of action to eliminate or mitigate the effect of the bias. The institution must report the results of that determination and the mitigation report to the PHS.</p><h3 id="coi-for-awardees-and-subrecipients">COI for Awardees and Subrecipients</h3><p>The revised HHS regulations have specific requirements for collaborative PHS-funded research between awardee institutions and their subrecipients. Financial interests must be monitored and dealt with at the awardee institutions to assure the PHS of the appropriate identification and elimination or management of the FCOI. The collaborating institutions can accomplish this through an agreement that specifies which institution's COI policy will apply to the research project (assuming the collaborating institutions both have PHS-compliant policies).</p><p><img src="https://www.citiprogram.org/members/images/case-study.png" /></p><p>A Start-up Company to Field Test a Psychological Assessment Tool</p><p>If the awardee institution's policy applies, the agreement needs to specify a deadline for the subrecipient to submit disclosures of their researchers' SFIs to the awardee institution, so it can review the SFIs for FCOI and take any necessary action within the timeframe specified by the regulation.</p><p>If the subrecipient's COI policy applies, the subrecipient must certify that their policy complies with the regulations. The subrecipient must also submit the identification and elimination or management of any FCOI to the awardee institution by a specified deadline.</p><h3 id="travel-reporting-requirement">Travel Reporting Requirement</h3><p>Institutions must review investigators' disclosure of travel reimbursed or sponsored by an outside entity and determine whether it represents an FCOI with PHS-supported research. The disclosure must include the sponsor, destination, duration, and purpose of the travel. Institutions have the discretion to request additional information from the investigators, including the monetary value of the travel.</p><p>Excluded from the disclosure requirement is travel sponsored by:</p><ul><li>A U.S. federal, state, or local government agency;</li><li>A U.S. institution of higher education as defined at <a href="http://www.gpo.gov/fdsys/search/pagedetails.action?st=citation%3A20+USC+1232g&amp;granuleId=USCODE-2011-title20-chap28-subchapI-partA-sec1001&amp;packageId=USCODE-2011-title20&amp;bread=true">20 U.S.C. 1001(a)</a>;</li><li>A U.S. academic teaching hospital;</li><li>A U.S. medical center; or</li><li>A U.S. research institute that is affiliated with an institution of higher education.</li></ul><blockquote><p><a href="http://grants.nih.gov/grants/guide/notice-files/NOT-OD-13-004.html">Notice Number: NOT-OD-13-004</a> includes more information about the NIH's policy on the disclosure of reimbursed or sponsored travel.</p></blockquote><h2 id="summary">Summary</h2><p>The regulations that went into effect 24 August 2012 instituted substantial changes for many institutions and researchers with respect to PHS-funded research. Researchers must disclose outside financial interests to their institutions. Institutions must make decisions as to which financial interests are "significant" and whether they conflict with the researchers’ institutional responsibilities. The institution must also decide if it will eliminate or manage the FCOIs in an attempt to remove bias.</p><h2 id="acknowledgments">Acknowledgments</h2><p>This module was developed in collaboration with the Association of American Medical Colleges (AAMC). It was written and reviewed by members of the AAMC Forum on Conflict of Interest in Academe (FCOI Academe). Additional COI resources are available through the <a href="https://www.aamc.org/">AAMC's website</a>.</p><h2 id="references">References</h2><ul><li>Cain, Daylian M., George Loewenstein, and Don A. Moore. 2005. "The Dirt on Coming Clean: Perverse Effects of Disclosing Conﬂicts of Interest." <em>Journal of Legal Studies</em> 34(1):1-25.</li><li>Cain, Daylian M., George Loewenstein, and Don A. Moore. 2011. "When Sunlight Fails to Disinfect: Understanding the Perverse Effects of Disclosing Conflicts of Interest." <em>Journal of Consumer Research</em> 37(5):836-57.</li><li>Financial Disclosure by Clinical Investigators, 21 CFR § 54 (1998).</li><li>Promoting Objectivity in Research, 42 CFR § 50, Subpart F (2011).</li><li>U.S. Department of Health and Human Services (HHS). 2011. "Responsibility of Applicants for Promoting Objectivity in Research for Which Public Health Service Funding Is Sought and Responsible Prospective Contractors; Final Rule." <em>Federal Register</em> 76(165):Part IV.</li><li>U.S. Food and Drug Administration (FDA). 2013. "<a href="https://www.fda.gov/media/85293/download">Guidance for Clinical Investigators, Industry, and FDA Staff Financial Disclosure by Clinical Investigators</a>." Accessed June 5, 2015.</li></ul><h2 id="quiz">Quiz</h2><h3 id="question-1">Question 1</h3><p>Which of the following financial conflict of interest information must be made available by institutions on a public website or within five business days upon request?</p><ul><li><del>The financial interests of all research administrators at an academic centre.</del></li><li><strong>The financial conflicts of interest of senior/key personnel on projects funded by the U.S. Public Health Service.</strong></li><li><del>The conflicts of commitment of researchers funded by the U.S. Public Health Service.</del></li><li><del>The financial interests of all faculty at an academic centre.</del></li></ul><p><strong>Comment</strong>:</p><p>The U.S. Public Health Service (PHS) regulations require that institutions make publicly accessible certain information regarding the identified financial conflicts of interest of senior/key personnel on PHS funded projects. The information should include the investigator’s name, the conflicted investigator’s title and role, the name of the entities in which the investigator has a significant financial interest, the nature of the interest, and the annual dollar value in specified ranges.</p><h3 id="question-2">Question 2</h3><p>Which of the following statements is true regarding the reporting of outside interests and the management of conflicts?</p><ul><li><del>Investigators must disclose all of their financial interests regardless of whether they are related to a research project.</del></li><li><strong>Investigators must disclose their significant financial interests related to their institutional responsibilities and not just those related to a particular project.</strong></li><li><del>Investigators are responsible for developing their own management plans for significant financial interests.</del></li><li><del>The institution must report identified financial conflicts of interest to the U.S. Office of Research Integrity.</del></li></ul><p><strong>Comment</strong>:</p><p>Investigators must disclose their significant financial interests related to their institutional responsibilities and not just those related to a particular project.</p><h3 id="question-3">Question 3</h3><p>Which of the following statements most accurately describes a mitigation report?</p><ul><li><strong>A report to the U.S. Public Health Service of efforts that will be taken by the institution to deal with any bias that was found in research conducted while there was an unreported financial conflict of interest.</strong></li><li><del>A report from an institution telling the U.S. Public Health Service how bias will be minimized before a research project begins.</del></li><li><del>An annual report to the U.S. Public Health Service of all the significant financial interests of the institution’s PHS-funded researchers.</del></li><li><del>A report from the U.S. Public Health Service to an institution of what must be done to deal with financial conflicts of interest of its PHS-funded researchers.</del></li></ul><p><strong>Comment</strong>:</p><p>Mitigation reports are required when, after retrospective review, the institution determines that the design, conduct, or reporting of U.S. Public Health Service (PHS) funded research has been biased by a significant financial interest determined to be a financial conflict of interest that was not timely disclosed or managed, or when the investigator fails to comply with a management plan. The institution submits the mitigation report to the PHS awarding component.</p><h3 id="question-4">Question 4</h3><p>Institutions are required by the U.S. Public Health Service to do which of the following:</p><ul><li><del>Update their financial conflict of interest policy every four years.</del></li><li><del>Apply the same financial conflict of interest policy to all researchers regardless of their funding source.</del></li><li><del>Eliminate any and all conflicts of interest.</del></li><li><strong>Evaluate whether a significant financial interest is related to an investigator’s research and constitutes a financial conflict of interest.</strong></li></ul><p><strong>Comment</strong>:</p><p>Institutions must evaluate whether a significant financial interest is related to an investigator’s research and constitutes a financial conflict of interest.</p><h3 id="question-5">Question 5</h3><p>The U.S. Public Health Service (PHS) requires institutions to:</p><ul><li><del>Post the significant financial interests of all researchers to a publicly available website.</del></li><li><strong>Disclose their investigators’ new financial conflicts of interest to the PHS awarding component within 60 days of discovering them.</strong></li><li><del>Collect information about the significant financial interests of all faculty and staff.</del></li><li><del>Block faculty from owning any equity interest in a company that sponsors</del></li></ul><p><strong>Comment</strong>:</p><p>The U.S. Public Health Service requires institutions to disclose their investigators’ new financial conflicts of interest to the PHS awarding component within 60 days of discovering them.</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Conflicts of Interest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Identify all components in the sample J</title>
      <link href="2021/03/13/2021-03-13-Pratical-Exercise-Report/"/>
      <url>2021/03/13/2021-03-13-Pratical-Exercise-Report/</url>
      
        <content type="html"><![CDATA[<h1 id="identify-all-components-in-the-sample-j">Identify all components in the sample J</h1><p><em>Kaidi Wang &amp; Chaoqun Yin</em></p><h2 id="introduction">1 Introduction</h2><p>This practical session is to help us get acquainted with analytical instruments, including reversed-phase high performance liquid chromatography coupled to a UV-detector (RP-HPLC-UV), gas-chromatography coupled to a mass spectrometer (GC-MS), gas-chromatography using flame ionization detector (GC-FID) and a high-performance liquid chromatography coupled to a mass spectrometer (HPLC-MS), and learn to operate them proficiently.</p><h3 id="objective">Objective</h3><p>In the practical exercise, the objective is to use these instruments to identify all components in the samples and quantify at least two of these components.</p><h2 id="equipment">2 Equipment</h2><h3 id="hplc-uv">2.1 HPLC-UV</h3><p>HPLC-UV (High performance liquid chromatography) is an analytical technique used to separate, identify and quantify different components inside a mixture. Liquid chromatography has lots of different modes but the most used is reversed phase LC. It separates the components according to hydrophobicity. If a compound is hydrophobic, it will be more retained because the stationary phase is apolar. So polar molecules are not or for a small part retained. The column used for this HPLC-UV is XBridge C18 column (150 x 4.6mm, 3.5μm). For the mobile phase is water the predominant mobile phase and acetonitrile as modifier.</p><p>Ultraviolet absorbance is the most popular detection method. However not all compounds show UV-absorption, so it’s rather selective. To generate a monochromatic light, a specific deuterium lamp is used for a variable wavelength detector (VWD). This emits a broad spectrum ranging from 180-750nm. After focusing the beam, a filter is used to eliminate most of the interfering light. Afterwards, the beam gets through a grating to purify the beam and this can be set to obtain the desired wavelength, which is 254nm. After it passes the flow cell, the intensity of the light beam is measured (sampling diode). A absorbance vs time graph is obtained.</p><h3 id="hplc-ms">2.2 HPLC-MS</h3><p>HPLC-UV (High performance liquid chromatography mass spectrometry) is an extremely versatile instrumental technique whose roots lie in the application of more traditional liquid chromatography to theories and instrumentation that were originally developed for gas chromatography (GC). As the name suggest the instrumentation comprises a high-performance liquid chromatograph (HPLC) attached, via a suitable interface, to a mass spectrometer (MS). The primary advantage HPLC/MS has over GC/MS is that it is capable to analyse a much wider range of components. Compounds that are thermally labile, exhibit high polarity or have a high molecular mass may all be analysed using HPLC/MS, even proteins may be routinely analysed. Solutions derived from samples of interest are injected onto an HPLC column that comprises a narrow stainless-steel tube (usually 150 mm length and 2 mm internal diameter, or smaller) packed with fine, chemically modified silica particles. Compounds are separated on the basis of their relative interaction with the chemical coating of these particles (stationary phase) and the solvent eluting through the column (mobile phase). Components eluting from the chromatographic column are then introduced to the mass spectrometer via a specialized interface. The two most common interfaces used for HPLC/MS are the electrospray ionization and the atmospheric pressure chemical ionization interfaces. In LC-MS/ESI, each component obtained from HPLC (mixed with the polar solvent, i.e., the mobile phase) infuses into the ionization chamber through a charged metal capillary at a very low flowrate (typically 1–20 μL/min and 20–50 nL/min in case of nano spray ionization) using a syringe pump. The electric field transforms the sample into a mist, droplets dry by a hot gas, which results in solvent evaporation and consequently shrinkage of the droplets.</p><p>When the droplets shrink, charged ions become closer and the electrostatic repulsion between them increases, resulting in their ejection from the solvent droplets. This technique is suitable for ionic polar compounds, and it can be of use to analyse both large and small molecules, but it is especially useful for larger molecules, e.g., proteins.</p><h3 id="gc-ms">2.3 GC-MS</h3><p>Gas chromatography mass spectrometry (GC/MS) is an instrumental technique, comprising a gas chromatograph (GC) coupled to a mass spectrometer (MS), by which complex mixtures of chemicals may be separated, identified and quantified. This makes it ideal for the analysis of the hundreds of relatively low molecular weight compounds found in environmental materials. For a compound to be analysed by GC/MS it must be sufficiently volatile and thermally stable. In addition, functionalized compounds may require chemical modification (derivatization), prior to analysis, to eliminate undesirable adsorption effects that would otherwise affect the quality of the data obtained. Samples are usually analysed as organic solutions consequently materials of interest (e.g. soils, sediments, tissues etc.) need to be solvent extracted and the extract subjected to various 'wet chemical' techniques before GC/MS analysis is possible.</p><h3 id="gc-fid">2.4 GC-FID</h3><p>GC-FID (Gas Chromatography – Flame Ionization Detector) is a very common analytical technique that is widely used in the petrochemical, pharmaceutical and natural gas markets.</p><p>An FID typically uses a Hydrogen/Air flame into which the sample is passed to oxidize organic molecules and produces electrically charged particles (ions). The ions are collected and produce an electrical signal which is then measured.</p><p>As common with other GC techniques, a carrier gas is required with low Water and Oxygen impurities since Water and Oxygen can interact with the stationary phase and cause significant problems such as high baseline noise and column bleed in the output gas chromatogram which both reduces the analyser sensitivity and decreases column lifetime. The FID is also extremely sensitive to Hydrocarbon impurities in the Hydrogen and Air supply for the flame. Hydrocarbon impurities can cause increased baseline noise and reduce the detector sensitivity.</p><h2 id="derivation">3 Derivation</h2><p>Not all compounds can be detected directly or are stable during the GC measurement. That’s why we have to derivate some compounds before the analysis.</p><h3 id="chiral-alcohol">3.1 Chiral alcohol</h3><p>For chiral alcohol, we need to introduce a substituted silyl group (sialylation) as derivation. 10µl of the indicated stock solution (chiral alcohol) is put into a vial and 50µl of trimethylsilyl-imidazole is added to this vial. Once heated for 30min (at 80°C) we add 1ml of hexane. After the vial is shaken and filtered, the filtered solution has to be injected immediately inside GC-FID.</p><h3 id="fatty-acid">3.2 Fatty acid</h3><p>The derivation of fatty acids happens through transesterification. Basically, we take 10µl of the stock solution (indicated fatty acid) inside a vial and add 500µl of a prepared solution of an acetyl chloride (5%) in methanol. After heating the vial for 30 minutes at 90°C we add 1ml hexane and shake up the mixture. Two layers will form up. The upper layer is taken, evaporated (at 50°C) and re-dissolved in 100µl hexane. This can now be injected into the GC-MS.</p><h2 id="quantification-method">4 Quantification Method</h2><p>All quantitative analysis is based on the fact the area or height of a chromatographic peak is proportional to the quantity of the compound involved. To carry out a quantitative analysis, both relative and absolute methods could be used.</p><p>According to the requirement of practical exercises section, the concentration of at least two components should be determined using at least two methods and both LC and GC. The concentration of the component is always ≥ 10 ppm and ≤ 100 ppm.</p><p>Here three common methods are given which are used to quantify the compounds analysis.</p><h3 id="external-standard-method">4.1 External standard method</h3><p>External standard method is one of the most common approaches to calibrations and quantification. It involves a simple comparison of instrument responses from the unknown sample to the known standard component. When the injected volume is very reproducible (such as automated injection) and when one is not dealing with trace (ppb) analysis or with very complex samples, the method can be applied.</p><p>If the amount (concentration) of the unknown sample is around the standard (max ±50% ), we can apply a simple one point calibration. It means we measure the response factor (f) from an initial analysis with an external standard. Then apply the factor to any other unknow sample peak area. <span class="math display">\[f_{i,S}=\frac{A_{i,S}}{Q_{i,S} }\]</span></p><p><span class="math display">\[Q_{i,x}=\frac{A_{i,x}}{f_{i,S}} =\frac{A_{i,x}×Q_{i,S}}{A_{i,S} }\]</span></p><p>As the concentration is unknown in most cases, the calibration line is much more reliable. Linear regression analysis then allows for calculation of the unknown concentrations via interpolation of the data points:</p><figure><img src="/images/Chem/Picture1.png" alt="" /><figcaption>Fig 1: External standard method with calibration</figcaption></figure><p>A satisfactory calibration line should be composed of at least 5 calibration levels, whereby each analysis is performed ideally in triplicate.</p><p>The external standard method has the benefit that it is a straightforward approach which proves reliable for ppm or % level analyses in GC and HPLC in samples of not too high complexity. The approach however relies on the reproducibility of the injection, separation and detection process and it is critical that calibration is therefore performed on the same day as the analyses of the unknown samples themselves.</p><h3 id="internal-standard-method">4.2 Internal standard method</h3><p>The method of internal standards is used to improve the precision of quantitative analysis. An internal standard is a known concentration of a substance that is present in every sample that is analysed. Internal standards can be used with either the calibration curve or standard addition methods, although the former is probably more common.</p><p>The purpose of the internal standard is to behave similarly to the analyte but to provide a signal that can be distinguished from that of the analyte. Ideally, any factor that affects the analyte signal will also affect the signal of the internal standard to the same degree. Thus, the ratio of the two signals will exhibit less variability than the analyte signal.</p><p>Internal standards are often used in chromatography, mass spectroscopy and atomic emission spectroscopy. They can also be used to correct for variability due to analyte loss in sample storage and treatment.</p><p>When using the internal standard method, we have to calculate the response factor (RF) firstly. Prepare a calibration sample containing the IS and the analyte, then analyse this sample (RF=slope). <span class="math display">\[\frac{A_{x,0}}{C_{x,0}} =RF×\frac{A_{IS,0}}{C_{IS,0} }\]</span> Where: <span class="math display">\[Rel.A（Relative Area）=\frac{A_x}{A_{IS}}\]</span></p><p><span class="math display">\[Rel.C（Relative Concentration）=\frac{C_x}{C_{IS}}\]</span></p><p>So: <span class="math display">\[RF=\frac{A_{x,0}}{A_{IS,0}} × \frac{C_{IS,0}}{C_{x,0}} =\frac{Rel.A_0}{Rel.C_0} \]</span> Then add a known concentration IS to the unknown sample, analyse the sample and we can calculate the concentration of analyte. <span class="math display">\[C_x=\frac{A_x}{A_{IS}} ×C_{IS}×\frac{1}{RF}\]</span> When, from a complex chromatogram, one is interested in one or a few components, internal standard method is the best to use. With this method accuracy is independent of the accuracy of sample injection, contrary to the external standard method. Also when sample loss can occur during sample preparation steps prior to analysis, internal standards are also desirable. If a known quantity of standard is added to the unknown prior to any manipulations, the ratio of standard to analyte remains constant because the same fraction of each is lost in any operation.</p><p>But one of the main limitations to perform this method is finding a good internal standard (IS). The IS cannot be present in the sample but should have a similar structure and retention time as the solute (without having overlapping peaks) and it should have a similar concentration level. Often isotopically labelled components (D, <sup>15</sup>N) are used when MS detection is used (very similar chemical properties).</p><h3 id="standard-addition-method">4.3 Standard addition method</h3><p>In some cases, with very dirty sample, the IS method is not sufficient to allow for accurate quantification. In these cases, the standard addition method will be applied which uses the sample itself as standard.</p><p>In standard addition, known quantities of a standard of the analyte are added to the unknown sample. Care is thereby taken to mix a fixed volume of the unknown sample (V<sub>x</sub>) with an increasing volume of the standard solution (VS). Then each solution is diluted to a fixed volume V<sub>t</sub>.</p><figure><img src="/images/Chem/Picture2.png" alt="" /><figcaption>Fig 2: Protocol used regarding the standard addition method</figcaption></figure><p>Next, you can run these samples and measure the peak areas. a plot can be created based on the added standard volume Vs and the peak area. From the increase in signal, we deduce how much analyte was in the original unknown.</p><figure><img src="/images/Chem/Picture3.png" alt="" /><figcaption>Fig 3: Standard addition (Detector Response vs. V<sub>s</sub>)</figcaption></figure><p>This method requires a linear response to the analyte. Standard addition is especially appropriate when the sample composition is unknown or complex and affects the analytical signal. The matrix is everything in the unknown, other than analyte. A matrix effect is a change in the analytical signal caused by anything in the sample other than analyte.</p><p>In order to decrease the error during the measurement, the V<sub>x</sub> should be relatively large. It means the sample consumption will be larger than previous methods.</p><h2 id="identification-methods">5 Identification methods</h2><h3 id="hplc-uv-1">5.1 HPLC-UV</h3><h4 id="method">5.1.1 Method</h4><p><em>Table 1: Method in HPLC-UV</em></p><p><img src="/images/Chem/t1.png" /></p><h4 id="identification">5.1.2 Identification</h4><p>We started the detection of the sample J from October. According to the parameter provided by the practical exercise, we did the HPLC-UV for the first time.</p><figure><img src="/images/Chem/Picture4.png" alt="" /><figcaption>Fig 4: Chromatogram in HPLC-UV (15<sup>TH</sup> OCTOBER 2019)</figcaption></figure><p>From the graph, we can find three distinct peaks, 23.045 min, 24.120 min, 44.919 min respectively. There is also a peak at 0.769 min, which is close to the small peak at 0.603 min. Obviously, the peaks are not well separated.</p><p>We changed the gradient and the wavelength of UV light during the measurements trying to get good separation in HPLC-UV.</p><p>In the table below is the beginning method and the final method we applied.</p><p><em>Table 2: Method used on 15<sup>th</sup> October &amp; 30<sup>th</sup> November 2019</em></p><p><img src="/images/Chem/t2.png" /></p><figure><img src="/images/Chem/Picture5.png" alt="" /><figcaption>Fig 5: ACN% vs time</figcaption></figure><figure><img src="/images/Chem/Picture6.png" alt="" /><figcaption>Fig 6: Chromatogram of unknown sample (Red) and EtOH (Blue) obtained by RP-HPLC-UV.</figcaption></figure><p>In Fig 6, the blue curve is a blank measurement which is recognized as base line. As it shown in the picture, nearly all the peaks are corresponding to the blank except for three peaks clearly shown in the middle, these three peaks could be the peaks of the unknown compounds we are looking for.</p><p>Therefore, we decide to use this result to do qualification. As we see, three peaks are at 13.145 min, 13.885 min and 15.143 min. Here we define the peaks belong to compound X, Y and Z.</p><h4 id="qualification">5.1.3 Qualification</h4><p>Now, we can use standard (stock) solution to qualify them. We add the stock solution #17 and #19 (10000 ppm) into the sample and redo the measurement. Then we can compare the stock solution peaks and sample peaks.</p><h5 id="identification-with-stock-solution-19">5.1.3.1 Identification with stock solution #19</h5><figure><img src="/images/Chem/Picture7.png" alt="" /><figcaption>Fig 7: Chromatogram Stock solution #19 obtained by RP-HPLC-UV.</figcaption></figure><p>In the first peak region, we could observe a higher peak at the same position (13.114 min) which confirm that the "first peak (13.143 min)" is corresponding to the Stock solution #19, this peak is exactly the one we are looking for.</p><h5 id="identification-with-stock-solution-17">5.1.3.2 Identification with stock solution #17</h5><figure><img src="/images/Chem/Picture8.png" alt="" /><figcaption>Fig 8: Chromatogram Stock solution #17 obtained by RP-HPLC-UV.</figcaption></figure><p>In the second peak region, we could observe a higher peak at 13.860 min, which confirm that the "second peak (13.885 min)" is corresponding to the Stock solution #17, this peak is also the one we are looking for.</p><p>Then we can compare the stock solution peaks and sample peaks.</p><figure><img src="/images/Chem/Picture9.png" alt="" /><figcaption>Fig 9: Overlay of chromatogram #19 and without stock solution in HPLC-UV.</figcaption></figure><p>As is shown in the graph, with the addition of the stock solution, the peak is still given in the same retention time and is much higher than the peak without the addition of stock solution.</p><p>Now, we can make sure that the peak is corresponding to the stock solution. The two peaks we focused are the compounds we want in sample J.</p><p>The table below shows the information about the two peaks in sample J.</p><p><em>Table 3: Information of the peak from HPLC-UV</em></p><p><img src="/images/Chem/t3.png" /></p><p>During the measurement, we did not add stock solution to qualify the compound whose peak is at 15.413 min since the peak is so small and we could not sure if it is the compound we are looking for.</p><p>But the next measurement in HPLC-MS gave us a good result for the small peak. We will discuss this peak in the next session.</p><h3 id="hplc-ms-1">5.2 HPLC-MS</h3><h4 id="method-1">5.2.1 Method</h4><p>Here, we applied the same method (wavelength, flowrate, gradient) as we did in HPLC-UV.</p><p><strong>Gradient:</strong> H<sub>2</sub>O/ACN= 95% : 5%</p><p><em>Table 4: Method applied in HPLC-MS</em></p><table><thead><tr class="header"><th style="text-align: center;">Time (min)</th><th style="text-align: center;">B(ACN) %</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">0</td><td style="text-align: center;">1</td></tr><tr class="even"><td style="text-align: center;">2</td><td style="text-align: center;">5</td></tr><tr class="odd"><td style="text-align: center;">5</td><td style="text-align: center;">10</td></tr><tr class="even"><td style="text-align: center;">10</td><td style="text-align: center;">30</td></tr><tr class="odd"><td style="text-align: center;">15</td><td style="text-align: center;">60</td></tr><tr class="even"><td style="text-align: center;">20</td><td style="text-align: center;">80</td></tr><tr class="odd"><td style="text-align: center;">22</td><td style="text-align: center;">95</td></tr><tr class="even"><td style="text-align: center;">25</td><td style="text-align: center;">95</td></tr><tr class="odd"><td style="text-align: center;">28</td><td style="text-align: center;">3</td></tr><tr class="even"><td style="text-align: center;">30</td><td style="text-align: center;">1</td></tr></tbody></table><h4 id="identification-1">5.2.2 Identification</h4><p>RP-HPLC-UV can't directly show us what is the compound of the two peaks that we found in the chromatogram. By getting information from comparison of the peaks from sample, Stock solution and blank sample. We need to do further analysis with RP-HPLC-MS.</p><p>Peak 2= 13,1 min, Peak 3 =13,8 min</p><p>Combined with the result we got from HPLC-UV. The two peaks belong to the compound X and compound Y.</p><h5 id="peak-2-compound-x">5.2.2.1 Peak 2 – compound X</h5><figure><img src="/images/Chem/Picture10.png" alt="" /><figcaption>Fig 10: Chromatogram of peak 2obtained by RP-HPLC-UV.</figcaption></figure><p>In the mass spectrum, we can clearly see two m/z values which are 185.09 and 231.100. The difference between 2 m/z values with high intensity should be the loss of -COOH group. Combining the formula mass is 230.09, the m/z value of 231 is [MH]<sup>+</sup>, and m/z value of 253 is [MNa]<sup>+</sup>. Considering the obtained formula and mass, and with existence of carboxyl group, one possibility is Naproxen. Then we compared it with reference Mass Spectrum provided from NIST Chemistry WebBook, SRD 69, which gives high intensity of 185 m/z value and 230 m/z value. It gives high probability that this compound is Naproxen.</p><figure><img src="/images/Chem/Picture11.png" alt="" /><figcaption>Fig 11: Structure of Naproxen</figcaption></figure><h5 id="peak-3-compound-y">5.2.2.2 Peak 3 – compound Y</h5><figure><img src="/images/Chem/Picture12.png" alt="" /><figcaption>Fig 12: Chromatogram of peak 3 obtained by RP-HPLC-UV.</figcaption></figure><p>From the spectrum, the difference between 309 and 251 is 57, which might be the loss of C<sub>4</sub>H<sub>9</sub> or C<sub>2</sub>H<sub>5</sub>CO, but we still need the information to determine the functional group in the molecule.</p><h5 id="peak-4-compound-z">5.2.2.3 Peak 4 – compound Z</h5><p>The chromatogram also shows peak 4 at approximately 15,5 min. But we did not do the qualification with stock solution in HPLC-UV since the peak was a little small. Compared to the chromatogram last measured in HPLC-UV, we can find the peak 4 is corresponding to the peak in HPLC-UV at 15.453 min. Now we can definitely sure that the peak 4 is also one of the compounds belonging to sample J.</p><p>Below is the chromatogram of peak 4.</p><figure><img src="/images/Chem/Picture13.png" alt="" /><figcaption>Fig 13: Chromatogram of peak 4 obtained by RP-HPLC-UV.</figcaption></figure><p>The mass of this formula is 206.125, so the m/z value of 207 should belong to [MH]<sup>+</sup> and 229 belongs to [MNa]<sup>+</sup>. It is easy to find a typical m/z value of 161, which might be cleavage of carboxyl group, furthermore, the difference between the value of 119 and 161 is 42 and there might be hydrocarbyl group -C<sub>2</sub>H<sub>6</sub>. The difference of 14 between 119 and 105 can be considered further loss of -CH<sub>2</sub>- group. Based on it, this molecule is recognized as Ibuprofen. We believed Ibuprofen is one of the compounds in sample J.</p><figure><img src="/images/Chem/Picture14.png" alt="" /><figcaption>Fig 14: Structure of Ibuprofen</figcaption></figure><h3 id="gc-ms-1">5.3 GC-MS</h3><h4 id="method-2">5.3.1 Method</h4><p><em>Table 5: Method applied in GC-MS</em></p><p><img src="/images/Chem/t5.png" /></p><h4 id="identification-2">5.3.2 Identification</h4><p>Before the identification, several methods have been used but we still could not find alkane. With the help of the assistants, there should be Decane in the sample J.</p><p>Considering that the boiling point of Decane is 174.1 ℃, while the boiling point of 2-Octanol is 174-181 ℃, they are so close that it is a little hard to separate Decane from 2-Octanol, as is shown in Fig.15.</p><figure><img src="/images/Chem/Picture15.png" alt="" /><figcaption>Fig 15: Zoom out of the chromatogram (on 27/11/2019)</figcaption></figure><p>We changed the temperature program and heated up at a particularly slow rate of 2 ℃/min in the range of 50–80 ℃.</p><p>In Fig 16, we can find the separated peaks of Decane and 2-Octanol.</p><figure><img src="/images/Chem/Picture16.png" alt="" /><figcaption>Fig 16: Chromatogram of sample J (Date analysed: 11/12/2019).</figcaption></figure><figure><img src="/images/Chem/Picture17.png" alt="" /><figcaption>Fig 17: Zoom out on the peak appears around 15 min from the chromatogram of sample J.</figcaption></figure><figure><img src="/images/Chem/Picture18.png" alt="" /><figcaption>Fig 18: Mass spectrum and structure of Decane identified by GC-MS.</figcaption></figure><p><em>Table 6: Mass fragment of Decane from the mass spectrum</em></p><table><thead><tr class="header"><th style="text-align: center;">m/z</th><th style="text-align: center;">Mass fragment (ion)</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">43</td><td style="text-align: center;">C<sub>3</sub>H<sub>7</sub><sup>+</sup></td></tr><tr class="even"><td style="text-align: center;">57</td><td style="text-align: center;">C<sub>4</sub>H<sub>9</sub><sup>+</sup></td></tr><tr class="odd"><td style="text-align: center;">71</td><td style="text-align: center;">C<sub>5</sub>H<sub>11</sub><sup>+</sup></td></tr></tbody></table><figure><img src="/images/Chem/Picture19.png" alt="" /><figcaption>Fig 19: Mass spectrum and structure of 2-Octanol identified by GC-MS.</figcaption></figure><p><em>Table 7: Mass fragment of 2-Octanol from the mass spectrum</em></p><table><thead><tr class="header"><th style="text-align: center;">m/z</th><th style="text-align: center;">Mass fragment (ion)</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">45</td><td style="text-align: center;">CH<sub>2</sub>=O<sup>+</sup>CH<sub>3</sub></td></tr></tbody></table><figure><img src="/images/Chem/Picture20.png" alt="" /><figcaption>Fig 20: Zoom in on the peak appears around 35 min from the chromatogram of sample J.</figcaption></figure><figure><img src="/images/Chem/Picture21.png" alt="" /><figcaption>Fig 21: Mass spectrum and structure of 3-Buten-2-one, 4-phenyl-, (E)- identified by GC-MS.</figcaption></figure><p><em>Table 8: Mass fragment of 3-Buten-2-one, 4-phenyl-, (E)- from the mass spectrum</em></p><table><thead><tr class="header"><th style="text-align: center;">m/z</th><th style="text-align: center;">Mass fragment (ion)</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">43</td><td style="text-align: center;">C<sub>3</sub>H<sub>7</sub><sup>+</sup></td></tr><tr class="even"><td style="text-align: center;">51</td><td style="text-align: center;">C<sub>4</sub>H<sub>3</sub><sup>+</sup></td></tr><tr class="odd"><td style="text-align: center;">77</td><td style="text-align: center;">C<sub>8</sub>H<sub>5</sub><sup>+</sup></td></tr></tbody></table><figure><img src="/images/Chem/Picture22.png" alt="" /><figcaption>Fig 22: Mass spectrum and structure of n-Decanoic acid identified by GC-MS.</figcaption></figure><p><em>Table 9: Mass fragment of n-Decanoic acid from the mass spectrum</em></p><table><thead><tr class="header"><th style="text-align: center;">m/z</th><th style="text-align: center;">Mass fragment (ion)</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">43</td><td style="text-align: center;">C<sub>3</sub>H<sub>7</sub><sup>+</sup></td></tr><tr class="even"><td style="text-align: center;">51</td><td style="text-align: center;">C<sub>4</sub>H<sub>3</sub><sup>+</sup></td></tr><tr class="odd"><td style="text-align: center;">71</td><td style="text-align: center;">C<sub>3</sub>H<sub>7</sub>CO<sup>+</sup></td></tr><tr class="even"><td style="text-align: center;">85</td><td style="text-align: center;">C<sub>4</sub>H<sub>9</sub>CO<sup>+</sup></td></tr></tbody></table><p><em>Table 10: Total Ion Chromatogram (TIC) summary</em></p><table><thead><tr class="header"><th style="text-align: center;">Compound</th><th style="text-align: center;">RT (Min)</th><th style="text-align: center;">Molecular formula</th><th style="text-align: center;">MW(g/mol)</th><th style="text-align: center;">Quality(%)</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">Decane</td><td style="text-align: center;">14.97</td><td style="text-align: center;">C<sub>10</sub>H<sub>22</sub></td><td style="text-align: center;">142.29</td><td style="text-align: center;">93</td></tr><tr class="even"><td style="text-align: center;">2-Octanol</td><td style="text-align: center;">15.28</td><td style="text-align: center;">C<sub>8</sub>H<sub>18</sub>O</td><td style="text-align: center;">130.23</td><td style="text-align: center;">90</td></tr><tr class="odd"><td style="text-align: center;">3-Buten-2-one, 4-phenyl-, (E)-</td><td style="text-align: center;">34.99</td><td style="text-align: center;">C<sub>10</sub>H<sub>10</sub>O</td><td style="text-align: center;">146.19</td><td style="text-align: center;">98</td></tr><tr class="even"><td style="text-align: center;">n-Decanoic acid</td><td style="text-align: center;">35.63</td><td style="text-align: center;">C<sub>10</sub>H<sub>20</sub>O<sub>2</sub></td><td style="text-align: center;">172.26</td><td style="text-align: center;">91</td></tr></tbody></table><p>Generally, "Quality" shows us how good the prediction matches our spectrum, and when the value is larger than 95%, we would be sure the prediction is correct. 3-Buten-2-one, 4-phenyl-, (E)- is clearly detected because the Quality value is 98% from GC-MS. However, 3-Buten-2-one, 4-phenyl-, (E)- is identified as the contaminant in the column in GC-MS which is not the compounds included in the sample J. As we can see in Table 10, the Quality value for the Decane, 2-Octanol and n-Decanoic acid in sample is 93%, 90% and 91%.</p><p>There are several peaks appears in the chromatogram, however the quality of the prediction was too low that could be ignored, several reasons may explain this phenomenon:</p><ul><li>Contamination when the sample was prepared.</li><li>The compounds on the sample may react each other that the peaks may result from the reaction product of the compounds in the sample.</li><li>The column in GC-MS is not clean, the peaks may result from the contaminants.</li><li>The column maybe not very stable because GC-MS has been used too frequently.</li></ul><p>In this condition, we compared it with other chromatograms. The other measurements of Sample J was taken in GC-MS on October 30th and November 27th.</p><figure><img src="/images/Chem/Picture23.png" alt="" /><figcaption>Fig 23: Chromatogram of sample J (Date analysed: 30/10/2019).</figcaption></figure><figure><img src="/images/Chem/Picture24.png" alt="" /><figcaption>Fig 24: Chromatogram of sample J (Date analysed: 27/11/2019).</figcaption></figure><figure><img src="/images/Chem/Picture25.png" alt="" /><figcaption>Fig 25: Chromatogram of sample J (Date analysed: 11/12/2019).</figcaption></figure><p>The chromatogram which were analyzed on 30/10/19 and 27/11/19 used different methods from the final measurement in GC-MS. For this measurement in GC-MS, none of the peaks corresponds to the Decane in Fig.24, and none of the the peaks corresponds to n-Decanoic acid. In this case we changed the method and finally detected the decane in Fig.25.</p><p><em>Table 11: The compound and the quality from GC-MS</em></p><table><thead><tr class="header"><th style="text-align: center;">Compound</th><th style="text-align: center;">Quality(30/10/19)</th><th style="text-align: center;">Quality(227/11/19)</th><th style="text-align: center;">Quality(11/12/19)</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">Decane</td><td style="text-align: center;">/</td><td style="text-align: center;">/</td><td style="text-align: center;">93</td></tr><tr class="even"><td style="text-align: center;">2-Octanol</td><td style="text-align: center;">90</td><td style="text-align: center;">83</td><td style="text-align: center;">90</td></tr><tr class="odd"><td style="text-align: center;">3-Buten-2-one, 4-phenyl-, (E)-</td><td style="text-align: center;">96</td><td style="text-align: center;">94</td><td style="text-align: center;">98</td></tr><tr class="even"><td style="text-align: center;">n-Decanoic acid</td><td style="text-align: center;">/</td><td style="text-align: center;">94</td><td style="text-align: center;">91</td></tr></tbody></table><p>In conclusion, we believe Decane, 2-Octanol and n-Decanoic acid are compounds in the sample J.</p><h4 id="transesterification-for-fatty-acid-n-decanoic-acid">5.3.3 Transesterification for fatty acid (n-Decanoic acid)</h4><p>To further determine the compound, we did transesterification for the fatty acid. Here is the method based on Journal of Chromatography A, 1198-1199 (2008) 14-20</p><ol type="1"><li>Take 10 μl of stock solution in a 2 ml GC-vial and dry in oven at 50°C</li><li>Add 500 μl of a freshly prepared solution of 5% acetyl chloride in methanol</li><li>Heat (closed vial!) at 90°C for 30 min (in heat block or GC-oven)</li><li>Add 1 ml hexane and shake vigorously</li><li>Take the upper layer (= hexane), evaporate (at 50°C) and re-dissolve in 100 μl hexane ➔ use glass inserts in GC-vial</li><li>Inject in GC-MS</li></ol><figure><img src="/images/Chem/Picture26.png" alt="" /><figcaption>Fig 26: Chromatogram of Fatty Acid (Stock solution #2).</figcaption></figure><figure><img src="/images/Chem/Picture27.png" alt="" /><figcaption>Fig 27: Zoom in on the peak from the chromatogram of Fatty Acid (Stock solution #2).</figcaption></figure><figure><img src="/images/Chem/Picture28.png" alt="" /><figcaption>Fig 28: Mass spectrum and structure of transesterification identified by GC-MS (Stock solution #2).</figcaption></figure><figure><img src="/images/Chem/Picture29.png" alt="" /><figcaption>Fig 29: Mass spectrum and structure of Decanoic acid, methyl ester from NIST Mass Spectrometry Data Center Collection (C) 2014 copyright by the U.S. Secretary of Commerce on behalf of the United States of America.</figcaption></figure><p>The mass spectrum of Decanoic acid, methyl ester is shown in Fig.27. The observed peak at m/z 186 (Abundance: 1000) represent the molecular ion [M]<sup>+</sup> of Decanoic acid, methyl ester and its fragment ions are: m/z 143 (Abundance: 5000), m/z 87 (Abundance: 23000), m/z 74 (Abundance:50000), m/z 55 (Abundance: 9000) and m/z 43 (Abundance: 14000), while the fragment ion at m/z 74 (Abundance 50000) represent the base peak in the mass spectra of the Decanoic acid, methyl ester.</p><p><em>Table 12: Transesterification results for fatty acids</em></p><table><thead><tr class="header"><th style="text-align: center;">Compound</th><th style="text-align: center;">RT (Min)</th><th style="text-align: center;">Molecular formula</th><th style="text-align: center;">MW(g/mol)</th><th style="text-align: center;">Quality(%)</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">Decanoic acid, methyl ester</td><td style="text-align: center;">32.08</td><td style="text-align: center;">C<sub>11</sub>H<sub>22</sub>O<sub>2</sub></td><td style="text-align: center;">186.2912</td><td style="text-align: center;">97</td></tr><tr class="even"><td style="text-align: center;">n-Decanoic acid</td><td style="text-align: center;">35.63</td><td style="text-align: center;">C<sub>10</sub>H<sub>20</sub>O<sub>2</sub></td><td style="text-align: center;">172.26</td><td style="text-align: center;">91</td></tr></tbody></table><p>Fatty acids are non-polar and would just plug the top of the GC column upon injection. Once derivatization occurs, they will gain high polar tendency to form hydrogen bonds, and the polar carboxyl functional groups must first be neutralized to distinguish between the differences exhibited by unsaturated fatty acids.</p><p>The Retention time of Decanoic acid, methyl ester is smaller than n-Decanoic acid because the result is from short chains to long chains. After comparing the retention time, we can make sure that Decanoic acid is one of the compounds in the unknown sample J.</p><h3 id="gc-fid-1">5.4 GC-FID</h3><p>2-Octanol was detected in the sample by GC-MS. To further determine the chiral of n-octanol, sialylation is done to with the stock solution #2.</p><h4 id="sialylation">5.4.1 Sialylation</h4><ol type="1"><li>Take 10 µl of the indicated stock solution in a 2 ml GC- or LC-vial.</li><li>Add 50 µl of trimethylsilyl-imidazole.</li><li>Heat at 80 degree for 30 min.</li><li>Add 1 ml of Hexane.</li><li>Shake 1 min and centrifuge 3 min (2500rpm).</li><li>Filter through disk filter.</li><li>Inject filtered solution immediately on GC-FID.</li></ol><h4 id="method-3">5.4.2 Method</h4><p><em>Table 13: The method on GC-FID</em></p><p><img src="/images/Chem/t13.png" /></p><h4 id="identification-3">5.4.3 Identification</h4><figure><img src="/images/Chem/Picture30.png" alt="" /><figcaption>Fig 30: Zoom out of the normalized chromatogram of stock solution #2 resulted from GC-FID</figcaption></figure><table><thead><tr class="header"><th style="text-align: center;">#</th><th style="text-align: center;">RT(min)</th><th style="text-align: center;">Area</th><th style="text-align: center;">Height</th><th style="text-align: center;">Width</th><th style="text-align: center;">Area %</th><th style="text-align: center;">Symmetry</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">6</td><td style="text-align: center;">2.588</td><td style="text-align: center;">7.98</td><td style="text-align: center;">5.0</td><td style="text-align: center;">0.0256</td><td style="text-align: center;">0.024</td><td style="text-align: center;">2.6</td></tr><tr class="even"><td style="text-align: center;">7</td><td style="text-align: center;">2.653</td><td style="text-align: center;">5.92</td><td style="text-align: center;">3.5</td><td style="text-align: center;">0.0254</td><td style="text-align: center;">0.024</td><td style="text-align: center;">2.7</td></tr></tbody></table><p>In Fig.30, there are two symmetric peaks at retention time 2.588 min and 2.653 min. In the chromatogram from GC-FID, the first peak is 2-Octanol with R configuration at retention time 2.588 min. And the second peak is 2-Octanol with S configuration at retention time 2.653 min. We can find that the second peak is a little lower than the first one, that is corresponding to the fact that R configuration is much more typical in GC-MS. It reflected that 2-Octanol is racemic mixture in the unknown sample.</p><h2 id="quantification">6 Quantification</h2><h3 id="compound-x-19-y-17">6.1 Compound X (#19) &amp; Y (17)</h3><p>Based on the experimental method we used, the peak position of Compound X and Y is believed at around 13.13 min and 15.57 min, respectively. We used standard addition method to quantify the concentration of the compound. We prepared a set of solution which was added different volume of standard solution (0, 25, 50, 75μl). We performed three replicate experiments on each standard sample solution and averaged them.</p><p><strong>The concentration of the standard solutions we used are known: Cs = 1000ppm.</strong> The corresponding peaks areas of these solution are given in the Table.15.</p><p><em>Table 15: The information of the addition of stock solution – compound X</em></p><table><colgroup><col style="width: 9%" /><col style="width: 21%" /><col style="width: 20%" /><col style="width: 12%" /><col style="width: 9%" /><col style="width: 18%" /><col style="width: 8%" /></colgroup><thead><tr class="header"><th style="text-align: center;">Compound X</th><th style="text-align: center;">Sample V<sub>X</sub>(μl)</th><th style="text-align: center;">STock V<sub>S</sub>(μl)</th><th style="text-align: center;">SOLVENT V (μl)</th><th style="text-align: center;">Total (μl)</th><th style="text-align: center;">Retention Time (min)</th><th style="text-align: center;">Area</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">X (#19)</td><td style="text-align: center;">100</td><td style="text-align: center;">0</td><td style="text-align: center;">100</td><td style="text-align: center;">200</td><td style="text-align: center;">13.167</td><td style="text-align: center;">363.663</td></tr><tr class="even"><td style="text-align: center;">X (#19)</td><td style="text-align: center;">100</td><td style="text-align: center;">25</td><td style="text-align: center;">75</td><td style="text-align: center;">200</td><td style="text-align: center;">13.156</td><td style="text-align: center;">10157.900</td></tr><tr class="odd"><td style="text-align: center;">X (#19)</td><td style="text-align: center;">100</td><td style="text-align: center;">50</td><td style="text-align: center;">50</td><td style="text-align: center;">200</td><td style="text-align: center;">13.154</td><td style="text-align: center;">16954.267</td></tr><tr class="even"><td style="text-align: center;">X (#19)</td><td style="text-align: center;">100</td><td style="text-align: center;">75</td><td style="text-align: center;">25</td><td style="text-align: center;">200</td><td style="text-align: center;">12.820</td><td style="text-align: center;">20409.667</td></tr></tbody></table><figure><img src="/images/Chem/Picture31.png" alt="" /><figcaption>Fig 31: Linear relation between Vs &amp; Area – compound X</figcaption></figure><p>After calculation, we created a standard curve with a linear relation.</p><p>The equation is: <span class="math display">\[A=267.74V_s+1931.2\]</span> where:</p><ul><li><strong>A:</strong> Peak area</li><li><strong>V<sub>S</sub>:</strong> standard solution volume</li><li><strong>The R<sup>2</sup>-value:</strong> 0.9571</li><li><strong>C<sub>S</sub>:</strong> 1000ppm</li></ul><p>According to the extension of the trendline, V<sub>S</sub><sup>0</sup> can be calculated by the equation, <span class="math display">\[V_S^0=\frac{-1931.2}{267.74}=-7.2129µl\]</span> Based on the obtained equation, the concentration of compound X in the sample J can be calculated as C<sub>X</sub>, <span class="math display">\[C_x=\frac{V_S^0C_S}{V_X}=\frac{-7.213×1000}{267.74}=72.129ppm\]</span> We used the same method to quantify compound Y.</p><p><em>Table 16: The information of the addition of stock solution – compound Y</em></p><table><colgroup><col style="width: 9%" /><col style="width: 21%" /><col style="width: 20%" /><col style="width: 12%" /><col style="width: 9%" /><col style="width: 18%" /><col style="width: 8%" /></colgroup><thead><tr class="header"><th style="text-align: center;">Compound X</th><th style="text-align: center;">Sample V<sub>X</sub>(μl)</th><th style="text-align: center;">STock V<sub>S</sub>(μl)</th><th style="text-align: center;">SOLVENT V (μl)</th><th style="text-align: center;">Total (μl)</th><th style="text-align: center;">Retention Time (min)</th><th style="text-align: center;">Area</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">X (#17)</td><td style="text-align: center;">100</td><td style="text-align: center;">0</td><td style="text-align: center;">100</td><td style="text-align: center;">200</td><td style="text-align: center;">13.909</td><td style="text-align: center;">349.300</td></tr><tr class="even"><td style="text-align: center;">X (#17)</td><td style="text-align: center;">100</td><td style="text-align: center;">25</td><td style="text-align: center;">75</td><td style="text-align: center;">200</td><td style="text-align: center;">13.921</td><td style="text-align: center;">11967.233</td></tr><tr class="odd"><td style="text-align: center;">X (#17)</td><td style="text-align: center;">100</td><td style="text-align: center;">50</td><td style="text-align: center;">50</td><td style="text-align: center;">200</td><td style="text-align: center;">13.648</td><td style="text-align: center;">19349.633</td></tr><tr class="even"><td style="text-align: center;">X (#17)</td><td style="text-align: center;">100</td><td style="text-align: center;">75</td><td style="text-align: center;">25</td><td style="text-align: center;">200</td><td style="text-align: center;">12.920</td><td style="text-align: center;">27055.250</td></tr></tbody></table><figure><img src="/images/Chem/Picture32.png" alt="" /><figcaption>Fig 32: Linear relation between Vs &amp; Area – compound Y</figcaption></figure><p>The linear equation we get is: <span class="math display">\[A=350V_S+1553.3\]</span> where:</p><ul><li><strong>The R<sup>2</sup>-value:</strong> 0.9571</li><li><strong>C<sub>S</sub>:</strong> 1000ppm</li></ul><p><span class="math display">\[V_S^0=\frac{-1553.3}{350}=-4.4380µl\]</span></p><p><span class="math display">\[C_Y=\frac{V_S^0C_S}{V_Y}=\frac{-4.438×1000}{100}=44.380ppm\]</span></p><h3 id="octanol-2">6.2 2-Octanol (#2)</h3><p>Based on the experimental method we used, the peak position of 2-Octanol is believed at around 15.38min. Here we used external standard method to quantify this compound. We prepared a set of standard solution (0, 20, 40, 60, 80 ppm). Each standard solution is measured three times and calculated the average value to improve accuracy. The corresponding peaks areas of standard solution and sample are given in the Table.17</p><p><em>Table 17: The retention time and area with different concentration - 2-Octanol</em></p><table><thead><tr class="header"><th style="text-align: center;">Standard solution</th><th style="text-align: center;">Concentration C (ppm)</th><th style="text-align: center;">Retention Time (min)</th><th style="text-align: center;">Area</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">2</td><td style="text-align: center;">20</td><td style="text-align: center;">15.122</td><td style="text-align: center;">65488612.67</td></tr><tr class="even"><td style="text-align: center;">2</td><td style="text-align: center;">40</td><td style="text-align: center;">15.234</td><td style="text-align: center;">178479301.0</td></tr><tr class="odd"><td style="text-align: center;">4</td><td style="text-align: center;">60</td><td style="text-align: center;">15.287</td><td style="text-align: center;">178479301.0</td></tr><tr class="even"><td style="text-align: center;">5</td><td style="text-align: center;">80</td><td style="text-align: center;">15.319</td><td style="text-align: center;">337756371.3</td></tr><tr class="odd"><td style="text-align: center;">Sample J</td><td style="text-align: center;">C<sub>X</sub></td><td style="text-align: center;">15.280</td><td style="text-align: center;">57247143</td></tr></tbody></table><figure><img src="/images/Chem/Picture33.png" alt="" /><figcaption>Fig 33: Concentration vs Peak area – 2-Octanol</figcaption></figure><p>From the data, we get the graph and the best fitting equation, <span class="math display">\[A=4×10^6 C-10^7\]</span> where:</p><ul><li><strong>A:</strong> Peak area</li><li><strong>C:</strong> Concentration</li><li><strong>The R<sup>2</sup>-value:</strong> 0.9905</li></ul><p>Substitute the area value we measured into the equation, we can calculate the unknown concentration <img src="file:///C:/Users/heart/AppData/Local/Temp/msohtmlclip1/01/clip_image002.png" alt="img" />, <span class="math display">\[C_X=\frac{A+10^7}{4×10^6}=\frac{57247143+10^7}{4×10^6}=16812ppm\]</span></p><h2 id="discussion">7 Discussion</h2><h3 id="small-peaks-in-hplc-uv">7.1 Small peaks in HPLC-UV</h3><p>As mentioned in the practical task, there should be four compounds which can be identified by HPLC-UV and three compounds have been identified by GC-MS. When we did the measurements in HPLC-UV, the peak (at 15.143 min) of the third compound (Ibuprofen) is much smaller than the other two peaks, followed by some really small peaks. Compared with the chromatogram which we measured the blank sample as the base line, it is believed the compound in sample J. This situation may be caused by the reactions between the compounds in the sample.</p><h3 id="new-peaks-in-gc-ms">7.2 New peaks in GC-MS</h3><p>There are more peaks appearing in the GC spectrum excepting the contaminants mentioned in the samples, and the reasons below may explain this phenomenon:</p><ol type="1"><li>The new peaks could come from the automatic reaction product in the sample.</li><li>The new peaks could come from the residual compound in the column. After many measurements, there could be some residuals in the column, and they might affect the results.</li><li>The new peaks could come from the column itself. As the column has been used many times, it could be aged and broken. We did observe the Si-O compound peak.</li></ol><h3 id="separation-of-decane-and-n-decanoic-acid">7.3 Separation of Decane and n-decanoic acid</h3><p>Separation of Decane and n-decanoic acid is a problem we encountered in GC-MS since the difference of boiling point of the two compounds is small. The solution is to change temperature gradient with low rate.</p><h2 id="conclusion">8 Conclusion</h2><p>With HPLC-UV, we have successfully detected three Naproxen and Ibuprofen in sample J, but there is still one compound that we could not determine the structure, although the mass and main fragments are known in HPLC-MS, we still need more information to determine the structure. In addition, there is still one compound that was not detected the peak with HPLC-UV. Three compounds (n-decanoic acid, decane and 2-octanol) have been found with GC-MS.</p><p>Using two different quantification methods, the concentrations of three compounds were calculated. For 2-octanol we used an external standard method with GC-MS and the calculated concentration was equal to 16.812 ppm. Standard addition method was used with HPLC-UV to quantify compound X (#19) and Y (#17).</p><p>In the table 18, you can find all the information of the components in sample J.</p><p><em>Table 18: The components identified with the instruments in sample J</em></p><p><img src="/images/Chem/t18.png" /></p><h2 id="suggestions">9 Suggestions</h2><p>During the experiments in GC-MS, we wasted a lot of time because of the problem of the instruments. In GC-FID, it is difficult to make the Flame “on”, so we changed H<sub>2</sub>-flow to 35 ml/min, instead of the given H<sub>2</sub>-flow of 30 ml/min.</p><h2 id="reference">Reference</h2><ol type="1"><li>A Guide to the Analysis of Chiral Compounds by GC. https://www.restek.com/pdfs/59889.pdf</li><li>Guide to GC Column Selection and Optimizing Separations Gas Chromatography. <a href="www.restek.com">www.restek.com</a></li><li>GC AND GC/MS-Your Essential Resource for Columns &amp; Supplies. <a href="WWW.AGILENT.COM/CHEM/GC">WWW.AGILENT.COM/CHEM/GC</a></li><li>Analytical Separation Methods syllabus, Prof. Dr. F. Lynen, 2018</li><li>Haghikia, Aiden, et al. "Dietary fatty acids directly impact central nervous system autoimmunity via the small intestine." Immunity 43.4 (2015): 817-829.</li></ol><h2 id="appendix">Appendix</h2><h3 id="abbreviations">Abbreviations</h3><table><thead><tr class="header"><th style="text-align: left;">GC-MS</th><th style="text-align: left;">Gas Chromatography-Mass Spectrometer</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">GC-FID</td><td style="text-align: left;">Gas Chromatography-Flame Ionization Detector</td></tr><tr class="even"><td style="text-align: left;">RP</td><td style="text-align: left;">Reversed Phase</td></tr><tr class="odd"><td style="text-align: left;">HPLC-UV</td><td style="text-align: left;">High performance Liquid Chromatography-Ultra Violet detector</td></tr><tr class="even"><td style="text-align: left;">HPLC-MS</td><td style="text-align: left;">High Performance Liquid Chromatography-Mass Spectrometer</td></tr><tr class="odd"><td style="text-align: left;">MSD</td><td style="text-align: left;">Mass Selective Detector</td></tr><tr class="even"><td style="text-align: left;">VWD</td><td style="text-align: left;">Variable Wavelength Detector</td></tr><tr class="odd"><td style="text-align: left;">ACN</td><td style="text-align: left;">Acetonitrile</td></tr><tr class="even"><td style="text-align: left;">IS</td><td style="text-align: left;">Internal Standard</td></tr><tr class="odd"><td style="text-align: left;">RT</td><td style="text-align: left;">Retention Time</td></tr></tbody></table><h3 id="relevant-data-for-quantitative-analysis">Relevant data for quantitative analysis</h3><h4 id="compound-x-y">Compound X &amp; Y</h4><table><thead><tr class="header"><th style="text-align: center;">Solution</th><th style="text-align: center;">Concentration(ppm)</th><th style="text-align: center;">R (min)</th><th style="text-align: center;">Height</th><th>Area</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">100</td><td style="text-align: center;">0</td><td style="text-align: center;">100</td><td style="text-align: center;">200</td><td>13,168</td></tr><tr class="even"><td style="text-align: center;">100</td><td style="text-align: center;">0</td><td style="text-align: center;">100</td><td style="text-align: center;">200</td><td>13,161</td></tr><tr class="odd"><td style="text-align: center;">100</td><td style="text-align: center;">0</td><td style="text-align: center;">100</td><td style="text-align: center;">200</td><td>13,172</td></tr><tr class="even"><td style="text-align: center;">100</td><td style="text-align: center;">25</td><td style="text-align: center;">75</td><td style="text-align: center;">200</td><td>13,156</td></tr><tr class="odd"><td style="text-align: center;">100</td><td style="text-align: center;">25</td><td style="text-align: center;">75</td><td style="text-align: center;">200</td><td>13,152</td></tr><tr class="even"><td style="text-align: center;">100</td><td style="text-align: center;">25</td><td style="text-align: center;">75</td><td style="text-align: center;">200</td><td>13,161</td></tr><tr class="odd"><td style="text-align: center;">100</td><td style="text-align: center;">50</td><td style="text-align: center;">50</td><td style="text-align: center;">200</td><td>13,151</td></tr><tr class="even"><td style="text-align: center;">100</td><td style="text-align: center;">50</td><td style="text-align: center;">50</td><td style="text-align: center;">200</td><td>13,156</td></tr><tr class="odd"><td style="text-align: center;">100</td><td style="text-align: center;">50</td><td style="text-align: center;">50</td><td style="text-align: center;">200</td><td>13,154</td></tr><tr class="even"><td style="text-align: center;">100</td><td style="text-align: center;">75</td><td style="text-align: center;">25</td><td style="text-align: center;">200</td><td>13,15</td></tr><tr class="odd"><td style="text-align: center;">100</td><td style="text-align: center;">75</td><td style="text-align: center;">25</td><td style="text-align: center;">200</td><td>12,151</td></tr><tr class="even"><td style="text-align: center;">100</td><td style="text-align: center;">75</td><td style="text-align: center;">25</td><td style="text-align: center;">200</td><td>13,159</td></tr></tbody></table><h4 id="octanol">2-Octanol</h4><table><thead><tr class="header"><th style="text-align: center;">number</th><th style="text-align: center;">Concentration(ppm)</th><th style="text-align: center;">R (min)</th><th style="text-align: center;">Height</th><th style="text-align: center;">Area</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">1</td><td style="text-align: center;">20</td><td style="text-align: center;">15,125</td><td style="text-align: center;">1407216</td><td style="text-align: center;">66238812</td></tr><tr class="even"><td style="text-align: center;">1</td><td style="text-align: center;">20</td><td style="text-align: center;">15,107</td><td style="text-align: center;">1312532</td><td style="text-align: center;">59184788</td></tr><tr class="odd"><td style="text-align: center;">1</td><td style="text-align: center;">20</td><td style="text-align: center;">15,134</td><td style="text-align: center;">1441661</td><td style="text-align: center;">71042238</td></tr><tr class="even"><td style="text-align: center;">2</td><td style="text-align: center;">40</td><td style="text-align: center;">15,322</td><td style="text-align: center;">2965097</td><td style="text-align: center;">217760372</td></tr><tr class="odd"><td style="text-align: center;">2</td><td style="text-align: center;">40</td><td style="text-align: center;">15,176</td><td style="text-align: center;">2368510</td><td style="text-align: center;">147998021</td></tr><tr class="even"><td style="text-align: center;">2</td><td style="text-align: center;">40</td><td style="text-align: center;">15,203</td><td style="text-align: center;">2556481</td><td style="text-align: center;">169679510</td></tr><tr class="odd"><td style="text-align: center;">3</td><td style="text-align: center;">60</td><td style="text-align: center;">15,330</td><td style="text-align: center;">3134507</td><td style="text-align: center;">247949554</td></tr><tr class="even"><td style="text-align: center;">3</td><td style="text-align: center;">60</td><td style="text-align: center;">15,181</td><td style="text-align: center;">2841660</td><td style="text-align: center;">210985371</td></tr><tr class="odd"><td style="text-align: center;">3</td><td style="text-align: center;">60</td><td style="text-align: center;">15,351</td><td style="text-align: center;">3303538</td><td style="text-align: center;">274397047</td></tr><tr class="even"><td style="text-align: center;">4</td><td style="text-align: center;">80</td><td style="text-align: center;">15,379</td><td style="text-align: center;">3820909</td><td style="text-align: center;">382503470</td></tr><tr class="odd"><td style="text-align: center;">4</td><td style="text-align: center;">80</td><td style="text-align: center;">15,386</td><td style="text-align: center;">3866262</td><td style="text-align: center;">374849922</td></tr><tr class="even"><td style="text-align: center;">4</td><td style="text-align: center;">80</td><td style="text-align: center;">15,193</td><td style="text-align: center;">3186497</td><td style="text-align: center;">255915722</td></tr></tbody></table><p>​</p>]]></content>
      
      
      <categories>
          
          <category> Reports </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Advanced Chromatography and Organic Mass Spectroscopy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FDA-Regulated Research</title>
      <link href="2021/03/13/2021-03-13-FDA-Regulated-Research/"/>
      <url>2021/03/13/2021-03-13-FDA-Regulated-Research/</url>
      
        <content type="html"><![CDATA[<h1 id="fda-regulated-research">FDA-Regulated Research</h1><h2 id="introduction">Introduction</h2><p>The U.S. Food and Drug Administration (FDA) conducts a thorough review of drugs, biologics, and medical devices for safety and effectiveness before granting approval for marketing. Before marketing a product, the sponsor submits an application for approval by the FDA. This application contains a proposed "package insert" which may also be referred to as "labeling." This insert summarizes what the FDA has determined to be a safe and effective use of the product. The FDA bases its approval decision upon bioresearch data generated and reported to the FDA by the sponsor to support the marketing approval of a product. The sponsor collects the data during clinical research conducted under an Investigational New Drug (IND). This module reviews when an IND is needed.</p><p><strong>Learning Objectives</strong></p><p>By the end of this module, you should be able to:</p><ul><li>Define when a substance is considered a “drug.”</li><li>Describe when an IND application is and is not necessary.</li></ul><h2 id="is-it-a-drug">Is it a drug?</h2><p>Clinical research may require the administration of substances not obtained from a pharmacy. For example, investigators may want to study the administration of an amino acid for a metabolic disorder or an investigator may want to study the administration of the gas nitric oxide for new therapeutic purposes. Investigators often obtain these substances from chemical suppliers, gas distributors, or even health food stores.</p><p>According to the FDA in the Federal Food, Drug and Cosmetic Act (FD&amp;C Act 2012), a <strong>drug</strong> is any article "intended for use in the diagnosis, cure, mitigation, treatment, or prevention of disease" and "articles (other than food) intended to affect the structure or any function of the body of man or other animals."</p><p>For example, the following would be considered drugs when used in a research project involving human subjects:</p><ul><li>A dietary supplement that is intended to treat arthritis in adults is a drug.</li><li>The use of antioxidants from pomegranate juice to mitigate the effects of obsessive-compulsive disorder in children would be a drug.</li><li>A vegetable oil purchased from a chemical supplier used, in part, to diagnose a rare fat processing disorder is a drug.</li></ul><h2 id="is-an-ind-needed">Is an IND Needed?</h2><p>When drugs are used in clinical research, both the investigator and Institutional Review Board (IRB) have obligations to assure the appropriate oversight of the research, the safety of the subject, and compliance with any applicable federal and state regulations pertaining to human subject protection. Often the determination as to whether an IND application is required needs to be made on a case-by-case basis with careful consultation between the investigator, supplier, and FDA. For example:</p><ul><li>A dietary supplement that is used as a drug results in the need for an IND.</li><li>If a chemical is bought from a chemical supplier but is used as a test article in a clinical investigation an IND is also required.</li></ul><p>Investigators should not assume that because a substance is not obtained from the pharmacy that an IND would not be required.</p><h2 id="determining-intent-of-use">Determining Intent of Use</h2><p>When the physician's intent is the "practice of medicine," the use of a product in an unapproved manner may not require the submission of an IND application. However, if the principal intent of the physician is to develop information about the product's safety or efficacy, submission of an IND may be required.</p><p>The use of a marketed product does not require an IND if all of the following conditions are met (Investigational New Drug Application 2014):</p><ul><li>Data will not be used to support a new indication, new labeling or change in advertising.</li><li>The research does not involve a route of administration/dosage level or a subject population that significantly increases the risks of using the drug product.</li><li>The research is conducted in compliance with IRB review and informed consent.</li><li>The research is conducted in compliance with requirements for promotion and sale.</li></ul><h2 id="summary">Summary</h2><p>It is important that investigators who propose to conduct research using test articles regulated by the FDA be aware of when an IND is required.</p><h2 id="references">References</h2><ul><li>Federal Food, Drug, and Cosmetic Act (FD&amp;C Act), 21 USC 9 (2012).</li><li>Investigational New Drug Application, 21 CFR § 312 (2014).</li></ul><h2 id="quiz">Quiz</h2><h3 id="question-1">Question 1</h3><p>Consider the following situation. Patients with Smith-Lemli-Opitz have an inborn error of cholesterol biosynthesis, which results in severe to mild cholesterol deficiency, and accumulation of cholesterol precursors. An investigator proposes to determine if pure crystalline cholesterol in an oil suspension will increase cholesterol levels and decrease cholesterol precursors. The investigator proposes to obtain cholesterol, mix it with soy oil, and administer it to subjects. The study then involves follow-up evaluations and assessments. Which option would be the best choice regarding an IND?</p><ul><li><del>Ask the supplier of cholesterol whether an IND is necessary.</del></li><li><del>Perform a literature search to determine if other studies with cholesterol required an IND.</del></li><li><del>Speak with other colleagues to determine if they obtained an IND for cholesterol or for similar substances.</del></li><li><strong>Contact the FDA directly to discuss whether an IND is necessary.</strong></li></ul><p><strong>Comment</strong>:</p><p>Although it may be useful to speak to colleagues and to the supplier of the cholesterol, the only real way to be sure about the need for an IND is to contact the FDA directly and discuss whether an IND is necessary for this study</p><h3 id="question-2">Question 2</h3><p>Dr. Young, who previously decided to give a single patient with both depression and ADHD a medication (drug X) that was indicated for depression but appeared to also be beneficial for ADHD, has now treated several patients with drug X and they have all reported improvement in their ADHD symptoms. He now proposes to investigate in a larger group of patients to determine whether the drug X is effective for ADHD. He contacts the pharmaceutical company who produces the drug X, and they have expressed interest in funding a trial in order to apply to the FDA for approval to extend the labeling of drug X for ADHD treatment. Which of the following is required?</p><ul><li><strong>An IND and IRB approval</strong></li><li><del>IRB approval only</del></li><li><del>Neither IRB approval or an IND is necessary</del></li><li><del>An IND only</del></li></ul><p><strong>Comment</strong>:</p><p>Dr. Young is now planning to conduct a research project with a large group of patients with an intent to submit findings to the FDA to change the labeling of the drug. He will need both an IND and IRB approval.</p><h3 id="question-3">Question 3</h3><p>Consider the following scenario: Drug X is an approved drug that is labeled to treat depression. Several reports in the literature suggest that patients with a diagnosis of depression and ADHD who were treated with drug x for their depression also reported a decrease in their ADHD symptoms. Dr. Young has an ADHD patient that he has followed for several years. Despite attempts with other drugs and behavioral therapy, her ADHD symptoms continue to persist. During one visit, the patient advises Dr. Young that during an ADHD support group, several other attendees mentioned the possibility of drug X as a treatment. She asks whether Dr. Young would prescribe Drug X. Dr. Young does a literature search and notes the multiple reports in the literature and agrees that based on the scientific literature it may be desirable to try drug X for this individual patient. Which of the following would apply?</p><ul><li><strong>Dr. Young may write a prescription for the patient and follow the patient in accordance with standard clinical care.</strong></li><li><del>Dr. Young should submit a protocol to the IRB to request approval to treat this one individual patient with drug X.</del></li><li><del>Dr. Young should obtain an IND from the FDA to treat this one patient with drug X.</del></li><li><del>Dr. Young should call the Office for Human Research Protections (OHRP) within the Department of Health and Human Services for advice.</del></li></ul><p><strong>Comment</strong>:</p><p>The best answer is "Dr. Young may write a prescription for the patient and follow the patient in accordance with standard clinical care." This is not a research study and thus Dr. Young is not restricted in prescribing a medication he believes will benefit his patient, even in an “off-label” manner.</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Biomedical Refresher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Research Involving Children</title>
      <link href="2021/03/13/2021-03-13-Research-Involving-Children/"/>
      <url>2021/03/13/2021-03-13-Research-Involving-Children/</url>
      
        <content type="html"><![CDATA[<h1 id="research-involving-children">Research Involving Children</h1><h2 id="introduction">Introduction</h2><p>Investigators who propose to conduct research with children must be aware of the assent and parental permission requirements associated with the different types of research permitted by 45 CFR 46, Subpart D (the U.S. Food and Drug Administration (FDA) has a similar protections in their 21 CFR 56, Subpart D).</p><p><strong>Learning Objectives</strong></p><p>By the end of this module, you should be able to:</p><ul><li>Describe the various parental permission requirements associated with the different types of permitted research with children under Subpart D.</li><li>Identify when child assent is also required and when it may be waived.</li></ul><h2 id="parental-permission">Parental Permission</h2><p>Much of the 45 CFR 46, Subpart D (Additional Protections for Children Involved as Subjects in Research) regulations revolve around the concept of "minimal risk." The different types of research permitted under Subpart D are further shaped by whether or not there are benefits to the subject. The regulation presents various parental permission requirements associated with these types of research.</p><p>Under 45 CFR 46.404 (research involving no more than minimal risk to the subject):</p><ul><li>Permission of both of the child's parents is required, unless the IRB finds that the permission of one parent is sufficient.</li></ul><p>Under 45 CFR 46.405 (research involving greater than minimal risk but presenting the prospect of direct benefit to the subject):</p><ul><li>Permission of both of the child's parents is required, unless the IRB finds that the permission of one parent is sufficient.</li></ul><p>Under 45 CFR 46.406 (research involving greater than minimal risk and no prospect of direct benefit to the subject but likely to yield generalizable knowledge about the subject's disorder or condition):</p><ul><li>Permission must be obtained from both parents unless one parent is deceased, unknown, incompetent, or not reasonably available, or when only one has legal responsibility for the care and custody of the child.</li></ul><p>Under 45 CFR 46.407 (research not otherwise approvable which presents an opportunity to understand, prevent, or alleviate a serious problem affecting the health or welfare of children):</p><ul><li>Permission must be obtained from both parents unless one parent is deceased, unknown, incompetent, or not reasonably available, or when only one has legal responsibility for the care and custody of the child.</li></ul><p>The table below outlines the approval category and the parental permission requirements.</p><table><colgroup><col style="width: 72%" /><col style="width: 27%" /></colgroup><thead><tr class="header"><th><strong>Category</strong></th><th><strong>Parental Permission</strong></th></tr></thead><tbody><tr class="odd"><td>45 CFR 46.404</td><td>At least one parent*</td></tr><tr class="even"><td>45 CFR 46.405</td><td>At least one parent*</td></tr><tr class="odd"><td>45 CFR 46.406</td><td>Both parents**</td></tr><tr class="even"><td>45 CFR 46.407</td><td>Both parents**</td></tr><tr class="odd"><td>* The IRB may find that permission of one parent is sufficient. ** Research falling under 46.406-7 requires permission to be obtained from both parents, unless one parent is deceased, unknown, incompetent, or not reasonably available, or when only one parent has legal responsibility for the care and custody of the child.</td><td></td></tr></tbody></table><h3 id="waiver-of-parental-permission">Waiver of Parental Permission</h3><p>It is important to note that the regulation does allow an IRB to waive parental permission. An IRB may waive parental permission under the same circumstances it might waive consent of an adult subject: that is, the research presents no more than minimal risk, the waiver will not affect the rights and welfare of the subjects, and the research could not be practicably carried out without the waiver (Protection of Human Subjects 2017).</p><p>In addition, an IRB may waive parental permission under circumstances directly associated with the research. In this regard, an IRB may waive parental permission if it determines that the research is designed to study certain conditions or subject populations for which parental or guardian permission is not a reasonable requirement to protect the subjects. An example provided by the regulation is research on neglected or abused children. The IRB may do this provided there is an appropriate mechanism for protecting the children who will participate as subjects in the research. The choice of mechanism must take into account the nature and purpose of the research, the risk and anticipated benefit to the subjects, age, maturity, status, and condition of the children. Note that the regulation specifies that the waiver may only be approved if it is not inconsistent with other federal, state, or local laws.</p><h2 id="child-assent">Child Assent</h2><p>Children cannot give true "consent" -- they are incapable legally and may be incapable of sufficient comprehension. However, this does not mean they should have no say regarding participation. Instead of "consent" the regulations substituted the concept of "assent." Children do not give consent. They give assent. Assent means a child's affirmative agreement to participate in research.</p><p>Based on the National Commission's recommendations, Subpart D requires that the IRB "determine that adequate provisions are made for soliciting the assent of the children, when in the judgment of the IRB the children are capable of providing assent" (Protection of Human Subjects 2017). The age at which a child is capable of providing assent may vary by child (and by protocol). Each IRB may develop its own guidelines. Further, assent is not an absolute requirement. According to the regulations "the assent of the children is not a necessary condition for proceeding with the research ... [when] ... the intervention or procedure involved in the research holds out a prospect of direct benefit that is important to the health or well-being of the children and is available only in the context of the research" (Protection of Human Subjects 2017). If the IRB makes the determination that assent is required, it also determines whether and how it will be documented.</p><h2 id="summary">Summary</h2><p>Parental permission and child assent are significant requirements in research involving children, particularly when that research is conduct in the U.S. or supported by U.S. federal agencies.</p><h2 id="reference">Reference</h2><ul><li>Protection of Human Subjects, 45 CFR § 46 (2017).</li></ul><h2 id="quiz">Quiz</h2><h3 id="question-1">Question 1</h3><p>A research study involving 13 to 16-year-old girls who have given birth to a first child is designed to assess the effects of a behavioral intervention intended to reduce unprotected sex. The study includes twelve weeks of participation, either in the intervention or in standard individual counseling. The intervention focuses on positive imaging, education and career planning, and increasing familial and community connections. The research will occur in an area where the fact that the girls are parents does not affect their rights with respect to their own treatment or participation in research and they are not emancipated minors; therefore, they may only assent for research in which they will be subjects. The IRB has determined that the study presents no greater than minimal risk. Which of the following is true?</p><ul><li><del>Because the study presents no greater than minimal risk, the IRB must require that both parents give permission for the child to participate.</del></li><li><del>Because the study presents no greater than minimal risk, if the child assents then no parental permission is required.</del></li><li><del>Because the study presents no greater than minimal risk, the child's dissent can be overruled provided one parent gives permission.</del></li><li><strong>Because the study presents no greater than minimal risk, the IRB may find that the permission of only one of the parents is sufficient.</strong></li></ul><p><strong>Comment</strong>:</p><p>According to 45 CFR 46.408(b) (Protection of Human Subjects 2017), "Where parental permission is to be obtained, the IRB may find that the permission of one parent is sufficient for research to be conducted under §46.404 [no greater than minimal risk].”</p><h3 id="question-2">Question 2</h3><p>Where research is approved under 45 CFR 46.406 (more than minimal risk and no direct benefit to subjects) and permission is to be obtained from parents, both parents must give their permission unless one parent is dead, not known, judged to be incompetent, or not reasonably available, or when only one parent has legal responsibility for the care and custody of the child. Which of the following is an example of a justified reason for obtaining consent from only one parent?</p><ul><li><del>One of the child’s parents is not supportive of research and has expressed that the child should not participate.</del></li><li><del>The parent who is not available to give permission is separated from the other parent and there is only minimal contact (8-10 times per year) between the parents regarding the care of the child.</del></li><li><del>The parent who is not available is traveling for work on the day the researcher would like to secure permission from the parents and begin study procedures.</del></li><li><strong>One of the child’s parents suffers from early onset of dementia and has been determined by the courts to be incompetent.</strong></li></ul><h3 id="question-3">Question 3</h3><p>An investigator proposes to conduct a study of severe eczema in children to further understand the disease’s interaction with normal skin cells. As a part of the study, an operation will remove a 5mm punch biopsy of skin from children in the study. The children will receive no treatment or benefit from participating in the study. The IRB has determined that the study presents greater than minimal risk with no direct benefit to the subjects, but may lead to generalizable knowledge about severe eczema in children. Only children who are capable of assenting will be recruited for the study. Which of the following is true regarding assent and the IRB’s determination?</p><ul><li><del>The assent of the child may be used in lieu of parental permission.</del></li><li><del>The assent may be secured prior to parental permission.</del></li><li><del>The assent of the child is not required because no treatment is involved.</del></li><li><strong>The assent of the child is required.</strong></li></ul><p><strong>Comment</strong>:</p><p>The assent of the child is required (and thus the IRB cannot find that it is not necessary) because the research presents no direct benefit to the child that is available only in the research. Assent may never be used in lieu of parental permission. An IRB may waive parental permission but would need to establish an appropriate substitute. Assent should be secured after parental permission.</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Biomedical Refresher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Research Involving Pregnant Women, Fetuses, and Neonates</title>
      <link href="2021/03/13/2021-03-13-Research-Involving-Pregnant-Women,-Fetuses,-and-Neonates/"/>
      <url>2021/03/13/2021-03-13-Research-Involving-Pregnant-Women,-Fetuses,-and-Neonates/</url>
      
        <content type="html"><![CDATA[<h1 id="research-involving-pregnant-women-fetuses-and-neonates">Research Involving Pregnant Women, Fetuses, and Neonates</h1><h2 id="introduction">Introduction</h2><p>Research involving neonates, particularly those of uncertain viability, presents a number of regulatory challenges to investigators and Institutional Review Boards (IRBs).</p><p><strong>Learning Objective</strong></p><p>By the end of this module, you should be able to:</p><ul><li>Discuss the requirements for conducting research with neonates of uncertain viability under 45 CFR 46, Subpart B (Additional Protections for Pregnant Women, Human Fetuses and Neonates Involved in Research).</li></ul><h2 id="general-conditions-for-research-involving-neonates">General Conditions for Research Involving Neonates</h2><p>Subpart B addresses research involving several categories of subjects: pregnant women (and their fetuses), neonates of uncertain viability, and non-viable neonates. We address the latter two categories in this module.</p><p>A <strong>non-viable neonate</strong> is defined as “a neonate after delivery that, although living, is not …able … to survive (given the benefit of available medical therapy) to the point of independently maintaining heartbeat and respiration” (Protection of Human Subjects 2017).</p><p>A <strong>neonate of uncertain viability</strong> is one where it is not yet determined whether it is capable of surviving to the point of independently maintaining heartbeat and respiration.</p><p>In order to involve non-viable neonates or neonates of uncertain viability in research, certain conditions must be met (Protection of Human Subjects 2017):</p><ul><li>When appropriate, preclinical and clinical studies have been conducted and provide data for determining potential risks to the neonates.</li><li>Each of the individuals providing consent under Subpart B are fully informed of the foreseeable impact of the research on the neonate.</li><li>Individuals who are engaged in the research (on the research team) will have no part in determining the viability of a neonate.</li></ul><p>In addition, certain other specific conditions must be met as described below.</p><h2 id="neonates-of-uncertain-viability">Neonates of Uncertain Viability</h2><p>For research involving neonates of uncertain viability, the investigator must demonstrate and the IRB must determine that (Protection of Human Subjects 2017):</p><ul><li>The proposed research has the potential of enhancing the probability of survival of the neonate to point of viability and any risk is the least possible in order to attain the objective; or</li><li>The intent of the research is to develop important biomedical knowledge that could not be obtained by other means and there is no added risk to the neonate resulting from the research; and</li><li>Informed consent of either parent or a legally authorized representative if neither parent is able to consent. Note that the consent of the father does not need to be obtained if the pregnancy resulted from rape or incest.</li></ul><h2 id="nonviable-neonates">Nonviable Neonates</h2><p>For research involving non-viable neonates, the investigator must demonstrate and the IRB must determine that (Protection of Human Subjects 2017):</p><ul><li>The neonate's vital functions will not be artificially maintained;</li><li>The research will not terminate the heartbeat or respiration of the neonate;</li><li>There are no added risks to the neonate; and</li><li>The intent of the research is to develop important biomedical knowledge that cannot be obtained by other procedures.</li></ul><p>Informed consent of both parents is obtained unless one parent is unable to consent or is incompetent. Note here that consent of the father is not necessary if the pregnancy resulted from rape or incest. It is also important to note that the consent of a legally authorized representative for either or both parents does not meet the consent requirements in the case of nonviable neonates.</p><h2 id="consent-requirements">Consent Requirements</h2><p>The consent requirements for the two types of research differ in important ways.</p><h3 id="neonates-of-uncertain-viability-1">Neonates of Uncertain Viability</h3><ul><li>Informed consent of either parent; or</li><li>Informed consent of a legally authorized representative if neither parent is able to consent.</li></ul><h3 id="non-viable-neonates">Non-Viable Neonates</h3><ul><li>Informed consent of both parents, unless one parent is unable to consent or is incompetent.</li><li>The consent of the father is not necessary if the pregnancy resulted from rape or incest.</li><li>Consent of a LAR for either parent is not allowed.</li></ul><p>In explaining the difference between these requirements, the U.S. Department of Health and Human Services (HHS 2001, 3881) stated that:</p><p>In cases of uncertain viability, a decision regarding research participation must often be made very quickly, especially where the research presents the prospect of enhancing the probability of survival of the fetus. Thus, the consent of only one parent (or legally authorized representative) is required… [In contrast] …The Department believes that research involving the nonviable fetus should only proceed with the consent of both parents.</p><h2 id="summary">Summary</h2><p>It is important that both the researchers who propose to conduct research with neonates, and the IRBs that review that research, are familiar with the conditions established by Subpart B. This includes being familiar with the definitions provided in the regulations, as well as the differing requirements for consent for neonates of uncertain viability and non-viable neonates.</p><h2 id="references">References</h2><ul><li><p>Protection of Human Subjects, 45 CFR § 46 (2017).</p></li><li><p>U.S. Department of Health and Human Services (HHS). 2001. “Federal Policy for the Protection of Human Subjects.” <em>Federal Register</em> 66(11):3881.</p></li></ul><h2 id="quiz">Quiz</h2><h3 id="question-1">Question 1</h3><p>As per Subpart B, a physician who is a member of the research team on a study involving nonviable neonates may assist the treating physicians in determining whether neonates are nonviable.</p><ul><li><del>True</del></li><li><strong>False</strong></li></ul><p><strong>Comment</strong>:</p><p>Individuals who are engaged in the research (on the research team) may not have any part in determining the viability of a neonate.</p><h3 id="question-2">Question 2</h3><p>A nonviable neonate may be involved in research as long as the neonate is maintained on life support for no more than 72 hours after delivery.</p><ul><li><del>True</del></li><li><strong>False</strong></li></ul><p><strong>Comment</strong>:</p><p>A nonviable neonate may not be involved in research if artificial means will be used to maintain vital functions.</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Biomedical Refresher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Research Involving Prisoners</title>
      <link href="2021/03/13/2021-03-13-Research-Involving-Prisoners/"/>
      <url>2021/03/13/2021-03-13-Research-Involving-Prisoners/</url>
      
        <content type="html"><![CDATA[<h1 id="research-involving-prisoners">Research Involving Prisoners</h1><h2 id="introduction">Introduction</h2><p>While there are a number of different vulnerable groups that participate in human subjects research, prisoners present unique challenges to both investigators and Institutional Review Boards (IRBs). This module reviews how the federal regulation defines “prisoner” and why prisoners need special protections.</p><p><strong>Learning Objectives</strong></p><p>By the end of this module, you should be able to:</p><ul><li>Describe the regulatory definition of a prisoner.</li><li>Identify why prisoners need special protections.</li></ul><h2 id="who-is-a-prisoner">Who is a prisoner?</h2><p>A "prisoner" is defined in 45 CFR 46.303(c) (Protection of Human Subjects 2017) as follows:</p><p>A Prisoner means any individual involuntarily confined or detained in a penal institution. The term is intended to encompass individuals sentenced to such an institution under a criminal or civil statute, individuals detained in other facilities by virtue of statutes or commitment procedures which provide alternatives to criminal prosecution or incarceration in a penal institution, and individuals detained pending arraignment, trial, or sentencing.</p><h3 id="rough-translation">Rough Translation</h3><p>Prisoners are people who are being held in a jail, prison, juvenile offender facility, or treatment facility, or who have been convicted or are awaiting arraignment, trial, or sentencing. This includes those who are in hospitals, alcohol and drug treatment facilities, or other institutions under court order. The definition applies to minors and adults.</p><h4 id="common-examples">Common Examples</h4><p>According to the Office for Human Research Protections (OHRP 2017), some common examples of the application of the prisoner definition include:</p><ul><li>Individuals who are detained in a residential facility for court-ordered substance abuse treatment as a form of sentencing or alternative to incarceration are prisoners; however, individuals who are receiving non-residential court-ordered substance abuse treatment and are residing in the community are not prisoners.</li><li>Individuals with psychiatric illnesses who have been committed involuntarily to an institution as an alternative to a criminal prosecution or incarceration are prisoners; however, individuals who have been voluntarily admitted to an institution for treatment of a psychiatric illness, or who have been civilly committed to non-penal institutions for treatment because their illness makes them a danger to themselves or others, are not prisoners.</li><li>Parolees who are detained in a treatment center as a condition of parole are prisoners; however, persons living in the community and sentenced to community-supervised monitoring, including parolees, are not prisoners.</li><li>Probationers and individuals wearing monitoring devices are generally not considered to be prisoners; however, situations of this kind frequently require an analysis of the particular circumstances of the planned subject population. Institutions may consult with OHRP when questions arise about research involving these populations.</li></ul><h2 id="why-do-prisoners-need-special-protections">Why do prisoners need special protections?</h2><p>The National Commission has presented several reasons that support special protections for prisoners as research subjects:</p><ul><li>The ability of prisoners to exercise free choice may be limited because their autonomy is restricted. They may be concerned about repercussions if they refuse to participate in the research.</li><li>Confidentiality of participation and of data are difficult to maintain in a prison setting because privacy of inmates is severely limited and prison spaces may be subject to monitoring such as audio and visual recordings.</li><li>Inducements offered by researchers to prisoners may create undue influence. Prisoners have limited access to money. An inducement to participate may appear much more valuable to a prisoner than it would to a non-prisoner.</li><li>Prisoners may represent a population of convenience for researchers rather than a truly representative or inclusive study population. Studies of medical products on prisoners are quicker and cheaper than doing these studies in a non-incarcerated clinical population because the confounding variables can be reduced.</li><li>Prisoners may not realize benefits from participating in research that non-incarcerated subjects may be offered. Their options for healthcare, education, and social services are limited by virtue of their incarceration and social and economic status.</li></ul><h2 id="summary">Summary</h2><p>Researchers and IRBs must be aware of individuals who may have status as prisoners and establish protections that recognize and protect this vulnerable group of individuals.</p><h2 id="references">References</h2><ul><li>Protection of Human Subjects, 45 CFR § 46 (2017).</li><li>U.S. Department of Health and Human Services (HHS), Office for Human Research Protections (OHRP). 2017. <a href="https://www.hhs.gov/ohrp/regulations-and-policy/guidance/faq/prisoner-research/index.html">“Prisoner Research FAQs.</a>” Accessed August 9.</li></ul><h2 id="quiz">Quiz</h2><h3 id="question-1">Question 1</h3><p>Which of the following meets the regulatory definition of prisoner?</p><ul><li><del>Individuals who commit themselves voluntarily to psychiatric institutions.</del></li><li><del>Individuals who are on probation</del></li><li><del>Individuals who are civilly committed to psychiatric institutions.</del></li><li><strong>Individuals detained in treatment centres as a condition of parole.</strong></li></ul><p><strong>Comment</strong>:</p><p>An individual who commits voluntarily to a psychiatric institution as well as individual who is committed by a civil procedure are not considered prisoners. An individual who is on probation is generally not considered a prisoner.</p><h3 id="question-2">Question 2</h3><p>Which of the following is a reason that prisoners need special protection?</p><ul><li><strong>Prisoners have limited free choice because their autonomy is restricted.</strong></li><li><del>Prisoners may take part in multiple studies.</del></li><li><del>Prisoners may not be able to complete study participation.</del></li><li><del>Prisoner research may require additional approvals by agencies and other administrators.</del></li></ul><p><strong>Comment</strong>:</p><p>Special concerns arise when research is conducted in prisons. The limited free choice that prisoners have due to restricted autonomy is one reason that prisoners need special protection. While prisoners may take part in multiple studies and may not be able to complete study participation because of relocation or parole, these issues themselves do not require greater protection for prisoners. The requirement for additional agency or administrator reviews adds to the protection of prisoners, and does not create the need for additional protections.</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Biomedical Refresher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Informed Consent</title>
      <link href="2021/03/13/2021-03-13-Informed-Consent/"/>
      <url>2021/03/13/2021-03-13-Informed-Consent/</url>
      
        <content type="html"><![CDATA[<h1 id="informed-consent">Informed Consent</h1><h2 id="introduction">Introduction</h2><p>The purpose of informed consent is to ensure that a human research subject is provided all of the information necessary to make an informed choice about participating in a research study. It is a process that is required by federal regulations -- the U.S. Food and Drug Administration (FDA) at 21 CFR 50 and the U.S. Department of Health and Human Services (HHS) at 45 CFR 46. These agencies, along with the organization’s Institutional Review Board (IRB) and investigator, are responsible for assuring compliance with these regulations.</p><p>It is important that informed consent be viewed as a process and not just a signature on the informed consent document. The process of informed consent begins with recruitment and continues throughout the course of the study. The informed consent form must give accurate, clear, and concise information about key elements (such as, what the study involves, how long the research subject will be in the study, risks and benefits of participating [both known and unknown], and a number of other important critical issues). However, in some instances, an IRB may determine that consent be waived or altered. It is important to remember that it is the IRB that makes the determination (not the researcher).</p><p>Waiver or alteration of the informed consent process or documentation of informed consent is a challenging topic for both IRBs and investigators to understand. In this module, both topics are discussed with a supporting case study.</p><p><strong>Learning Objectives</strong></p><p>By the end of this module, you should be able to:</p><ul><li><p>Describe the requirements for waiving or altering elements of informed consent.</p></li><li><p>Identify the requirements for waiving the requirement for obtaining signed informed consent forms (documentation).</p></li></ul><h2 id="waiving-or-altering-elements-of-informed-consent">Waiving or Altering Elements of Informed Consent</h2><p>According to the Common Rule (45 CFR 46, Subpart A), the required informed consent elements may be waived or altered by an IRB if certain conditions are found and documented by the IRB.</p><h3 id="public-benefit-and-service-programs">Public Benefit and Service Programs</h3><p>IRBs may waive or alter the requirements for informed consent for public benefit and service programs. The conditions stipulated at 45 CFR 46.116(e)(3) (Protection of Human Subjects 2017) are:</p><ol type="1"><li>The research or demonstration project is to be conducted by or subject to the approval of state or local government officials and is designed to study, evaluate, or otherwise examine:<ol type="1"><li>Public benefit or service programs;</li><li>Procedures for obtaining benefits or services under those programs;</li><li>Possible changes in or alternatives to those programs or procedures; or</li><li>Possible changes in methods or levels of payment for benefits or services under those programs; and</li></ol></li><li>The research could not practicably be carried out without the waiver or alteration.</li></ol><p>It is important to note that in order to meet the criteria noted above, the IRB must find that the research constitutes one of the noted areas of examination -- only public benefit or service program research activities that are under state or local authority meet this criterion and such research could not practicably be carried out without the waiver.</p><h3 id="general-waiver-or-alteration-of-consent">General Waiver or Alteration of Consent</h3><p>For all other types of research, 45 CFR 46.116(f)(3) (Protection of Human Subjects 2017) permits waiving or altering the regulatory elements of informed consent if the IRB finds and documents the following:</p><ul><li>The research involves no more than minimal risk to the subjects;</li><li>The research could not practicably be carried out without the requested waiver or alteration;</li><li>If the research involves using identifiable private information or identifiable biospecimens, the research could not practicably be carried out without using such information or biospecimens in an identifiable format;</li><li>The waiver or alteration will not adversely affect the rights and welfare of the subjects; and</li><li>Whenever appropriate, the subjects or legally authorized representatives will be provided with additional pertinent information after participation.</li></ul><p>It should be noted that to meet these criteria the IRB must find and document all five elements. The FDA does present a similar option for FDA-regulated research in its guidance.</p><h3 id="fda-guidance-on-waiver-or-alteration-of-informed-consent-for-clinical-investigations-involving-no-more-than-minimal-risk-to-human-subjects-fda-2017">FDA Guidance on Waiver or Alteration of Informed Consent for Clinical Investigations Involving No More Than Minimal Risk to Human Subjects (FDA 2017)</h3><p>On 24 July 2017, the FDA issued guidance that they will not object if an IRB approves a waiver or alteration of consent for a no more than minimal risk clinical investigation. In the guidance FDA indicated their intent to change FDA regulation to match Common Rule with respect to granting waivers or alterations of consent. Until FDA regulatory changes are promulgated FDA is exercising enforcement discretion and allowing researchers to follow the same rules for waiver and alteration as existing in the Common Rule.</p><h2 id="fda-regulations-for-exceptions-from-informed-consent">FDA Regulations for Exceptions from Informed Consent</h2><h3 id="fda-regulations-for-exceptions-from-informed-consent-requirements">FDA Regulations for Exceptions from Informed Consent Requirements</h3><p>FDA at 21 CFR 50.23 and 50.24 (Protection of Human Subjects 2015) provides exceptions to the requirement for informed consent under the following circumstances:</p><ul><li>In situations where requirements for exception from informed consent are met for emergency research.</li><li>In life-threatening conditions involving an individual subject where requirements for an exception from informed consent are met and include documentation of all of the following:<ul><li>The researcher, with the concurrence of another physician, believes the situation necessitates the use of a test article (an investigational drug, device, or biologic)</li><li>The subject and/or LAR is unable to communicate consent</li><li>A LAR is "an individual or judicial or other body authorized under applicable law to consent on behalf of a prospective subject to the subject's participation in the procedure(s) involved in the research" (Protection of Human Subjects 2015).</li><li>There is insufficient time to obtain consent</li><li>No alternative exists that will provide an equal or better chance of saving the subject's life</li></ul></li></ul><h2 id="waiving-the-signing-documentation-of-informed-consent-forms">Waiving the Signing (Documentation) of Informed Consent Forms</h2><p>Apart from the ability to waive or alter the elements of informed consent, 45 CFR 46.117(c) (Protection of Human Subjects 2017) allows for the waiving or altering of the process for obtaining signed documentation under the following conditions:</p><ol type="1"><li>That the only record linking the subject and the research would be the informed consent form and the principal risk would be potential harm resulting from a breach of confidentiality. Each subject (or legally authorized representative) will be asked whether the subject wants documentation linking the subject with the research, and the subject's wishes will govern;</li><li>That the research presents no more than minimal risk of harm to subjects and involves no procedures for which written consent is normally required outside of the research context; or</li><li>If the subjects or legally authorized representatives are members of a distinct cultural group or community in which signing forms is not the norm, that the research presents no more than minimal risk of harm to subjects and provided there is an appropriate alternative mechanism for documenting that informed consent was obtained.</li></ol><p>It should be noted that the FDA regulations only reference the second condition as noted in 21 CFR 56.109(c)(1).</p><h2 id="case-study">Case Study</h2><p>A researcher proposes to conduct a study where adult subjects will be surveyed about sexual attitudes and behaviours, including the use of contraceptives and the use of illegal drugs and alcohol during sex. The purpose of the study is to identify the perceptions of various age groups to the use of substances (both legal and illegal) during sex and the effect this has on contraceptive use and awareness. The researcher is considering developing a behavioural intervention based on age.</p><p>While certainly private in nature, the questions are similar to those presented during routine in-take history and physicals at a doctor's office or in a clinic.</p><p>Subjects will be recruited from adults who have left a community health screening conducted as a volunteer service by a local medical school. Individuals will be handed an invitation to the survey for review along with a verbal description of the study. If the subject agrees to participate, he or she will then be escorted to a private room.</p><p>At that time, the waiting researcher will complete the consent process in keeping with all of the elements of informed consent. If the subject agrees to participate, the researcher will exit the room leaving the subject at a desk with a laptop computer that will allow him/her to complete the survey. The laptop will not be connected to the Internet. The survey will not collect any personal identifying information. Subjects will be allowed to skip any questions and questions will be presented one at a time. Once the subject hits "next," they will be asked if they are certain they would like to save the response to the question. After indicating the affirmative, the subject will not be able to return to the question during the remainder of the survey. When subjects reach the end of the survey, they will be presented with a "submit" button. This closes the session with the subject.</p><p>Even if the subject does not hit "submit," prior questions will not be reviewable via the terminal. The researcher will download the compiled data at her research office. The researcher requests that the IRB consider waiving the documentation of consent.</p><p>The IRB chair considered the proposed study and the request for waiving the requirement for documentation of consent.</p><p>During the expedited review, the IRB chair reviewed the requirements stipulated in the regulations. Here was the rationale based 45 CFR 46.117(c).</p><p>The IRB chair considered the first criterion: that the only record linking the subject and the research would be the consent document and the principle risk would be potential harm resulting from a breach of confidentiality. The reviewer noted that each subject will be asked whether the subject wants documentation linking the subject with the research, and the subject's wishes will govern.</p><p>As described by the researcher, if required to have a consent form signed, it would be the only record linking the subject to the research. While the survey does ask behavioural questions, these are of a similar nature to those encountered during standard in-take at doctors' offices and clinics. The principle risk would thus be the potential breach of confidentiality. If the waiver was approved under this criterion, then a consent form or other documentation linking the subject to the data would need to exist to allow for the subject's wishes.</p><p>The IRB chair considered the second criterion: That the research presents no more than minimal risk of harm to subjects and involves no procedures for which written consent is normally required outside of the research context.</p><p>Recall that the regulation defines "minimal risk" for this population as the "probability and magnitude of harm or discomfort anticipated in the research are not greater in and of themselves than those ordinarily encountered in daily life or during the performance of routine physical or psychological examinations or tests." As noted, the survey presents questions one would normally encounter in daily life. Those questions are to be administered privately by a computer system that will prevent review of the answers and no questions are collecting identifying information. Surveys are frequently conducted outside of the research context described without written consent.</p><p>The IRB chair considered the third criterion: If the subjects or legally authorized representatives are members of a distinct cultural group or community in which signing forms is not the norm, that the research presents no more than minimal risk of harm to subjects and provided there is an appropriate alternative mechanism for documenting that informed consent was obtained.</p><p>The IRB chair noted that this criterion would not apply to this subject population.</p><p>In considering all the criteria, the IRB chair determines to waive the documentation of informed consent in keeping with the second criterion.</p><h2 id="summary">Summary</h2><p>Informed consent may be waived or altered by the IRB if certain criteria are met. Waivers or alterations may be for the process of obtaining consent, as well as the documentation of consent.</p><h2 id="references">References</h2><ul><li>Protection of Human Subjects, 45 CFR § 46 (2017).</li><li>U.S. Food and Drug Administration (FDA). 2017. “<a href="https://www.fda.gov/regulatory-information/search-fda-guidance-documents/irb-waiver-or-alteration-informed-consent-clinical-investigations-involving-no-more-minimal-risk">IRB Waiver or Alteration of Informed Consent for Clinical Investigations Involving No More Than Minimal Risk to Human Subjects</a>.” Accessed August 15</li></ul><h2 id="quiz">Quiz</h2><h3 id="question-1">Question 1</h3><p>A waiver of the requirement for documentation of informed consent may be granted when:</p><ul><li><del>Potential subjects might find some of the questions embarrassing.</del></li><li><strong>The only record linking the subject and the research is the consent document and the principal risk is a breach of confidentiality.</strong></li><li><del>The potential subjects are literate, but English is not their primary language.</del></li><li><del>The investigator has no place to store signed consent forms.</del></li></ul><p><strong>Comment</strong>:</p><p>Documentation may be waived if the principal risks are those associated with a breach of confidentiality concerning the subject's participation in the research, and the consent document is the only record linking the subject with the research.</p><h3 id="question-2">Question 2</h3><p>A criterion for waiving informed consent is that, when appropriate, subjects are provided additional pertinent information after the study. In which of the following studies would it not be appropriate to provide subjects with information:</p><ul><li><del>A study involving decision-making games in which subjects were led to believe that they were interacting with another student in another room, but were actually interacting with a computer programmed to provide consistent responses to all subjects.</del></li><li><strong>A study in which subjects were assigned to study conditions based on an undesirable or unflattering physical characteristic as assessed by members of the research team.</strong></li><li><del>A study in which subjects were told that they performed in the third quartile on an anagram task when in reality students were randomly assigned scores that were not related to their actual performance.</del></li><li><del>A study in which researchers told students that they would be given a quiz after reading some study materials when the researchers did not intend to use a quiz, but were attempting to focus subjects' attention on the material.</del></li></ul><p><strong>Comment</strong>:</p><p>If subjects were to learn that the research team assigned them to study conditions based on undesirable or unflattering physical characteristics, the knowledge that their appearance was judged negatively by the research team could be very distressing and, therefore, it would not be appropriate to inform subjects after the study about how they were assigned. Informing subjects about the actual research procedures in the other studies would be unlikely to cause them harm.</p><h3 id="question-3">Question 3</h3><p>For research that does not entail a demonstration project conducted by or subject to the approval of state or local government officials, an IRB may waive or alter the regulatory elements of informed consent if it finds and documents a number of items, including:</p><ul><li><strong>The waiver or alteration will not adversely affect the rights and welfare of the subjects</strong></li><li><del>The research involves more than minimal risk to the subjects.</del></li><li><del>The research will occur in accepted educational or clinical settings.</del></li><li><del>The research could be carried out without the waiver or alteration</del></li></ul><p><strong>Comment</strong>:</p><p>For all types of research excluding demonstration projects conducted by or subject to the approval of state or local government officials, 45 CFR 46.116(f)(3) (Protection of Human Subjects 2017) permits waiving or altering the regulatory elements of informed consent if the IRB finds and documents the following:</p><ul><li>The research involves no more than minimal risk to the subjects;</li><li>The research could not practicably be carried out without the requested waiver or alteration;</li><li>If the research involves using identifiable private information or identifiable biospecimens, the research could not practicably be carried out without using such information or biospecimens in an identifiable format;</li><li>The waiver or alteration will not adversely affect the rights and welfare of the subjects; and</li><li>Whenever appropriate, the subjects or legally authorized representatives will be provided with additional pertinent information after participation.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Biomedical Refresher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Aligning sequences and detecting motifs</title>
      <link href="2021/03/13/2021-03-13-Aligning-sequences-and-detecting-motifs/"/>
      <url>2021/03/13/2021-03-13-Aligning-sequences-and-detecting-motifs/</url>
      
        <content type="html"><![CDATA[<h1 id="aligning-sequences-and-detecting-motifs">Aligning sequences and detecting motifs</h1><h2 id="part-1-implementing-sequence-alignment-algorithms">Part 1: implementing sequence alignment algorithms</h2><p>Implement the Needleman-Wunsch (global) and Smith-Waterman (local) alignment algorithms in a Jupyter (Python) notebook. In this Jupyter notebook, report on each block of your code, for example the dynamic programming algorithm, the back-tracking, the parser of the input file and the substitution matrices:</p><ul><li>Explain what you are doing in this block of code, and why</li><li>Detail intermediate tests you made of each part of your code</li><li>Explain any results that you obtain from this block of code</li><li>Explain difficulties you encountered and could not solve</li></ul><p>Information on Jupyter notebooks (installing, use, etc.) can be found on http://jupyter.org. See also the presentation-jupyter.pdf slides.</p><p>The global aligner has to return the <em>k</em> best alignments, with <em>k</em> being a parameter in the function call. The local aligner needs to have the capacity to look for novel <em>l</em> sub-alignments: this means that once one sub-sequence is found, you need to set the values on the paths equal to zero and recalculate the matrix to find the next sub-alignment (see course discussion). Note that multiple paths (limited again by <em>k</em>) are again possible for each sub-alignment.</p><p>Make it possible in your code to work with both linear and affine gap penalty.</p><p>You can use the sequences in WW-sequences.fasta to test the global aligner (these are of similar length) and the sequences in protein-sequences.fasta to check the local alignment algorithm.</p><p>Four substation matrices (PAM120, PAM250 and BLOSUM matrices) are available as files with this assignment . You will need to <strong>write a parser</strong> to read the files and use them in your code.</p><p>Compare the alignments that you make with your software to those made by the online tool <a href="https://www.ebi.ac.uk/Tools/psa/lalign">LALIGN</a>. Explain similarities and differences between your result and the one you got online in the notebook. For example, when globally aligning the WW sequences, which ones are more similar? Are they coming from the same protein or different proteins? You can check this via http://uniprot.org and report this in your notebook.</p><h2 id="part-2-detecting-motifs-by-aligning-sequences-to-pssms">Part 2: detecting motifs by aligning sequences to PSSMs</h2><p>Now that you have a tool to make alignments we are going to expand it to a tool that can align sequences to motifs, represented by position-specific scoring matrices (PSSM). Such a tool will allow you to identify whether a particular domain family, represented by the PSSM, is present within a given protein sequence.</p><p>In a first step, you need to develop software that can construct the PSSM from a set of sequences. In this project the focus will be on WW domains, which are simple domains as visualized by the image in Figure 1.</p><figure><img src="" alt="" /><figcaption>Figure 1: a typical WW domain structure. For details see the article WW and SH3 domains: two different scaffolds to recognize proline-rich ligands (2002) by Macias, Wiener and Sudol.</figcaption></figure><p>You will compare the PSSM to the motif that is available on PFAM for the same domain family. Make sure to explain, illustrate and test all aspects of your code in the notebook. Below I explain in detail how to get the WW domain information</p><p><strong>The data</strong></p><p>The set of sequences representing the entire family of WW domains is available in the database <a href="http://smart.embl.de">SMART</a>, which needs to be used in normal mode (see home page of the smart website). When you select normal mode, you will move to another page that consists of 4 parts. In the part with the title « <u><em>Domains detected by SMART</em></u> », you need to type the word “WW” and click search. This will provide the page as visualized in Figure 2.</p><figure><img src="" alt="" /><figcaption>Figure 2. SMART page for WW domains</figcaption></figure><p>The SMART page for WW domains provides all information that is relevant for WW domains. It reports that there are 18519 instances of WW domains available. When you click the number 18519, the system searches for all proteins that contain WW domains. You should see a page equivalent to the page in</p><p>The SMART page for WW domains provides all information that is relevant for WW domains. It reports that there are 18519 instances of WW domains available. When you click the number 18519, the system searches for all proteins that contain WW domains. You should see a page equivalent to the page in Figure 3.</p><figure><img src="" alt="" /><figcaption>Figure 3: SMART protein selection page.</figcaption></figure><p>We will use this page now to look for the 136 WW sequences that can be found in human proteins. To get this data we first need to select the human species in the hierarchy visualized in Figures 3. Figure 4 shows where to find the human species exactly in this hierarchy. By clicking the “+” symbols you can descend in the tree to the correct level. You will see the number 136 next to the species “homo sapiens”, which indicates the number of WW sequences found in that species.</p><p>Once you checked the box before “homo sapiens” you need to go back to the beginning of the page and select in the dropbox with title « <em>Action</em> » the option « <em>download protein sequences as fasta files</em> ». You also need to select « <em>Options</em> -- <em>specific domain only</em>: » and add the domain name, which is WW. Once you have done this you click « <em>Download FASTA</em> ».</p><figure><img src="" alt="" /><figcaption>Figure 4: Where to find the human species in the species tree.</figcaption></figure><p>Once you clicked « <em>Download FASTA</em> », you will get the 136 domains that you need to produce the PSSM. You need to copy-and-paste the data in this page to a text file that can be named to-be-aligned.fasta. The sequences in this file will be used to create a multiple-sequence alignment.</p><h3 id="making-the-multiple-sequence-alignment">Making the multiple sequence alignment</h3><p>Once you have the file to-be-aligned.fasta you can now align all sequences at the same time using one of the following tools. Mention clearly in your notebook which tool you used.</p><ol type="1"><li><a href="http://www.ebi.ac.uk/Tools/msa/clustalo/">CLUSTAL Omega</a></li><li><a href="http://www.ebi.ac.uk/Tools/msa/tcoffee/">TCoffee</a></li><li><a href="http://www.ebi.ac.uk/Tools/msa/muscle/">MUSCLE</a></li></ol><p>Store the alignment in FASTA format in a file called msaresults-<replace this by name of MSA tool>.fasta.</p><h3 id="jupyter-implementation">Jupyter implementation</h3><p>Now that you have the multiple-sequence alignment of the 136 sequences you can implement your code to construct the PSSM. See the slides of the course for the detail. Remember to use pseudo-counts. Explain in the notebook which approach for the PSSM construction and pseudo-counts you used.</p><p>Once you have the code to produce the PSSM, you should validate your results with what is known about the WW domains. Provide answers to the following questions and add them to your notebook. Use images to make our answers clear.</p><ol type="1"><li>Construct a <a href="http://weblogo.threeplusone.com">Weblogo</a> for the WW domain family and compare this logo to what you see in your PSSM. Do the conserved positions correspond to what you see in the Weblogo?</li><li>Compare your results to the HMM-logo that can be found on the PFAM <a href="http://pfam.xfam.org">website</a>. Write “WW” in the box next to « view a PFAm entry » on the main page) en click « go ». You will reach the page PF00397 and you can find the HMM logo on that page. What are the similarities and differences with your PSSM?</li></ol><h3 id="expand-your-alignment-code">Expand your alignment code</h3><p>Take now the code of part 1 and expand it so you can align a sequence to a PSSM.</p><ol type="1"><li><p>Expand your alignment code (local!!) with linear gap-penalty. The recurrence relation is now (for linear gap penalty);</p><ol type="1"><li><p>Initialize the first row and first column as before</p></li><li><p>Matrix S(i,j) = max {S(i-1,j-1) + PSSM(seq(i), j), S(i-1,j)+PSSM(“-“, j), S(i,j-1)+PSSM(“_”,j-1), 0}</p><p>With j being the column in the PSSM and PSSM(“-“,j) is the penalty for the gap in position j as stored in your PSSM.</p></li></ol></li><li><p>Align the sequences from protein-sequences.fasta to your PSSM. Show that you can identify the WW domains inside those sequences.</p></li><li><p>Use the information in Uniprot for these proteins to verify whether you have identified the domains correctly. Do you find for instance the same starting and ending positions?</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Assignments </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computational Biology and Bioinformatics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Conflicts of Interest in Human Subjects Research</title>
      <link href="2021/03/13/2021-03-13-Conflicts-of-Interest-in-Human-Subjects-Research/"/>
      <url>2021/03/13/2021-03-13-Conflicts-of-Interest-in-Human-Subjects-Research/</url>
      
        <content type="html"><![CDATA[<h1 id="conflicts-of-interest-in-human-subjects-research">Conflicts of Interest in Human Subjects Research</h1><h2 id="introduction">Introduction</h2><p>Researchers, as experts in their fields, are often sought after to consult, serve on advisory boards, or participate in speakers’ bureaus for companies. These opportunities not only bring prestige to the individual researcher, but also to the organization by which they are employed. It is important for researchers to understand the federal regulations that govern disclosure and management of individual conflicts of interest (COIs), and when a financial COI may be considered significant. This module identifies federal regulations that govern disclosure of individual COIs and discusses when individual significant financial interests in research may be considered COIs.</p><p><strong>Learning Objectives</strong></p><p>By the end of this module, you should be able to:</p><ul><li>Identify federal regulations that govern disclosure of individual COIs.</li><li>Discuss when individual significant financial interests in research may be considered COIs.</li></ul><h2 id="disclosure-of-cois">Disclosure of COIs</h2><p>Federal regulations and policies governing disclosure of research-related individual COIs are broad, and in the case of the Public Health Service (PHS) regulation, somewhat complicated. The PHS, U.S. Food and Drug Administration (FDA), and National Science Foundation (NSF) regulations only address individual financial COIs. Organizational policy may require the disclosure of non-financial COIs, as well as institutional COIs (ICOIs). Organizational policy is often based on PHS and NSF disclosure thresholds for financial holdings or remuneration from non-governmental funding sources such as pharmaceutical sponsors of research studies.</p><h3 id="when-must-cois-be-disclosed">When must COIs be disclosed?</h3><p>The federal regulations also have different requirements for when individual financial COIs must be disclosed.</p><table><colgroup><col style="width: 44%" /><col style="width: 55%" /></colgroup><thead><tr class="header"><th><strong>Federal Regulations and Organizational Policy</strong></th><th><strong>When must COIs be disclosed?</strong></th></tr></thead><tbody><tr class="odd"><td><strong>FDA</strong></td><td>When submitting marketing applications for drugs, biologics, or devices must certify the absence of certain financial interests or to disclose financial interests of researchers who conducted clinical studies covered by the regulation at 21 CFR 54.4(a).</td></tr><tr class="even"><td><strong>NSF</strong></td><td>No later than at the time of proposal submission for NSF-funded research.</td></tr><tr class="odd"><td><strong>PHS</strong></td><td>No later than at the time of proposal submission for PHS-funded research.</td></tr><tr class="even"><td><strong>Organizational Policy</strong></td><td>Varies; many organizations require researchers to disclose COIs before they submit their studies for Institutional Review Board (IRB) review.</td></tr></tbody></table><p>There are some federal COI policies that are broader and may apply to personal relationships and ICOIs (for example, procurement-related issues that may create ICOIs).</p><p>Note that to date, no federal regulations exist that govern disclosure or management of ICOIs. However, accrediting bodies (such as, the Association for the Accreditation of Human Research Protections Programs [AAHRPP]) require organizations seeking accreditation to have an ICOI policy governing human subjects research.</p><h3 id="what-must-be-disclosed">What must be disclosed?</h3><ul><li><strong>PHS regulation</strong> <strong>at 42 CFR 50</strong> (Policies of General Applicability 2011), requires each “investigator” named on a PHS proposal to disclose “significant financial interests” to a designated official at the applicant organization.</li><li><strong>NSF policy</strong> requires researchers to disclose “significant financial interests,” but the NSF definition of “significant financial interests” differs somewhat from the PHS definition.</li><li><strong>FDA regulation at 21 CFR 54.3(c)</strong> (Financial Disclosures by Clinical Investigators) specifies that the FDA may refuse to file any marketing application that does not contain a disclosure of researchers’ financial interests or a certification that the applicant acted with due diligence to obtain researchers’ disclosures, but was unable to do so. The FDA threshold is much higher than either of the PHS and NSF “significant financial interests” disclosure thresholds.</li><li><strong>Organizational policies</strong> vary and may require COI disclosure for both financial and non-financial individual COIs. Organizations may also require disclosure beyond that required by any applicable federal regulations or policies</li></ul><h2 id="defining-financial-interest">Defining Financial Interest</h2><p>The definitions for financial interest vary. It is important for researchers to know the definition the agency or policy uses to know when and what to disclose. Not all financial interests meet the threshold for disclosure, nor are all financial interests considered conflicts.</p><ul><li><strong>Significant financial interest (SFI)</strong> is defined as “a financial interest consisting of one or more of the following interests” that “reasonably appears to be related to the researcher’s organizational responsibilities” (Policies of General Applicability 2011).</li><li>PHS at 42 CFR 50, Subpart F (Policies of General Applicability 2011) defines a <strong>financial conflict of interest (FCOI)</strong> as an SFI that could “directly and significantly affect the design, conduct or reporting of PHS-funded research” (Policies of General Applicability 2011).</li></ul><h2 id="when-does-a-sfi-become-a-fcoi">When does a SFI become a FCOI?</h2><p>An organization’s designated review mechanism in compliance with the definitions and procedures in its written policies will determine when a researcher’s SFI becomes a FCOI. In general, a SFI may become a FCOI when the SFI could directly and significantly affect the design, conduct or reporting of the funded research.</p><figure><img src="https://www.citiprogram.org/citidocuments/_001pic/1343.jpg" alt="" /><figcaption>When Does a SFI become a FCOI?</figcaption></figure><p>There are some federal COI policies that are broader and may apply to personal relationships and ICOIs (for example, procurement-related issues that may create ICOIs). It is important for researchers to be aware of COI policies at their own organization, which often require disclosure beyond that required by any applicable federal regulations or policies (that is, at a much lower threshold).</p><h2 id="summary">Summary</h2><p>It is important for organizations to have strong compliance programs to ensure disclosure of COIs. Disclosure reduces the appearance of or the potential for bias in the research. Organizations must determine when a SFI may be a FCOI, and have adequate policies and procedures in place for management.</p><h2 id="references">References</h2><ul><li>Financial Disclosure by Clinical Investigators, 21 CFR § 54 (2011).</li><li>Policies of General Applicability, 42 CFR § 50 (2011).</li></ul><h2 id="quiz">Quiz</h2><h3 id="question-1">Question 1</h3><p>The Public Health Service (PHS), U.S. Food and Drug Administration (FDA), and National Science Foundation (NSF) regulations address:</p><ul><li><del>Institutional non-financial COIs</del></li><li><strong>Individual financial COIs</strong></li><li><del>Institutional financial COIs</del></li><li><del>Individual non-financial COIs</del></li></ul><p><strong>Comment</strong>:</p><p>The PHS, FDA, and NSF regulations only address individual financial COIs.</p><h3 id="question-2">Question 2</h3><p>The PHS regulations require:</p><ul><li><del>Each “investigator” named on a proposal to disclose “significant financial interests” to the federal funding agency.</del></li><li><strong>Each “investigator” named on a proposal to disclose “significant financial interests” to a designated official at the applicant organization.</strong></li><li><del>Each “investigator” names on a proposal to disclose “significant financial interests” to the FDA for drug studies.</del></li><li><del>Each “investigator” named on a proposal to disclose “significant financial interests” to the Institutional Review Board (IRB).</del></li></ul><p><strong>Comment</strong>:</p><p>PHS regulation at 42 CFR 50 (Policies of General Applicability 2011), requires each “investigator” named on a PHS proposal to disclose “significant financial interests” to a designated official at the applicant organization. The sponsor reports COIs to the FDA when applying for marketing approval.</p><h3 id="question-3">Question 3</h3><p><strong>Quiz - Case Study</strong></p><p>Dr. Jones works as a cardiologist at a Midwest University Medical Center and earns approximately $15,000 per year from Big Medicines Pharmaceuticals giving talks to other doctors about one of the company’s marketed drugs that is used to treat heart infections. Dr. Jones has a SFI with Big Medicines Pharmaceuticals because he receives non-salary compensation of over $5,000 from the company. Big Medicines has approached Dr. Jones about his organization participating as a site in a clinical trial. Dr. Jones would be the local principal investigator. The research is a large multi-site, randomized, double-blind, placebo-controlled trial to examine the efficacy of an investigational drug to prevent heart attacks with 3,000 subjects total. It is expected that three to four subjects would be enrolled at Dr. Jones’s site. Who determines if Dr. Jones has a FCOI with this proposed research?</p><ul><li><strong>Dr. Jones’ organization</strong></li><li><del>Institutional Review Board (IRB)</del></li><li><del>Big Medicines Pharmaceuticals</del></li><li><del>Dr. Jones</del></li></ul><p><strong>Comment</strong>:</p><p>An assessment is usually made by a committee charged with reviewing investigator COIs at the organization. The committee will use the organization’s policy for disclosure of conflicts as the basis for its review. If the compensation meets the threshold for SFI, the committee then determines if the SFI is a FCOI for the investigator in the proposed research.</p><p>If the organization defines a FCOI as any financial interest that could directly and significantly impact the design, conduct, and/or reporting of the results of this research, the committee may find that Dr. Jones has a FCOI relative to the proposed research, because Big Medicines is funding the research, and also compensates Dr. Jones personally for his talks.</p><h3 id="question-4">Question 4</h3><p><strong>Quiz - Case Study</strong></p><p>Dr. Jones works as a cardiologist at a Midwest University Medical Center and earns approximately $15,000 per year from Big Medicines Pharmaceuticals giving talks to other doctors about one of the company’s marketed drugs that is used to treat heart infections. Dr. Jones has a SFI with Big Medicines Pharmaceuticals because he receives non-salary compensation of over $5,000 from the company. Big Medicines has approached Dr. Jones about his organization participating as a site in a clinical trial. Dr. Jones would be the local principal investigator. The research is a large multi-site, randomized, double-blind, placebo-controlled trial to examine the efficacy of an investigational drug to prevent heart attacks with 3,000 subjects total. It is expected that three to four subjects would be enrolled at Dr. Jones’s site. In the following scenario, some existing safeguards against bias are described.</p><ul><li>By the time Dr. Jones is approached by Big Medicine, the drug company has already designed the research plan and the study is ongoing.</li><li>The research design itself is randomized and double-blinded. This is one way to guard against manipulation of the study results.</li><li>Restricting recruitment and thus the contribution of three or four sets of subject data to the study, out of the 3,000 needed to meet research aims, would also guard against significant impact solely by Dr. Jones.</li><li>Finally, assuming there are no “subjective measurements” that Dr. Jones would be expected to obtain that would introduce bias (“How does the subject seem to be feeling at this visit?”); his role would be to collect the data and send it to the company for analysis. It is unlikely that the reporting of the results would be impacted by his FCOI.</li></ul><p>How could the organization further add protection against bias in this scenario?</p><ul><li><del>Remove Dr. Jones from the contract negotiation process with the company.</del></li><li><del>Refuse to allow the organization’s participation as a site in the research study.</del></li><li><strong>Disclose Dr. Jones’ remuneration from the sponsor in the consent document and the consent process.</strong></li><li><del>Require Dr. Jones to return the $5,000 compensation to the company.</del></li></ul><p><strong>Comment</strong>:</p><p>Given this potential impact on the research via recruitment and obtaining consent from subjects, it would be appropriate to manage this FCOI by not allowing Dr. Jones to directly recruit or consent subjects. The COI management plan also could require that Dr. Jones’ remuneration received from the company is disclosed to the research subjects in the consent document and during the consent process. Refusing to allow participation as a site would limit patient access to possible beneficial research. This is not the optimal response.</p><h3 id="question-5">Question 5</h3><p><strong>Quiz - Case Study</strong></p><p>Dr. Jones works as a cardiologist at a Midwest University Medical Center and earns approximately $15,000 per year from Big Medicines Pharmaceuticals giving talks to other doctors about one of the company’s marketed drugs that is used to treat heart infections. Dr. Jones has a SFI with Big Medicines Pharmaceuticals because he receives non-salary compensation of over $5,000 from the company. Big Medicines has approached Dr. Jones about his organization participating as a site in a clinical trial. Dr. Jones would be the local principal investigator. The research is a large multi-site, randomized, double-blind, placebo-controlled trial to examine the efficacy of an investigational drug to prevent heart attacks with 3,000 subjects total. It is expected that three to four subjects would be enrolled at Dr. Jones’s site. When does Dr. Jones’ significant financial interest (SFI) become a possible financial conflict of interest (FCOI)?</p><ul><li><del>When the SFI is not disclosed</del></li><li><del>Only if the SFI is over 15 percent of Dr. Jones’ salary from the university</del></li><li><strong>When the SFI could directly and significantly affect the design, conduct or reporting of the funded research</strong></li><li><del>Up to 12 months (one year) after Dr. Jones receives payment</del></li></ul><p><strong>Comment</strong>:</p><p>In general, a SFI may become a FCOI when the SFI could directly and significantly affect the design, conduct or reporting of the funded research.</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Biomedical Refresher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HIPAA and Human Subjects Research</title>
      <link href="2021/03/13/2021-03-13-HIPAA-and-Human-Subjects-Research/"/>
      <url>2021/03/13/2021-03-13-HIPAA-and-Human-Subjects-Research/</url>
      
        <content type="html"><![CDATA[<h1 id="hipaa-and-human-subjects-research">HIPAA and Human Subjects Research</h1><h2 id="introduction">Introduction</h2><p>This refresher module recaps some of the core Health Insurance Portability and Accountability Act (HIPAA)-related privacy requirements for human subjects research that creates, obtains, uses, or discloses personal health data, principally the requirement for consent and the exceptions to that requirement.</p><p><strong>Learning Objective</strong></p><p>By the end of this module, you should be able to:</p><ul><li>Describe situations where HIPAA requires consent for research activities, and those which can qualify for waivers, alterations, or exemptions from that requirement.</li></ul><h2 id="hipaa-a-quick-review">HIPAA: A Quick Review</h2><p>The regulations associated with HIPAA are lengthy and complex, but here are the key points:</p><ul><li>HIPAA’s privacy protections for health information supplement those of other federal regulations (principally the <a href="http://www.hhs.gov/ohrp/regulations-and-policy/regulations/common-rule/index.html">Common Rule</a> and those of the Food and Drug Administration [FDA]), and any applicable state laws.</li><li>HIPAA protects <a href="https://privacyruleandresearch.nih.gov/pr_07.asp">identifiable health information</a> -- also known as “protected health information” or PHI -- originating or held in <a href="https://www.cms.gov/Outreach-and-Education/Medicare-Learning-Network-MLN/MLNProducts/Downloads/HIPAAPrivacyandSecurityTextOnly.pdf">HIPAA-covered entities</a> or their business associates.</li><li>HIPAA’s rules on use and disclosure of PHI are generally “purpose-based” -- that is, governed by the intended use. The rules for <a href="http://www.hhs.gov/hipaa/for-professionals/special-topics/research/index.html">activities defined as research</a> are different from those for other covered activities.</li><li><a href="http://www.hhs.gov/hipaa/for-professionals/privacy/special-topics/de-identification/index.html">De-identified</a> data are not protected, and some identifiable health information may not be considered PHI, depending on how it was generated.</li><li><a href="http://www.hhs.gov/hipaa/for-professionals/faq/limited-data-set">Limited data sets</a> may be used as a middle ground between PHI and de-identified data, but require a <a href="http://www.hhs.gov/hipaa/for-professionals/special-topics/emergency-preparedness/data-use-agreement/index.html">data use agreement</a>.</li><li>Under HIPAA, research activity using PHI generally requires both <a href="http://www.hhs.gov/hipaa/for-professionals/faq/notice-of-privacy-practice">a general privacy notice</a> and <a href="https://privacyruleandresearch.nih.gov/authorization.asp">specific research authorization</a>. However, there are <a href="http://www.hhs.gov/hipaa/for-professionals/faq/authorizations">several alternatives</a> that allow bypassing the HIPAA authorization requirement, notably when the risks to research subjects are deemed to be minimal.</li><li><a href="http://www.hhs.gov/hipaa/for-professionals/privacy/guidance/minimum-necessary-requirement/">Minimum necessary</a> standards, <a href="http://www.hhs.gov/hipaa/for-professionals/faq/right-to-an-accounting-of-disclosures">disclosure accounting</a> requirements, and the characteristics of authorizations for data use (when required), are among the things that must be understood by researchers when HIPAA applies to the information they are accessing for research.</li><li>HIPAA requires that all covered entities designate a <strong>privacy official</strong> to enforce its requirements. This person is a core organizational resource for researchers’ questions about HIPAA.</li></ul><h2 id="hipaa-research-authorization-consent-or-not">HIPAA Research: authorization (consent) or not?</h2><p>Like the Common Rule, HIPAA begins with the premise that use of PHI for research requires a subject’s permission. If the information in question meet the definition of PHI and are being used for purposes that fall within HIPAA’s definition of research, explicit written <strong>authorization</strong> (permission) from the subject is required.</p><p>However, HIPAA allows for research-related access to individuals’ identifiable health information without authorization under certain circumstances:</p><ol type="1"><li>The research involves only minimal risk.</li><li>The research is used solely for activities preparatory to research.</li><li>Only deceased individual's information is used.</li><li>It is "grandfathered" research where all legal permissions were in place before HIPAA took effect.</li></ol><p>Data that do not identify individuals can be used for research without specific authorization if:</p><ol type="1"><li>Only fully de-identified data are used (by definition, it is then no longer PHI).</li><li>A “limited data set” is used, under an approved “data use agreement.”</li></ol><p>These “bypasses” to authorization are discussed briefly below. For fuller treatment, use the links in the <em>Quick Review</em> section above or in the <em>References</em> and <em>Additional Resources</em> sections.</p><h3 id="waivers-and-alterations-of-authorization-requirement-due-to-minimal-risk">Waivers and Alterations of Authorization Requirement Due to Minimal Risk</h3><p>An organization's Institutional Review Board (IRB) or Privacy Board (and in some organizations a designated privacy official) may determine that a waiver or alteration of the authorization requirement is appropriate given minimal risk. The conditions are modeled on the criteria for a general waiver of informed consent in the Common Rule.</p><p>A determination that there is no more than minimal risk to the privacy of the research subjects includes the following elements:</p><ul><li>An adequate plan to protect any data identifiers from improper use and disclosure, and to destroy those identifiers at the earliest opportunity consistent with conduct of the research. (Identifiers can be retained if there is a health or research justification, or such retention is otherwise required by law.)</li><li>Adequate written assurances that the PHI will not be reused or disclosed to any other individual or entity, except as required by law for authorized oversight of the research project, or for other research for which the use or disclosure of PHI would be permitted by HIPAA.</li><li>The research could not practicably be conducted without access to and use the PHI, and could not practicably be conducted without the waiver or alteration to the authorization.</li></ul><p>The Common Rule has an additional criterion that the waiver or alteration will not adversely affect the rights and welfare of the subjects.</p><h3 id="activities-preparatory-to-research-decedents-information-exceptions">Activities Preparatory to Research; Decedents' Information Exceptions</h3><p>HIPAA provides for two more exceptions to the authorization requirement for identifiable data:</p><ul><li>Where the PHI will be used solely for reviews preparatory to research (for example, for protocol development or identifying potential subjects) and will not leave the covered entity. The Common Rule also allows a waiver for screening, recruiting, or determining eligibility from accessing records or stored identifiable biospecimens (Protection of Human Subjects 2017).</li><li>Where the PHI refers solely to deceased individuals (the covered entity may ask for documentation of death of all data subjects).</li></ul><h3 id="grandfathered-research">Grandfathered Research</h3><p>If all informed consents and other legal permissions required at the time were in place before HIPAA took effect (April 2003 in most cases), and have not changed since, a new HIPAA authorization is not required even for identified data. Obviously, this is no longer a commonly used pathway to bypass authorizations.</p><h3 id="de-identified-data">De-identified Data</h3><p>A researcher may use fully <strong>de-identified</strong> health information without any authorization from individual subjects. As the name implies, de-identified information must have all direct and indirect identifiers removed to eliminate (or at least make highly improbable) re-identification using statistical techniques. De-identified information is no longer considered PHI, because by definition it is no longer individually identifiable.</p><p>HHS issued its <a href="http://www.hhs.gov/sites/default/files/ocr/privacy/hipaa/understanding/coveredentities/De-identification/hhs_deid_guidance.pdf"><em>Guidance Regarding Methods for De-identification of Protected Health Information</em></a> in 2012. This guidance provides a detailed description of alternative methods, and should be considered required reading for anyone contemplating a de-identification strategy.</p><h3 id="limited-data-sets-and-data-use-agreements">Limited Data Sets and Data Use Agreements</h3><p>De-identification trades privacy protection for research productivity. Sometimes the trade-off is too steep, and a fully de-identified data set will not meet a research need. As an alternative, a covered entity may disclose PHI in a <strong>limited data set</strong> <strong>(LDS)</strong> to a researcher who has entered into an appropriate <strong>data use agreement</strong>. A LDS must have all direct identifiers removed; however, it may still include information that could “indirectly” identify the subject using statistical methods.</p><p>The data use agreement for an LDS must:</p><ul><li>Delineate the permitted uses and disclosures of such information by the recipient, consistent with the purposes of research;</li><li>Limit the individuals that can use or receive the data; and</li><li>Require the recipient to agree not to re-identify the data or contact the individuals.</li></ul><h3 id="authorizations-when-no-exemption-criteria-apply">Authorizations When No Exemption Criteria Apply</h3><p>If a research activity meets none of the bypassing criteria above, an authorization is required.</p><p>When they are required, authorizations must be:</p><ul><li>In “plain language” so that individuals can understand the information contained in the form, and therefore are able to make an informed decision.</li><li>Executed in writing, and signed by the research subject (or an authorized personal representative).</li></ul><p>Authorizations must include a specific description of the PHI to be used or disclosed, the name(s) or other identification of individuals involved in the research, and description of each purpose of the requested use or disclosure.</p><p>Most organizations will have standard models for a HIPAA authorization, which its researchers may be required to use. (Even if it is not required, use of existing templates is strongly advised.) Authorizations may also be included within a research consent from.</p><h2 id="summary">Summary</h2><p>If you are unsure about the particulars of HIPAA compliance at your organization or have questions, consult with your organization's IRB, Privacy Board, or privacy official.</p><p>The aim of this module is to reinforce the general requirements of HIPAA’s privacy protections, particularly the requirements related to research-related authorizations. However, the few paragraphs here cannot cover every angle of this complex subject.</p><h2 id="references">References</h2><ul><li>Protection of Human Subjects, 45 CFR § 46 (2017).</li><li>U.S. Department of Health and Human Services (HHS). 2013. “<a href="http://www.hhs.gov/hipaa/for-professionals/privacy/laws-regulations/combined-regulation-text/index.html">Combined Regulation Text of All Rules</a>.” Accessed June 8, 2016.</li><li>U.S. Department of Health and Human Services (HHS), Office for Human Research Protections (OHRP). 2016. “<a href="http://www.hhs.gov/ohrp/regulations-and-policy/regulations/common-rule/index.html">Federal Policy for the Protection of Human Subjects (‘Common Rule)</a>.” Accessed May 22.</li></ul><h2 id="additional-resources">Additional Resources</h2><ul><li>National Institutes of Health (NIH). 2004. “<a href="https://privacyruleandresearch.nih.gov/clin_research.asp">Clinical Research and the HIPAA Privacy Rule</a>.” Accessed May 22, 2016.</li><li>U.S. Department of Health and Human Services (HHS). 2012. "<a href="http://www.hhs.gov/sites/default/files/ocr/privacy/hipaa/understanding/coveredentities/De-identification/hhs_deid_guidance.pdf">Guidance Regarding Methods for De-identification of Protected Health Information in Accordance with the Health Insurance Portability and Accountability Act (HIPAA) Privacy Rule</a>." Accessed May 22, 2016.</li><li>U.S. Department of Health and Human Services (HHS). 2013a. "<a href="http://www.gpo.gov/fdsys/pkg/FR-2013-01-25/pdf/2013-01073.pdf">Modifications to the HIPAA Privacy, Security, Enforcement, and Breach Notification Rules Under the Health Information Technology for Economic and Clinical Health Act and the Genetic Information Nondiscrimination Act; Other Modifications to the HIPAA Rules; Final Rule</a>." <em>Federal Register</em> 78(17):5566-702.</li><li>U.S. Department of Health and Human Services (HHS). 2013b. “<a href="http://www.hhs.gov/hipaa/for-professionals/special-topics/research/index.html">Research</a>.” Accessed May 22, 2016.</li><li>U.S. Department of Health and Human Services (HHS). 2016. “<a href="http://www.hhs.gov/hipaa/for-professionals/index.html">HIPAA for Professionals</a>.” Accessed May 22.</li></ul><h2 id="quiz">Quiz</h2><h3 id="question-1">Question 1</h3><p>HIPAA requires that all covered entities designate:</p><ul><li><del>A signatory / institutional official</del></li><li><del>A conflict of interests committee</del></li><li><del>A non-scientist member</del></li><li><strong>A privacy official</strong></li></ul><p><strong>Comment</strong>:</p><p>HIPAA requires that all covered entities designate: a privacy official to enforce its requirements. This person is a core organizational resource for researchers’ questions about HIPAA.</p><h3 id="question-2">Question 2</h3><p>If fully deidentified data are used for research, then:</p><ul><li><del>Authorization, or a specific exemption from authorization, is still required</del></li><li><del>Authorization requirements are at the discretion of the organization's privacy officer</del></li><li><strong>No authorization is required, because fully deidentified data are no longer considered PHI</strong></li><li><del>Authorization requirements are at the discretion of the IRB</del></li></ul><p><strong>Comment</strong>:</p><p>Fully deidentified data are no longer considered PHI by definition, so no authorization is required. HIPAA no longer applies if PHI is not involved.</p><h3 id="question-3">Question 3</h3><p>Under what circumstances is a HIPAA authorization (consent) for research use of PHI generally always required?</p><ul><li><strong>When the research involves more than minimal risk</strong></li><li><del>When it is an activity preparatory to research</del></li><li><del>When deceased persons' information is involved</del></li><li><del>When it is grandfathered research that started before HIPAA took effect</del></li></ul><p><strong>Comment</strong>:</p><p>Authorization (consent) can be waived if the research involves only minimal risk, is an activity preparatory to research, involves deceased person's information, or is grandfathered research that had permissions in place before HIPAA went into effect. An authorization is required when the research involves more than minimal risk.</p><h3 id="question-4">Question 4</h3><p>Who determines whether an authorization is required or whether the requirement for an authorization may be waived?</p><ul><li><del>It is up to each research subject to decide whether an authorization is necessary</del></li><li><del>The principal investigator, using his or her best judgment about an assessment of risk and the application of HIPAA regulations</del></li><li><strong>The organization's IRB, privacy board, or a designated privacy official, depending on the circumstances</strong></li><li><del>The organization funding the research</del></li></ul><p><strong>Comment</strong>:</p><p>Determination of whether an authorization is required is the responsibility of the organization's IRB, privacy board (if one exists) or privacy official (if that power has been delegated. It is not a determination to be made by the researcher, the funder, or the research subjects.</p><h3 id="question-5">Question 5</h3><p>A data use agreement is required when a researcher uses a Limited Data Set (LDS). An LDS must have:</p><ul><li><del>All direct and indirect identifiers removed</del></li><li><del>Only contain identifiers if the subject is deceased</del></li><li><del>A promise that re-identification is impossible</del></li><li><strong>All direct identifiers removed</strong></li></ul><p><strong>Comment</strong>:</p><p>All direct and indirect identifiers removed is a de-identified data set. A LDS must have all direct identifiers removed; however, it may still include information that could “indirectly” identify the subject using statistical methods. A limited data set is one by definition that does not meet full deidentification standards.</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Biomedical Refresher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Populations in Research Requiring Additional Considerations and/or Protections</title>
      <link href="2021/03/13/2021-03-13-Populations-in-Research-Requiring-Additional-Considerations-andor-Protections/"/>
      <url>2021/03/13/2021-03-13-Populations-in-Research-Requiring-Additional-Considerations-andor-Protections/</url>
      
        <content type="html"><![CDATA[<h1 id="populations-in-research-requiring-additional-considerations-andor-protections">Populations in Research Requiring Additional Considerations and/or Protections</h1><h2 id="introduction">Introduction</h2><p>The concept of autonomy is significant, particularly in research that involves human subjects and especially vulnerable populations. It serves as one of the core components of the <em>Belmont Report’s</em> principle of respect for persons. As noted in <em>Belmont Report,</em> individuals should be treated as autonomous agents, and when that autonomy is affected or diminished then those individuals are entitled to increased protection.</p><p>Learning Objectives</p><p>By the end of this module, you should be able to:</p><ul><li>Describe the elements of autonomy.</li><li>Identify the role of autonomy in research.</li><li>Describe the relationship between autonomy and populations in research requiring additional considerations and/or protections.</li></ul><h2 id="what-is-autonomy">What is autonomy?</h2><p>Autonomy is generally broken down into two general elements in the bioethics literature.</p><p>The first element is mental capacity, the ability to understand and process information. The second element is voluntariness, freedom from the control or influence of others.</p><p><img src="https://www.citiprogram.org/citidocuments/_001pic/1504.jpg" /></p><h2 id="autonomy-and-research">Autonomy and Research</h2><p>In the context of research, autonomy plays a significant role. Subjects have full autonomy when they have the capacity to understand and process information, and the freedom to volunteer for research without coercion or undue influence from others. While subject autonomy is an important issue to consider during the entire length of a research study, it is particularly critical during the recruitment and consent processes where the ability of the subject to act as an autonomous agent is most tested. Autonomy is also an issue for researchers to consider when the research involves subjects whose cognitive ability may change during the course of the research. Because of that change, the subjects may have difficulty appreciating their role in the research and/or communicating their desires with respect to continued participation.</p><p>Some authors also note that autonomy's first element, which is the ability to understand and process information, also calls on researchers to be sure that information is presented in an understandable manner that allows subjects sufficient time to consider participation.</p><p>With categories of subjects in research requiring additional considerations and/or protections, one or both elements of autonomy may be diminished. The Common Rule lists categories of subjects vulnerable to coercion or undue influence as children, prisoners, individuals with impaired decision-making capacity, or economically or educationally disadvantaged persons (Protection of Human Subjects 2017).</p><p>For example, with children there may be a wide range of capacity depending on age, maturity, and psychological state. At the same time, there may also be the potential of coercion, control, or undue influence by a parent, guardian, or researcher. Conversely, homeless adults may have the ability to understand and process the information about a potential phase I drug study, but might experience undue influence to participate to receive monetary payment or healthcare they could not otherwise afford.</p><h2 id="summary">Summary</h2><p>Researchers must consider autonomy of potential subjects when developing studies. This includes developing procedures that provide additional protections to those individuals who may have diminished autonomy either at the beginning of the study or as the study progresses.</p><h2 id="reference">Reference</h2><ul><li>Protection of Human Subjects, 45 CFR § 46 (2017).</li></ul><h2 id="quiz">Quiz</h2><h3 id="question-1">Question 1</h3><p>A group of elderly men, whose government disability benefits are the sole source of income, is approached to consider an experimental research study for their current colon cancer. The study involves more than minimal risk, but offers substantial financial incentives that are equal to two months of disability benefits. The IRB will be most concerned about the possibility of:</p><ul><li><del>Inadequacy of research design</del></li><li><strong>Undue influence on the subjects</strong></li><li><del>Inaccuracy of data</del></li><li><del>Conflict of interest</del></li></ul><p><strong>Comment</strong>:</p><p>The substantial financial incentive provided to subjects could be considered unduly influential or coercive, and must be evaluated by the IRB. The other issues must also be considered, but are secondary in this case to the possibility of coercion.</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Biomedical Refresher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Records-Based Research</title>
      <link href="2021/03/13/2021-03-13-Records-Based-Research/"/>
      <url>2021/03/13/2021-03-13-Records-Based-Research/</url>
      
        <content type="html"><![CDATA[<h1 id="records-based-research">Records-Based Research</h1><h2 id="introduction">Introduction</h2><p>Many kinds of records, including medical records, motor vehicle records, criminal justice records, and school records, may be used for research purposes. These records may be stored on paper or in computerized databases. Use of identifiable records for research must be approved by the institution holding the records and by an Institutional Review Board (IRB).</p><p>Although some records-based research may be eligible for exemption from IRB review, other studies may require expedited or convened review. This module presents the types of review that apply to research where the only research procedure involves review of records.</p><p><strong>Learning Objective</strong></p><p>By the end of this module, you should be able to:</p><ul><li>Identify the types of review that apply to records-based research and note examples of records-based research that are appropriate for the different levels of review.</li></ul><h2 id="exempt-research">Exempt Research</h2><p>Under the Common Rule (45 CFR 46), records-based research may be exempt from the requirements of IRB review if any of the following apply (Protection of Human Subjects 2017):</p><ul><li>The identifiable private information is publicly available (any person can obtain the data).</li><li>The information is recorded by the researcher in such a manner that subjects cannot be identified (directly or through identifiers linked to the subjects). Although the researcher may actually see identifiers while reviewing the data set, he/she cannot record any of them in any research record, or data collection instrument. The researcher also does not contact the subjects and will not re-identify the subjects.</li><li>The research involves only information collection and analysis for the purposes of “health care operations” or “research” (as defined at 45 CFR 164.501), or for “public health activities and purposes” (as described at 45 CFR 164.512[b]).</li><li>The research is conducted by a federal department or agency using government-generated or government-collected information obtained for non-research activities.</li><li>The identifiable private information is being used for secondary research in which broad consent was obtained and documented for the identifiable private information for secondary research; a waiver of documentation of informed consent was obtained; or an IRB conducts a limited IRB review and makes the determination that the secondary research is within the scope of the broad consent and the research does not include returning individual research results to subjects (unless legally required).</li></ul><h3 id="examples-of-records-based-research-that-may-be-exempt">Examples of Records-Based Research that May be Exempt</h3><ul><li>A study examining diabetes rates among Hispanic women in Miami using aggregate information collected and provided by the Florida Department of Health.</li><li>A retrospective study comparing the success rate of two different types of surgical procedures to treat bone loss due to severe facial injury, where information will be recorded without individual identifiers.</li><li>A research study examining the relationship between proximity to an HIV/AIDS treatment centre and adherence to medication treatment plans. The researcher will use the patient's address to determine the distance from the centre but will record the distance in a system that uses ranges (0-3 miles, 4-7 miles, etc.) and will only extract from the medical record the frequency of prescription refill.</li><li>A study comparing the median quiz score during gross anatomy for five years before and five years after a change in teaching format was instituted. The teaching format was changed to include case study discussion groups. The investigator will be provided with class median scores for medical students, physical therapy students, and physician assistant students.</li></ul><p>The Office for Human Research Protections (OHRP) recommends that researchers do not determine on their own if their research qualifies as exempt from the regulations. Rather, the organization should designate an applicable institutional official (or the IRB) to conduct this review. Organizations may have internal rules and policies in addition to the federal regulations that will determine whether to grant an exemption.</p><p><strong>Note:</strong> There is a special situation where records-based research may not be considered human subjects research at all, even though there is a link/code to the subject's identity in the existing data. OHRP guidance has indicated that if the data were collected for a reason other than that proposed in the current request, and the entity providing the data enters into an written agreement assuring that the recipient will not receive the key to the code, the activity is not considered research involving human subjects.</p><h2 id="expedited-irb-review">Expedited IRB Review</h2><p>Records-based research protocols that do not satisfy exemption concerning research with identifiable information then must be reviewed either at the expedited or convened IRB review levels. With respect to records-based research, the difference of whether the study may be reviewed at expedited or requires a convened review is usually dependent on whether the study reflects activities that present greater than minimal risk to subjects.</p><p>For research to qualify for expedited review, it must meet the federal definition of minimal risk, which is: "the probability and magnitude of harm or discomfort anticipated in the research are not greater, in and of themselves, than those ordinarily encountered in daily life or during the performance of routine physical or psychological examinations or tests" (Protection of Human Subjects 2017). And it must be determined by the reviewer to fit into the predetermined categories of research which qualify to be initially approved through expedited review procedures.</p><p>Records-based research generally falls into the 5th expedited category dealing with research involving “materials” if it constitutes, "Research involving materials (data, documents, records, or specimens) that have been collected, or will be collected solely for nonresearched purposes" (OHRP 1998).</p><h3 id="examples-of-records-based-research-that-qualifies-for-expedited-review">Examples of Records-Based Research that Qualifies for Expedited Review</h3><ul><li>An emergency room physician would like to investigate whether individuals who malinger (those who pretend to have an illness) can be determined as such based on standard clinical diagnostic assessments. He will extract, certain information from the diagnostic tests routinely performed at the time of clinical care from the first one hundred individuals seen in the emergency room who are later identified as malingerers. The data will be recorded in a de-identified manner, with no direct or indirect ways of linking the subjects. No additional tests or examinations will occur beyond those of standard clinical care. This study would be expedited, not qualifying for exemption, because the data are being collected prospectively.</li><li>A researcher proposes to compare the side effects of two multiple sclerosis (MS) medications she has previously prescribed to her MS patients over the last year. She plans to collect from their medical records information related to previous reported side effects, when she began prescribing the medications, the reported side effects, and demographic information (including gender, age, age at diagnosis, and dates of service in her office). Her intent is to see what associations may exist between the demographic characteristics of the patients and their side effects. This information may help other physicians who treat the same kinds of individuals. This study would be expedited because actual dates would qualify as identifiers.</li><li>A researcher who is also the director of speech-language pathology services in a large metropolitan hospital proposes to compare whether supervision style affects the way student-clinicians experience their internships in the hospital. Her hope is to identify those supervision styles associated with a positive experience as a part of advancing the study of supervision in speech-language pathology. During previous quality improvement activities, the licensed speech-language pathologists in the hospital completed a number of inventories; one included an activity to determine their respective supervision styles. The investigator proposes to use the results of those inventories and will then compare the supervision style to the students' feedback during the internship evaluation (done as part of the academic program) that will occur at the conclusion of the internship and will be mailed to the researcher four weeks after the students-clinicians have completed their rotations. The investigator will collect the data using the supervisor's name in order to link the evaluation data over six academic terms.</li></ul><h2 id="convened-irb-review">Convened IRB Review</h2><p>Records-based research studies that present greater than minimal risk require a convened IRB review. Generally, the information obtained from the records is of a sensitive nature such that a breach in confidentiality would increase the individual's risk of harm, for example, criminal liability, social harm, or employability.</p><h3 id="examples-of-records-based-research-that-requires-convened-irb-review">Examples of Records-Based Research that Requires Convened IRB Review</h3><ul><li>A researcher that provides medical care in the local county jail proposes to see if there is an association between exposure to sexually transmitted infections (STIs) and illegal sexual behaviour. His plan is to collect data on the individuals he has treated, specifically public records of arrests and/or adjudications related to illegal activities to note if there is greater prevalence of activities that are sexual in nature (solicitation, prostitution, indecent exposure).</li><li>A faculty member in psychology at a private university oversees the suicide prevention program at the institution. He proposes to examine various factors (academic level, major, GPAs, reported use of social media, experience with bullying, drug/alcohol use) to see if there is a relationship between these and suicide attempts/suicide ideation. When students access the suicide prevention program at the university (either because of a suicide attempt or self-reported desire to commit suicide), a standard intake is used that collects the factors of interest to the researcher. He will collect information on the last four years of students who have used the program from the files maintained at the program. While he does not plan to collect the names of the students, the combination of academic level, major, and GPA at the time of program usage could make it possible to identify the students.</li></ul><h2 id="summary">Summary</h2><p>Records-based research may be exempt from or may require expedited or convened IRB review. The type of review is dependent upon the potential risk of harm to subjects in the research. Researchers should always consult with their IRB and organization for further records-based research guidance, policies, and review requirements.</p><h2 id="references">References</h2><ul><li>Protection of Human Subjects, 45 CFR § 46 (2017).</li><li>U.S. Department of Health and Human Services (HHS), Office for Human Research Protections (OHRP). 1998. “<a href="http://www.hhs.gov/ohrp/policy/expedited98.html">OHRP Expedited Review Categories (1998)</a>.” Accessed March 15, 2016.</li></ul><h2 id="quiz">Quiz</h2><h3 id="question-1">Question 1</h3><p>A director of a smoking cessation service at a university decided to publish a paper on whether quit rates were higher among clients who were offered as an incentive either a Moonbeams Coffee Shop’s latte coupon or a pre-paid telephone card. The director was testing a hypothesis that coffee drinkers were less likely to quit smoking than telephone users. To do this, he proposed using outcome data on smoking cessation collected by the service, which would be extracted from the university’s files and placed in a separate database with no identifying information other than sex, date of birth, zip code of Moonbeams where the coupons were used, and the telephone number of the research subject. Would this research be eligible for exemption?</p><ul><li><del>Yes. These records should be publicly available.</del></li><li><del>Yes. This is not really research and thus there is no need to contact the IRB.</del></li><li><strong>No. The investigator may be able to identify subjects based on telephone numbers and birth dates, so this should not be considered exempt.</strong></li><li><del>Yes. No identifiers are being collected and thus there is no need to contact the IRB.</del></li></ul><p><strong>Comment</strong>:</p><p>The investigator may be able to identify subjects based on telephone numbers and birth dates, so this should not be considered exempt. Records-based research may be exempt from the regulations if any of the following apply:</p><ul><li>The identifiable private information is publicly available (any person can obtain the data).</li><li>The information is recorded by the researcher in such a manner that subjects cannot be identified.</li><li>The research involves only information collection and analysis for the purposes of “health care operations” or “research” (as defined at 45 CFR 164.501), or for “public health activities and purposes” (as described at 45 CFR 164.512[b]).</li><li>The research is conducted by a federal department or agency using government-generated or government-collected information obtained for non-research activities.</li><li>The identifiable private information is being used for secondary research in which broad consent was obtained and documented for the identifiable private information for secondary research; a waiver of documentation of informed consent was obtained; or an IRB conducts a limited IRB review and makes the determination that the secondary research is within the scope of the broad consent and the research does not include returning individual research results to subjects (unless legally required).</li></ul><h3 id="question-2">Question 2</h3><p>A large HMO has teamed up with several other large HMOs to study falls and footwear. The investigator proposes to review 5,000 medical records across 10 institutions of individuals injured during the last three years from a fall, so she has enough power to detect whether there is a greater number of falls among people who wear clogs. Because individuals wear so many different types of shoes, she will need to review a large number of records to find those few individuals who fit this category.</p><p>From the medical records, she plans to extract the type of shoe the individuals wear. She will not re-identify the individuals and will not contact the individuals. Which of the following is likely to be the level of review determined as appropriate by the IRB?</p><ul><li><del>Limited IRB review required, as a condition of exempt research category.</del></li><li><strong>Exempt from the regulation, as the study presents no greater than minimal risk and does not collect identifying information.</strong></li><li><del>Expedited review required, as the study presents no greater than minimal risk but involves the use of medical records that contain sensitive information.</del></li><li><del>Convened IRB review required, because the study involves the use of private information from multiple institutions.</del></li></ul><p><strong>Comment</strong>:</p><p>The proposed research is no greater than minimal risk and involves the use of information that already exists. It will be recorded from the medical records in a manner that does not allow for the identification of the subject, the investigator does not contact the subjects, and the investigator will not re-identify the subjects.</p><p>In this case, it is that the information will be recorded by the investigator in such a manner that the identity of the individuals cannot be readily ascertained. The records are not publicly available. Access of records across multiple institutions is also not germane to the determination process in this case.</p><h3 id="question-3">Question 3</h3><p>An investigator has proposed a multi-site study of PSA (Prostate Specific Antigen) test results among patients with prostate cancer. The research involves only review of medical records at institutions in several states. The investigator will not collect any identifying information on the subjects, only their PSA scores and ages (which will be collected in a range format so as to not have the person’s specific age). The investigator may correctly conclude that:</p><ul><li><strong>IRB review, or similar process, may be required because generally investigators are not able to determine for themselves if their own research is exempt.</strong></li><li><del>No IRB review is necessary because the data is de-identified.</del></li><li><del>All institutions will require review by the full IRB because risks of the research are not minimal.</del></li><li><del>There is no need to contact any IRBs because this research is very low risk and would surely be exempt.</del></li></ul><p><strong>Comment</strong>:</p><p>While the study appears to qualify for exemption, most institutions do not allow investigators to make that determination on their own. As a result, IRB review or a similar process is usually in place for researchers to submit proposed work for review and exempt determination.</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Biomedical Refresher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Genetics Research</title>
      <link href="2021/03/13/2021-03-13-Genetics-Research/"/>
      <url>2021/03/13/2021-03-13-Genetics-Research/</url>
      
        <content type="html"><![CDATA[<h1 id="genetics-research">Genetics Research</h1><h2 id="introduction">Introduction</h2><p>Thirty years ago, a drop of human blood provided information on blood chemistry and identified its source as falling into one of four blood groups. Today, in a pharmacogenomic world, that drop of blood identifies its source as a member of a large number of genetic subcategories. It can, at least in principle:</p><ul><li>Help predict the response to specific treatments</li><li>Provide precious information about predisposition to disease</li><li>Help investigators study the role of genes in the etiology and mechanisms of disease.</li></ul><p>When it is stored as a biospecimen in a biorepository, it represents a valuable source of information for those whose research seeks deeper understanding of genotype-phenotype correlations. The availability of genetic information in that drop of blood represents one of the most exciting opportunities in the history of biomedicine. It also constitutes some of the most difficult challenges in the history of human subjects research. This module reviews some of the issues related to informed consent in genetic research.</p><p><strong>Learning Objectives</strong></p><p>By the end of this module, you should be able to:</p><ul><li>Identify issues related to the consent process in genetic research, including re-contacting subjects.</li><li>Identify some of the risks associated with genetic research that should be disclosed during the consent process.</li></ul><h2 id="consent-in-genetics-research">Consent in Genetics Research</h2><p>There are many challenges to ensuring a valid consent process in genetic research. Beyond regulatory obligations and the <em>Belmont Report's</em> ethical principles, this includes (Protection of Human Subjects 2017):</p><ul><li>Ensuring subject understanding of genetic research complexities and potential risks of harm</li><li>Explaining the limitations of genetic testing</li><li>Anticipating incidental (or secondary) findings and planning how or if they will be communicated</li><li>Communicating the possible risks of harm</li><li>Discussing how the genetic information collected might affect entire families, including members who do not know or participate in the research being conducted</li><li>Discussing if the biospecimens will be used for future research, and if the subject would be re-consented or not</li><li>Disclosing if biospecimens may be used for commercial profit, and whether subjects will share in any commercial profit from the research</li><li>Stating whether clinically relevant research results, including individual research results, will be disclosed to subjects, and if so, under what conditions</li><li>Explaining whether the research will (if known) or might include whole genome sequencing</li></ul><h2 id="re-contacting-subjects">Re-Contacting Subjects</h2><p>The consent process must also take into account whether and when investigators will re-contact subjects.</p><p>Investigators who have collected biological material and conducted genetic analyses of it often want to be able to get back in touch with the sources of the material. Such re-contact can serve a number of scientific purposes, including obtaining new information about the individual's health status, providing results from research, and the ability to consent individuals for future research.</p><p>To be able to re-contact subjects, it is necessary that the samples and tissue sources be linked, perhaps by a code. Re-contacting subjects often creates a number of risks for the subject. If the investigator plans to re-contact subjects, this must be disclosed in the consent document. The plans for re-contact and any associated materials provided to subjects to help them interpret the findings must be approved by the IRB.</p><h2 id="risks-in-genetics-research">Risks in Genetics Research</h2><p>Where some biomedical research presents the possibility of serious risks of harm to subjects, the risks of genetics research are less established. Aside from the generally low likelihood of injury from drawing blood, the harms to subjects that might result once genetic data are obtained range from major to minor, and may be physiological, psychosocial, socially stigmatizing, and economic.</p><h3 id="examples-of-harms">Examples of Harms</h3><ul><li>The idea of testing can cause pre- and post-test anxiety, which can vary with existence/availability of treatment for genetic conditions.</li><li>Subjects are also frequently concerned about risks to employment and insurability, although the Genetic Information Non-Discrimination Act (GINA) and the Affordable Care Act provide substantial protections against employment and health insurance discrimination.</li><li>Genetic research can produce discoveries about entire subpopulations, which may correspond to racial or ethnic groups. Racial, ethnic, and tribal groups may be concerned about becoming associated with high risk to certain diseases or undesirable traits.</li><li>Disclosure of results may cause social stigma within the family or beyond.</li><li>Re-identification can present potential risks to subject’s privacy</li></ul><p>Another problem perhaps is the situation where family members who did not participate in the genetic research may face similar risks of harm.</p><h2 id="summary">Summary</h2><p>Genetic research, and its continued advancement, presents challenges to both Institutional Review Boards (IRBs) and investigators. The potential of re-contacting subjects and the commensurate need to at times link specimens to identifiable private information, add risks that are not always present in other biomedical research.</p><h2 id="reference">Reference</h2><ul><li>Protection of Human Subjects, 45 CFR § 46 (2017).</li></ul><h2 id="quiz">Quiz</h2><h3 id="question-1">Question 1</h3><p>A researcher conducting a study on the incidence of mutations to the MDR-1 gene in breast cancer has preliminary evidence of a link between mutated MDR-1 and early recurrence. The researcher begins a new trial using prospectively collected tissue samples to further examine the link between the genetic abnormality and disease progression. He believes that he may want to re-contact some or all of the tissue donors (subjects) if the research indicates a positive link between MDR-1 mutation and early disease recurrence. What is the best procedure for an investigator planning to re-contact study subjects who provided tumour tissue for the study?</p><ul><li><del>Subsequent re-contact of subjects from a genetic study in which identifiable data is collected is permissible only if the patient's physician approves.</del></li><li><del>There is no best course - such re-contact presents too many risks for the subject and thus is always unethical.</del></li><li><strong>The investigator should disclose the intention to re-contact during the consent process. That is, before acquiring and analysing the sample for research.</strong></li><li><del>The samples and genetic information should be initially coded. The investigator could break the code to contact subjects as he deems necessary.</del></li></ul><p><strong>Comments</strong>:</p><p>Coding samples is a good idea, but, not always necessary. Contacting the patient's physician is not an appropriate approach as this could result in a breach of privacy or confidentiality.</p><h3 id="question-2">Question 2</h3><p>A researcher is investigating the genetic biomarkers of adult subjects with autism. The research study involves a single blood draw (about one teaspoon of blood) and then genetic analysis of the specimen. How should the researcher inform prospective subjects about the potential risks of harm of this genetic research study?</p><ul><li><del>By emphasizing the risk of bruising from the blood draw.</del></li><li><strong>By carefully disclosing (without overstating) the possibilities of economic or insurance bias and of social stigma to the subject and potentially to others in the subject’s family.</strong></li><li><del>By minimizing the risks and emphasizing the importance of the work to finding the "Cure" for autism.</del></li><li><del>By noting that most genetic research risks are quite low and the blood sample will be coded and not contain the subject’s name.</del></li></ul><p><strong>Comments</strong>:</p><p>The best way to inform subjects about potential risks from participating in genetics research is to carefully disclose the possibilities of economic or insurance bias and of social stigma to the subject and potentially to others in the subject’s family.</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Biomedical Refresher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Methodologies in Biomedical Research</title>
      <link href="2021/03/13/2021-03-13-Methodologies-in-Biomedical-Research/"/>
      <url>2021/03/13/2021-03-13-Methodologies-in-Biomedical-Research/</url>
      
        <content type="html"><![CDATA[<h1 id="methodologies-in-biomedical-research">Methodologies in Biomedical Research</h1><h2 id="introduction">Introduction</h2><p>Biomedical researchers frequently do research that employs few or no physical procedures, and therefore has little or no risk of physical harm. Examples include:</p><ul><li>Assessments of studies of care quality, patient satisfaction, or outcomes</li><li>Explorations of beliefs, attitudes, and care decisions</li><li>Studies of the relationship between genetics and disease</li><li>Randomized trials of behavioural interventions</li></ul><p>Such studies share methods and risks with more narrowly defined social and behavioural research (SBR) and are often reviewed by social and behavioural-focused IRBs. Also, many biomedical studies whose procedures are primarily physical may also include non-physical procedures (for example, quality of life assessments as an outcome measure in a clinical trial).</p><p>Researchers accustomed to thinking in terms of clinical trials might overlook or underestimate the risks of harm from interviews, surveys, observation, and other methods from the social sciences. Additionally, the federal regulations for protecting human research subjects, although intended to apply equally to all research, often are written in the terminology of biomedical research and physical risks of harm.</p><p><strong>Learning Objective</strong></p><p>By the end of this module, you should be able to:</p><ul><li>Identify the risks from non-biomedical research methods and some of the ways these risks can be minimized.</li></ul><h2 id="risks">Risks</h2><p>Risks from the methods listed in the introduction above fall into several broad categories. They can arise from the procedures themselves and/or from how the i are stored, analysed, or disseminated.</p><h3 id="psychological">Psychological</h3><p>This risk could range from mild embarrassment about sexual topics to serious depression from recalling traumatic experiences (such as, sexual abuse or war injuries) or thinking about current physical limitations (for example, amputations).</p><p>Depending on the nature and likelihood of significant psychological discomfort, the protocol might need to include "safety nets" for participants, such as having a trained therapist or mental health counsellor available.</p><p>The consent process should discuss both the risks and the provisions for dealing with them. Subjects who reveal suicidal ideation or plan should be followed up both for ethical reasons and for meeting state-mandated reporting requirements. The consent process should state how the researcher will respond to such information, and take particular care to explain when "cry for help" answers cannot be followed up (for example, if the data are anonymous).</p><h3 id="social">Social</h3><p>Social risk refers to adversely affecting how a person is viewed by others "if anyone ever found out." Inadvertently revealed interview responses about sexuality might cause ostracism from a sports team or college fraternity.</p><p>Attitudes and beliefs different from those held by the subject's social group could label the person as an outsider. Details about health status or family history can be stigmatizing. Because interviews and qualitative surveys may often involve very intimate details, this type of risk can be considerable. Reduction of risk comes mainly from protecting the confidentiality of identifiable information. Socio-cultural factors can require consultation with an expert on the subject matter.</p><p>IRBs and researchers are encouraged to treat expertise in social and behavioural contexts the same as they treat expertise in the biological sciences when dealing with aspects of research studies beyond the IRB’s knowledge.</p><h3 id="economic">Economic</h3><p>Economic damage can result from job demotion or even loss. An example is a study of alcohol use in which a subject's report of drinking before work or on the job is somehow learned by an employer.</p><p>Quality and outcome studies could identify physicians whose provision of care is seen to be substandard. Assuring the confidentiality of research data is the best protection, although the consent process should discuss potential harms.</p><h3 id="legal">Legal</h3><p>Researchers are rarely required to report illegal activities that subjects reveal, the important exception being mandated reporting of current abuse of a child or dependent elder; state law should be followed and this exception to assurances of confidentiality should be explained in the consent process. External audits of data by a funding agency or the IRB, and legal subpoena, could all expose data in a manner that creates legal risks.</p><p>Researchers who will gather information about illegal activities should consider obtaining a federal Certificate of Confidentiality from the National Institutes of Health to help protect researchers from forced disclosure of data (NIH 2016), although it should be noted that Certificates of Confidentiality have occasionally been successfully challenged. <em><a href="javascript:showonlyone(&#39;newboxes1&#39;);">Read more about Certificate of Confidentiality</a></em>.</p><h3 id="group-harms">Group Harms</h3><p>Reporting of grouped data can cause harm to a larger group even when individual risks are managed and identifiable data are kept confidential. Published reports about beliefs, attitudes and behaviour, or infection or injury rates, could stigmatize a tribe, ethnicity, geographic area, or other defined group.</p><p>Researchers should be sensitive to this possibility when describing subject population and recruitment strategies.</p><h3 id="risk-to-others">Risk to Others</h3><p>If a subject provides information about another person (for example, a wife reports her husband's health behaviour, or a subject in a genetics study lists the medical history of all biological relatives), the so-called "secondary subject" or "third-party subject" could be exposed to any of the risks discussed above.</p><p>If people have not consented to have their information used in the research, data about them should not be recorded in a way that could identify them. It might be obvious that names should not be included, but indirect identifiers should also be avoided (replace actual birth date with age; describe relationship to the primary subject in very general terms).</p><p>Genetic studies carry the risk of revealing previously secret illegitimacy or adoption; whenever possible, consent should be requested from all people represented in a family tree.</p><h2 id="summary">Summary</h2><p>How both researchers and the public perceive risk is a matter for consideration. There seems to be a general tendency for people to over-estimate the probability of something happening if the outcomes are severe.</p><p>Conversely, we tend to underestimate the likelihood of events with less severe outcomes. The risks discussed above might be underestimated because they are harder to identify and measure; both the type and degree of harm are often subjective, and how to prevent or mitigate harm is less clear.</p><p>When a study contains both physical and non-physical procedures, comparison of the risks in the two types of activities could result in underestimating non-physical risks.</p><h2 id="additional-resources">Additional Resources</h2><ul><li>National Institutes of Health (NIH). 2016. “<a href="https://humansubjects.nih.gov/coc/index">Certificates of Confidentiality</a>.” Last updated May 18.</li><li>National Institutes of Health (NIH). 2017. “<a href="https://grants.nih.gov/grants/guide/notice-files/NOT-OD-17-109.html">Notice of Changes to NIH Policy for Issuing Certificates of Confidentiality</a>.” Accessed September 14.</li><li>Protection of Human Subjects, 45 CFR § 46 (2017)</li></ul><h2 id="quiz">Quiz</h2><h3 id="question-1">Question 1</h3><p>A medical researcher is comparing the results of two surgical techniques to correct a skeletal deformity. There are many obvious risks of participating in this treatment trial, and participants are carefully informed about the likelihood of infection, poor treatment outcome, further damage, etc. The research design includes a questionnaire given to patients about their quality of life before and after the surgery. Because this is just a simple paper and pencil questionnaire, it does not add any risks to the overall study design. Is this true or false?</p><ul><li><del>True</del></li><li><strong>False</strong></li></ul><p><strong>Comment</strong>:</p><p>Such a blanket statement requires the answer "False." Depending on the nature of the questions and the sensitivity of the information requested, very significant additional risks to privacy and confidentiality could be placed upon the study participant.</p><h3 id="question-2">Question 2</h3><p>Which of the following research scenarios would present no likelihood of harm to the participants?</p><ul><li><del>An anonymous telephone interview, conducted over a toll-free number, of women who have experienced domestic violence.</del></li><li><del>A published report on problematic behaviour and poor school performance among children of different ethnic groups in a known city. The results are published in aggregate, so that there is no way to identify children from a specific school or neighbourhood.</del></li><li><del>A survey about sexual attitudes, beliefs, and practices, distributed by an HIV/AIDS prevention study to people randomly selected from a commercial mailing list.</del></li><li><strong>None of the above</strong></li></ul><p><strong>Comment</strong>:</p><p>All of the scenarios present significant risk.</p><p>Answering questions about distressing experiences may upset subjects. Furthermore, because the interview is anonymous, the researcher cannot re-contact participants to offer counseling.</p><p>Study results might easily be generalized by teachers, school officials, and the general public, so as to stigmatize all children in a given ethnic group.</p><p>"A survey about sexual attitudes, beliefs and practices, mailed by an HIV/AIDS prevention study to people randomly selected from a commercial mailing list" includes several sources of potential harms, including:</p><ul><li>Alarm/concern about being approached for a study about an often lethal and socially stigmatizing disease.</li><li>The possible loss of confidentiality if the questionnaires are handled inappropriately.</li><li>That others may assume that the person receiving a mailing from an HIV/AIDS group does in fact have HIV/AIDS.</li></ul><h3 id="question-3">Question 3</h3><p>A researcher proposes to conduct a survey about sexual attitudes, beliefs, and practices. The survey will be mailed out by an HIV/AIDS prevention group to people randomly selected from a commercial mailing list. All of the following are potential harms to participants except:</p><ul><li><del>Alarm or concern about being approached for a study about HIV/AIDS.</del></li><li><strong>That researcher might receive incomplete data from participants who do not complete the survey.</strong></li><li><del>The possible loss of confidentiality if the questionnaires are handled inappropriately.</del></li><li><del>Others may assume that the person receiving the mailing has HIV/AIDS.</del></li></ul><p><strong>Comment</strong>:</p><p>The potential for “receiving incomplete data” based on participants not completing the survey is not considered a potential harm.</p><h3 id="question-4">Question 4</h3><p>Which of the following research scenarios would present no likelihood of harm to the participants?</p><ul><li><strong>An interview of elementary school children about their preferred literary genres.</strong></li><li><del>A study on problematic behaviour and poor school performance among children of different ethnic groups in a known city.</del></li><li><del>An anonymous telephone interview, conducted over a toll-free number, of women who have experienced domestic violence.</del></li><li><del>A survey about sexual attitudes, beliefs, and practices, mailed by an HIV/AIDS prevention study to people randomly selected from a commercial mailing list.</del></li></ul><p><strong>Comment</strong>:</p><p>With the exception of the interview of elementary school children, all of the other scenarios present risk, from minimal to greater than minimal, for the individuals participating in the research.</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Biomedical Refresher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Regulations and Process</title>
      <link href="2021/03/13/2021-03-13-Regulations-and-Process/"/>
      <url>2021/03/13/2021-03-13-Regulations-and-Process/</url>
      
        <content type="html"><![CDATA[<h1 id="regulations-and-process">Regulations and Process</h1><h2 id="introduction">Introduction</h2><p>Regulations require Institutional Review Board (IRB) review and approval for research involving human subjects (human subjects research). Common Rule regulations generally apply to research funded or conducted by the federal government. U.S. Food and Drug Administration (FDA) regulations generally apply to any clinical investigation involving an FDA regulated product. International regulatory authorities may have additional requirements.</p><p>In general the Common Rule standards are the most restrictive and many research institutions, professional organizations, and scholarly journals apply equivalent protections to all human subjects research, regardless of the source of funds.</p><p>Although federal regulations refer to IRBs, an institution may have chosen a different name for this committee, such as Independent Ethics Committee (IEC) or Research Ethics Board (REB). IRBs review human subjects research to comply with federal regulations. The basis of this review requirement includes two components, "research" and "human subject."</p><p><strong>Learning Objectives</strong></p><p>By the end of this module, you should be able to:</p><ul><li>Describe the regulatory definition of "research."</li><li>Identify the components of the definition of "human subject."</li></ul><h2 id="research">Research</h2><p>Research is defined in the Common Rule (45 CFR 46, Subpart A) as "a systematic investigation, including research development, testing, and evaluation, designed to develop or contribute to generalizable knowledge" (Protection of Human Subjects 2017).</p><p>This definition, however, does lend itself to debate. Institutions may interpret the term generalizable knowledge in different ways. For example, one institution may consider generalizable knowledge the sharing of research information with anyone other than the research team. Other institutions may consider generalizable knowledge to be that which is shared only with others outside the institution or available through public access.</p><h2 id="human-subject">Human Subject</h2><p>According to the Common Rule (Protection of Human Subjects 2017), a human subject is "a living individual about whom an investigator (whether professional or student) conducting research:</p><ol type="1"><li>Obtains information or biospecimens through intervention or interaction with the individual, and uses, studies, or analyses the information or biospecimens; or</li><li>Obtains, uses, studies, analyses, or generates identifiable private information or identifiable biospecimens."</li></ol><h3 id="important-elements-of-this-definition">Important Elements of This Definition</h3><p><img src="https://www.citiprogram.org/citidocuments/_001pic/1502.jpg" /></p><h3 id="what-about-the-information-elements">What about the “information” elements?</h3><p><img src="https://www.citiprogram.org/citidocuments/_001pic/1503.jpg" /></p><h3 id="fda-definitions">FDA Definitions</h3><p>It is important to note that the U.S. Food and Drug Administration (FDA) defines a human subject at 21 CFR 50 as “an individual who is or becomes a participant in research, either as a recipient of the test article or as a control. A subject may be either a healthy individual or a patient" (Protection of Human Subjects 2016).</p><p>The FDA does not define “research,” but does define “clinical investigation” as “any experiment that involves a test article and one or more human subjects” (Protection of Human Subjects 2016).</p><h2 id="human-subjects-research">Human Subjects Research</h2><p>Human subjects research does not require direct contact with a subject, but may include the systematic collection of identifiable information about individuals.</p><p>Applying the two Common Rule definitions of human subject and research gives a broad spectrum of activities that require prior review and approval by an IRB. It is critical that researchers understand how their institution defines the term generalizable knowledge to know when they should be presenting their proposed research for review and approval.</p><h2 id="summary">Summary</h2><p>The Common Rule applies to all research involving human subjects conducted, supported, or otherwise subject to regulation by any of those federal departments or agencies that have chosen to adopt the regulation. A critical component of the Common Rule is the concept of human subjects research, which has at its foundation two definitions -- research and human subject.</p><h2 id="references">References</h2><ul><li>Protection of Human Subjects, 21 CFR § 50 (2016).</li><li>Protection of Human Subjects, 45 CFR § 46 (2017).</li></ul><h2 id="quiz">Quiz</h2><h3 id="question-1">Question 1</h3><p>Hospitals routinely and systematically collect information on various services they provide. For example, they may collect data from the pharmacy to see if drugs are being dispensed accurately, or they may hand out satisfaction questionnaires to assess if patients are happy with the service being provided to them. Which of the following is the best reason to explain why these data collections may not require prior IRB approval?</p><ul><li><strong>The hospitals are collecting these data with the intent to maintain or better their individual services and facilities programs, with no intent to share or report the results with any other entity.</strong></li><li><del>Entities as large as hospitals are generally considered exempt from the requirement to submit proposed activities to their local IRBs.</del></li><li><del>If the data are collected in a coded manner, with no actual names attached to them, then the activity is not considered research, and therefore does not require IRB approval.</del></li><li><del>All systematic collections of data on humans must be considered human subject research, requiring IRB approval.</del></li></ul><p><strong>Comment</strong>: Quality control or quality assurance studies in which the data collected is not intended for publication or dissemination to other institutions generally do not require IRB approval. Collecting data in a coded manner is a common method used in research as well as quality control studies.</p><h3 id="question-2">Question 2</h3><p>Which of the following activities would not constitute human subjects research under the Common Rule?</p><ul><li><del>A study that requires collecting a portion of a participant’s health information obtained during standard clinical care.</del></li><li><del>A study using a quality of life questionnaire in which the participants reveal answers about how they perceive their health during receipt of clinical care.</del></li><li><strong>A study of cancer rates across various states using only public health records.</strong></li><li><del>Research involving the implantation and study of an investigational pacemaker.</del></li></ul><p><strong>Comment</strong>: A study of cancer rates using public health records would not constitute human subjects research. The use of the public health records means that there is no interaction or intervention with human subjects and the records do not contain identifiable information. Therefore, the definition of “human subject” is not met.</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Biomedical Refresher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>History and Ethical Principles</title>
      <link href="2021/03/13/2021-03-13-History-and-Ethical-Principles/"/>
      <url>2021/03/13/2021-03-13-History-and-Ethical-Principles/</url>
      
        <content type="html"><![CDATA[<h1 id="history-and-ethical-principles">History and Ethical Principles</h1><h2 id="introduction">Introduction</h2><p>The <em>Belmont Report</em>, released in 1979 by the National Commission for the Protection of Human Subjects in Biomedical and Behavioural Research, provides the ethical framework for the federal regulations designed to protect human research subjects. The <em>Belmont Report</em> is required reading for all CITI Program participants.</p><p>This refresher reviews the principles in the <em>Belmont Report</em>. References to the Belmont principles within this module reflect those principles outlined in the <em>Belmont Report</em>.</p><p><strong>Learning Objectives</strong></p><p>By the end of this module, you should be to:</p><ul><li>Describe the principles in the <em>Belmont Report.</em></li><li>Identify the role of the principles in the case study presented.</li></ul><h2 id="the-belmont-principles">The Belmont Principles</h2><h3 id="respect-for-persons">Respect for Persons</h3><p>The principle of respect for persons includes two main components:</p><ul><li>Individuals should be treated as autonomous agents.</li><li>Those who have diminished autonomy are entitled to additional protection.</li></ul><p>Rules derived from the principle of respect for persons include:</p><ul><li>The requirement to obtain informed consent.</li><li>The requirement to respect the privacy of research subjects.</li></ul><h3 id="beneficence">Beneficence</h3><p>This principle reminds us to minimize harms and maximize benefits within the constraints of sound research design.</p><p>Rules derived from the principle of beneficence include:</p><ul><li>The requirement to use procedures that increase benefits and decrease harms whenever consistent with sound research design.</li><li>The requirement to make sure the researchers are able to perform the procedures and handle the risks.</li><li>The prohibition of research that is without a favourable risk-benefit relationship.</li></ul><h3 id="justice">Justice</h3><p>The principle of justice requires us to treat people fairly and design research so that its burdens and benefits are shared equitably.</p><p>Rules derived from the principle of justice include:</p><ul><li>The requirement to select subjects equitably.</li><li>The requirement to avoid exploitation of vulnerable populations or populations of convenience.</li></ul><h2 id="balancing-the-three-principles">Balancing the Three Principles</h2><p>It was the National Commission's intention that each of the three principles should have equal moral force. This means that in some situations, the three principles might be in conflict with one another.</p><p>For example, we might derive from the principle of respect for persons that we should limit the involvement of children in research because children are unable to choose for themselves. But, we might derive from the principle of justice that we must involve children in studies so that children will have the opportunity to benefit from the research.</p><p>The <em>Belmont Report</em> says that one principle does not always outweigh another. Rather, we are required to consider each case separately and on its own merits in light of all three principles.</p><h2 id="case-study">Case Study</h2><p>An investigator submits a research study for review by the Institutional Review Board (IRB) at her university. The principal investigator is a faculty member and dean of students at an institution that trains students for a number of health professions. She plans on conducting a study to compare physical therapy students to medical doctor (MD) students on each group's ability to assess ankle-related problems. The investigator hopes to determine whether differences in curricula have an effect on the different groups' abilities. The results of the study might bring about changes to the curricula.</p><p>Teams of students in each group meet with athletes from the university's sports medicine clinic that have experienced an injury but do not require emergency medical care. Teams composed of one medical and one physical therapy student will see the athletes. The team members are to make their determinations, but will not share any assessment information with each other and will do their assessments separately. They will use a researcher-created assessment form to record these assessments. Each team member will complete a separate assessment and provide it to a member of the research team who will also be present. Following the team assessments, a resident will assess the athlete per the standard procedures of the clinic and will be asked to also complete the same assessment form. The resident's assessment will then be linked to the form completed by each team member.</p><p>In order to protect the privacy and confidentiality of subjects and athletes, the research records will only contain notation of the type of student and whether the student's assessment was in keeping with that of the resident. No identifying information or athlete information will be associated with the data collected and once the researcher or research team member has put the results of each assessment into a data recording sheet, the individual sheets will be destroyed. At the conclusion of the resident's assessment, he/she will meet with the students separately to review their individual assessments. The resident will not share any medical or personal information other than the injury assessment.</p><p>Faculty advisers will recruit students for each group for the study during a weekly group meeting. Students must have completed applicable coursework related to foot and leg disorders and injuries. Students who agree to participate in the study will then be consented by a member of the research team (who is not in administration, but may be another faculty member in the program who does not currently have the student in class). The principal investigator will not consent students. A consent form, requiring signature, will be used with the medical and physical therapy students. The consent process will occur in a private therapy room in the school's clinic building. Students that agree to participate will not receive credit for the activity; however, as a result of their participation they will have increased exposure to the topic area and the opportunity to do more assessments. Participation in the study will not conflict with the students' other academic responsibilities; however, it is expected to take approximately 1-2 hours per week for fourteen weeks. Students may withdraw from the research at any time and if available may participate in other lab or clinical activities occurring at the same time.</p><p>The athletes, although not the focus of the study, will also be consented, as data about them will be collected through intervention/interaction. At the time of admission, in a private meeting room a member of the research team will lead the consent process. The consent process will be documented via a signed consent form. The consent form will note that the resident will meet with the students after the assessment to review the individual findings for training purposes. Athletes electing not to participate will receive the standard care of the clinic, which is to be assessed by a resident.</p><h3 id="review-by-an-irb-in-light-of-the-belmont-principles">Review by an IRB in light of the Belmont Principles</h3><p>Using the <em>Belmont Report</em> principles, consider the research presented in the case as though you were a member of the IRB.</p><h4 id="respect-for-persons-1">Respect for persons</h4><ul><li><p><strong>Does the consent process minimize the possibility of coercion or undue influence?</strong></p><p>One could argue that the process after recruitment does minimize the possibility of coercion or undue influence by assigning the process to a member of the research team; however, the consent process is often conceptualized as beginning at the point of recruitment and it could be argued that having the faculty advisers involved in the consent process do not minimize the possibility of coercion or undue influence. The IRB might ask the investigator to use an approach that further minimizes the possibility of coercion or undue influence, such as posting flyers or distributing flyers in class. The IRB might also ask the investigator to describe steps that they will take to minimize the possibility of coercion or undue influence, such as be highly aware of verbal or non-verbal cues related to any tacit unwillingness to take part and accepting those as negative answer regarding participation.</p></li><li><p><strong>Does this study require additional protections to be put in place for vulnerable populations to protect their rights and welfare?</strong></p><p>Students as research subjects, particularly when a member of administration is involved in the research, may create a situation where the students are vulnerable to coercion or undue influence and the consent process is conducted by an authority figure, such as a professor. Recall also that while the Common Rule's notation regarding vulnerable subjects highlights groups such as children, prisoners, and individuals with impaired decision-making capacity, with respect to additional safeguards in cases where there is the potential for coercion or undue influence, the regulation does not limit to the categories of subjects referenced. It is during the time of IRB review that vulnerability, particularly as a group, should be considered.</p><p>The research design presented here includes methods to minimize the possibility of coercion or undue influence by allowing the students to withdraw at any time without penalty and by having the consent process conducted by an individual without direct authority over the student, or by having the investigator describe steps that they will take to minimize the possibility of coercion or undue influence, such as be highly aware of verbal or non-verbal cues related to any tacit unwillingness to take part and accepting those as negative answer regarding participation. Note that while the regulation requires minimization of risks, there is not an expectation that efforts will prevent risks entirely.</p><p><strong>Does this study adequately protect the privacy of subjects and maintain the confidentiality of data?</strong></p><p>The researcher's plan of conducting consent and study-related activities in a private setting protects the privacy of subjects. The researcher's plan of not retaining identifying information is consistent with the promises made to the subjects and therefore is an adequate provision to maintain the confidentiality of data. The evaluation of athletic injuries is not a sensitive topic. For more sensitive topics, like sexual behavior or mental illness, one could argue, that the recruitment of subjects in a group setting where the group knows who decides to participate and who does not, may adversely affect the privacy of the individuals who agree to participate. If a study involved a more sensitive research topic, the IRB might request modification of the recruitment process where, for example, the announcement might be made, but the interested students would contact the research team privately about interest in participating. That procedure does not appear necessary for this study, but it serves to demonstrate an option the IRB might exercise given the nature of the research.</p></li></ul><h4 id="beneficence-1">Beneficence</h4><ul><li><p><strong>What are the risks? Have they been minimized by using procedures consistent with sound research design that do not unnecessarily expose subjects to risk?</strong></p><p>If the research involves no more than minimal risks to subjects, then risks have been minimized by using procedures consistent with sound research design that do not necessarily expose subjects to risk.</p></li><li><p><strong>Have risks been minimized whenever possible by using procedures already being performed for the diagnostic or treatment purposes?</strong></p><p>This is not applicable to this study because the study procedures, the additional assessments, do not themselves add clinical risks and the athletes do receive standard care.</p></li><li><p><strong>Are risks to subjects reasonable in relation to the anticipated benefits to subjects, if any, and the importance of the knowledge expected to result?</strong></p><p>The risks presented by the research are no more than minimal, and they are also reasonable in relation to anticipated benefits to the field of study.</p><p>In making the assessment, the IRB might consider the risks noted here as well as the potential benefit to future students who might benefit from improvements in curricula. This improvement might be at the researcher's university as well as at other institutions that offer either degree program.</p></li></ul><h4 id="justice-1">Justice</h4><ul><li><p><strong>Does recruitment for the study target the population that will benefit from the research?</strong></p><p>Yes, the proposed study does appear to recruit from those who, as a group, might benefit.</p></li><li><p><strong>Does the recruitment unfairly target a population?</strong></p><p>It does not appear to be the case as described.</p></li><li><p><strong>Are the inclusion/exclusion criteria fair?</strong></p><p>The inclusion/exclusion are fair.</p></li></ul><h2 id="summary">Summary</h2><p>The three <em>Belmont Report</em> principles should have equal moral force, and be balanced when considering human subjects research.</p><h2 id="quiz">Quiz</h2><h3 id="question-1">Question 1</h3><p>According to the Belmont Report, implementing the principle of respect for persons involves:</p><ul><li><strong>Making it clear to subjects that they may withdraw from a study.</strong></li><li><del>Ensuring that subject selection is fair.</del></li><li><del>Ensuring that risks to subjects are no more than minimal.</del></li><li><del>Providing compensation that is commensurate with time requirements.</del></li></ul><p><strong>Comment</strong>:</p><p>The principle of respect for persons requires that subjects understand that they may withdraw from a study even if they initially agreed to participate. Equitable subject selection is related to the principle of justice. There is no requirement that research subjects not be exposed to more than minimal risk, although the principle of beneficence does require that risks are minimized whenever possible. There is no regulatory requirement that subjects be compensated for research participation.</p><h3 id="question-2">Question 2</h3><p>The Belmont principle of beneficence requires that:</p><ul><li><strong>The use of procedures that increase benefits and decrease harms whenever consistent with sound research design.</strong></li><li><del>The study makes a significant contribution to generalizable knowledge.</del></li><li><del>Risks are managed to no more than minimal.</del></li><li><del>Subjects derive individual benefit from study participation..</del></li></ul><p><strong>Comment</strong>:</p><p>The principle of beneficence does not require that individual subjects benefit from a research study. Many studies are designed to contribute to a field of knowledge rather than to directly benefit the participants. The principle does not require that a study make a significant contribution to generalizable knowledge, because research is, by definition, exploratory in nature. Beneficence does not require that risks to subjects be managed to no more than minimal risk, but rather that risks to subject are minimized by using procedures consistent with sound research design that do not unnecessarily expose subjects to risk.</p><h3 id="question-3">Question 3</h3><p>According to the Belmont Report, the moral requirement that there be fair selection of research subjects, expresses the principle of:</p><ul><li><del>Respect for persons</del></li><li><del>Non-maleficence</del></li><li><strong>Justice</strong></li><li><del>Beneficence</del></li></ul><p><strong>Comment</strong>:</p><p>The principle of justice dictates that one group should not unfairly bear the risks of participating nor should one group unfairly benefit from the research, and that subjects may not be used simply as a population of convenience. The principle of beneficence pertains to issues regarding the acceptable relationship of risk and benefit in study design. The principle of respect for persons pertains to informed consent.</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Biomedical Refresher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Instructions</title>
      <link href="2021/03/13/2021-03-13-Instructions/"/>
      <url>2021/03/13/2021-03-13-Instructions/</url>
      
        <content type="html"><![CDATA[<h1 id="instructions">Instructions</h1><p>The <em>Biomed Refresher course includes cases and scenarios that highlight important elements from the modules in the Human Subjects Research (HSR) </em>Biomedical (Biomed) Basic* course. This refresher course is designed to be completed after completing the <em>Biomed Basic</em> course.</p><h2 id="course-requirements">Course Requirements</h2><ul><li>Review the <strong><a href="http://www.hhs.gov/ohrp/humansubjects/guidance/belmont.html">Belmont Report</a></strong>.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Biomedical Refresher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>International Research</title>
      <link href="2021/03/13/2021-03-13-International-Research/"/>
      <url>2021/03/13/2021-03-13-International-Research/</url>
      
        <content type="html"><![CDATA[<h1 id="international-research">International Research</h1><h2 id="introduction">Introduction</h2><p>Research conducted at multiple sites may present difficult challenges both for investigators and Institutional Review Boards (IRBs). These challenges may be further heightened with the addition of an international component to the research. A critical element that must be understood by all parties is the concept of "engagement."</p><p>This module reviews the concept of engagement and its application to international research.</p><p><strong>Learning Objectives</strong></p><p>By the end of this module, you should be able to:</p><ul><li>Define "engagement" with respect to research.</li><li>Identify the options that may exist for international collaborators in human subjects research.</li></ul><h2 id="engagement-in-research">"Engagement" in Research</h2><p>The Office for Human Research Protections (OHRP) provides guidance on determining whether an organization is either engaged or not engaged in research.</p><p>Briefly, an "engaged" non-U.S. organization is one whose employees or agents participate in the recruitment of subjects, conduct the consent process, obtain consent from subjects, intervene with human subjects for research purposes, or receive the private, identifiable information of subjects (OHRP 2008).</p><p>Organizations are not considered engaged in the research if their employees or agents:</p><blockquote><p>Inform prospective subjects about the availability of the research; provide prospective subjects with information about the research (which may include a copy of the relevant informed consent document and other IRB approved materials) but do not obtain subjects' consent for the research or act as representatives of the investigators; provide prospective subjects with information about contacting investigators for information or enrolment; and/or seek or obtain the prospective subjects' permission for investigators to contact them (OHRP 2008).</p><p>For a full description of the concept of engagement see OHRP's <a href="http://www.hhs.gov/ohrp/policy/engage08.html"><em>Guidance on Engagement of Institutions in Human Subjects Research.</em></a></p></blockquote><h2 id="non-u.s.-collaborations">Non-U.S. Collaborations</h2><p>If research funded, conducted, or supported by the U.S. Department of Health and Human Services (HHS) involves collaboration with an organization that is engaged in research in a foreign country, the organization will need to have an assurance filed with OHRP.</p><p>The assurance is the same Federal wide Assurance (FWA) for U.S. and non-U.S. institutions (OHRP 2017). The assurance commits the organization to having procedures in place that ensure subjects will be protected in a manner commensurate with the 45 CFR 46, Subpart A (the Common Rule). Other federal agencies sponsoring international research may use the HHS assurance process, but they may also choose alternate assurance processes.</p><p>Foreign collaborators may have their own IRBs or comparable local ethics review committees. Some international research is carried out without the involvement of collaborators. For example, political scientists from the U.S. may interview people on the street in Germany or U.S. environmental scientists may interview fishermen in Panama. Federal regulations do not require on-site, local review in such cases; however, the researcher and the IRB that reviews the activity should be mindful of foreign regulations or other requirements that govern research on the local population.</p><h2 id="summary">Summary</h2><p>It is important to understand when an organization is engaged in the research. If a collaborating organization is not engaged in the research, assurances of compliance are not required. If a collaborating organization is engaged, then an FWA is required.</p><h2 id="reference">Reference</h2><ul><li>U.S. Department of Health and Human Services (HHS), Office for the Protection of Human Subjects (OHRP). 2008. "<a href="http://www.hhs.gov/ohrp/policy/engage08.html">Guidance on Engagement of Institutions in Human Subjects Research</a>." Accessed July 11, 2017.</li></ul><h2 id="resources">Resources</h2><ul><li>Protection of Human Subjects, 45 CFR § 46 (2017).</li><li><a href="https://clinregs.niaid.nih.gov/">ClinRegs.gov</a> offers free access to country-specific information on a wide range of clinical research regulations and requirements, including ethical review, informed consent, vulnerable populations, and a variety of other topics.</li><li>U.S. Department of Health and Human Services (HHS) Office for the Protection of Human Subjects (OHRP). 2020. "<a href="https://www.hhs.gov/ohrp/international/compilation-human-research-standards/index.html">International Compilation of Human Research Standards."</a></li><li>U.S. Department of Health and Human Services (HHS) Office for the Protection of Human Subjects (OHRP). 2018. "<a href="https://www.hhs.gov/ohrp/international/social-behavioral-research-standards/index.html">Listing of Social-Behavioral Research Standards</a>."</li></ul><h2 id="quiz">Quiz</h2><h3 id="question-1">Question 1</h3><p>Which of the following activities constitutes engagement in research?</p><ul><li><strong>Obtaining informed consent and conducting research interviews.</strong></li><li><del>Providing potential subjects with written information about a study.</del></li><li><del>Informing prospective subjects about the availability of research.</del></li><li><del>Obtaining subjects' permission for researchers to contact them.</del></li></ul><p><strong>Comment</strong>:</p><p>If an organization obtains informed consent and conducts research interviews it is engaged in research. Providing potential subjects with information, obtaining permission, or providing prospective subjects about the availability of the research are not considered to constitute engagement in research</p><h3 id="question-2">Question 2</h3><p>If federally funded research involves collaboration with an organization that is "engaged" in research in a foreign country, the foreign organization can rely on the U.S. institution’s IRB for its review.</p><ul><li><strong>True</strong></li><li><del>False</del></li></ul>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Social Behavioural Educational Refresher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Conflicts of Commitment and Conscience</title>
      <link href="2021/03/13/2021-03-13-Conflicts-of-Commitment-and-Conscience/"/>
      <url>2021/03/13/2021-03-13-Conflicts-of-Commitment-and-Conscience/</url>
      
        <content type="html"><![CDATA[<h1 id="conflicts-of-commitment-and-conscience">Conflicts of Commitment and Conscience</h1><h2 id="introduction">Introduction</h2><p>There are many types of ethical conflicts that can occur in research. The most widely discussed are the financial conflicts of interest (FCOIs) that happen when individuals have a monetary stake relating to their research. Federal regulations have been enacted regarding these types of conflicts. However, other more subtle conflicts can also affect the integrity of research and the relationships between colleagues. These types of conflict can be problematic but have not been addressed as directly by U.S. federal agencies as FCOIs. These include conflicts of commitment, conflicts of conscience, and institutional conflicts of interest.</p><p><strong>Learning Objectives</strong></p><p>By the end of this module, you should be able to:</p><ul><li>Define conflicts of commitment, conflicts of conscience, and institutional conflicts of interest.</li><li>Describe the differences between conflicts of commitment and conflicts of conscience.</li><li>Provide specific examples of conflicts of commitment, conflicts of conscience, and institutional conflicts of interest.</li><li>Discuss strategies to address conflicts of commitment or conscience.</li></ul><h2 id="conflicts-of-commitment">Conflicts of Commitment</h2><p>Conflicts of commitment exist when individuals have difficulty balancing the effort necessary to perform their job duties while engaging in other activities that may or may not be job-related. This type of conflict can also occur when a competing influence affects an individual's research or work output. In this case, the individual would have a conflict regarding the completion of two separate yet important tasks.</p><h2 id="ethical-aspects-of-conflicts-of-commitment">Ethical Aspects of Conflicts of Commitment</h2><p>Conflicts of commitment produce ethical problems when an individual does not perform required employment duties due to an outside activity, or when a competing influence could bias an individual's research or work output. For example, if employees spend a significant amount of their workday running a consulting project instead of attending to their primary job, this would constitute a conflict of commitment. As with other types of professional conflicts, individuals should acknowledge and report these occurrences so that the employee and employer are both aware of the conflict. In many organizations, a policy requires such reporting, particularly when researchers receive grant support for their work.</p><p>Another form of conflict of commitment could occur from an internal conflict. For example, a researcher may have the desire to give extra work to students on a project that delays the students' progress on their own research and degree requirements. This is a conflict of commitment between the goals of the individual students and the goals of the researcher. Researchers must be careful not to overburden students to fulfil their own goals. Other examples include researchers who travel frequently or spend excess time consulting and are unavailable to mentor their students.</p><p>The perception that a conflict of commitment exists can be just as damaging as a situation where an actual conflict occurs. It is important to be aware of and try to mitigate situations that could generate conflicts of commitment. These conflicts can occur in relationships between faculty members, faculty and students, faculty and staff, and even institutions. There are a wide range of effects produced by conflicts of commitment.</p><h2 id="regulatory-aspects-of-conflicts-of-commitment">Regulatory Aspects of Conflicts of Commitment</h2><p>While FCOIs have been well documented in the past and are being more tightly controlled by federal regulations, conflicts of commitment can be just as problematic but are not as easily recognized or regulated. Federal regulations require institutions to have policies on FCOIs, but they do not require a policy on conflicts of commitment. Even so, many institutions have their own policies and researchers should familiarize themselves with the requirements at their institutions (<a href="javascript:showonlyone(&#39;newboxes10&#39;);">review an example</a>).</p><p>This is particularly relevant if individuals have responsibilities that could give rise to conflicts of commitment. Typically, institutions allow individuals to consult or perform non-work related functions for no more than one day per week (20 percent of their effort), but these policies vary and are not universal.</p><p><img src="https://www.citiprogram.org/members/images/case-study.png" />Setting Up a Collaboration**</p><h2 id="conflicts-of-conscience">Conflicts of Conscience</h2><p><img src="https://www.citiprogram.org/members/images/case-study.png" />The Student Survey**</p><p>Conflicts of conscience exist when an individual's personal, religious, or other beliefs might interfere with the ability to perform job duties objectively. This can occur when service on an institutional committee might conflict with one's beliefs or when researchers are asked to collaborate on research that might conflict with their personal views (for example, a pacifist working on a project that has weapon implications). Other examples may include embryonic stem cell research or invasive research on primates.</p><p><img src="https://www.citiprogram.org/citidocuments/_001pic/1863.jpg" /></p><p>Federal regulations or institutional policies do not normally regulate conflicts of conscience and it can be difficult to determine how institutions will respond to a conflict of conscience. Therefore, it is important for individuals to take the initiative to become aware of any conflicts of conscience that might exist.</p><h2 id="other-non-financial-conflicts-of-interest">Other Non-Financial Conflicts of Interest</h2><p>Another example of a conflict of interest (COI) is a reviewer, perhaps inadvertently or intentionally, biasing a grant proposal or manuscript review because of the reviewer's relationship to the author. This could lead to an overly favorable or overly harsh review, but in either case, there would be a conflict with providing an objective assessment of the work. In some situations, reviewers may not recognize that their professional judgment has been influenced and could mistakenly believe that they can provide an objective review. However, the relationship between the reviewer and the author may generate a conflict, and this could raise a concern about the validity of the review.</p><h2 id="institutional-conflicts-of-interest">Institutional Conflicts of Interest</h2><p>COIs can occur at many levels in an organization; they can even involve the institution itself (Lo and Field 2009). For example, an institution could be put in conflict about accepting funding from a tobacco company if researchers at the institution want to study nicotine addiction. Alternatively, an institution could have difficulty monitoring a research project in an objective way if the technology potentially emerging from the research could benefit the institution financially. For more information, refer to the <em>Institutional Conflicts of Interest (COI-Basic)</em> module.</p><h2 id="resolving-conflicts-of-commitment-and-conscience">Resolving Conflicts of Commitment and Conscience</h2><p>The first step in resolving these types of conflicts is to recognize that a conflict could exist. By raising their awareness and recognition of conflicts, researchers are then able to eliminate or manage them. If researchers detect a conflict, they could raise the issue in a tactful, sensitive manner with appropriate parties. Depending on the circumstances, this could be with a supervising administrator (for example, a department chair) or an institutional ethics representative.</p><p>The next step is to disclose potential conflicts. If researchers and others fail to disclose their conflicts, it can cause irreparable harm to their reputation (either due to the actual conflict or due to the appearance of deception involved in hiding the conflict). Discussion and disclosure can help protect the parties from subsequent concerns about bias or improper behavior. For example, if a reviewer believes that a conflict could exist with a grant proposal or manuscript review, the reviewer should contact the appropriate individual (a grant officer or journal editor) to discuss the potential conflict and determine how it might be disclosed to others.</p><p>In some circumstances, a third step can include declining participation in the activity that causes the conflict. In some cases, an institution's policy may require the individual to do so as part of eliminating or managing the specific conflict.</p><h2 id="summary">Summary</h2><p>Conflicts of commitment or conscience can introduce biases into research that are subtle with comparatively minor consequences, or they can produce results that are just as damaging as FCOIs. Individuals should be aware of any conflicts that could compromise their research or other professional activities. The best means to prevent these types of conflicts from causing harm is to disclose and discuss them with the appropriate parties. In some cases, an administrator or institutional representative could help to manage these types of conflicts.</p><h2 id="references">References</h2><ul><li>Duke University Office of Research Support. 2016. "Conflict of Commitment". Accessed October 26, 2016.</li><li>Lo, Bernard, and Marilyn J. Field, eds. 2009. <em>Conflict of Interest in Medical Research, Education, and Practice</em>. Washington, DC: National Academies Press (US).</li></ul><h2 id="additional-resources">Additional Resources</h2><ul><li>Center for American Progress. 2009. "<a href="https://www.americanprogress.org/issues/women/news/2009/04/28/5877/guidelines-for-resolving-conflicts-of-conscience/">Guidelines for Resolving Conflicts of Conscience</a>." Accessed June 5, 2015.</li><li>Euben, Donna R. 2004. "<a href="http://pages.uoregon.edu/uosenate/dirsen089/COICOCC-AAUP-Conf.pdf">Faculty Employment Outside of the University: Conflicts of Commitment</a>." Presentation to the National Association of College and University Attorneys, Atlanta, GA. Accessed June 5, 2015.</li><li>Federation of American Societies for Experimental Biology (FASEB). 2006. "<a href="https://www.faseb.org/portals/2/pdfs/opa/FASEB_COI_paper.pdf">Shared Responsibility, Individual Integrity: Scientists Addressing Conflicts of Interest in Biomedical Research</a>." Accessed March 14, 2018.</li><li>Korenman, Stanley G., and Allan C. Shipp. 1994. <em>Teaching the Responsible Conduct of Research through a Case Study Approach: A Handbook for Instructors</em>. Washington, DC: Association of American Medical Colleges.</li><li>U.S. Department of Health and Human Services (HHS) Office of Research Integrity. 2015. "<a href="http://ori.hhs.gov/conflicts-interest-and-commitment">Conflicts of Interest and Commitment</a>." Accessed June 5, 2015.</li></ul><h2 id="quiz">Quiz</h2><h3 id="question-1">Question 1</h3><p>Which of the following statements is true?</p><ul><li><strong>Many institutions have conflict of commitment policies even though they are not strictly required to by federal agencies.</strong></li><li><del>Federal agencies require institutions to have a conflict of conscience policy.</del></li><li><del>Federal agencies require institutions to have policies on both conflict of commitment and conflict of conscience.</del></li><li><del>All institutions have conflict of conscience policies because they are required by state governments.</del></li></ul><p><strong>Comment</strong>:</p><p>Many institutions have conflict of commitment policies even though they are not strictly required to by federal agencies. Institutions do not typically have a formal conflict of conscience policy.</p><h3 id="question-2">Question 2</h3><p>Which of the following is the most appropriate way to handle a conflict of conscience relating to a project?</p><ul><li><del>Follow all of the federal regulations relating to conflicts of conscience.</del></li><li><del>Report the issue to the institution’s research misconduct office.</del></li><li><del>Remain quiet about the conflict and continue with one’s work.</del></li><li><strong>Notify relevant parties that a conflict may exist and seek advice about whether to accept or decline the project.</strong></li></ul><p><strong>Comment</strong>:</p><p>In general, it is recommended practice to notify relevant parties about the conflict and then, with their help, decide whether it is appropriate to accept or decline the project. Federal regulations must be followed, but they do not typically cover conflicts of conscience.</p><h3 id="question-3">Question 3</h3><p>Which statement most accurately describes a conflict of commitment?</p><ul><li><strong>It occurs when outside activities interfere with one’s responsibilities to an employer.</strong></li><li><del>It occurs when an institution does not follow the financial rules from a funding source.</del></li><li><del>It can only occur between an institution and an outside organization.</del></li><li><del>It involves a monetary gain by one party over another party.</del></li></ul><p><strong>Comment</strong>:</p><p>A conflict of commitment occurs when outside activities interfere with one’s responsibilities to an employer.</p><h3 id="question-4">Question 4</h3><p>Which of the following is most likely to be considered a conflict of commitment?</p><ul><li><del>A senior researcher has to resolve a dispute between two junior researchers.</del></li><li><del>A researcher takes part in political activities during weekends.</del></li><li><del>A new graduate is deciding between job offers from two institutions.</del></li><li><strong>A researcher cancels laboratory meetings in order to perform consulting work.</strong></li></ul><p><strong>Comment</strong>:</p><p>If obligations to the researcher’s primary employer are not being fulfilled by cancelling laboratory meetings in order to perform consulting work, this would be an example of a conflict of commitment.</p><h3 id="question-5">Question 5</h3><p>Which statement most accurately describes a conflict of conscience?</p><ul><li><strong>It occurs when an individual’s personal beliefs could affect the performance or outcome of research.</strong></li><li><del>It occurs when financial interests bias research.</del></li><li><del>It occurs when researchers have two or more responsibilities to complete at the same time.</del></li><li><del>It occurs when a financial reward is provided for outstanding work.</del></li></ul><p><strong>Comment</strong>:</p><p>A conflict of conscience occurs when an individual’s beliefs could affect the performance or outcome of research.</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Conflicts of Interest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Research with Children</title>
      <link href="2021/03/13/2021-03-13-Research-with-Children/"/>
      <url>2021/03/13/2021-03-13-Research-with-Children/</url>
      
        <content type="html"><![CDATA[<h1 id="research-with-children">Research with Children</h1><h2 id="introduction">Introduction</h2><p>Although children are recognized as a vulnerable population, federal regulations do permit institutions, typically through their Institutional Review Board (IRB) offices, to exempt some types of research with children.</p><p>The regulations also specifically prohibit exempting certain research activities with children. This module reviews the application of exemption criteria to research with children.</p><p><strong>Learning Objectives</strong></p><p>By the end of this module, you should be able to:</p><ul><li>Describe what is meant by the term "children."</li><li>Identify the types of research involving children that may be exempt.</li></ul><h2 id="defining-children">Defining "Children"</h2><p>According to the federal regulations, <strong>children</strong> are persons who have not yet attained the legal age of consent under the applicable laws in the jurisdiction in which the research will be conducted (Protection of Human Subjects 2017).</p><p>In the U.S., state law dictates the age of majority. In most states, the age of majority is 18, but there are exceptions (such as, Nebraska where the age is 19).</p><p>Researchers should also be aware that the age of majority might be quite different in other countries.</p><h2 id="exempt-research-with-children-as-subjects">Exempt Research with Children as Subjects</h2><p>Research with children may be specifically exempt under two categories when it involves certain activities:</p><ul><li>Category 1<ul><li>Normal educational practices conducted in established or commonly accepted educational settings, that specifically involves normal educational practices that are not likely to adversely affect students' opportunity to learn or assessment of educators</li></ul></li><li>Category 2<ul><li>Educational tests</li><li>Observation of public behaviour in which the researcher does not participate</li></ul></li></ul><p>Research with children may <strong>not</strong> be exempt under category 2 when it involves:</p><ul><li>Interviews with children</li><li>Surveys of children</li><li>Observation in which the researcher participates in the activities observed</li></ul><p>Research with children may also be exempt under other categories if the conditions of the exemption are met, including:</p><ul><li>Category 4<ul><li>Secondary research for which consent is not required.</li></ul></li><li>Category 5<ul><li>Research and demonstration projects that are conducted or supported by a federal department or agency, or otherwise subject to the approval of department or agency heads (or the approval of the heads of bureaus or other subordinate agencies that have been delegated authority to conduct the research and demonstration projects), and that are designed to study, evaluate, improve, or otherwise examine public benefit or service programs.</li></ul></li><li>Category 6<ul><li>Taste and food quality evaluation and consumer acceptance studies.</li></ul></li><li>Category 7<ul><li>Storage or maintenance for secondary research for which broad consent is required.</li></ul></li><li>Category 8<ul><li>Secondary research for which broad consent is required.</li></ul></li></ul><h3 id="examples-of-exempt-and-non-exempt-research-for-category-2">Examples of Exempt and Non Exempt Research for Category 2</h3><h4 id="exempt">Exempt</h4><ul><li>A researcher observes children on a playground to determine whether children prefer playmates of their own ethnicity</li><li>An anthropologist observes children learning English in a rural town in Colombia to assess language acquisition</li><li>A researcher uses peer mediation records from prior years to assess how students resolve conflicts</li></ul><h4 id="not-exempt">Not Exempt</h4><ul><li>A researcher interviews children on a playground to determine their preferred playmates</li><li>An anthropologist volunteers to teach English and records observations of language acquisition in the children</li><li>A researcher interviews children aged 10-12 whose parents are divorced to assess the impact of divorce</li></ul><h2 id="summary">Summary</h2><p>Federal regulations permit research with children to be exempt from the regulations, but only if the research falls within certain categories and with certain restrictions.</p><h2 id="reference">Reference</h2><ul><li>Protection of Human Subjects, 45 CFR § 46 (2017).</li></ul><h2 id="quiz">Quiz</h2><h3 id="question-1">Question 1</h3><p>Which of the following research activities with children qualifies for exemption?</p><ul><li><del>A researcher using small focus groups to talk to adolescents about the impact of stereotypes.</del></li><li><strong>A researcher observing children on a playground to identify bullying behaviours.</strong></li><li><del>A researcher interviewing fifth graders whose parents recently divorced.</del></li><li><del>A researcher using a socio-metric measure in the classroom to assess conflict resolution.</del></li></ul><p><strong>Comment</strong>: The correct answer is research involving children observed on a playground where the investigator does not participate in the behaviors being observed.</p><h3 id="question-2">Question 2</h3><p>In accordance with federal regulations, which of the following statements best describes when research with children may be exempt?</p><ul><li><del>The age of the children to be enrolled in the study determines which categories of exempt research may be used.</del></li><li><del>If the level of risk is minimal, research that may be exempt is the same for adults and children.</del></li><li><del>The researcher's assessment of the children's cognitive abilities determines which categories of exempt research may be used.</del></li><li><strong>Only certain exemption categories can be used with research involving children.</strong></li></ul><p><strong>Comment</strong>: Some research with children may be exempt; however, the exemption categories of research that may be applicable when children will be the research subjects are limited. The age of the children is not relevant.</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Social Behavioural Educational Refresher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Financial Conflicts of Interest</title>
      <link href="2021/03/13/2021-03-13-Financial-Conflicts-of-Interest-Overview,-Investigator-Responsibilities,-and-COI-Rules-(COI-Basic)/"/>
      <url>2021/03/13/2021-03-13-Financial-Conflicts-of-Interest-Overview,-Investigator-Responsibilities,-and-COI-Rules-(COI-Basic)/</url>
      
        <content type="html"><![CDATA[<h1 id="financial-conflicts-of-interest-overview-investigator-responsibilities-and-coi-rules">Financial Conflicts of Interest: Overview, Investigator Responsibilities, and COI Rules</h1><h2 id="introduction">Introduction</h2><p>The U.S. Public Health Service (PHS) has adopted specific regulations on financial conflicts of interest (FCOIs) to promote objectivity in federally funded research. Previously issued PHS regulations have been revised, and researchers must be familiar with the revised regulations and their institutional policies regarding conflicts if they have or plan to have responsibility for the design, conduct, or reporting of such research.</p><p><strong>Learning Objectives</strong></p><p>By the end of this module, you should be able to:</p><ul><li>Describe how PHS regulations relate to FCOIs.</li><li>Recognize various forms of FCOIs in research.</li><li>Identify the research team members who are subject to FCOI requirements.</li><li>Identify the significant financial interests (SFIs) that investigators must disclose to their institutions.</li><li>Recognize the ongoing obligations that investigators have relating to FCOIs.</li></ul><h2 id="conflicts-of-interest-an-overview">Conflicts of Interest: An Overview</h2><h3 id="professionalism-and-the-ethical-conduct-of-research">Professionalism and the Ethical Conduct of Research</h3><p>A <strong>conflict of interest (COI)</strong> is any circumstance where the personal, professional, financial, or other private interests of a person or institution compromise or have the potential to compromise the exercise of professional judgment or obligations or may be perceived as doing so.</p><p><img src="https://www.citiprogram.org/citidocuments/_001pic/1855.jpg" /></p><p>Research COI can take many forms. For example:</p><ul><li>Close personal or working relationships with peers or mentors may have the potential to influence the independence of a researcher's judgment or actions, sometimes in subtle ways that even the researcher does not perceive.</li><li>Pressure on faculty or others to publish may also introduce bias at various points in the research process, whether during the stage of study design, recruitment of study subjects (for research involving human subjects), data analysis, or the selection of which results to publish.</li><li>Researchers may also have external professional commitments that, while important, are so extensive they conflict with their primary teaching, clinical (if relevant), and research obligations at their own institutions (typically referred to as a conflict of commitment).</li></ul><p>While nonfinancial factors affecting professional judgment are important, this module focuses on the potential for financial interests of individual researchers, and those of their immediate family members, to affect the design, conduct, or reporting of their research. Examples of these interests include the receipt of personal compensation for consulting activity, ownership of equity in publicly or privately held businesses, and receipt of income from intellectual property rights held by the researcher.</p><p>Public trust in the integrity of research depends upon the existence of an effective process for identifying FCOIs and acting to promote and maintain objectivity in the research. As noted by Dr. Francis Collins, director of the National Institutes of Health (NIH), "The public trust in what we do is just essential, and we cannot afford to take any chances with the integrity of the research process" (Wadman 2010).</p><h3 id="historical-overview">Historical Overview</h3><p>In 1995, the U.S. government began regulating FCOIs in federally sponsored research. Issued by the Office of the Secretary of the U.S. Department of Health and Human Services (HHS) and the PHS, the 1995 regulations apportioned responsibilities between institutions receiving PHS research funding and the investigators involved in the research, to promote objectivity by disclosing, managing, and reporting, if not eliminating, significant financial interests that constitute financial conflicts of interest (Responsibility of Applicants 1995; Responsible Prospective Contractors 1995).</p><p>In the decades after the publication of the federal rules, "biomedical and behavioral research and the resulting interactions among government, research [i]nstitutions, and the private sector have become increasingly complex" (HHS 2011). During that time, funding for biomedical research nearly tripled, with over half of the funding coming from industry, not government, sources. Since then, relationships between academic researchers and industry have increased dramatically. "Researchers frequently work in multidisciplinary teams to develop new strategies and approaches for translating basic research into clinical application, thus hastening discovery and advancing human health" (HHS 2011).</p><p>In August 2011, taking note of these developments, along with growing public scrutiny and the possible ramifications of the increasingly complex relationships between biomedical researchers and private industry, HHS issued a Final Rule amending the regulations:</p><ul><li>42 CFR 50, Subpart F (Responsibility of Applicants for Promoting Objectivity in Research for Which PHS Funding Is Sought)</li><li>45 CFR 94 (Responsible Prospective Contractors)</li></ul><p>This module focuses on the regulations applicable to research funded under PHS grants or cooperative agreements, 42 CFR 50, Subpart F. The other regulation, 45 CFR 94, applies to institutions conducting research as contractors to NIH.</p><p>Separate standards on COI apply to research funded by the National Science Foundation (NSF). The NSF (2018) standards are similar in many ways to the PHS regulations, but they differ in some respects, such as the thresholds for disclosure of an investigator's outside compensation.</p><p>The U.S. Food and Drug Administration (FDA) also has its own set of COI regulations at 21 CFR 54 (Financial Disclosure by Clinical Investigators 1998), requiring the sponsor of a clinical trial to provide certain financial interest information about the clinical trial investigators when submitting a marketing application for a drug, biological product, or device. On a related note, the FDA (2013) has provided a document titled <em>Guidance for Clinical Investigators, Industry, and FDA Staff Financial Disclosure by Clinical Investigators</em>.</p><h3 id="the-hhsphs-federal-regulations">The HHS/PHS Federal Regulations</h3><p>The 2011 regulations apply to all PHS-funded research available through a grant or cooperative agreement, including biomedical, behavioural, and social science research. PHS-funded research runs the gamut from basic research to applied research and product development (for example, a diagnostic test or drug).</p><p>The regulations intend to promote objectivity in research by establishing standards that provide a reasonable expectation that the design, conduct, and reporting of federally funded research will be free from bias resulting from investigators’ FCOIs.</p><p>More specifically, the revised regulations:</p><ul><li>Implement required training for investigators.</li><li>Expand the scope and definition of SFIs that investigators must disclose, with, for example, lower thresholds for some types of SFIs.</li><li>Intensify the responsibilities of institutions for review, management, and oversight of investigators' SFIs and FCOIs.</li><li>Increase compliance oversight obligations for institutions and the government.</li></ul><p>Institutions had to implement policies that are compliant with the new regulations by 24 August 2012. Some institutions have decided to apply the reporting requirements contained with the PHS regulations to researchers funded by other (non-PHS) sources. The next section in this module outlines the key provisions of the PHS regulations, including the responsibilities of investigators and institutions.</p><p>The <a href="http://grants.nih.gov/grants/policy/coi/">NIH Financial Conflict of Interest website</a> provides additional resources and information about the regulations, including FAQs.</p><h3 id="investigator-responsibilities-and-coi-rules">Investigator Responsibilities and COI Rules</h3><p>The regulations, as revised in 2011, are applicable to each investigator who will participate in research funded under PHS grants or cooperative agreements. The term <strong>investigator</strong> means the project director or principal investigator and any other person, regardless of title or position, who is responsible for the design, conduct, or reporting of PHS-funded research or proposals for such funding. Therefore, the regulations can apply to collaborators, consultants, postdoctoral fellows, graduate students, and others. The regulations apply to both the awardee institution and subrecipient organization for any individual who meets the definition of "investigator." Even if they are not seeking funding from PHS, investigators should refer to the terms and conditions of the particular grant program and their institutional policies to determine whether the PHS regulations apply.</p><p>It is important to note that the regulations do not apply to Small Business Innovative Research (SBIR) and Small Business Technology Transfer (STTR) Program Phase I applications and awards.</p><p><img src="https://www.citiprogram.org/citidocuments/_001pic/1857.jpg" /></p><p>The institution must notify investigators of the regulations and the related institutional policy on FCOI, including investigators' responsibilities. In that regard, investigators must complete training prior to engaging in PHS-funded research and re-train every four years thereafter. Institutions may require training under other circumstances, such as an investigator's failure to properly disclose SFIs or noncompliance with a management plan.</p><p>The cornerstone of managing COI is transparency, which begins with the investigator's disclosure of SFIs that relate to the institution. An <strong>SFI</strong> is anything of monetary value, whether or not the value is readily ascertainable, that (Responsible Prospective Contractors 2011):</p><ul><li>Relates to the "Investigator's professional responsibilities on behalf of the Institution including, but not limited to, activities such as research, research consultation, teaching, professional practice, institutional committee memberships, and service on panels"</li><li>Belongs to the investigator or the investigator's spouse or dependent children</li></ul><p>Investigators who are planning to participate in PHS-funded research must disclose certain types of financial interests that relate to their institutional responsibilities. More specifically, they must disclose the following SFIs to their institution no later than the time of applying for funding (HHS 2011; NIH 2015):</p><ul><li>Income in excess of $5,000 from a publicly-traded entity (a company whose stock is available for purchase by the general public) during the past 12 months.</li><li>Stock valued in excess of $5,000 at the time of disclosure in a publicly-traded entity.</li><li>A combination of the above two items (stock and income) that exceeds $5,000.</li><li>Any amount of equity (stock, stock options, or other ownership interest) in a non-publicly traded entity (such as a start-up company).</li><li>Compensation that exceeds $5,000 from a non-publicly traded entity in the past 12 months.</li><li>Income related to intellectual property rights paid by any source other than the investigator's current institution. (The NIH provides guidance on this issue by stating that intellectual property rights and interests upon receipt of income related to such rights and interests exceeding $5,000.)</li><li>Reimbursed or sponsored travel paid by an entity, including non-profit organizations, but excluding travel sponsored or reimbursed by a U.S. government agency, a U.S. institution of higher education, or one of the following U.S. institutions affiliated with a U.S. institution of higher education: a research institute, a medical center, or an academic teaching hospital. The specific details that investigators must disclose are the name of an entity sponsoring the travel and purpose, destination, and duration of the travel. <a href="http://grants.nih.gov/grants/guide/notice-files/NOT-OD-13-004.html">Notice Number: NOT-OD-13-004</a> provides more information on the NIH’s policy on travel disclosure.</li><li>Any other interests required under the institution's policy.</li></ul><p>The investigator does not need to disclose (HHS 2011):</p><ul><li>Salary, royalties, or other remuneration paid to the investigator from the institution that currently employs the investigator. Any ownership interest in the institution held by the investigator if the institution is a commercial or for-profit organization.</li><li>Income from investments in mutual funds or retirement accounts, as long as the investigator does not make the investment decisions.</li><li>Income for services (for example, honoraria, advisory committees, or review panels) and travel expenses paid by a federal, state, or local government agency, a U.S. institution of higher education, or a research institute affiliated with a U.S. institution of higher education, a medical center, or an academic teaching hospital.</li></ul><p><strong>Note:</strong> The NIH issued a notice in 2018 reminding investigators and organizations that the reporting exclusions pertaining to federal, state, or local government agencies and institutions of higher education only apply to those within the U.S. The notice stated, “Investigators, including subrecipient investigators, must disclose all financial interests received from a foreign institution of higher education or government of another country (which includes local, provincial, or equivalent governments of another country)” (NIH 2018).</p><p>Each investigator must update the disclosure at least annually during the period covered by the grant, or within 30 days of identifying or acquiring a new SFI.</p><p>With respect to the provisions outlined in the federal regulations, institutions may have more, but not less, stringent policies. For example, while the new regulations do not require disclosure of royalties paid through the institution to an investigator, the institution might require disclosure of such royalties. Investigators must review their institution's COI policies to make sure that they disclose the information specifically required by those policies.</p><p><img src="https://www.citiprogram.org/members/images/case-study.png" />Dr. Miller’s Start-up Company**</p><p>It is the institution’s responsibility to determine whether any of an investigator's SFIs could directly and significantly affect the research, or is in an entity whose financial interest could be affected by the research; if it is determined that either of these conditions is present, an FCOI exists.</p><p>If the institution makes an FCOI determination, prior to the expenditure of any research funds, it must develop and implement a management plan to reduce or eliminate the FCOI, and ensure, to the extent possible, that the research will be free from bias. Common management plan elements include:</p><p><img src="https://www.citiprogram.org/citidocuments/_001pic/1858.jpg" /></p><p><img src="https://www.citiprogram.org/members/images/case-study.png" />The Biomarker Test**</p><p>The investigator must confirm agreement with the institution's management plan, and the institution must monitor the investigator's ongoing compliance with the management plan on an annual basis during the period of the research award. Therefore, it is the responsibility of the investigator to verify compliance by retaining documents such as notices to journal editors or conference audiences, consent forms from human subject research, or notices to research personnel.</p><h2 id="summary">Summary</h2><p>The 2011 revised regulations expand the amount of information that investigators must disclose to their institution and lower the threshold of some SFIs; they broaden the scope of SFIs to include all of an investigator's responsibilities on behalf of the institution. The regulations also shift the responsibility for determining the relationship between an SFI and research from the investigator to the institution. By expanding and adding transparency, the regulations intend to promote objectivity in research.</p><h2 id="acknowledgments">Acknowledgments</h2><p>This module was developed in collaboration with the Association of American Medical Colleges (AAMC). It was written and reviewed by members of the AAMC Forum on Conflict of Interest in Academe (FCOI Academe). Additional COI resources are available through the <a href="https://www.aamc.org/">AAMC's website</a>.</p><h2 id="references">References</h2><ul><li>Financial Disclosure by Clinical Investigators, 21 CFR § 54 (1998).</li><li>National Institutes of Health (NIH) Office of Extramural Research. 2015. "<a href="http://grants.nih.gov/grants/policy/coi/coi_faqs.htm">Frequently Asked Questions</a>." Accessed June 5, 2015.</li><li>National Institutes of Health (NIH) Office of Extramural Research. 2018. “<a href="https://grants.nih.gov/grants/guide/notice-files/NOT-OD-18-160.html">Financial Conflict of Interest: Investigator Disclosure of Foreign Financial Interests</a>.” Accessed July 15, 2019.</li><li>National Science Foundation (NSF). 2018. "<a href="https://www.nsf.gov/pubs/policydocs/pappg18_1/nsf18_1.pdf">Proposal &amp; Award Policies and Procedures Guide -- Chapter IX: Grantee Standards</a>." Accessed March 12, 2015.</li><li>Responsibility of Applicants for Promoting Objectivity in Research for Which PHS Funding is Sought, 42 CFR § 50, Subpart F (1995).</li><li>Responsible Prospective Contractors, 45 CFR § 94 (1995).</li><li>Responsible Prospective Contractors, 45 CFR § 94 (2011).</li><li>U.S. Department of Health and Human Services (HHS). 2011. "Responsibility of Applicants for Promoting Objectivity in Research for Which Public Health Service Funding Is Sought and Responsible Prospective Contractors; Final Rule." <em>Federal Register</em> 76(165):Part IV.</li><li>U.S. Food and Drug Administration (FDA). 2013. "<a href="https://www.fda.gov/media/85293/download">Guidance for Clinical Investigators, Industry, and FDA Staff: Financial Disclosure by Clinical Investigators</a>." Accessed June 5, 2015.</li><li>Wadman, Meredith. 2010. “<a href="https://www.nature.com/articles/news.2010.257">NIH to tighten rules on conflicts</a>.” <em>Nature</em>, May 20. Accessed January 21, 2020.</li></ul><h2 id="quiz">Quiz</h2><h3 id="question-1">Question 1</h3><p>At a minimum, how often are investigators funded by the U.S. National Institutes of Health required to receive conflict of interest training?</p><ul><li><del>Annually.</del></li><li><del>Every two years.</del></li><li><strong>Every four years.</strong></li><li><del>Once per career stage.</del></li></ul><p><strong>Comment</strong>:</p><p>At a minimum, NIH-funded investigators are required to receive conflict of interest training every four years. In some cases, investigators must receive the training more frequently.</p><h3 id="question-2">Question 2</h3><p>Which of the following is true regarding the U.S. Public Health Service and its approach to the disclosure of significant financial interests?</p><ul><li><del>Any income from a mutual fund must be disclosed.</del></li><li><strong>Any equity interest in a non-publicly traded company must be disclosed.</strong></li><li><del>Any equity interest contained in a retirement account must be disclosed.</del></li><li><del>Any equity interest owned by the investigator’s cousins must be disclosed.</del></li></ul><p><strong>Comment</strong>:</p><p>Any equity interest in a non-publicly traded company must be disclosed.</p><h3 id="question-3">Question 3</h3><p>According to the U.S. Public Health Service regulations, investigators are required to disclose travel sponsored or reimbursed by:</p><ul><li><del>An academic teaching hospital.</del></li><li><del>A U.S. institution of higher education.</del></li><li><strong>A publicly traded company.</strong></li><li><del>A government agency.</del></li></ul><p><strong>Comment</strong>:</p><p>Travel sponsored or reimbursed by a publicly traded company has to be disclosed.</p><h3 id="question-4">Question 4</h3><p>According to the U.S. Public Health Service, a "significant financial interest" includes royalty income paid to an investigator and its disclosure is required:</p><ul><li><del>Only if it relates to income from governmental agencies.</del></li><li><strong>Except if that income is from the institution that currently employs the investigator.</strong></li><li><del>Regardless of the source of the income.</del></li><li><del>Only if it relates to income from publicly traded companies.</del></li></ul><p><strong>Comment</strong>:</p><p>Royalty income is excluded if it is paid to the investigator by the institution that currently employs the investigator.</p><h3 id="question-5">Question 5</h3><p>According to the U.S. Public Health Service, which of the following would be considered a significant financial interest?</p><ul><li><strong>An equity interest valued at $5,000 owned by the investigator’s spouse in a company that produces products related to the investigator’s institutional responsibilities.</strong></li><li><del>Travel expenses reimbursed by a U.S. institution of higher education.</del></li><li><del>Income from the university where the investigator is currently employed.</del></li><li><del>An equity interest valued at $10,000 or more that is not related to the investigator’s institutional responsibilities</del></li></ul><p><strong>Comment</strong>:</p><p>An equity interest valued at $5,000 owned by the investigator’s spouse in a company that produces products related to the investigator’s institutional responsibilities would be considered a significant financial interest.</p><h3 id="question-6">Question 6</h3><p>An investigator received $4,000 of consulting income from a publicly traded drug company over the past 12 months. The investigator also owns stock in that company valued at $2,000. The investigator is submitting a grant to the National Institutes of Health that involves evaluating the effectiveness of a drug produced by the same drug company. Which of the following is true?</p><ul><li><del>The value of stock is not calculated when determining significant financial interests.</del></li><li><del>The investigator does not have a significant financial interest related to the grant because the stock's value is less than $5,000.</del></li><li><del>The investigator does not have a significant financial interest related to the grant because the consulting income is less than $5,000.</del></li><li><strong>The aggregate of the consulting income and the stock exceeds $5,000 and therefore is a significant financial interest.</strong></li></ul><p><strong>Comment</strong>:</p><p>With regard to any publicly traded entity, a significant financial interest exists if the value of remuneration and the value of equity interest when aggregated exceed $5,000.</p><h3 id="question-7">Question 7</h3><p>According to the U.S. Public Health Service, the definition of the term “investigator”:</p><ul><li><del>Refers only to the principal investigator.</del></li><li><del>Refers only to the principal investigator and laboratory technicians.</del></li><li><del>Includes faculty but not students.</del></li><li><strong>Includes anyone involved in the conduct or reporting of research.</strong></li></ul><p><strong>Comment</strong>:</p><p>Investigator means the project director or principal investigator and any other person, regardless of title or position, who is responsible for the design, conduct, or reporting of research funded by the U.S. Public Health Service.</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Conflicts of Interest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Assessing Risk</title>
      <link href="2021/03/13/2021-03-13-Assessing-Risk/"/>
      <url>2021/03/13/2021-03-13-Assessing-Risk/</url>
      
        <content type="html"><![CDATA[<h1 id="assessing-risk">Assessing Risk</h1><h2 id="introduction">Introduction</h2><p>One of the risks of research in the social and behavioural sciences is the unauthorized or inadvertent disclosure of individually identifiable information that could pose risks of harm to the research subjects.</p><p>This module discusses breaches of confidentiality focusing on minimizing the potential for disclosure.</p><p><strong>Learning Objective</strong></p><p>By the end of this module, you should be able to:</p><ul><li>Identify ways to minimize the potential of breach of confidentiality.</li></ul><h2 id="the-risk">The Risk</h2><p>The sensitivity of the data determines how harmful an inadvertent or unauthorized disclosure would be.</p><p>If identifiable data about illegal drug use were inadvertently released, the subjects might face criminal liability. If, however, identifiable data were about spatial perception, the inadvertent release of data might not pose as great a risk of harm.</p><h3 id="minimizing-a-breach-of-confidentiality">Minimizing a Breach of Confidentiality</h3><p>Safeguarding the data from unauthorized access can be accomplished in various ways:</p><ul><li>Use as few direct identifiers as practical.</li><li>Remove all direct identifiers as soon as possible.</li><li>Substitute codes for identifiers.</li><li>Maintain code lists ("keys") and data files in separate secure locations.</li><li>Use accepted methods to protect against indirect identification (such as, aggregate reporting or misleading identifiers).</li><li>Use and protect computer passwords.</li><li>Access and store data on computers without Internet connections.</li><li>Minimize procedures involving transferring direct identifiers between persons.</li><li>Obtain a Certificate of Confidentiality.</li><li>Encrypt transmitted and stored data</li></ul><h2 id="limits-to-confidentiality">Limits to Confidentiality</h2><p>There are often limits to the protection of confidential data. These can include required reporting of child abuse, specific communicable diseases, the intent to harm oneself or others, and elder abuse.</p><p>Researchers should consult with the Institutional Review Board (IRB) about the disclosure laws in the state where the research activities are taking place. Lastly, it is important to note that researchers may be compelled to release study data in response to legal action. The consent process should spell out any limits to confidentiality.</p><h2 id="summary">Summary</h2><p>Federal regulations require research to include adequate provisions to protect the privacy of subjects and maintain the confidentiality of data (Protection of Human Subjects 2017).</p><p>Subjects should be informed during the consent process of the extent to which confidentiality of their identifiable information will be maintained, and be informed of the possible risks of disclosure.</p><h2 id="reference">Reference</h2><ul><li>Protection of Human Subjects, 45 CFR § 46 (2017).</li></ul><h2 id="quiz">Quiz</h2><h3 id="question-1">Question 1</h3><p>When the primary potential harm is the breach of individually identifiable data, to protect against such disclosures researchers should:</p><ul><li><del>Have the files in physical possession at all times.</del></li><li><del>Substitute codes for identifiers and maintain code lists and data files in separate files in the research laboratory.</del></li><li><strong>Encrypt the data and store it in password protected files on institutionally maintained servers with limited access.</strong></li><li><del>Only report aggregate data in aggregate form.</del></li></ul><p><strong>Comments</strong>:</p><p>Having the data in the researcher’s possession at all times would not provide adequate protection. Laptops, files, and backpacks can be stolen or misplaced. Storing codes and identifiers in separate files will not sufficiently protect data because the material in the files could be linked by someone other than the researcher. Only reporting data in aggregate form would protect the individual subjects in the reporting process, but does not address data storage. The best way to protect identifiable data among the possibilities listed is to encrypt and store it in password protected files. Additional protections for the encrypted data could be added (such as, limiting the number of people who had access to the files).</p><h3 id="question-2">Question 2</h3><p>Which of the following statements about individually identifiable research data is correct?</p><ul><li><del>Researchers are responsible for ensuring that individually identifiable data is never released outside the research setting.</del></li><li><del>Informing subjects about possible mandated releases of identifiable information is up to the researcher’s discretion.</del></li><li><strong>Researchers may be required to release individually identifiable information outside the research setting.</strong></li><li><del>Institutional policies override state laws with regard to the release of individually identifiable data.</del></li></ul><p><strong>Comments</strong>:</p><p>Researchers may be required to release individually identifying information (for example, in reports about suspected child abuse or neglect). Researchers may be compelled by law to release data. Therefore, it is not always possible for researchers to ensure that identifiable data is not released outside the research setting. It is not up to the researchers to decide whether research subjects are informed about the possibility of mandated disclosures that may occur. Subjects cannot make informed decisions about participation in research without knowing about mandated disclosures relevant to the research topic. Finally, state laws where the research will take place take precedence over the researcher’s institutional policy.</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Social Behavioural Educational Refresher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Privacy and Confidentiality</title>
      <link href="2021/03/13/2021-03-13-Privacy-and-Confidentiality/"/>
      <url>2021/03/13/2021-03-13-Privacy-and-Confidentiality/</url>
      
        <content type="html"><![CDATA[<h1 id="privacy-and-confidentiality">Privacy and Confidentiality</h1><h2 id="introduction">Introduction</h2><p>One of the criteria for Institutional Review Board (IRB) approval is that, when appropriate, the research reflects adequate provisions to protect the privacy of subjects and maintain the confidentiality of data (Protection of Human Subjects 2017). This module clarifies the difference between privacy and confidentiality.</p><p><strong>Learning Objectives</strong></p><p>By the end of this module, you should be able to:</p><ul><li>Describe what is meant by the term "privacy."</li><li>Identify ways to protect subject privacy.</li><li>Describe what is meant by the term "confidentiality."</li><li>Identify ways to protect subject confidentiality.</li></ul><h2 id="privacy">Privacy</h2><p><strong>Privacy</strong> refers to the right to control access to ourselves and our personal information. It means that we have the right to control the degree, timing, and conditions for sharing our bodies, thoughts, and experiences with others.</p><p>Privacy must be protected before and during the recruitment of subjects, the consent process, and participation in the research activity.</p><p>Methods to protect subject privacy include:</p><ul><li>Conducting research activities in a private setting</li><li>Ensuring that private data are not collected without the individual's knowledge and consent (observation of public behaviour is okay)</li></ul><h2 id="confidentiality">Confidentiality</h2><p><strong>Confidentiality</strong> refers to agreements made between researchers and subjects, through the consent process, about if and how researchers will protect information provided by the subjects.</p><p>These agreements may include:</p><ul><li>Plans for retention of identifiers associated with the data</li><li>Methods for safeguarding data (such as, encryption or limited access to identifiable data).</li></ul><p>The protection of confidentiality occurs after the data is collected and in the researcher’s possession.</p><h2 id="summary">Summary</h2><p>Federal regulations require research to include adequate provisions to protect the privacy of subjects and maintain the confidentiality of data (Protection of Human Subjects 2017).</p><p>Subjects should be informed during the consent process of the methods that will be used to maintain the confidentiality of their identifiable information and the possible risks of disclosure of this information outside of the research study.</p><h2 id="reference">Reference</h2><ul><li>Protection of Human Subjects, 45 CFR § 46 (2017).</li></ul><h2 id="quiz">Quiz</h2><h3 id="question-1">Question 1</h3><p>Identify the term that refers to agreements made between researchers and subjects, through the consent process, about if and how researchers will protect information provided by the subjects.</p><ul><li><strong>Confidentiality</strong></li><li><del>Privacy</del></li><li><del>Ownership</del></li><li><del>Identifiable</del></li></ul><p><strong>Comment</strong>:</p><p>Confidentiality refers to agreements made between researchers and subjects, through the consent process, about if and how researchers will protect information provided by the subjects.</p><h3 id="question-2">Question 2</h3><p>Which of the following is a measure researchers can use to protect the confidentiality of subject data?</p><ul><li><del>Consent subjects in private rooms where no one can overhear.</del></li><li><del>Approach potential subjects in a private way.</del></li><li><del>Disclose that interview questions will include sensitive topics (such as, income, health status, and sexual behaviour).</del></li><li><strong>Keep sensitive and identifiable data in encrypted files on a password protected hard drive.</strong></li></ul><p><strong>Comment</strong>:</p><p>The correct answer is “Keep data on sensitive issues in encrypted files in a password protected hard drive.” This is the only answer that addresses maintaining confidentiality of research data. The other answers all address protecting subject privacy.</p><h3 id="question-3">Question 3</h3><p>Identify the term that refers to the right to control access to ourselves and to our personal information.</p><ul><li><strong>Privacy</strong></li><li><del>Ownership</del></li><li><del>Identifiable</del></li><li><del>Confidentiality</del></li></ul><p><strong>Comment</strong>:</p><p>Privacy refers to the right to control access to ourselves and to our personal information.</p><h3 id="question-4">Question 4</h3><p>A method to protect subject’s privacy in research would be:</p><ul><li><del>Closing the study if there are not enough subjects to provide meaningful data</del></li><li><strong>Conducting research activities in a private setting</strong></li><li><del>Requiring parental consent and minor assent for a minor subject to participate in the research</del></li><li><del>Including a staged-consent process (asking for consent at the beginning of every study activity)</del></li></ul><p><strong>Comment</strong>:</p><p>Methods to protect subject privacy include conducting research activities in a private setting or ensuring that data are not collected without the individual's knowledge and consent.</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Social Behavioural Educational Refresher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Defining Research with Human Subjects</title>
      <link href="2021/03/13/2021-02-14-Defining-Research-with-Human-Subjects/"/>
      <url>2021/03/13/2021-02-14-Defining-Research-with-Human-Subjects/</url>
      
        <content type="html"><![CDATA[<h1 id="defining-research-with-human-subjects">Defining Research with Human Subjects</h1><h2 id="introduction">Introduction</h2><p>Not all activities that involve gathering information from or about individuals meet the federal definition of research with human subjects.</p><p>Therefore, it is important to understand and apply the following definitions found at 45 CFR 46.102(e) and 46.102(l), and consider the interpretations presented below. This module reviews the definitions of "human subject” and "research."</p><p><strong>Learning Objectives</strong></p><p>By the end of this module, you should be able to:</p><ul><li>Explain the regulatory definitions of "human subject” and "research."</li><li>Discuss the concept of "systematic investigation."</li></ul><h2 id="human-subject">Human Subject</h2><p>According to the regulations, a human subject is a:</p><p>Living individual about whom an investigator (whether professional or student) conducting research:</p><ul><li>Obtains information or biospecimens through intervention or interaction with the individual, and uses, studies, or analyses the information or biospecimens; or</li><li>Obtains, uses, studies, analyses, or generates identifiable private information or identifiable biospecimens.</li></ul><p>The following four sections will consider key words and phrases in the definition.</p><h3 id="a-living-individual">"A living individual"</h3><p>Research about people who are deceased does not meet the definition of human subjects. However, some states have requirements related to the health records of deceased individuals.</p><h3 id="about-whom">"About whom"</h3><p>Most research in the social and behavioural sciences involves gathering information about individuals.</p><p>However, some research that involves interactions with people does not meet the regulatory definition of research with human subjects because the focus of the investigation is not the opinions, characteristics, or behaviour of the individual. In other words, the information being elicited is not about the individual ("whom"), but rather is about "what."</p><p>For example, if a researcher calls the director of a shelter for battered women and asks her for the average length of stay of the women who use the shelter, that inquiry would not meet the definition of research with human subjects because the information requested is not "about" the director. If the researcher interviewed the director about her training, experience, and how she defines the problem of battering, then the inquiry becomes about her - and therefore "about whom."</p><h3 id="interventions">"Interventions"</h3><p>Interventions include both physical procedures through which data are gathered (such as, measuring brain function to supplement paper and pencil inquiries into the development of language and behavioural interventions like experimental education programs or unproven psychosocial therapies) (Protection of Human Subjects 2017).</p><p>They also include manipulation of the subject or the subject's environment performed for research purposes (for example, having subjects listen to music and then having them perform memory tasks in order to investigate the effect of music on memory).</p><h3 id="interactions">"Interactions"</h3><p>Interactions include communication or interpersonal contact between the subject and researcher (Protection of Human Subjects 2017).</p><p>Communication does not have to be face to face, and may even exist entirely on paper or in electronic realms. Participant observation is a variant of interaction, often including both formal and informal interviews in addition to observation.</p><h3 id="private-information">"Private information"</h3><p>As defined in the regulations, private information includes:</p><blockquote><p>Information about behaviour that occurs in a context in which an individual can reasonably expect that no observation or recording is taking place, and information that has been provided for specific purposes by an individual and which the individual can reasonably expect will not be made public (Protection of Human Subjects 2017).</p></blockquote><p>In social and behavioural research, this may be a school record. The regulations further state that identifiable private information is "private information for which the identity of the subject is or may be readily ascertained by the researcher or associated with the information” (Protection of Human Subjects 2017).</p><h2 id="research-and-not-research">"Research" and “Not Research”</h2><p>According to the regulations at 45 CFR 46.102(l), research is "a systematic investigation including research development, testing and evaluation, designed to develop or contribute to generalizable knowledge" (Protection of Human Subjects 2017).</p><p>The federal regulation also lists activities that are not research and therefore not subject to the regulation.</p><p><img src="/images/HMS/citi1.png" /></p><h2 id="systematic-investigation">"Systematic investigation"</h2><p>A great deal of research in the social and behavioural sciences uses what is commonly thought of as the scientific method. However, the interpretation of the term systematic investigation depends largely upon discipline-specific methods.</p><p>It is possible for research to be systematic without conforming in every respect to the elements of the conventional scientific method. For example, when ethnographers study communities, they may not have a priori hypotheses, but many aspects of their research may be systematic including the selection of subjects, decisions about what observations to record, and their interview process.</p><h2 id="summary">Summary</h2><p>In order for research to be governed by the regulation, it must meet both the definitions of human subject and research. If not, then it is considered non-human subjects research.</p><p>Researchers should consult with their institution for that determination, and institutions may have other review processes and policies for research.</p><h2 id="reference">Reference</h2><ul><li>Protection of Human Subjects, 45 CFR § 46 (2017).</li></ul><h2 id="quiz">Quiz</h2><h3 id="question-1">Question 1</h3><p>Which of the following proposed studies would constitute human subjects research as defined under the federal regulations?</p><ul><li><del>An organization for women academics in engineering asks a federal agency to provide the number of women investigators funded by that agency to include in a report for its membership.</del></li><li><del>A researcher conducts a comparison of the comments made in a publicly available blog and the blogger's comments on a similar topic in a weekly magazine.</del></li><li><del>A researcher uses ships' manifest records of people who entered America between 1875 and 1880 to track the restrictions immigration laws imposed on certain ethnic immigrant groups.</del></li><li><strong>A researcher from a school of social work obtains access to students' academic records (including identifiable information) to assess the effect of drug awareness programs on student academic achievement.</strong></li></ul><p><strong>Comment</strong>:</p><p>Immigrants entering the US between 1875 and 1880 are likely not living now; therefore, according to the federal regulations, they are not defined as "human subjects.” If a researcher asks for the number of women receiving funding from a federal agency, the researcher is not acquiring data about individuals; therefore, the women who received funding are not human subjects. The researcher analysing public blogs is accessing public information about individuals.</p><p>In order to meet the definition of research of research with human subjects, the researcher must access private identifiable information. The researcher access student academic records would have access to individual students’ private identifiable information.</p><h3 id="question-2">Question 2</h3><p>Which of the following activities meets the federal definitions of research?</p><ul><li><del>Public Health Department review of records to determine if it should continue a well-child vaccination program</del></li><li><del>Evaluations of time cards by factory managers to see if a newly instituted safety program reduces time lost to injury</del></li><li><del>Surveys of hospital patients about food prepared in the hospital’s kitchen to improve meal service in the hospital</del></li><li><strong>Collection of elementary school test scores to evaluate the effectiveness of an experimental program to teach reading</strong></li></ul><p><strong>Comment</strong>:</p><p>The collection of elementary school test scores to evaluate the effectiveness of an experimental program to teach reading, constitutes an activity that is systematic and generalizable. None of the other activities are intended to result in generalizable information.</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Social Behavioural Educational Refresher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Introduction to Data Analytics in Healthcare</title>
      <link href="2021/03/13/2021-03-13-Understanding-and-working-with-healthcare-data/"/>
      <url>2021/03/13/2021-03-13-Understanding-and-working-with-healthcare-data/</url>
      
        <content type="html"><![CDATA[<h1 id="introduction-to-data-analytics-in-healthcare---understanding-and-working-with-healthcare-data">Introduction to Data Analytics in Healthcare - understanding and working with healthcare data</h1><p><a href="https://vub.cloud.panopto.eu/Panopto/Pages/Viewer.aspx?id=04ea687e-35f0-479e-b0fd-ace600c6e16c">Introduction Video 19:58 ~ 36:03</a></p><p>The aims of this practical session are:</p><ul><li>Make you understand the importance of the information found in electronic health records (EHR);</li><li>Gain insights in performing data analysis using <a href="https://www.python.org/">Python</a> programming language;</li><li>Complete the CITI “Data or Specimens Only Research” course related with ethics in healthcare.</li></ul><p>During all the practical sessions, you should use <a href="https://colab.research.google.com/notebooks/intro.ipynb#recent=true">'Google Colab'</a> cloud service to run your code (basic instructions how to get started are found <a href="https://colab.research.google.com/notebooks/welcome.ipynb">here</a>).</p><h2 id="electronic-health-records-ehr">Electronic Health Records (EHR)</h2><hr /><blockquote><p>As already seen during the lecture/s, EHRs contain an enormous amount of information (usually available in an unstructured format/free text). While humans can read the document and easily get the information they need, using their data for analysis or machine learning without structuring or pre-processing them firstly, is challenging. Considering examples found <a href="https://www.mtsamples.com/index.asp">here</a> and what you saw/learned during lectures, please list what information is usually written/found there and some possible research use-cases using the information we get from them.</p></blockquote><blockquote><p>Info inside an EHR</p></blockquote><ul><li>List item</li><li>List item</li><li>...</li></ul><blockquote><p>Possible research use-cases using EHR information:</p></blockquote><ul><li>List item</li><li>List item</li><li>....</li></ul><h2 id="healthcare-data-analysis-using-python">Healthcare data analysis using Python</h2><p>To complete this part of the lab, you should use the excel files shared in <a href="https://canvas.vub.be/courses/20922/files">Canvas</a> ('noteevents.xlsx' and 'patients.xlsx').</p><ul><li>The 'noteevents.xlsx' file, consists of four columns:<ul><li>subject_id (the patient identifier);</li><li>chartdate (date when the note was created);</li><li>category (what is the type of the note, e.g. urology, dentistry, orthopedic);</li><li>text (the EHR text portion of the note).</li></ul></li><li>The 'patients.xlsx', contains very basic structured information for:<ul><li>patients (columns: subject_id (the patient identifier), gender (male or female), dob (date of birth)).</li></ul></li></ul><p>You will be performing some basic analysis (using Python) which will help you to better understand the data available. To work with the excel files, you should use <a href="https://pandas.pydata.org/docs/getting_started/overview.html">pandas library</a>. For plotting, you are allowed to use <a href="https://matplotlib.org/">matplotlib</a>/<a href="https://seaborn.pydata.org/">seaborn</a>/<a href="https://bokeh.org//">bokeh</a>.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#import libraries</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np, pandas <span class="keyword">as</span> pd, seaborn <span class="keyword">as</span> sns, matplotlib.pyplot <span class="keyword">as</span> plt, bokeh</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, date </span><br></pre></td></tr></table></figure><h3 id="basic-analysis-on-patients-using-python">Basic analysis on patients using Python</h3><p>Perform some basic statistics on the 'patient.xlsx' file.</p><ul><li>Check if there are empty/NaN values on the dataframe.</li><li>Find out if there is a gender balance among our patients.</li><li>Plot the gender occurrences.</li><li>Add a new column 'age' in the dataframe. The age of each patient can be computed from 'dob' column.</li></ul><p>In [ ]:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#read &#x27;patient.xlsx&#x27; file into a DataFrame.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#check if there are empty/NaN values</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#count and print the occurencies of male and female patients</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#plot their occurencies using one of the specified plotting libraries</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#compute age from &#x27;dob&#x27; column: </span></span><br><span class="line">    <span class="comment"># --&gt; (a) use to_datetime() method to convert &#x27;dob&#x27; to datetime format</span></span><br><span class="line">    <span class="comment"># --&gt; (b) create a function that returns the age from &#x27;dob&#x27;</span></span><br><span class="line">    <span class="comment"># --&gt; (c) apply the function to the column &#x27;dob&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="basic-data-analysis-on-ehr-information-using-python">Basic data analysis on EHR information using Python</h3><p>In this part, you will analyse the EHR information found in 'noteevents.xlsx' file.</p><ul><li>Find out how many distinct categories are found in 'notevents.xlsx' file.</li><li>Merge noteevents and patient dataframe based on patient_id.</li><li>Using pandas groupby() method print the mean age per gender.</li><li>Filter the dataframe to return information only for male patients whose age is more than 50 years old.</li><li>Plot which category has the highest amount of requests and this corresponding amount per gender.</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#read &#x27;noteevents.xlsx&#x27; file into a DataFrame.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#print the unique values of &#x27;category&#x27; column</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#merge noteevents and patient dataframe based on the patient_id</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#groupby() to show the mean age per gender</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#filter the dataframe to return information only for patients whose age is more than 50 years old. </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#plot which category has the highest amount of requests and this corresponding amount per gender</span></span><br></pre></td></tr></table></figure><h2 id="requesting-access-to-mimic-iii">Requesting access to MIMIC-III</h2><hr /><blockquote><p>During the first exercise session, all students will need to complete the CITI “Data or Specimens Only Research” course which will can take 2.5 hours approximately.</p><p>All the knowledge you will learn while completing the report will help you to understand better the importance of ethics, privacy, confidentiality etc in health information systems.</p><p>Detailed information about each step to follow can be found in this <a href="https://towardsdatascience.com/getting-access-to-mimic-iii-hospital-database-for-data-science-projects-791813feb735">link</a>. You will need to attach the CITI completion report during your request submission.</p><p>After successfully submitting your request, you should receive an email with subject "PhysioNet credentialing application notification" from PhysioNet confirming that you have successfully submitted your request.</p></blockquote><h1 id="example">Example</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.read_excel(<span class="string">&#x27;Dummy data.xlsx&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># print all the columns data type</span></span><br><span class="line">df.dtypes</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Feature1    float64</span></span><br><span class="line"><span class="string">Feature2    float64</span></span><br><span class="line"><span class="string">Feature3    float64</span></span><br><span class="line"><span class="string">Feature4    float64</span></span><br><span class="line"><span class="string">Label         int64</span></span><br><span class="line"><span class="string">dtype: object</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># print only the head of the df</span></span><br><span class="line">df.head(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#list all the df column names</span></span><br><span class="line">df.columns</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Index([&#x27;Feature1&#x27;, &#x27;Feature2&#x27;, &#x27;Feature3&#x27;, &#x27;Feature4&#x27;, &#x27;Label&#x27;], dtype=&#x27;object&#x27;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># get some descriptive information about your df</span></span><br><span class="line">df.describe()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#select a single column</span></span><br><span class="line">df[<span class="string">&#x27;Feature1&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">0     1.833101</span></span><br><span class="line"><span class="string">1     0.301937</span></span><br><span class="line"><span class="string">2     0.936987</span></span><br><span class="line"><span class="string">3    -0.072283</span></span><br><span class="line"><span class="string">4    -1.967827</span></span><br><span class="line"><span class="string">        ...   </span></span><br><span class="line"><span class="string">95    2.509049</span></span><br><span class="line"><span class="string">96   -1.429179</span></span><br><span class="line"><span class="string">97    0.466618</span></span><br><span class="line"><span class="string">98    0.281702</span></span><br><span class="line"><span class="string">99   -2.653730</span></span><br><span class="line"><span class="string">Name: Feature1, Length: 100, dtype: float64</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#select multiple columns</span></span><br><span class="line">df.loc[:,[<span class="string">&#x27;Feature1&#x27;</span>,<span class="string">&#x27;Feature2&#x27;</span>]]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#select subset for whicch a condition is true</span></span><br><span class="line">df[df[<span class="string">&#x27;Feature1&#x27;</span>]&gt;<span class="number">0</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Lab sessions </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Analytics in Health Care and Connected Care </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Assignment Description</title>
      <link href="2021/03/13/2021-03-13-Assignment-Description/"/>
      <url>2021/03/13/2021-03-13-Assignment-Description/</url>
      
        <content type="html"><![CDATA[<h1 id="assignment-description">Assignment Description</h1><h2 id="introduction">Introduction</h2><p>Healthcare institutions collect everyday enormous volumes of data from a variety of systems and devices (i.e.: patient portals, electronic health records, wearable devices, diagnostic systems, etc ).</p><p>Analysing current and previously collected data, has the potential to improve clinical diagnosis, reduce treatment costs, avoid preventable diseases and improve the patient care quality in general. However, the data collected exists in different formats (clinical notes, medical images such as CT scans, digital notes, etc) and in many times also unstructured which makes the analysing process a challenging one.</p><p><strong>The purpose of your assignment is to make you think about some possible research use-cases (considering a real-life hospital database schema) which provide meaningful insights for clinicians.</strong></p><h2 id="dataset">Dataset</h2><p>During your assignment, you are asked to carefully study <a href="https://mimic.physionet.org/gettingstarted/access/"><u><em>MIMIC-III database</em></u></a> which contains 61,532 intensive care unit stays: 53,432 stays for adult patients and 8,100 for neonatal patients who stayed within the intensive care units at Beth Israel Deaconess Medical Center from June 2001 - October 2012. This database comprises twenty-six different tables with clinical notes, demographics, vital signs, laboratory tests information, etc.</p><p><em>Please pay attention: we do not ask you to download the dataset but only to study all the relational database schema/tables available and propose a few research ideas which use this information.</em></p><h2 id="assignment-information">Assignment Information</h2><p>Different skills/ideas related to the course are expected to be learned during this assignment:</p><ol type="1"><li>hands on experience with data fields derived from a real-life database schema;</li><li>proposing a few examples of well-though and possible research use-cases that could be rise by using this dataset whereas, <strong><em>one research proposal idea should be explained in details</em></strong>.</li></ol><p>The assignment report should contain at least the following information:</p><ul><li>Proposals for 3-5 research ideas and shortly describe their medical relevance. Choose one of your ideas and describe it in details!</li><li>Clearly mention which tables from MIMIC-III database would contribute toward the research proposal you want to focus the most.</li><li>List some expected challenges to be considered when working with a real-life dataset/MIMIC-III.</li><li>Discussion</li></ul>]]></content>
      
      
      <categories>
          
          <category> Assignments </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Analytics in Health Care and Connected Care </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL</title>
      <link href="2021/03/12/2021-03-12-SQL/"/>
      <url>2021/03/12/2021-03-12-SQL/</url>
      
        <content type="html"><![CDATA[<h1 id="sql">SQL</h1><p><a href="https://recordings.reu1.blindsidenetworks.com/vub/2dcaac46a6f525c57e5547f03f6d1027de434152-1615553873510/capture/">Video</a></p><h2 id="sql-create">SQL: CREATE</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Students (</span><br><span class="line">       studentId <span class="type">INTEGER</span>,</span><br><span class="line">       firstName <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">       lastName <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">       birthDate <span class="type">DATE</span>,</span><br><span class="line">       grade <span class="type">INTEGER</span>,</span><br><span class="line">       <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (studentId)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><table><thead><tr class="header"><th>studentId</th><th>firstName</th><th>lastName</th><th>birthDate</th><th>grade</th></tr></thead><tbody><tr class="odd"><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>Currently no data</p><h2 id="sql-insert">SQL: INSERT</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Students</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="string">&#x27;Mickey&#x27;</span>, <span class="string">&#x27;Mouse&#x27;</span>, <span class="string">&#x27;1954-10-27&#x27;</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><table><thead><tr class="header"><th>studentId</th><th>firstName</th><th>lastName</th><th>birthDate</th><th>grade</th></tr></thead><tbody><tr class="odd"><td>1</td><td>Mickey</td><td>Mouse</td><td>1954-10-27</td><td>1</td></tr></tbody></table><h2 id="sql-update">SQL: UPDATE</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> Students</span><br><span class="line"><span class="keyword">SET</span> grade <span class="operator">=</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">WHERE</span> studentId <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><table><thead><tr class="header"><th>studentId</th><th>firstName</th><th>lastName</th><th>birthDate</th><th>grade</th></tr></thead><tbody><tr class="odd"><td>1</td><td>Mickey</td><td>Mouse</td><td>1954-10-27</td><td>2</td></tr></tbody></table><h2 id="sql-select">SQL: SELECT</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> firstName</span><br><span class="line"><span class="keyword">FROM</span> Students</span><br><span class="line"><span class="keyword">WHERE</span> grade <span class="operator">=</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><table><thead><tr class="header"><th>firstName</th></tr></thead><tbody><tr class="odd"><td>Mickey</td></tr></tbody></table><h2 id="sql-statements">SQL: Statements</h2><ul><li>SELECT</li><li>CREATE TABLE</li><li>INSERT</li><li>UPDATE</li><li>TRUNCATE</li><li>DROP</li><li>DELETE</li><li>ALTER TABLE</li><li>RENAME TABLE</li></ul><h2 id="sql-cartesian-product">SQL: Cartesian Product (×)</h2><p>Gives <u>all possible combinations</u> between the two tables</p><table><thead><tr class="header"><th>studentId</th><th>firstName</th><th>lastName</th></tr></thead><tbody><tr class="odd"><td>1</td><td>Mickey</td><td>Mouse</td></tr><tr class="even"><td>2</td><td>Donald</td><td>Duck</td></tr></tbody></table><table><thead><tr class="header"><th>studentId</th><th>className</th></tr></thead><tbody><tr class="odd"><td>1</td><td>Databases</td></tr><tr class="even"><td>1</td><td>Web Technologies</td></tr><tr class="odd"><td>2</td><td>AI</td></tr></tbody></table><table><thead><tr class="header"><th>studentId</th><th>firstName</th><th>lastName</th><th>studentId</th><th>className</th></tr></thead><tbody><tr class="odd"><td>1</td><td>Mickey</td><td>Mouse</td><td>1</td><td>Databases</td></tr><tr class="even"><td>1</td><td>Mickey</td><td>Mouse</td><td>1</td><td>Web Technologies</td></tr><tr class="odd"><td>1</td><td>Mickey</td><td>Mouse</td><td>2</td><td>AI</td></tr><tr class="even"><td>2</td><td>Donald</td><td>Duck</td><td>1</td><td>Databases</td></tr><tr class="odd"><td>2</td><td>Donald</td><td>Duck</td><td>1</td><td>Web Technologies</td></tr><tr class="even"><td>2</td><td>Donald</td><td>Duck</td><td>2</td><td>AI</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Students, Enrollments;</span><br></pre></td></tr></table></figure><h2 id="sql-join-condition">SQL: Join Condition</h2><ul><li>Similar to a select in relational algebra where you compare the IDs</li><li>σ<sub>studentId=studentId2</sub>(Students × ρ<sub>E2(studentId2,className) </sub>(Enrollments))</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Students, Enrollments</span><br><span class="line"><span class="keyword">WHERE</span> Students.studentId <span class="operator">=</span> Enrollments.studentId;</span><br></pre></td></tr></table></figure><table><thead><tr class="header"><th>studentId</th><th>firstName</th><th>lastName</th><th>studentId</th><th>className</th></tr></thead><tbody><tr class="odd"><td>1</td><td>Mickey</td><td>Mouse</td><td>1</td><td>Databases</td></tr><tr class="even"><td>1</td><td>Mickey</td><td>Mouse</td><td>1</td><td>Web Technologies</td></tr><tr class="odd"><td><del>1</del></td><td><del>Mickey</del></td><td><del>Mouse</del></td><td><del>2</del></td><td><del>AI</del></td></tr><tr class="even"><td><del>2</del></td><td><del>Donald</del></td><td><del>Duck</del></td><td><del>1</del></td><td><del>Databases</del></td></tr><tr class="odd"><td><del>2</del></td><td><del>Donald</del></td><td><del>Duck</del></td><td><del>1</del></td><td><del>Web Technologies</del></td></tr><tr class="even"><td>2</td><td>Donald</td><td>Duck</td><td>2</td><td>AI</td></tr></tbody></table><h2 id="sql-join-condition-alternative">SQL: Join Condition (Alternative)</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Students</span><br><span class="line"><span class="keyword">JOIN</span> Enrollments</span><br><span class="line"><span class="keyword">ON</span> (Students.studentId <span class="operator">=</span> Enrollments.studentId)</span><br></pre></td></tr></table></figure><p><strong>This method also allows for INNER JOIN or OUTER JOIN</strong></p><h2 id="sql-aggregation-Ꮆ">SQL: Aggregation (Ꮆ)</h2><p><strong>Give the amount of students for each year and for each class</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.grade, e.className, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">as</span> count</span><br><span class="line"><span class="keyword">FROM</span> Students s, Enrollments e</span><br><span class="line"><span class="keyword">WHERE</span> s.studentId <span class="operator">=</span> e.studentId</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s.grade, e.className</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> s.grade, e.className;</span><br></pre></td></tr></table></figure><ul><li><p>Problem: For each class, give the name of the oldest student following that class</p></li><li><p>Idea 1: The question seems to suggest a GROUP BY</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> className, <span class="built_in">min</span>(studentDateOfBirth)</span><br><span class="line"><span class="keyword">FROM</span> Students s, Enrollments e</span><br><span class="line"><span class="keyword">WHERE</span> e.studentId <span class="operator">=</span> s.studentId</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> className</span><br></pre></td></tr></table></figure></li><li><p><strong>Problem Idea 1</strong>: How to return the name of the student?</p></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e1.className, s1.firstName, s1.lastName</span><br><span class="line"><span class="keyword">FROM</span> Students s1, Enrollments e1</span><br><span class="line"><span class="keyword">WHERE</span> s1.studentId <span class="operator">=</span> e1.studentId</span><br><span class="line"><span class="keyword">AND</span> s1.birthDate <span class="operator">=</span></span><br><span class="line">(<span class="keyword">SELECT</span> <span class="built_in">min</span>(birthDate)</span><br><span class="line"><span class="keyword">FROM</span> Students s2, Enrollments e2</span><br><span class="line"><span class="keyword">WHERE</span> s2.studentId <span class="operator">=</span> e2.studentId</span><br><span class="line"><span class="keyword">AND</span> e1.className <span class="operator">=</span> e2.className)</span><br></pre></td></tr></table></figure><p><em>Note: We compare the e2.className from our subquery with the e1.className from our main query</em></p><h2 id="exercises">Exercises</h2><p>In these exercises we will use an online tool for creating and managing our database. However, you are free to use software such as <a href="https://github.com/pawelsalawa/sqlitestudio/releases">SQLiteStudio</a> or <a href="https://sqlitebrowser.org/dl/">DB Browser for SQLite</a>.</p><h3 id="exercise-1">Exercise 1</h3><p>The following database schema is given:</p><ul><li>Student(<strong>StudentID</strong>, StudentFirstname, StudentSecondname, StudentDateOfBirth, Student-Grade)</li><li>Department(<strong>DepartmentID</strong>, DepartmentName)</li><li>Faculty(<strong>FacultyID</strong>, FacultyName)</li><li>Class(<strong>Classname</strong>, Classmeeting, Classroom, DepartmentID)</li><li>Enrollment(<strong>StudentID</strong>, <strong>ClassName</strong>)</li><li>FacultyDepartment(<strong>FacultyID</strong>, <strong>DepartmentID</strong>)</li></ul><p>Schematically represented using the following ER-model:</p><p><img src="/images/DB/ex5-1.png" /></p><p>Write SQL queries for the following problems. At the end of the each question you will find a number [X] which indicates the amount of rows your solution should return.</p><h4 id="simple-queries">1.1 Simple Queries</h4><ol type="1"><li><p>Return the names of all classes. [11]</p></li><li><p>Return the different birthdays for all students. Make sure that there no duplicates. [39]</p></li><li><p>Return all classes that are not given in 10F111. [7]</p></li><li><p>Return all classes (sorted alphabetically) that are given in building F. [9]</p><p><em>Hint: Classroom values contain the floor, building name and classroom number (e.g. 10F111)</em></p></li></ol><h4 id="aggregate-functions">1.2 Aggregate Functions</h4><ol type="1"><li>Return the number of classes for which the student with studentID 7 is enrolled (and make sure the column in the result is called ”NumberOfClasses”). [1 (3)]</li><li>Return the number of students per class, together with the corresponding class names (and make sure the column in the result is called ”NumberOfStudents”). [11]</li></ol><h4 id="sub-queries">1.3 Sub-queries</h4><ol type="1"><li><p>Return the name of the student who was registered last. [1 (Sarah Lindekens)]</p><p><em>Hint: Student IDs are assigned incrementally; students who are registered later have a higher ID.</em></p></li><li><p>Return the names of students who are registered for the class ”Databanken”. [15]</p></li></ol><h3 id="exercise-2">Exercise 2</h3><p>Given the same database as above, write SQL queries for the following problems:</p><ol type="1"><li><p>Find the names of all courses given by the department ”Informatica”. [5]</p></li><li><p>Find the names of all students from the 2nd year (= studentgrade) who are registered for a class of the department ”Informatica”. [4]</p></li><li><p>Return the date of birth of the oldest student who either follows a class on ”Dinsdag” (= Tuesday) or follows a class of the department ”Informatica”. [1 (1974-07-13)]</p></li><li><p>Find the names of all classes that are given in room 10F113 or have 5 or more enrolled students. [8]</p></li><li><p>Find the names of all students who are enrolled for 2 classes that take place on the same day. [16]</p></li><li><p>Find the name of all departments that have 5 or less classes. [8]</p></li><li><p>For each year (= studentgrade), return the year and the earliest date of birth for that year, except for the 2nd year. [3]</p></li><li><p>Find the IDs of students who are enrolled for a maximum number of classes. [1 (2)]</p><p><em>Hint: This means the maximum number of courses for which any student is registered!</em></p></li><li><p>Find the names of students who are not registered for any class. [10]</p></li></ol><h3 id="exercise-3">Exercise 3</h3><p>Consider the following database schema:</p><ul><li>Suppliers(<strong>sid: integer</strong>, sname: string, address: string)</li><li>Parts(<strong>pid: integer</strong>, pname: string, color: string)</li><li>Catalog(<strong>sid: integer</strong>, <strong>pid: integer</strong>, cost: real)</li></ul><ol type="1"><li>Write the necessary SQL DDL statements to create the above database (including primary and foreign key constraints).</li><li>Populate the database using SQL DML statements. Provide some ”keyboard”s (= pname) in the Parts table, with color white, red or black. Add at least 4 suppliers, one of which being ”Dell” (= sname). Each product is supplied by 0 or more suppliers (Catalog table); make sure one of the suppliers supplies each part.</li><li>Formulate SQL queries for the following problems:<ol type="1"><li>Give the pnames of parts for which there is a supplier.</li><li>Give the snames of suppliers that supply every part.</li><li>Give the snames of suppliers that supply every red part.</li><li>Give the pnames of parts delivered by nobody else but ”Dell”.</li><li>Find the sids of all suppliers that ask a higher price for a certain product than the average price of that product.</li><li>For each product, find the sname(s) of the supplier(s) that ask the highest price for this product.</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Discussions </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Databases </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Subtype Polymorphism vs. HoFs</title>
      <link href="2021/03/12/2021-03-12-Subtype-Polymorphism-vs.-HoFs/"/>
      <url>2021/03/12/2021-03-12-Subtype-Polymorphism-vs.-HoFs/</url>
      
        <content type="html"><![CDATA[<h1 id="subtype-polymorphism-vs.-hofs">Subtype Polymorphism vs. HoFs</h1><p><a href="https://www.youtube.com/playlist?list=PL8FaHk7qbOD56r1sGUGifsfC0KRDAsuZ3">Video</a></p><h2 id="dynamic-method-selection-puzzle"><a href="https://www.youtube.com/watch?v=cUL1LWVv984&amp;list=PL8FaHk7qbOD56r1sGUGifsfC0KRDAsuZ3&amp;index=1">Dynamic Method Selection Puzzle</a></h2><h3 id="a-typing-puzzle">A Typing Puzzle</h3><p>Suppose we have two classes:</p><ul><li>Dog: Implements bark() method.</li><li>ShowDog: Extends Dog, overrides bark method.</li></ul><p>Summarizing is-a relationships, we have:</p><ul><li>Every ShowDog is-a Dog</li><li>Every Dog is-an Object.<ul><li>All types in Java are a subtype of Object.</li></ul></li></ul><p><img src="/images/CS61B/3184180.png" /></p><p>For each assignment, decide if it causes a compile error.</p><p>For each call to bark, decide whether:</p><ol type="1"><li>Dog.bark() is called</li><li>ShowDog.bark() is called</li><li>A syntax error results.</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object o2 = <span class="keyword">new</span> ShowDog(<span class="string">&quot;Mortimer&quot;</span>, <span class="string">&quot;Corgi&quot;</span>, <span class="number">25</span>, <span class="number">512.2</span>);</span><br><span class="line"><span class="comment">/* Allowed */</span></span><br><span class="line"></span><br><span class="line">ShowDog sdx = ((ShowDog) o2);</span><br><span class="line">sdx.bark();</span><br><span class="line"><span class="comment">/* Allowed */</span></span><br><span class="line"></span><br><span class="line">Dog sdx = ((Dog) o2);</span><br><span class="line">dx.bark();</span><br><span class="line"><span class="comment">/* Allowed */</span></span><br><span class="line"></span><br><span class="line">((Dog) o2).bark();</span><br><span class="line"><span class="comment">/* Allowed */</span></span><br><span class="line"></span><br><span class="line">Object o3 = (Dog) o2;</span><br><span class="line">o3.bark();</span><br><span class="line"><span class="comment">/* Fail */</span></span><br></pre></td></tr></table></figure><p>The rules:</p><ul><li>Compiler allows memory box to hold any subtype.</li><li>Compiler allows calls based on static type.</li><li><strong>Overridden non-static methods are selected at run time based on dynamic type</strong>.<strong>Everything else is based on static type</strong>, including <a href="https://docs.google.com/presentation/d/128PmKI2zpI4pi21_sQxAgeLj7eF3dJzoLciJea4W37A/edit#slide=id.g6292bcebc_9247">overloaded methods</a>. Note: No overloaded methods for problem at left.</li></ul><table><thead><tr class="header"><th>Variable or expression</th><th>Static Type</th><th>Dynamic Type</th></tr></thead><tbody><tr class="odd"><td>o2</td><td>Object</td><td>ShowDog</td></tr><tr class="even"><td>sdx</td><td>ShowDog</td><td>ShowDog</td></tr><tr class="odd"><td>dx</td><td>Dog</td><td>ShowDog</td></tr><tr class="even"><td>((Dog) o2)</td><td>Dog</td><td>ShowDog</td></tr><tr class="odd"><td>o3</td><td>Object</td><td>ShowDog</td></tr></tbody></table><h3 id="static-type-vs.-dynamic-type">Static Type vs. Dynamic Type</h3><p>Every variable in Java has a “compile-time type”, a.k.a. “static type”.</p><ul><li>This is the type specified at <strong>declaration</strong>. Never changes!</li></ul><p>Variables also have a “run-time type”, a.k.a. “dynamic type”.</p><ul><li>This is the type specified at <strong>instantiation</strong> (e.g. when using new).</li><li>Equal to the type of the object being pointed at.</li></ul><p><img src="/images/CS61B/3184181.png" /></p><h3 id="static-methods-variables-and-inheritance">Static Methods, Variables, and Inheritance</h3><ul><li>What if a subclass has variables with the same name as a superclass?</li><li>What if subclass has a static method with the same signature as a superclass method?<ul><li>For static methods, we do not use the term overriding for this.</li></ul></li></ul><p>These two practices above are called “hiding”.</p><ul><li>It is bad style.</li><li>There is no good reason to ever do this.</li><li>The rules for resolving the conflict are a bit <a href="https://docs.oracle.com/javase/tutorial/java/IandI/override.html">confusing to learn</a>.</li></ul><h2 id="subtype-polymorphism"><a href="https://www.youtube.com/watch?v=m2F-ekp_BRU&amp;list=PL8FaHk7qbOD56r1sGUGifsfC0KRDAsuZ3&amp;index=2">Subtype Polymorphism</a></h2><p>The biggest idea of the last couple of lectures: <u><strong>Subtype Polymorphism</strong></u></p><ul><li>Polymorphism: “providing a single interface to entities of different types”</li></ul><p>Consider a variable deque of static type Deque:</p><ul><li>When you call deque.addFirst(), the actual behaviour is based on the dynamic type.</li><li>Java automatically selects the right behaviour using what is sometimes called “dynamic method selection”.</li></ul><h3 id="subtype-polymorphism-vs.-explicit-higher-order-functions">Subtype Polymorphism vs. Explicit Higher Order Functions</h3><p>Suppose we want to write a program that prints a string representation of the larger of two objects.</p><p><strong>Explicit HoF Approach</strong>:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_larger</span>(<span class="params">x, y, compare, stringify</span>):</span></span><br><span class="line">    <span class="comment"># Sometimes called a “callback”</span></span><br><span class="line">    <span class="keyword">if</span> compare(x, y):</span><br><span class="line">        <span class="keyword">return</span> stringify(x)</span><br><span class="line">    <span class="keyword">return</span> stringify(y)</span><br></pre></td></tr></table></figure><p><strong>Subtype Polymorphism Approach</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_larger</span>(<span class="params">x, y</span>):</span></span><br><span class="line">   <span class="keyword">if</span> x.largerThan(y):</span><br><span class="line">       <span class="keyword">return</span> x.<span class="built_in">str</span>()</span><br><span class="line">   <span class="keyword">return</span> y.<span class="built_in">str</span>()</span><br></pre></td></tr></table></figure><h2 id="diy-comparison"><a href="https://www.youtube.com/watch?v=nYPPbbkKF1w&amp;list=PL8FaHk7qbOD56r1sGUGifsfC0KRDAsuZ3&amp;index=3">DIY Comparison</a></h2><h3 id="shoutkey.comtba">shoutkey.com/TBA</h3><p>Suppose we want to write a function max() that returns the max of any array, regardless of type.</p><p><img src="/images/CS61B/3184182.png" /></p><p>How many compilation errors are there in the code shown?</p><ul><li><del>0</del></li><li><strong>1</strong></li><li><del>2</del></li><li><del>3</del></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Maximizer.java */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">max</span><span class="params">(Object[] items)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> maxDex = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; items.length; i += <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (items[i] &gt; items[maxDex]) &#123; <span class="comment">// Error</span></span><br><span class="line">      maxDex = i;                 &#125;&#125;</span><br><span class="line">  <span class="keyword">return</span> items[maxDex];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* DogLauncher.java */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  Dog[] dogs = &#123;<span class="keyword">new</span> Dog(<span class="string">&quot;Elyse&quot;</span>, <span class="number">3</span>), <span class="keyword">new</span> Dog(<span class="string">&quot;Sture&quot;</span>, <span class="number">9</span>),</span><br><span class="line">                <span class="keyword">new</span> Dog(<span class="string">&quot;Benjamin&quot;</span>, <span class="number">15</span>)&#125;;</span><br><span class="line">  Dog maxDog = (Dog) max(dogs);</span><br><span class="line">  maxDog.bark();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Writing a General Max Function</strong></p><p>Objects cannot be compared to other objects with &gt;</p><ul><li>One (bad) way to fix this: Write a max method in the Dog class (and give up on our dream of a one true max function).</li></ul><h3 id="dog.maxdog">Dog.maxDog</h3><p>One approach to maximizing a Dog array: Leave it to the Dog class.</p><ul><li>What is the disadvantage of this?</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Returns maximum of dogs. */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Dog <span class="title">maxDog</span><span class="params">(Dog[] dogs)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (dogs == <span class="keyword">null</span> || dogs.length == <span class="number">0</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>; &#125;</span><br><span class="line">   Dog maxDog = dogs[<span class="number">0</span>];</span><br><span class="line">   <span class="keyword">for</span> (Dog d : dogs) &#123;</span><br><span class="line">       <span class="keyword">if</span> (d.size &gt; maxDog.size) &#123;</span><br><span class="line">        maxDog = d;        &#125;&#125;</span><br><span class="line"><span class="keyword">return</span> maxDog;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">Dog[] dogs = <span class="keyword">new</span> Dog[]&#123;d1, d2, d3&#125;;</span><br><span class="line">Dog largest = Dog.maxDog(dogs);</span><br></pre></td></tr></table></figure><h3 id="the-fundamental-problem">The Fundamental Problem</h3><p>Objects cannot be compared to other objects with &gt;</p><ul><li>How could we fix our Maximizer class using inheritance / HoFs?</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Maximizer.java */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">max</span><span class="params">(Object[] items)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> maxDex = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; items.length; i += <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (items[i] &gt; items[maxDex]) &#123;</span><br><span class="line">      maxDex = i;                 &#125;&#125;</span><br><span class="line">  <span class="keyword">return</span> items[maxDex];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* DogLauncher.java */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  Dog[] dogs = &#123;<span class="keyword">new</span> Dog(<span class="string">&quot;Elyse&quot;</span>, <span class="number">3</span>), <span class="keyword">new</span> Dog(<span class="string">&quot;Sture&quot;</span>, <span class="number">9</span>),</span><br><span class="line">                <span class="keyword">new</span> Dog(<span class="string">&quot;Benjamin&quot;</span>, <span class="number">15</span>)&#125;;</span><br><span class="line">  Dog maxDog = (Dog) max(dogs);</span><br><span class="line">  maxDog.bark();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="solution">Solution</h3><p>Create an interface that guarantees a comparison method.</p><p><em>interface inheritance says <strong>what</strong> a class can do, in this case compare</em></p><ul><li>Have Dog implement this interface.</li><li>Write Maximizer class in terms of this interface.</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Dog</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String n, <span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">        name = n;</span><br><span class="line">        size = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Dog uddaDog)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//assume nobody is messing up and giving us</span></span><br><span class="line">        <span class="comment">//something that isn&#x27;t a dog.</span></span><br><span class="line">        <span class="keyword">return</span> size - uddaDog.size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bark</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; says: bark&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="/images/CS61B/3184183.png" /></p><h3 id="the-ourcomparable-interface">The OurComparable Interface</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OurComparable</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object obj)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Could have also been OurComparable. No meaningful difference.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>Specification, returns:</p><ul><li>Negative number if <strong>this</strong> is less than obj.</li><li>0 if <strong>this</strong> is equal to object.</li><li>Positive number if <strong>this</strong> is greater than obj.</li></ul><h3 id="general-maximization-function-through-inheritance">General Maximization Function Through Inheritance</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OurComparable</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object obj)</span></span>;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">OurComparable</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** Warning, cast can cause runtime error! */</span></span><br><span class="line">       Dog uddaDog = (Dog) obj;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.size - uddaDog.size;</span><br><span class="line">      &#125; ...</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Maximizer</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> OurComparable <span class="title">max</span><span class="params">(OurComparable[] a)</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Dog[] dogs = <span class="keyword">new</span> Dog[]&#123;d1, d2, d3&#125;;</span><br><span class="line">Dog largest = (Dog) Maximizer.max(dogs);</span><br></pre></td></tr></table></figure><p>Benefits of this approach:</p><ul><li>No need for array maximization code in every custom type (i.e. no Dog.maxDog(Dog[]) function required).</li><li>Code that operates on multiple types (mostly) gracefully, e.g.</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OurComparable[] objs = getItems(“somefile.txt”); </span><br><span class="line"><span class="keyword">return</span> Maximizer.max(objs);</span><br></pre></td></tr></table></figure><h3 id="interfaces-quiz-1"><a href="https://www.youtube.com/watch?v=dbdbcbhe3Jk&amp;list=PL8FaHk7qbOD56r1sGUGifsfC0KRDAsuZ3&amp;index=5">Interfaces Quiz #1</a></h3><p>Q: If we omit compareTo(), which file will fail to <strong>compile</strong>?</p><ul><li>DogLauncher.java</li><li>Dog.java</li><li>Maximizer.java</li><li>OurComparable.java</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DogLauncher</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    Dog[] dogs = <span class="keyword">new</span> Dog[]&#123;d1, d2, d3&#125;;</span><br><span class="line">    System.out.println(Maximizer.max(dogs));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">OurComparable</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    Dog uddaDog = (Dog) o;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.size</span><br><span class="line">           - uddaDog.size;</span><br><span class="line">  &#125; ...</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ublic <span class="class"><span class="keyword">class</span> <span class="title">Maximizer</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> OurComparable <span class="title">max</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">          OurComparable[] items)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">int</span> cmp = items[i].</span><br><span class="line">      compareTo(items[maxDex]);</span><br><span class="line">    ...</span><br><span class="line">  &#125;...</span><br></pre></td></tr></table></figure><p>Dog will fail to compile because it does not implement all abstract methods required by OurComparable interface. (And I suppose DogLauncher will fail as well since Dog.class doesn’t exist)</p><h3 id="interfaces-quiz-2">Interfaces Quiz #2</h3><p>Q: If we omit implements OurComparable, which file will fail to <strong>compile</strong>?</p><ul><li>DogLauncher.java</li><li>Dog.java</li><li>Maximizer.java</li><li>OurComparable.java</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DogLauncher</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    Dog[] dogs = <span class="keyword">new</span> Dog[]&#123;d1, d2, d3&#125;;</span><br><span class="line">    System.out.println(Maximizer.max(dogs));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">OurComparable</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    Dog uddaDog = (Dog) o;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.size</span><br><span class="line">           - uddaDog.size;</span><br><span class="line">  &#125; ... </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Maximizer</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> OurComparable <span class="title">max</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">          OurComparable[] items)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">int</span> cmp = items[i].</span><br><span class="line">      compareTo(items[maxDex]);</span><br><span class="line">    ...</span><br><span class="line">  &#125;...</span><br></pre></td></tr></table></figure><p>DogLauncher will fail, because it tries to pass things that are not OurComparables, and Maximizer expects OurComparables.</p><h2 id="comparables"><a href="https://www.youtube.com/watch?v=iQoN9bt8GJc&amp;list=PL8FaHk7qbOD56r1sGUGifsfC0KRDAsuZ3&amp;index=6">Comparables</a></h2><h3 id="the-issues-with-ourcomparable">The Issues With OurComparable</h3><p>Two issues:</p><ul><li>Awkward casting to/from Objects.</li><li>We made it up.<ul><li>No existing classes implement OurComparable (e.g. String, etc).</li><li>No existing classes use OurComparable (e.g. no built-in max function that uses OurComparable</li></ul></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">OurComparable</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** Warning, cast can cause runtime error! */</span></span><br><span class="line">       Dog uddaDog = (Dog) obj;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.size - uddaDog.size;</span><br><span class="line">      &#125; ...</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Dog[] dogs = <span class="keyword">new</span> Dog[]&#123;d1, d2, d3&#125;;</span><br><span class="line">Dog largest = (Dog) Maximizer.max(dogs);</span><br></pre></td></tr></table></figure><p>The industrial strength approach: Use the built-in Comparable interface.</p><ul><li>Already defined and used by tons of libraries. Uses generics.</li></ul><p><img src="/images/CS61B/3184184.png" /></p><h4 id="comparable-advantages">Comparable Advantages</h4><ul><li>Lots of built in classes implement Comparable (e.g. String).</li><li>Lots of libraries use the Comparable interface (e.g. Arrays.sort)</li><li>Avoids need for casts</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Dog</span>&gt; </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Dog uddaDog)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.size - uddaDog.size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Much better!</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment">    Implementing Comparable allows library functions to    compare custom types (e.g. finding max).</span></span><br><span class="line"><span class="comment">    */</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">OurComparable</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    Dog uddaDog = (Dog) obj;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.size - uddaDog.size;</span><br><span class="line">      &#125; ...</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Dog[] dogs = <span class="keyword">new</span> Dog[]&#123;d1, d2, d3&#125;;</span><br><span class="line">Dog largest = Collections.max(Arrays.asList(dogs));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="comparators"><a href="https://www.youtube.com/watch?v=1oow3NGoExg&amp;list=PL8FaHk7qbOD56r1sGUGifsfC0KRDAsuZ3&amp;index=7">Comparators</a></h2><h3 id="natural-order">Natural Order</h3><p>The term “Natural Order” is sometimes used to refer to the ordering implied by a Comparable’s compareTo method.</p><ul><li>Example: Dog objects (as we’ve defined them) have a natural order given by their size.</li></ul><p><img src="/images/CS61B/3184185.png" /></p><p>May wish to order objects in a different way.</p><ul><li>Example: By Name.</li></ul><h3 id="subtype-polymorphism-vs.-explicit-higher-order-functions-1"><strong>Subtype Polymorphism vs. Explicit Higher Order Functions</strong></h3><p>Suppose we want to write a program that prints a string representation of the larger of two objects according to some specific comparison function.</p><p><strong>Explicit HoF Approach:</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_larger</span>(<span class="params">x, y, compare, stringify</span>):</span></span><br><span class="line"><span class="comment"># Can simply pass a different compare function.</span></span><br><span class="line">    <span class="keyword">if</span> compare(x, y):</span><br><span class="line">        <span class="keyword">return</span> stringify(x)</span><br><span class="line">    <span class="keyword">return</span> stringify(y)</span><br></pre></td></tr></table></figure><p><strong>Subtype Polymorphism Approach??</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_larger</span>(<span class="params">T x, T y</span>):</span></span><br><span class="line">   <span class="keyword">if</span> x.largerThan(y):</span><br><span class="line">       <span class="keyword">return</span> x.<span class="built_in">str</span>()</span><br><span class="line">   <span class="keyword">return</span> y.<span class="built_in">str</span>()</span><br></pre></td></tr></table></figure><p><strong>Subtype Polymorphism Approach</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_larger</span>(<span class="params">T x, T y, comparator&lt;T&gt; c</span>):</span></span><br><span class="line">   <span class="keyword">if</span> c.compare(x, y):</span><br><span class="line">       <span class="keyword">return</span> x.<span class="built_in">str</span>()</span><br><span class="line">   <span class="keyword">return</span> y.<span class="built_in">str</span>()</span><br></pre></td></tr></table></figure><h3 id="additional-orders-in-java">Additional Orders in Java</h3><p>In some languages, we’d write two comparison functions and simply pass the one we want :</p><ul><li>sizeCompare()</li><li>nameCompare()</li></ul><p>The standard Java approach: Create sizeComparator and nameComparator classes that implement the Comparator interface.</p><ul><li>Requires methods that also take Comparator arguments (see project 1B).</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(T o1, T o2)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="dogs-and-comparators">Dogs and Comparators</h3><p><img src="/images/CS61B/3184186.png" /></p><h3 id="example-namecomparator">Example: NameComparator</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Dog</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NameComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Dog</span>&gt; </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Dog d1, Dog d2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> d1.name.compareTo(d2.name);</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Comparator&lt;Dog&gt; cd = <span class="keyword">new</span> Dog.NameComparator();</span><br><span class="line"><span class="keyword">if</span> (cd.compare(d1, d3) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    d1.bark();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    d3.bark();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Result: If d1 has a name that comes later in the alphabet than d3, d1 barks.</p><h2 id="comparable-and-comparator-summary">Comparable and Comparator Summary</h2><p>Interfaces provide us with the ability to make <strong>callbacks:</strong></p><ul><li><p>Sometimes a function needs the help of another function that might not have been written yet.</p><ul><li>Example: max needs compareTo</li><li>The helping function is sometimes called a “callback”.</li></ul></li><li><p>Some languages handle this using explicit function passing.</p></li><li><p>In Java, we do this by wrapping up the needed function in an interface (e.g. Arrays.sort needs compare which lives inside the comparator interface)</p></li><li><p>Arrays.sort “calls back” whenever it needs a comparison.</p><ul><li>Similar to giving your number to someone if they need information.</li></ul></li></ul><h2 id="overview">Overview</h2><p><strong>Review: Typing Rules</strong></p><ul><li>Compiler allows the memory box to hold any subtype.</li><li>Compiler allows calls based on static type.</li><li>Overriden non-static methods are selected at runtime based on dynamic type.</li><li>For overloaded methods, the method is selected at compile time.</li></ul><p><strong>Subtype Polymorphism</strong> Consider a variable of static type <code>Deque</code>. The behavior of calling <code>deque.method()</code> depends on the dynamic type. Thus, we could have many subclasses the implement the <code>Deque</code> interface, all of which will be able to call <code>deque.method()</code>.</p><p><strong>Subtype Polymorphism Example</strong> Suppose we want to write a function <code>max()</code> that returns the max of any array regardless of type. If we write a method <code>max(Object[] items)</code>, where we use the ‘&gt;’ operator to compare each element in the array, this will not work! Why is this the case?</p><p>Well, this makes the assumption that all objects can be compared. But some objects cannot! Alternatively, we could write a <code>max()</code> function inside the Dog class, but now we have to write a <code>max()</code> function for each class that we want to compare! Remember, our goal is to write a “one true max method” that works for all comparable objects.</p><p><strong>Solution: OurComparable Interface</strong> The solution is to create an interface that contains a <code>compareTo(Object)</code> method; let’s call this interface <code>OurComparable</code>. Now, our <code>max()</code> method can take a <code>OurComparable[]</code> parameter, and since we guarantee that any object which extends the interface has all the methods inside the interface, we guarantee that we will always be able to call a <code>compareTo</code> method, and that this method will correctly return some ordering of the objects.</p><p>Now, we can specify a “one true max method”. Of course, any object that needs to be compared must implement the <code>compareTo</code> method. However, instead of re-implementing the <code>max</code> logic in every class, we only need to implement the logic for picking the ordering of the objects, given two objects.</p><p><strong>Even Better: Java’s In-Built Comparable</strong> Java has an in-built <code>Comparable</code> interface that uses generics to avoid any weird casting issues. Plus, Comparable already works for things like <code>Integer</code>, <code>Character</code>, and <code>String</code>; moreover, these objects have already implemented a <code>max</code>, <code>min</code>, etc. method for you. Thus you do not need to re-do work that’s already been done!</p><p><strong>Comparators</strong> The term “Natural Order” is used to refer to the ordering implied by a <code>Comparable</code>’s <code>compareTo</code> method. However, what if we want to order our <code>Dog</code> objects by something other than <code>size</code>? We will instead pass in a <code>Comparator&lt;T&gt;</code> interface, which demands a <code>compare()</code> method. We can then implement the <code>compare()</code> method anyway we want to achieve our ordering.</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structures </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Regular Expressions</title>
      <link href="2021/03/12/2021-03-12-Regular-Expressions/"/>
      <url>2021/03/12/2021-03-12-Regular-Expressions/</url>
      
        <content type="html"><![CDATA[<h1 id="regular-expressions">Regular Expressions</h1><h2 id="introduction">Introduction</h2><ul><li><strong>Recognition</strong> and <strong>Generation</strong> are two ways to define formal languages</li><li>Regular languages can be recognised using <strong>Finite Automata</strong> (DFA, NFA, Λ-NFA)</li><li>Regular languages can be generated using <strong>Regular Expressions</strong></li></ul><h2 id="notation">Notation</h2><ul><li><p>Basic building blocks</p><ul><li>∅ representing itself</li><li>Λ representing the language {Λ}</li><li>Terminal symbols e.g. b representing the language {b}</li></ul></li><li><p>Operators</p><ul><li>Concatenation: e.g. ab</li><li>Alternation: e.g. a + b (choice between alternatives / union)<ul><li>Alternation is <strong>commutative</strong>!</li></ul></li><li>Closure: e.g. a<sup>∗</sup></li></ul></li></ul><p>These three operators suffice to generate all regular languages</p><h2 id="example">Example</h2><p>The following table gives some REs and their languages. The expressions that use closure have infinite languages, so one cannot list all their strings. In these cases, we may settle for listing several of the shorter strings followed by ".. ." or we may specify an infinite set intentionally, as in the last row of the table.</p><table><thead><tr class="header"><th>RE</th><th>Corresponding Regular Set</th></tr></thead><tbody><tr class="odd"><td>a + bc</td><td>{a, bc}</td></tr><tr class="even"><td>a(b + c)</td><td>{ab, ac}</td></tr><tr class="odd"><td>(a + b)(a + c)(Λ + a)</td><td>{aa, ac, ba, bc, aaa, aca, baa, bca}</td></tr><tr class="even"><td>a<sup>∗</sup>(b + cc)</td><td>{b, cc, ab, acc, aab, aacc, aaab, aaacc, . .}</td></tr><tr class="odd"><td>a + bb<sup>∗</sup></td><td>{a, b, bb, bbb, bbbb, bbbbb, ... }</td></tr><tr class="even"><td>(a + bb)<sup>∗</sup></td><td>{Λ, a, bb, aa, abb, bba, bbbb, aaa, ...}</td></tr><tr class="odd"><td>a<sup>∗</sup>b<sup>∗</sup></td><td>{Λ, a, b, aa, ab, bb, aaa, aab, abb, bbb, ...}</td></tr><tr class="even"><td>((a + b)(a + b))<sup>∗</sup></td><td>{x | x e {a, b}<sup>∗</sup> Λ |x| is even.}</td></tr></tbody></table><h2 id="definition-regular-expressions-and-their-languages">Definition: Regular expressions and their languages</h2><p>The following conditions specify the set of REs, R, over the symbol set Σ and also their languages.</p><ol type="1"><li><p>∅ ∈ R and it represents the set ∅.</p><p>A ∈ R and it represents the set {Λ}.</p><p>∀σ ∈ E : a ∈ R and it represents the set {σ}</p></li><li><p>If r ∈ R, then (r<sup>∗</sup>) ∈ R, representing the closure of r's set.</p><p>If r<sub>1</sub> ∈ R and r<sub>2</sub> ∈ R, then (r<sub>1</sub>r<sub>2</sub> ) ∈ R and (r<sub>1</sub> + r<sub>2</sub>) ∈ R, representing the concatenation and union of the sets that r<sub>1</sub> and r<sub>2</sub> represent.</p></li><li><p>There are no other REs over Σ.</p></li></ol><h2 id="definition-language-function">Definition: Language Function</h2><p><strong>If r is an RE, <em>L</em>(r) is the set it represents</strong></p><p><strong>Example</strong>: What strings are in L = <em>L</em>((a + bb)<sup>∗</sup>)?</p><p>L is the set that the RE (a+ bb)<sup>∗</sup> represents. This language contains all strings over {a, b}, in which the all-b substrings must be of even length.</p><h2 id="definition-another-extension-of-res">Definition: Another extension of REs</h2><p><strong>Let r be any RE. Then r<sup>+</sup> represents and strings in r<sup>∗</sup>, except Λ</strong></p><p>Some observations:</p><ul><li>r<sup>∗</sup> = Λ + r<sup>+</sup></li><li>Another way to describe r<sup>+</sup> is to say that it stands for 1 or more r’s concatenated</li><li>r<sup>+</sup> = rr<sup>∗</sup></li></ul><p>Example: Find an RE for all strings over Σ = {a, b} in which the number of bs is: (i) exactly 2, (ii) at least 2, (iii) even, or (iv) odd.</p><ul><li><ol start="2" type="i"><li>a<sup>∗</sup>ba<sup>∗</sup>ba<sup>∗</sup></li></ol></li><li><ol start="2" type="i"><li>a<sup>∗</sup>ba<sup>∗</sup>b(a + b)<sup>∗</sup></li></ol></li><li><ol start="3" type="i"><li>a<sup>∗</sup>(ba<sup>∗</sup>ba<sup>∗</sup>)<sup>∗</sup></li></ol></li><li><ol start="4" type="i"><li>a<sup>∗</sup>ba<sup>∗</sup>(ba<sup>∗</sup>ba<sup>∗</sup>)<sup>∗</sup></li></ol></li></ul><h2 id="building-automata-for-re">Building automata for RE</h2><p>Build a Λ-NFA that recognises <em>L</em>(r) for any RE r</p><ul><li>Decompose r, using the recursive definition, down to zero-operation REs</li><li>Use FAs for each zero-operation RE</li></ul><p><img src="/images/FOCS/1864440.png" /></p><ul><li>Recompose r, building Λ-NFAs at each stage, using the constructive proofs</li></ul><p><strong>Examples</strong></p><p><img src="/images/FOCS/1864441.png" /></p><p><img src="/images/FOCS/1864442.png" /></p><p><img src="/images/FOCS/1864443.png" /></p><ul><li>Accepts (a + b)<sup>∗</sup>ba(ba)<sup>∗</sup></li></ul><h2 id="exercises">Exercises</h2><p>Convert the following regular expressions to Λ-NFAs</p><ul><li>(aa + ab)<sup>∗</sup></li><li>(aaa + abb)<sup>∗</sup>b</li><li>(a + aab)<sup>∗</sup>b</li></ul><p><strong>Solution:</strong></p><ul><li>(aa + ab)<sup>∗</sup></li></ul><p><img src="/images/FOCS/1864444.png" /></p><ul><li>(aaa + abb)<sup>∗</sup>b</li></ul><p><img src="/images/FOCS/1864445.png" /></p><ul><li>(a + aab)<sup>∗</sup>b</li></ul><p><img src="/images/FOCS/1864446.png" /></p><h2 id="theorem">Theorem</h2><p>Any regular language is the set of strings represented by an RE.</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fundamentals of Computer Science </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Trees, Data Abstraction</title>
      <link href="2021/03/12/2021-03-12-Trees,-Data-Abstraction/"/>
      <url>2021/03/12/2021-03-12-Trees,-Data-Abstraction/</url>
      
        <content type="html"><![CDATA[<h1 id="trees-data-abstraction">Trees, Data Abstraction</h1><h2 id="abstraction">Abstraction</h2><h2 id="mobiles">Mobiles</h2><p><strong>Acknowledgements.</strong> This mobile example is based on a classic problem from MIT Structure and Interpretation of Computer Programs, <a href="https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-15.html#%_sec_2.2.2">Section 2.2.2</a>.</p><figure><img src="https://inst.eecs.berkeley.edu/~cs61a/fa20/hw/hw03/assets/mobile-planet.png" alt="" /><figcaption>Mobile example</figcaption></figure><p>We are making a planetarium mobile. A <a href="https://images.zanui.com.au/unsafe/1600x/filters:sharpen(1,0.2,1):quality(80)/production-static.aws.zanui.com.au/p/authentic-models-0459-1.jpg">mobile</a> is a type of hanging sculpture. A binary mobile consists of two arms. Each arm is a rod of a certain length, from which hangs either a planet or another mobile. For example, the below diagram shows the left and right arms of Mobile A, and what hangs at the ends of each of those arms.</p><figure><img src="https://inst.eecs.berkeley.edu/~cs61a/fa20/hw/hw03/assets/mobile-planet-labeled.png" alt="" /><figcaption>Labeled Mobile example</figcaption></figure><p>We will represent a binary mobile using the data abstractions below.</p><ul><li>A <code>mobile</code> must have both a left <code>arm</code> and a right <code>arm</code>.</li><li>An <code>arm</code> has a positive length and must have something hanging at the end, either a <code>mobile</code> or <code>planet</code>.</li><li>A <code>planet</code> has a positive size, and nothing hanging from it.</li></ul><h3 id="arms-length-recursion-sidenote">Arms-length recursion (sidenote)</h3><p>Before we get started, a quick comment on recursion with tree data structures. Consider the following function.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">min_depth</span>(<span class="params">t</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;A simple function to return the distance between t&#x27;s root and its closest leaf&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> <span class="comment"># Base case---the distance between a node and itself is zero</span></span><br><span class="line">    h = <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>) <span class="comment"># Python&#x27;s version of infinity</span></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> branches(t):</span><br><span class="line">        <span class="keyword">if</span> is_leaf(b): <span class="keyword">return</span> <span class="number">1</span> <span class="comment"># !!!</span></span><br><span class="line">        h = <span class="built_in">min</span>(h, <span class="number">1</span> + min_depth(b))</span><br><span class="line">    <span class="keyword">return</span> h</span><br></pre></td></tr></table></figure><p>The line flagged with <code>!!!</code> is an "arms-length" recursion violation. Although our code works correctly when it is present, by performing this check we are doing work that should be done by the next level of recursion—we already have an if-statement that handles any inputs to <code>min_depth</code> that are leaves, so we should not include this line to eliminate redundancy in our code.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">min_depth</span>(<span class="params">t</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;A simple function to return the distance between t&#x27;s root and its closest leaf&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    h = <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> branches(t):</span><br><span class="line">        <span class="comment"># Still works fine!</span></span><br><span class="line">        h = <span class="built_in">min</span>(h, <span class="number">1</span> + min_depth(b))</span><br><span class="line">    <span class="keyword">return</span> h</span><br></pre></td></tr></table></figure><p>Arms-length recursion is not only redundant but often complicates our code and obscures the functionality of recursive functions, making writing recursive functions much more difficult. We always want our recursive case to be handling one and only one recursive level. We may or may not be checking your code periodically for things like this.</p><h3 id="q1-weights">Q1: Weights</h3><p>Implement the <code>planet</code> data abstraction by completing the <code>planet</code> constructor and the <code>size</code> selector so that a planet is represented using a two-element list where the first element is the string <code>'planet'</code> and the second element is its size. The <code>total_weight</code> example is provided to demonstrate use of the mobile, arm, and planet abstractions.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mobile</span>(<span class="params">left, right</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Construct a mobile from a left arm and a right arm.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> is_arm(left), <span class="string">&quot;left must be a arm&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> is_arm(right), <span class="string">&quot;right must be a arm&quot;</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&#x27;mobile&#x27;</span>, left, right]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_mobile</span>(<span class="params">m</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return whether m is a mobile.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">type</span>(m) == <span class="built_in">list</span> <span class="keyword">and</span> <span class="built_in">len</span>(m) == <span class="number">3</span> <span class="keyword">and</span> m[<span class="number">0</span>] == <span class="string">&#x27;mobile&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">left</span>(<span class="params">m</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Select the left arm of a mobile.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> is_mobile(m), <span class="string">&quot;must call left on a mobile&quot;</span></span><br><span class="line">    <span class="keyword">return</span> m[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">right</span>(<span class="params">m</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Select the right arm of a mobile.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> is_mobile(m), <span class="string">&quot;must call right on a mobile&quot;</span></span><br><span class="line">    <span class="keyword">return</span> m[<span class="number">2</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">arm</span>(<span class="params">length, mobile_or_planet</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Construct a arm: a length of rod with a mobile or planet at the end.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> is_mobile(mobile_or_planet) <span class="keyword">or</span> is_planet(mobile_or_planet)</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&#x27;arm&#x27;</span>, length, mobile_or_planet]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_arm</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return whether s is a arm.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">type</span>(s) == <span class="built_in">list</span> <span class="keyword">and</span> <span class="built_in">len</span>(s) == <span class="number">3</span> <span class="keyword">and</span> s[<span class="number">0</span>] == <span class="string">&#x27;arm&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">length</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Select the length of a arm.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> is_arm(s), <span class="string">&quot;must call length on a arm&quot;</span></span><br><span class="line">    <span class="keyword">return</span> s[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">end</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Select the mobile or planet hanging at the end of a arm.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> is_arm(s), <span class="string">&quot;must call end on a arm&quot;</span></span><br><span class="line">    <span class="keyword">return</span> s[<span class="number">2</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">planet</span>(<span class="params">size</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Construct a planet of some size.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> size &gt; <span class="number">0</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">size</span>(<span class="params">w</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Select the size of a planet.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> is_planet(w), <span class="string">&#x27;must call size on a planet&#x27;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_planet</span>(<span class="params">w</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Whether w is a planet.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">type</span>(w) == <span class="built_in">list</span> <span class="keyword">and</span> <span class="built_in">len</span>(w) == <span class="number">2</span> <span class="keyword">and</span> w[<span class="number">0</span>] == <span class="string">&#x27;planet&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">total_weight</span>(<span class="params">m</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the total weight of m, a planet or mobile.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t, u, v = examples()</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; total_weight(t)</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; total_weight(u)</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; total_weight(v)</span></span><br><span class="line"><span class="string">    9</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; from construct_check import check</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # checking for abstraction barrier violations by banning indexing</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check(HW_SOURCE_FILE, &#x27;total_weight&#x27;, [&#x27;Index&#x27;])</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> is_planet(m):</span><br><span class="line">        <span class="keyword">return</span> size(m)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">assert</span> is_mobile(m), <span class="string">&quot;must get total weight of a mobile or a planet&quot;</span></span><br><span class="line">        <span class="keyword">return</span> total_weight(end(left(m))) + total_weight(end(right(m)))</span><br></pre></td></tr></table></figure><h3 id="q2-balanced">Q2: Balanced</h3><p>Implement the <code>balanced</code> function, which returns whether <code>m</code> is a balanced mobile. A mobile is balanced if two conditions are met:</p><ol type="1"><li>The torque applied by its left arm is equal to that applied by its right arm. The torque of the left arm is the length of the left rod multiplied by the total weight hanging from that rod. Likewise for the right. For example, if the left arm has a length of <code>5</code>, and there is a <code>mobile</code> hanging at the end of the left arm of weight <code>10</code>, the torque on the left side of our mobile is <code>50</code>.</li><li>Each of the mobiles hanging at the end of its arms is balanced.</li></ol><p>Planets themselves are balanced, as there is nothing hanging off of them.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">balanced</span>(<span class="params">m</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return whether m is balanced.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t, u, v = examples()</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; balanced(t)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; balanced(v)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; w = mobile(arm(3, t), arm(2, u))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; balanced(w)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; balanced(mobile(arm(1, v), arm(1, w)))</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; balanced(mobile(arm(1, w), arm(1, v)))</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; from construct_check import check</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # checking for abstraction barrier violations by banning indexing</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check(HW_SOURCE_FILE, &#x27;balanced&#x27;, [&#x27;Index&#x27;])</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br></pre></td></tr></table></figure><h3 id="q3-totals">Q3: Totals</h3><p>Implement <code>totals_tree</code>, which takes a <code>mobile</code> (or <code>planet</code>) and returns a <code>tree</code> whose root is the total weight of the input. For a <code>planet</code>, <code>totals_tree</code> should return a leaf. For a <code>mobile</code>, <code>totals_tree</code> should return a tree whose label is that <code>mobile</code>'s total weight, and whose branches are <code>totals_tree</code>s for the ends of its arms.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">totals_tree</span>(<span class="params">m</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a tree representing the mobile with its total weight at the root.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t, u, v = examples()</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(totals_tree(t))</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">      1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(totals_tree(u))</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">      1</span></span><br><span class="line"><span class="string">      5</span></span><br><span class="line"><span class="string">        3</span></span><br><span class="line"><span class="string">        2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(totals_tree(v))</span></span><br><span class="line"><span class="string">    9</span></span><br><span class="line"><span class="string">      3</span></span><br><span class="line"><span class="string">        2</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">      6</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">        5</span></span><br><span class="line"><span class="string">          3</span></span><br><span class="line"><span class="string">          2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; from construct_check import check</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # checking for abstraction barrier violations by banning indexing</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check(HW_SOURCE_FILE, &#x27;totals_tree&#x27;, [&#x27;Index&#x27;])</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br></pre></td></tr></table></figure><h2 id="trees">Trees</h2><h3 id="q4-replace-leaf">Q4: Replace Leaf</h3><p>Define <code>replace_leaf</code>, which takes a tree <code>t</code>, a value <code>find_value</code>, and a value <code>replace_value</code>. <code>replace_leaf</code> returns a new tree that's the same as <code>t</code> except that every leaf label equal to <code>find_value</code> has been replaced with <code>replace_value</code>.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replace_leaf</span>(<span class="params">t, find_value, replace_value</span>):</span>    <span class="string">&quot;&quot;&quot;Returns a new tree where every leaf value equal to find_value has    been replaced with replace_value.     &gt;&gt;&gt; yggdrasil = tree(&#x27;odin&#x27;,    ...                  [tree(&#x27;balder&#x27;,    ...                        [tree(&#x27;thor&#x27;),    ...                         tree(&#x27;freya&#x27;)]),    ...                   tree(&#x27;frigg&#x27;,    ...                        [tree(&#x27;thor&#x27;)]),    ...                   tree(&#x27;thor&#x27;,    ...                        [tree(&#x27;sif&#x27;),    ...                         tree(&#x27;thor&#x27;)]),    ...                   tree(&#x27;thor&#x27;)])    &gt;&gt;&gt; laerad = copy_tree(yggdrasil) # copy yggdrasil for testing purposes    &gt;&gt;&gt; print_tree(replace_leaf(yggdrasil, &#x27;thor&#x27;, &#x27;freya&#x27;))    odin      balder        freya        freya      frigg        freya      thor        sif        freya      freya    &gt;&gt;&gt; laerad == yggdrasil # Make sure original tree is unmodified    True    &quot;&quot;&quot;</span>    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span> </span><br></pre></td></tr></table></figure><h3 id="q5-preorder">Q5: Preorder</h3><p>Define the function <code>preorder</code>, which takes in a tree as an argument and returns a list of all the entries in the tree in the order that <code>print_tree</code> would print them.</p><p>The following diagram shows the order that the nodes would get printed, with the arrows representing function calls.</p><figure><img src="https://inst.eecs.berkeley.edu/~cs61a/fa20/hw/hw03/assets/preorder.png" alt="" /><figcaption>preorder</figcaption></figure><blockquote><p><em>Note</em>: This ordering of the nodes in a tree is called a preorder traversal.</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preorder</span>(<span class="params">t</span>):</span>    <span class="string">&quot;&quot;&quot;Return a list of the entries in this tree in the order that they    would be visited by a preorder traversal (see problem description).     &gt;&gt;&gt; numbers = tree(1, [tree(2), tree(3, [tree(4), tree(5)]), tree(6, [tree(7)])])    &gt;&gt;&gt; preorder(numbers)    [1, 2, 3, 4, 5, 6, 7]    &gt;&gt;&gt; preorder(tree(2, [tree(4, [tree(6)])]))    [2, 4, 6]    &quot;&quot;&quot;</span>    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span> </span><br></pre></td></tr></table></figure><h3 id="q6-has-path">Q6: Has Path</h3><p>Write a function <code>has_path</code> that takes in a tree <code>t</code> and a string <code>word</code>. It returns <code>True</code> if there is a path that starts from the root where the entries along the path spell out the <code>word</code>, and <code>False</code> otherwise. (This data structure is called a trie, and it has a lot of cool applications!---think autocomplete). You may assume that every node's <code>label</code> is exactly one character.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">has_path</span>(<span class="params">t, word</span>):</span>    <span class="string">&quot;&quot;&quot;Return whether there is a path in a tree where the entries along the path    spell out a particular word.     &gt;&gt;&gt; greetings = tree(&#x27;h&#x27;, [tree(&#x27;i&#x27;),    ...                        tree(&#x27;e&#x27;, [tree(&#x27;l&#x27;, [tree(&#x27;l&#x27;, [tree(&#x27;o&#x27;)])]),    ...                                   tree(&#x27;y&#x27;)])])    &gt;&gt;&gt; print_tree(greetings)    h      i      e        l          l            o        y    &gt;&gt;&gt; has_path(greetings, &#x27;h&#x27;)    True    &gt;&gt;&gt; has_path(greetings, &#x27;i&#x27;)    False    &gt;&gt;&gt; has_path(greetings, &#x27;hi&#x27;)    True    &gt;&gt;&gt; has_path(greetings, &#x27;hello&#x27;)    True    &gt;&gt;&gt; has_path(greetings, &#x27;hey&#x27;)    True    &gt;&gt;&gt; has_path(greetings, &#x27;bye&#x27;)    False    &quot;&quot;&quot;</span>    <span class="keyword">assert</span> <span class="built_in">len</span>(word) &gt; <span class="number">0</span>, <span class="string">&#x27;no path for empty word.&#x27;</span>    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span> </span><br></pre></td></tr></table></figure><h1 id="extra-questions">Extra Questions</h1><h3 id="q7-interval-abstraction">Q7: Interval Abstraction</h3><p>Alyssa's program is incomplete because she has not specified the implementation of the interval abstraction. She has implemented the constructor for you; fill in the implementation of the selectors.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">interval</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Construct an interval from a to b.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> [a, b]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lower_bound</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the lower bound of interval x.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upper_bound</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the upper bound of interval x.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br></pre></td></tr></table></figure><p>Louis Reasoner has also provided an implementation of interval multiplication. Beware: there are some data abstraction violations, so help him fix his code before someone sets it on fire: https://youtu.be/QwoghxwETng</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mul_interval</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the interval that contains the product of any value in x and any</span></span><br><span class="line"><span class="string">    value in y.&quot;&quot;&quot;</span></span><br><span class="line">    p1 = x[<span class="number">0</span>] * y[<span class="number">0</span>]</span><br><span class="line">    p2 = x[<span class="number">0</span>] * y[<span class="number">1</span>]</span><br><span class="line">    p3 = x[<span class="number">1</span>] * y[<span class="number">0</span>]</span><br><span class="line">    p4 = x[<span class="number">1</span>] * y[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">min</span>(p1, p2, p3, p4), <span class="built_in">max</span>(p1, p2, p3, p4)]</span><br></pre></td></tr></table></figure><h3 id="q8-sub-interval">Q8: Sub Interval</h3><p>Using reasoning analogous to Alyssa's, define a subtraction function for intervals. Try to reuse functions that have already been implemented if you find yourself repeating code.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub_interval</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the interval that contains the difference between any value in x</span></span><br><span class="line"><span class="string">    and any value in y.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br></pre></td></tr></table></figure><h3 id="q9-div-interval">Q9: Div Interval</h3><p>Alyssa implements division below by multiplying by the reciprocal of <code>y</code>. Ben Bitdiddle, an expert systems programmer, looks over Alyssa's shoulder and comments that it is not clear what it means to divide by an interval that spans zero. Add an <code>assert</code> statement to Alyssa's code to ensure that no such interval is used as a divisor:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">div_interval</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the interval that contains the quotient of any value in x divided by</span></span><br><span class="line"><span class="string">    any value in y. Division is implemented as the multiplication of x by the</span></span><br><span class="line"><span class="string">    reciprocal of y.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    reciprocal_y = interval(<span class="number">1</span>/upper_bound(y), <span class="number">1</span>/lower_bound(y))</span><br><span class="line">    <span class="keyword">return</span> mul_interval(x, reciprocal_y)</span><br></pre></td></tr></table></figure><h3 id="q10-par-diff">Q10: Par Diff</h3><p>After considerable work, Alyssa P. Hacker delivers her finished system. Several years later, after she has forgotten all about it, she gets a frenzied call from an irate user, Lem E. Tweakit. It seems that Lem has noticed that the <a href="https://en.wikipedia.org/wiki/Series_and_parallel_circuits#Resistors_2">formula for parallel resistors</a> can be written in two algebraically equivalent ways:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">par1(r1, r2) = (r1 * r2) / (r1 + r2)</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">par2(r1, r2) = <span class="number">1</span> / (<span class="number">1</span>/r1 + <span class="number">1</span>/r2)</span><br></pre></td></tr></table></figure><p>He has written the following two programs, each of which computes the <code>parallel_resistors</code> formula differently::</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">par1</span>(<span class="params">r1, r2</span>):</span></span><br><span class="line">    <span class="keyword">return</span> div_interval(mul_interval(r1, r2), add_interval(r1, r2))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">par2</span>(<span class="params">r1, r2</span>):</span></span><br><span class="line">    one = interval(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    rep_r1 = div_interval(one, r1)</span><br><span class="line">    rep_r2 = div_interval(one, r2)</span><br><span class="line">    <span class="keyword">return</span> div_interval(one, add_interval(rep_r1, rep_r2))</span><br></pre></td></tr></table></figure><p>Lem complains that Alyssa's program gives different answers for the two ways of computing. This is a serious complaint.</p><p>Demonstrate that Lem is right. Investigate the behavior of the system on a variety of arithmetic expressions. Make some intervals <code>r1</code> and <code>r2</code>, and show that <code>par1</code> and <code>par2</code> can give different results.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_par</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return two intervals that give different results for parallel resistors.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; r1, r2 = check_par()</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; x = par1(r1, r2)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; y = par2(r1, r2)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; lower_bound(x) != lower_bound(y) or upper_bound(x) != upper_bound(y)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    r1 = interval(<span class="number">1</span>, <span class="number">1</span>) <span class="comment"># Replace this line!</span></span><br><span class="line">    r2 = interval(<span class="number">1</span>, <span class="number">1</span>) <span class="comment"># Replace this line!</span></span><br><span class="line">    <span class="keyword">return</span> r1, r2</span><br></pre></td></tr></table></figure><h3 id="q11-multiple-references">Q11: Multiple References</h3><p>Eva Lu Ator, another user, has also noticed the different intervals computed by different but algebraically equivalent expressions. She says that the problem is multiple references to the same interval.</p><p>The Multiple References Problem: a formula to compute with intervals using Alyssa's system will produce tighter error bounds if it can be written in such a form that no variable that represents an uncertain number is repeated.</p><p>Thus, she says, <code>par2</code> is a better program for parallel resistances than <code>par1</code> (see Q10: Par Diff for these functions!). Is she right? Why? Write a function that returns a string containing a written explanation of your answer:</p><p>Note: To make a multi-line string, you must use triple quotes <code>""" like this """</code>.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiple_references_explanation</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;&quot;The multiple reference problem...&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="q12-quadratic">Q12: Quadratic</h3><p>Write a function <code>quadratic</code> that returns the interval of all values <code>f(t)</code> such that <code>t</code> is in the argument interval <code>x</code> and <code>f(t)</code> is a <a href="http://en.wikipedia.org/wiki/Quadratic_function">quadratic function</a>:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f(t) = a*t*t + b*t + c</span><br></pre></td></tr></table></figure><p>Make sure that your implementation returns the smallest such interval, one that does not suffer from the multiple references problem.</p><p><em>Hint</em>: the derivative <code>f'(t) = 2*a*t + b</code>, and so the extreme point of the quadratic is <code>-b/(2*a)</code>:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quadratic</span>(<span class="params">x, a, b, c</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the interval that is the range of the quadratic defined by</span></span><br><span class="line"><span class="string">    coefficients a, b, and c, for domain interval x.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; str_interval(quadratic(interval(0, 2), -2, 3, -1))</span></span><br><span class="line"><span class="string">    &#x27;-3 to 0.125&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; str_interval(quadratic(interval(1, 3), 2, -3, 1))</span></span><br><span class="line"><span class="string">    &#x27;0 to 10&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Exercises </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Structure and Interpretation of Computer Programs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mutable Values</title>
      <link href="2021/03/12/2021-03-12-Mutable-Values/"/>
      <url>2021/03/12/2021-03-12-Mutable-Values/</url>
      
        <content type="html"><![CDATA[<h1 id="mutable-values">Mutable Values</h1><p><a href="https://www.youtube.com/watch?v=3tNpezAAgx0&amp;list=PL6BsET-8jgYVDEchBIdQeqrUhlN2MZE6F">Video</a></p><p><a href="http://composingprograms.com/pages/24-mutable-data.html">Textbook</a></p><h2 id="objects"><a href="https://www.youtube.com/watch?v=Q-CewobDFZM&amp;list=PL6BsET-8jgYVDEchBIdQeqrUhlN2MZE6F&amp;index=2">Objects</a></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># def date_demos():</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date</span><br><span class="line">today = date(<span class="number">2020</span>, <span class="number">2</span>, <span class="number">24</span>)</span><br><span class="line">freedom = date(<span class="number">2020</span>, <span class="number">5</span>, <span class="number">12</span>)</span><br><span class="line"><span class="built_in">str</span>(freedom - today)</span><br><span class="line">today.year</span><br><span class="line">today.strftime(<span class="string">&#x27;%A, %B %d&#x27;</span>)</span><br><span class="line"><span class="built_in">type</span>(today)</span><br></pre></td></tr></table></figure><ul><li>Objects represent information</li><li>They consist of data and behaviour, bundled together to create abstractions</li><li>Objects can represent things, but also properties, interactions, &amp; processes</li><li>A type of object is called a class; <strong>classes</strong> are first-class values in Python</li><li>Object-oriented programming:<ul><li>A metaphor for organizing large programs</li><li>Special syntax that can improve the composition of programs</li></ul></li><li>In Python, every value is an object<ul><li>All <strong>objects</strong> have <strong>attributes</strong></li><li>A lot of data manipulation happens through object <strong>methods</strong></li><li>Functions do one thing; objects do many related things</li></ul></li></ul><h2 id="example-strings"><a href="https://www.youtube.com/watch?v=kMxbPtD3ytc&amp;list=PL6BsET-8jgYVDEchBIdQeqrUhlN2MZE6F&amp;index=3">Example: Strings</a></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># def string_demos():</span></span><br><span class="line"><span class="string">&quot;Hello&quot;</span>.lower()</span><br><span class="line"><span class="string">&quot;Hello&quot;</span>.upper()</span><br><span class="line"><span class="string">&quot;Hello&quot;</span>.swapcase()</span><br><span class="line"><span class="built_in">hex</span>(<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>))</span><br><span class="line">print(<span class="string">&#x27;\a&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;1\n2\n3&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> unicodedata <span class="keyword">import</span> lookup, name</span><br><span class="line">name(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">lookup(<span class="string">&#x27;SNOWMAN&#x27;</span>)</span><br><span class="line">lookup(<span class="string">&#x27;SOCCER BALL&#x27;</span>)</span><br><span class="line">lookup(<span class="string">&#x27;BABY&#x27;</span>)</span><br><span class="line">s = lookup(<span class="string">&#x27;SNOWMAN&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="representing-strings-the-ascii-standard">Representing Strings: the ASCII Standard</h3><figure><img src="/images/CS61A/0810540.png" alt="" /><figcaption>American Standard Code for Information Interchange</figcaption></figure><ul><li>Layout was chosen to support sorting by character code</li><li>Rows indexed 2-5 are a useful 6-bit (64 element) subset</li><li>Control characters were designed for transmission</li></ul><h3 id="representing-strings-the-unicode-standard">Representing Strings: the Unicode Standard</h3><ul><li>137,994 characters in Unicode 12.1</li><li>150 scripts (organized)</li><li>Enumeration of character properties, such as case</li><li>Supports bidirectional display order</li><li>A canonical name for every character</li></ul><h2 id="mutation-operations">Mutation Operations</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># def list_demos():</span></span><br><span class="line">suits = [<span class="string">&#x27;coin&#x27;</span>, <span class="string">&#x27;string&#x27;</span>, <span class="string">&#x27;myriad&#x27;</span>]  <span class="comment"># A list literal</span></span><br><span class="line">original_suits = suits</span><br><span class="line">suits.pop()             <span class="comment"># Removes and returns the final element</span></span><br><span class="line">suits.remove(<span class="string">&#x27;string&#x27;</span>)  <span class="comment"># Removes the first element that equals the argument</span></span><br><span class="line">suits.append(<span class="string">&#x27;cup&#x27;</span>)              <span class="comment"># Add an element to the end</span></span><br><span class="line">suits.extend([<span class="string">&#x27;sword&#x27;</span>, <span class="string">&#x27;club&#x27;</span>])  <span class="comment"># Add all elements of a list to the end</span></span><br><span class="line">suits[<span class="number">2</span>] = <span class="string">&#x27;spade&#x27;</span>  <span class="comment"># Replace an element</span></span><br><span class="line">suits</span><br><span class="line">original_suits</span><br><span class="line">suits[<span class="number">0</span>:<span class="number">2</span>] = [<span class="string">&#x27;heart&#x27;</span>, <span class="string">&#x27;diamond&#x27;</span>]  <span class="comment"># Replace a slice</span></span><br><span class="line">[suit.upper() <span class="keyword">for</span> suit <span class="keyword">in</span> suits]</span><br><span class="line">[suit[<span class="number">1</span>:<span class="number">4</span>] <span class="keyword">for</span> suit <span class="keyword">in</span> suits <span class="keyword">if</span> <span class="built_in">len</span>(suit) == <span class="number">5</span>]</span><br></pre></td></tr></table></figure><h3 id="some-objects-can-change">Some Objects Can Change</h3><p>First example in the course of an object <strong>changing state</strong></p><p>The same object can change in value throughout the course of computation</p><p><img src="/images/CS61A/0810541.png" /></p><p>All names that refer to the same object are affected by a mutation</p><p>Only objects of mutable types can change: lists &amp; dictionaries</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># def dict_demos():</span></span><br><span class="line">numerals = &#123;<span class="string">&#x27;I&#x27;</span>: <span class="number">1.0</span>, <span class="string">&#x27;V&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;X&#x27;</span>: <span class="number">10</span>&#125;</span><br><span class="line">numerals[<span class="string">&#x27;X&#x27;</span>]</span><br><span class="line">numerals[<span class="string">&#x27;I&#x27;</span>] = <span class="number">1</span></span><br><span class="line">numerals[<span class="string">&#x27;L&#x27;</span>] = <span class="number">50</span></span><br><span class="line">numerals</span><br><span class="line"><span class="built_in">sum</span>(numerals.values())</span><br><span class="line"><span class="built_in">dict</span>([(<span class="number">3</span>, <span class="number">9</span>), (<span class="number">4</span>, <span class="number">16</span>), (<span class="number">5</span>, <span class="number">25</span>)])</span><br><span class="line">numerals.get(<span class="string">&#x27;A&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">numerals.get(<span class="string">&#x27;V&#x27;</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="mutation-can-happen-within-a-function-call">Mutation Can Happen Within a Function Call</h3><p>A function can change the value of any object in its scope</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>four = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(four)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mystery(four)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(four)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>four = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(four)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mystery</span>(<span class="params">s</span>):</span></span><br><span class="line">    s.pop()</span><br><span class="line"> s.pop()</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mystery</span>(<span class="params">s</span>):</span></span><br><span class="line"> s[<span class="number">2</span>:] = []</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>another_mystery() <span class="comment"># No arguments!</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(four)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">another_mystery</span>():</span></span><br><span class="line">four.pop()</span><br><span class="line"> four.pop()</span><br></pre></td></tr></table></figure><h2 id="tuples"><a href="https://www.youtube.com/watch?v=Dd2AxpOiHGg&amp;list=PL6BsET-8jgYVDEchBIdQeqrUhlN2MZE6F&amp;index=5">Tuples</a></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># def tuple_demos():</span></span><br><span class="line">(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line"><span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span></span><br><span class="line">()</span><br><span class="line"><span class="built_in">tuple</span>()</span><br><span class="line"><span class="built_in">tuple</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># tuple(2)</span></span><br><span class="line">(<span class="number">2</span>,)</span><br><span class="line">(<span class="number">3</span>, <span class="number">4</span>) + (<span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>) * <span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">in</span> (<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;[1]: 2&#125;</span></span><br><span class="line">&#123;<span class="number">1</span>: [<span class="number">2</span>]&#125;</span><br><span class="line">&#123;(<span class="number">1</span>, <span class="number">2</span>): <span class="number">3</span>&#125;</span><br><span class="line"><span class="comment"># &#123;([1], 2): 3&#125;</span></span><br><span class="line">&#123;<span class="built_in">tuple</span>([<span class="number">1</span>, <span class="number">2</span>]): <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><p>Tuples are <strong>Immutable</strong> Sequences</p><p>Immutable values are protected from mutation</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>turtle = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ooze() <span class="comment"># Next lecture: ooze can change turtle&#x27;s binding</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>turtle</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>turtle = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ooze()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>turtle</span><br><span class="line">[<span class="string">&#x27;Anything could be inside!&#x27;</span>]</span><br></pre></td></tr></table></figure><p>The value of an expression can change because of changes in names or objects</p><p><strong>Name change:</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Name change:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x + x</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x + x</span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><p><strong>Object mutation:</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Object mutation:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x + x</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.append(<span class="number">3</span>) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x + x</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>An immutable sequence may still change if it <strong><em>contains</em></strong> a mutable value as an element</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = ([<span class="number">1</span>, <span class="number">2</span>], <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[<span class="number">0</span>] = <span class="number">4</span></span><br><span class="line">ERROR</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = ([<span class="number">1</span>, <span class="number">2</span>], <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">([<span class="number">4</span>, <span class="number">2</span>], <span class="number">3</span>)</span><br></pre></td></tr></table></figure><h2 id="mutation"><a href="https://www.youtube.com/watch?v=WlEBqLgSk5o&amp;list=PL6BsET-8jgYVDEchBIdQeqrUhlN2MZE6F&amp;index=7">Mutation</a></h2><h3 id="sameness-and-change">Sameness and Change</h3><ul><li>As long as we never modify objects, a compound object is just the totality of its pieces</li><li>A rational number is just its numerator and denominator</li><li>This view is no longer valid in the presence of change</li><li>A compound data object has an "identity" in addition to the pieces of which it is composed</li><li>A list is still "the same" list even if we change its contents</li><li>Conversely, we could have two lists that happen to have the same contents, but are different</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">10</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a == b</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.append(<span class="number">20</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">10</span>, <span class="number">20</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">[<span class="number">10</span>, <span class="number">20</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a == b</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">10</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = [<span class="number">10</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a == b</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.append(<span class="number">20</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">10</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">[<span class="number">10</span>, <span class="number">20</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a == b</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="identity-operators">Identity Operators</h3><h4 id="identity">Identity</h4><ul><li><strong>&lt;exp0&gt;</strong> is <strong>&lt;exp1&gt;</strong></li><li>evaluates to <strong>True</strong> if both <strong>&lt;exp0&gt;</strong> and <strong>&lt;exp1&gt;</strong> evaluate to the <u>same object</u></li></ul><h4 id="equality">Equality</h4><ul><li><strong>&lt;exp0&gt;</strong> == <strong>&lt;exp1&gt;</strong></li><li>evaluates to <strong>True</strong> if both <strong>&lt;exp0&gt;</strong> and <strong>&lt;exp1&gt;</strong> evaluate to the <u>equal values</u></li></ul><p><strong>Identical objects are always equal values</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">divide_exact</span>(<span class="params">n, d</span>):</span></span><br><span class="line">    <span class="keyword">return</span> n // d, n % d</span><br><span class="line"></span><br><span class="line"><span class="comment"># def identity_demos():</span></span><br><span class="line">a = [<span class="number">10</span>]</span><br><span class="line">b = a</span><br><span class="line">a == b</span><br><span class="line">a <span class="keyword">is</span> b</span><br><span class="line">a.extend([<span class="number">20</span>, <span class="number">30</span>])</span><br><span class="line">a == b</span><br><span class="line">a <span class="keyword">is</span> b</span><br><span class="line">    </span><br><span class="line">a = [<span class="number">10</span>]</span><br><span class="line">b = [<span class="number">10</span>]</span><br><span class="line">a == b</span><br><span class="line">a <span class="keyword">is</span> <span class="keyword">not</span> b</span><br><span class="line">a.append(<span class="number">20</span>)</span><br><span class="line">a != b</span><br></pre></td></tr></table></figure><h3 id="mutable-default-arguments-are-dangerous">Mutable Default Arguments are Dangerous</h3><p>A default argument value is part of a function value, not generated by a call</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">s=[]</span>):</span></span><br><span class="line"><span class="meta">... </span>s.append(<span class="number">3</span>)</span><br><span class="line"><span class="meta">... </span><span class="keyword">return</span> <span class="built_in">len</span>(s)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f()</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f()</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f()</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p><img src="/images/CS61A/0810542.png" /></p><h2 id="lists"><a href="https://www.youtube.com/watch?v=tpfpNR3u4zk&amp;list=PL6BsET-8jgYVDEchBIdQeqrUhlN2MZE6F&amp;index=7">Lists</a></h2><h3 id="lists-in-environment-diagrams">Lists in Environment Diagrams</h3><p><strong>Assume that before each example below we execute</strong>:</p><ul><li>s = [2, 3]</li><li>t = [5, 6]</li></ul><p><img src="/images/CS61A/0810543.png" /></p><p><img src="/images/CS61A/0810544.png" /></p><p><img src="/images/CS61A/0810545.png" /></p><p><img src="/images/CS61A/0810546.png" /></p><p><img src="/images/CS61A/0810547.png" /></p><h3 id="lists-in-lists-in-lists-in-environment-diagrams">Lists in Lists in Lists in Environment Diagrams</h3><p><img src="/images/CS61A/0810548.png" /></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Structure and Interpretation of Computer Programs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Health Information &amp; Decision Support Systems</title>
      <link href="2021/03/11/2021-03-11-Health-Information-&amp;-Decision-Support-Systems/"/>
      <url>2021/03/11/2021-03-11-Health-Information-&amp;-Decision-Support-Systems/</url>
      
        <content type="html"><![CDATA[<h1 id="storing-and-exchanging-medical-images-mobile-health">Storing and exchanging medical images mobile health</h1><h2 id="definition">Definition</h2><p><em>“Mobile Health (mHealth) is a sub-segment of eHealth and covers medical and public health practice supported by mobile devices. It especially includes the use of mobile communication devices for health and well-being services and information purposes as well as mobile health applications.”</em></p><h2 id="the-eu-infographic-on-mhealth"><a href="https://ec.europa.eu/digital-single-market/en/mhealth">The EU infographic on mHealth</a></h2><p>This one has a strong unilateral approach:</p><ul><li>The patient collects data,</li><li>the doctor consumes the data</li></ul><p>There are other perspectives as well.</p><p><img src="/images/HMS/17001700.png" /></p><h2 id="smartphones">Smartphones</h2><ul><li>Defined as having an operating systems capable of hosting medical software or it Internet capable</li><li>Cloud computing allowed more medical programs of higher complexity to be accessed</li><li>Majority of adults and 80% of physicians carry a smartphone</li><li>Many access medical issues on the phone and a minority have at least one medical app and/or receive text messages from a healthcare system</li></ul><h3 id="in-particular-developing-countries">In particular developing countries</h3><ul><li><p>Large distance between patient and caregiver</p></li><li><p>Shortage of skilled people</p></li><li><p>More smartphones than landlines</p></li><li><p>So mHealth could potentially</p><ul><li>increase access to healthcare</li><li>improve ability to diagnose and track diseases</li><li>Provide timelier, more actionable public health information</li><li>expand access to ongoing medical education and training for health workers</li></ul></li></ul><h2 id="taxonomy-bringing-some-structure">Taxonomy: Bringing some structure</h2><p>Who creates the data?</p><ul><li>Healthcare professionals</li><li>Patients</li><li>General population</li><li>Researchers</li><li>Others</li></ul><p>Who consumes the data?</p><ul><li>Healthcare professionals</li><li>Patients</li><li>General populations</li><li>researchers</li><li>Others</li></ul><figure><img src="/images/HMS/17001701.png" alt="" /><figcaption>mHealth conceptual framework</figcaption></figure><h2 id="apps-for-doctors">Apps for doctors</h2><h3 id="education">Education</h3><p><img src="/images/HMS/17001702.png" /></p><h3 id="diagnosis">Diagnosis</h3><p><img src="/images/HMS/17001703.png" /></p><h3 id="ehr-on-the-smartphone">EHR on the smartphone</h3><p><img src="/images/HMS/17001704.png" /></p><h3 id="clinical-decision-support">Clinical decision support</h3><p><img src="/images/HMS/17001705.png" /></p><h2 id="apps-used-by-patients">Apps used by patients</h2><h3 id="category">Category</h3><p><img src="/images/HMS/17001706.png" /></p><h3 id="personal-data-storage">Personal data storage</h3><ul><li><p>Apple Health App</p></li><li><p>Microsoft Health Vault</p></li><li><p>Fitness trackers</p></li><li><p>Diet trackers</p></li><li><p>Either manual data input or sensors</p></li></ul><h3 id="communities-and-groups">Communities and groups</h3><ul><li>Patient communities (e.g. Esperity) for information exchange</li><li>Fitness / workout team challenges and competitions (e.g teemo</li></ul><h3 id="medication-reminders">Medication reminders</h3><ul><li>SMS smartphone based service</li><li>Standallone app or online service</li></ul><p><img src="/images/HMS/17001707.png" /></p><h3 id="real-diagnostic-apps">Real diagnostic apps?</h3><p><img src="/images/HMS/17001708.png" /></p><h3 id="patient-education">Patient education</h3><figure><img src="/images/HMS/17001709.png" alt="" /><figcaption>Breast Check Now</figcaption></figure><h3 id="telemonitoring-home-monitoring">Telemonitoring / home monitoring</h3><p><img src="/images/HMS/17001710.png" /></p><h3 id="benefits-of-using-apps">Benefits of using apps</h3><ul><li><p><strong>Improve Patient Engagement</strong></p><ul><li>Complexity, long lines, lack of transparency of quality, etc. discourages patient engagement. Having medical application minimizes complexity. Suppose, you are using a medication reminder application, it knows how many tablets you have taken and when you have to take your next pills.</li></ul></li><li><p><strong>Reduced Healthcare Fraud</strong></p><ul><li>An increase in the number of patient access to healthcare also results in huge medical cost and frauds. With the help of digital health care system, frauds can minimize around $60 billion annually. Mobile applications are best to trace people and transactions that ultimately minimizes frauds.</li></ul></li><li><p><strong>Instant Healthcare Service</strong></p><ul><li><p>Without any wait, mobile technology delivers patients a quick way to access doctor’s advice or treatment information. It is useful for rural areas, where patients haven’t found physicians or limited access to them.</p><p>Moreover, it is also helpful when patients are unable to visit the physicians because of chronic diseases. It enables patients and physicians to decide whether a visit to them is essential or not. Giving better care, checking prescriptions, monitoring improvements, etc. become easy with mobile healthcare app.</p></li></ul></li></ul><h3 id="why-health-apps">Why Health Apps?</h3><p><img src="/images/HMS/17001711.png" /></p><h3 id="current-trend-the-quantified-self">Current trend: the quantified self</h3><ul><li><p>New movement (“wearable HIT” and “quantified self”)</p></li><li><p>New devices and sensors to monitor diet, exercise, sleep, heart rate, respiratory rate, oxygen level, skin temperature, hydration, etc.</p></li><li><p>Oriented towards patients</p></li><li><p>Communicate with smartphone via Bluetooth LE</p></li><li><p>Smart watches a new platform</p></li><li><p>We cannot add more and more sensors the way we are doing</p></li></ul><figure><img src="/images/HMS/17001712.png" alt="" /><figcaption>The near future</figcaption></figure><h4 id="wearables-beyond-sensors">Wearables: beyond sensors</h4><p><img src="/images/HMS/17001713.png" /></p><h4 id="game-based-rehabilitation">Game based rehabilitation</h4><p>Apps unifying diagnosis, treatment and monitoring</p><p><img src="/images/HMS/17001714.png" /></p><h4 id="clinical-trials-will-go-digital">Clinical trials will go digital</h4><p><img src="/images/HMS/17001715.png" /></p><p><img src="/images/HMS/17001716.png" /></p><h2 id="challenges-for-mhealth">Challenges for mHealth</h2><p><strong>Information overload and the need for multiple devices</strong></p><ul><li>Cost, business models, reimbursement schemes</li><li>Data storage, security and ownership</li><li>Interoperability issues</li><li>Connecting EHR</li><li>Regulatory: they may need FDA clearance</li><li>Are they evidence based? Too early to know for many. Chicken and Egg</li><li>Accountability: the guarantee that somebody acts upon the collected data</li><li>…</li></ul><h3 id="remark">Remark</h3><p>Core ideas exist for a very long time</p><p>Barriers:</p><ul><li>Technology</li><li>Policy</li><li>Legal</li><li>Ethical</li><li>Business</li></ul><h2 id="technical-background">Technical background</h2><h3 id="database-at-the-server-side">Database at the server side</h3><ul><li><p>“A <strong>database</strong> is an organized collection of data, generally stored and accessed electronically from a computer system.” (Wikipedia)</p></li><li><p>There are different ways for organising data in a database. The most common kind of database is the <strong>Relational Database</strong>, based on the <strong>Relational Model</strong> (Codd, IBM, 1970).</p></li><li><p>In the Relation Model, data is structured in tables (relations), with rows and columns.</p></li><li><p>Every row has a unique identifier, a primary key</p></li><li><p>Examples: mysql, postgresql, …</p></li><li><p>Simple python bindings available</p></li></ul><h3 id="example-relational-db-structure">Example relational DB structure</h3><p>staff:</p><table><thead><tr class="header"><th>id</th><th>firstname</th><th>lastname</th><th>profession</th></tr></thead><tbody><tr class="odd"><td>1</td><td>John</td><td>Doe</td><td>Physiotherapist</td></tr><tr class="even"><td>2</td><td>Eva</td><td>Max</td><td>Surgeon</td></tr><tr class="odd"><td></td><td></td><td></td><td></td></tr></tbody></table><p>patient:</p><table><thead><tr class="header"><th>id</th><th>firstname</th><th>lastname</th><th>address</th></tr></thead><tbody><tr class="odd"><td>1</td><td>Marc</td><td>Brigs</td><td>A street 12</td></tr><tr class="even"><td>2</td><td>Taylor</td><td>Jennings</td><td>B street 77</td></tr><tr class="odd"><td></td><td></td><td></td><td></td></tr></tbody></table><figure><img src="/images/HMS/17001717.png" alt="" /><figcaption>The information is linked</figcaption></figure><h3 id="sql-structured-query-language">SQL (structured query language)</h3><p>SQL is a standard language for storing, manipulating and retrieving data in databases.</p><h4 id="examples">Examples</h4><p>Get all patients with first name Marc</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> patients <span class="keyword">WHERE</span> firstname<span class="operator">=</span><span class="string">&#x27;Marc’</span></span><br></pre></td></tr></table></figure><p>Get the names of all patients who visited a surgeon</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> patients.firstname, patients.lastname, cases.date <span class="keyword">from</span> patients,cases,staff</span><br><span class="line"></span><br><span class="line"><span class="keyword">WHERE</span> patients.id <span class="operator">=</span> cases.patient_id <span class="keyword">AND</span> staff.id <span class="operator">=</span> cases.dr_id <span class="keyword">AND</span> staff.profession<span class="operator">=</span><span class="string">&#x27;Surgeon&#x27;</span> </span><br></pre></td></tr></table></figure><h3 id="relational-data-model-strengths">Relational data model strengths</h3><ul><li>Data model is clear.</li><li>Data is comosed into atomic units.</li><li>Data is stored once.</li><li>Data integrity.</li><li>Complex join queries are nit that fast.</li></ul><h3 id="nosql-document-databases">NoSQL: document databases</h3><p><img src="/images/HMS/17001718.png" /></p><h4 id="strengths-of-nosql">Strengths of noSQL</h4><ul><li><p><strong>Intuitive data model:</strong> The documtn model directly maps onto objects in code. Easier to wrk with froma coding perspective</p></li><li><p><strong>Flexible schema:</strong> The database struture is not pre-defined, so it is adaptive, flexible, …</p></li><li><p><strong>Distributed and Scalable:</strong> Documents are independent “units”, so super easy to distribute over multiple databases etc.</p></li></ul><figure><img src="/images/HMS/17001719.png" alt="" /><figcaption>Client – server Web browsing</figcaption></figure><p><img src="/images/HMS/17001720.png" /></p><h3 id="types-of-http-requests">4 types of http requests</h3><p><img src="/images/HMS/17001721.png" /></p><h4 id="example-requests-to-the-webservice">Example requests to the webservice</h4><p><img src="/images/HMS/17001722.png" /></p><h3 id="response-of-by-the-webservice">Response of by the webservice</h3><ul><li>Response can be anything: data, images, html, sound, …</li><li>When response is data, it is often json</li></ul><h3 id="communication-between-wearable-and-db">Communication between wearable and DB</h3><p><strong>Data format</strong></p><ul><li><p>JSON (Javascript Object Notation) is more or less standard lightweigth data-interchange format</p></li><li><p>Text format</p></li><li><p>Completely program language independent</p></li><li><p>Consists of 2 elements</p><ul><li>Objects: an unordered set of name/value pairs {“firstname”:”john”, “lastname:doe”}</li><li>Arrays: an ordered collection of values [“apple”,”pear”]</li></ul></li><li><p>SEE NOSQL SLIDE</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Analytics in Health Care and Connected Care </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Extends, Casting, Higher Order Functions</title>
      <link href="2021/03/11/2021-03-11-Extends,-Casting,-Higher-Order-Functions/"/>
      <url>2021/03/11/2021-03-11-Extends,-Casting,-Higher-Order-Functions/</url>
      
        <content type="html"><![CDATA[<h1 id="extends-casting-higher-order-functions">Extends, Casting, Higher Order Functions</h1><p><a href="https://www.youtube.com/playlist?list=PL8FaHk7qbOD6Mi8gDriGGeSnHi68QLuVD">Video</a></p><h2 id="implementation-inheritance-extends"><a href="https://www.youtube.com/watch?v=990kImS-_nA&amp;list=PL8FaHk7qbOD6Mi8gDriGGeSnHi68QLuVD&amp;index=1">Implementation Inheritance: Extends</a></h2><h3 id="the-extends-keyword">The Extends Keyword</h3><p>When a class is a hyponym of an interface, we used <strong>implements.</strong></p><ul><li>Example: SLList&lt;Blorp&gt; <strong>implements</strong> List61B&lt;Blorp&gt;</li></ul><p>If you want one class to be a hyponym of another <em>class</em> (instead of an interface), you use <strong>extends.</strong></p><p>We’d like to build RotatingSLList that can perform any SLList operation as well as:</p><ul><li>rotateRight(): Moves back item the front.</li></ul><p>Example: Suppose we have [5, 9, 15, 22].</p><ul><li>After rotateRight: [22, 5, 9, 15]</li></ul><p><img src="/images/CS61B/1645230.png" /></p><h3 id="rotatingsllist">RotatingSLList</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RotatingSLList</span>&lt;<span class="title">Blorp</span>&gt; <span class="keyword">extends</span> <span class="title">SLList</span>&lt;<span class="title">Blorp</span>&gt;</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotateRight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       Blorp oldBack = removeLast();</span><br><span class="line">       addFirst(oldBack);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Because of <strong>extends</strong>, RotatingSLList inherits all members of SLList:</p><ul><li>All instance and static variables.</li><li>All methods.</li><li>All nested classes.</li><li><strong>Note</strong>: but members may be private and thus inaccessible!</li></ul><p>Constructors are not inherited.</p><h3 id="extends-with-overriding"><a href="https://www.youtube.com/watch?v=RJ_OpzLeHeQ&amp;list=PL8FaHk7qbOD6Mi8gDriGGeSnHi68QLuVD&amp;index=2">Extends with Overriding</a></h3><h4 id="another-example-vengefulsllis">Another Example: VengefulSLLis</h4><p>Suppose we want to build an SLList that:</p><ul><li>Remembers all Items that have been destroyed by removeLast.</li><li>Has an additional method printLostItems(), which prints all deleted items.</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    VengefulSLList&lt;Integer&gt; vs1 = <span class="keyword">new</span> VengefulSLList&lt;Integer&gt;();</span><br><span class="line">    vs1.addLast(<span class="number">1</span>);</span><br><span class="line">    vs1.addLast(<span class="number">5</span>);</span><br><span class="line">    vs1.addLast(<span class="number">10</span>);</span><br><span class="line">    vs1.addLast(<span class="number">13</span>);      <span class="comment">/* [1, 5, 10, 13] */</span></span><br><span class="line">    vs1.removeLast();     <span class="comment">/* 13 gets deleted. */</span></span><br><span class="line">    vs1.removeLast();     <span class="comment">/* 10 gets deleted. */</span></span><br><span class="line">    System.out.print(<span class="string">&quot;The fallen are: &quot;</span>);</span><br><span class="line">    vs1.printLostItems(); <span class="comment">/* Should print 10 and 13. */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VengefulSLList</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">extends</span> <span class="title">SLList</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> SLList&lt;Item&gt; deletedItems;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">VengefulSLList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       deletedItems = <span class="keyword">new</span> SLList&lt;Item&gt;();</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Item <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Item oldBack = <span class="keyword">super</span>.removeLast();</span><br><span class="line">            <span class="comment">/* calls Superclass’s version of removeLast() */</span></span><br><span class="line">    deletedItems.addLast(oldBack);</span><br><span class="line">    <span class="keyword">return</span> oldBack;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printLostItems</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    deletedItems.print();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>Note: Java syntax disallows super.super. For a nice description of why, see <a href="http://stackoverflow.com/questions/586363/why-is-super-super-method-not-allowed-in-java">this link</a>.</em></p><h3 id="constructor-behaviour-is-slightly-weird"><a href="https://www.youtube.com/watch?v=Cb8F2qreFR8&amp;list=PL8FaHk7qbOD6Mi8gDriGGeSnHi68QLuVD&amp;index=3">Constructor Behaviour Is Slightly Weird</a></h3><p>Constructors are not inherited. However, the rules of Java say that <strong>all constructors must start with a call to one of the super class’s constructors [<strong><a href="https://docs.oracle.com/javase/tutorial/java/IandI/super.html"><strong>Link</strong></a></strong>].</strong></p><ul><li>Idea: If every VengefulSLList is-an SLList, every VengefulSLList must be set up like an SLList.<ul><li>If you didn’t call SLList constructor, sentinel would be null. Very bad.</li></ul></li><li>You can explicitly call the constructor with the keyword super (no dot).</li><li>If you don’t explicitly call the constructor, Java will automatically do it for you.</li></ul><p>These constructors are exactly equivalent.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">VengefulSLList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   deletedItems = <span class="keyword">new</span> SLList&lt;Item&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">VengefulSLList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">super</span>(); <span class="comment">// must come first!</span></span><br><span class="line">   deletedItems = <span class="keyword">new</span> SLList&lt;Item&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="calling-other-constructors">Calling Other Constructors</h3><p>If you want to use a super constructor other than the no-argument constructor, can give parameters to super.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">VengefulSLList</span><span class="params">(Item x)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">super</span>(x); <span class="comment">// calls SLList(Item x)</span></span><br><span class="line">   deletedItems = <span class="keyword">new</span> SLList&lt;Item&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">VengefulSLList</span><span class="params">(Item x)</span> </span>&#123;</span><br><span class="line">   deletedItems = <span class="keyword">new</span> SLList&lt;Item&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Not equivalent!</strong> Code below makes implicit call to <strong>super()</strong>, <u>not super(x)</u>.</p><h3 id="the-object-class"><a href="https://www.youtube.com/watch?v=wrx_y3ib5iQ&amp;list=PL8FaHk7qbOD6Mi8gDriGGeSnHi68QLuVD&amp;index=4">The Object Class</a></h3><p>As it happens, every type in Java is a descendant of the Object class.</p><ul><li>VengefulSLList extends SLList.</li><li>SLList extends Object (implicitly)</li></ul><p><img src="/images/CS61B/1645231.png" /></p><h3 id="is-a-vs.-has-a">Is-A vs. Has-A</h3><p>Important Note: extends should only be used for <strong>is-a</strong> (hypernymic) relationships!</p><p>Common mistake is to use it for “<strong>has-a</strong>” relationships. (a.k.a. meronymic).</p><ul><li>Possible to subclass SLList to build a Set, but conceptually weird, e.g. get(i) doesn’t make sense, because sets are not ordered.</li></ul><p><img src="/images/CS61B/1645232.png" /></p><h2 id="encapsulation"><a href="https://www.youtube.com/watch?v=GioVGLuW69o&amp;list=PL8FaHk7qbOD6Mi8gDriGGeSnHi68QLuVD&amp;index=5">Encapsulation</a></h2><h3 id="complexity-the-enemy">Complexity: The Enemy</h3><p>When building large programs, our enemy is complexity.</p><p>Some tools for managing complexity:</p><ul><li>Hierarchical abstraction.<ul><li>Create <strong>layers of abstraction</strong>, with clear abstraction barriers!</li></ul></li><li>“Design for change” (D. Parnas)<ul><li>Organize program around objects.</li><li>Let objects decide how things are done.</li><li><strong>Hide information</strong> others don’t need.</li></ul></li></ul><h3 id="modules-and-encapsulation-shewchuk">Modules and Encapsulation [<a href="https://people.eecs.berkeley.edu/~jrs/61b/lec/18">Shewchuk</a>]</h3><p><strong>Module</strong>: A set of methods that work together as a whole to perform some task or set of related tasks.</p><p>A module is said to be <strong>encapsulated</strong> if its implementation is <u>completely hidden</u>, and it can be accessed only through a documented interface.</p><ul><li>Instance variables private. Methods like resize private.</li><li>As we’ll see: Implementation inheritance (e.g. extends) breaks encapsulation!</li></ul><p><img src="/images/CS61B/1645233.png" /></p><h3 id="a-cautionary-tal">A Cautionary Tal</h3><figure><img src="/images/CS61B/1645234.png" alt="" /><figcaption>Interesting questions</figcaption></figure><h3 id="abstraction-barriers">Abstraction Barriers</h3><p>As the user of an ArrayDeque, you cannot observe its internals</p><ul><li>Even when writing tests, you don’t (usually) want to peer inside.</li></ul><p>Java is a great language for enforcing abstraction barriers with syntax.</p><p><img src="/images/CS61B/1645235.png" /></p><h3 id="implementation-inheritance-breaks-encapsulation"><a href="https://www.youtube.com/watch?v=EfxYiAN6YME&amp;list=PL8FaHk7qbOD6Mi8gDriGGeSnHi68QLuVD&amp;index=6">Implementation Inheritance Breaks Encapsulation</a></h3><p>Suppose we have a Dog class with the two methods shown.</p><p><img src="/images/CS61B/1645236.png" /></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bark</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   System.out.println(<span class="string">&quot;bark&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">barkMany</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i += <span class="number">1</span>) &#123;</span><br><span class="line">      bark();  </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We could just as easily have implemented methods as shown below.</p><ul><li>From the outside, functionality is exactly the same, it’s just a question of aesthetics.</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bark</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   barkMany(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">barkMany</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i += <span class="number">1</span>) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;bark&quot;</span>);  </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1. What would vd.barkMany(3) output?</p><figure><img src="/images/CS61B/1645237.png" alt="" /><figcaption>Assuming vd is a Verbose Dog</figcaption></figure><ul><li><strong>As a dog, I say: bark bark bark</strong></li><li><del>bark bark bark</del></li><li><del>Something else</del></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bark</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   System.out.println(<span class="string">&quot;bark&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">barkMany</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i += <span class="number">1</span>) &#123;</span><br><span class="line">      bark();  </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">barkMany</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;As a dog, I say: &quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i += <span class="number">1</span>) &#123;</span><br><span class="line">       bark(); <span class="comment">// calls inherited bark method</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2. What would vd.barkMany(3) output?</p><ul><li><del>As a dog, I say: bark bark bark</del></li><li><del>bark bark bark</del></li><li><strong>Something else</strong><ul><li>Gets caught in an infinite loop!</li></ul></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bark</span><span class="params">()</span> </span>&#123;</span><br><span class="line">barkMany(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">barkMany</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i += <span class="number">1</span>) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;bark&quot;</span>);  </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">barkMany</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;As a dog, I say: &quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i += <span class="number">1</span>) &#123;</span><br><span class="line">       bark(); <span class="comment">// calls inherited bark method</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="type-checking-and-casting"><a href="https://www.youtube.com/watch?v=cMAchIFcRN0&amp;list=PL8FaHk7qbOD6Mi8gDriGGeSnHi68QLuVD&amp;index=7">Type Checking and Casting</a></h2><h3 id="dynamic-method-selection-and-type-checking-puzzle">Dynamic Method Selection and Type Checking Puzzle</h3><p>For each line of code, determine:</p><ul><li>Does that line cause a compilation error?</li><li>Which method does dynamic method selection use?</li></ul><figure><img src="/images/CS61B/1645238.png" alt="" /><figcaption>Reminder: VengefulSLList overrides removeLast and provides a new method called printLostItems.</figcaption></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">   VengefulSLList&lt;Integer&gt; vsl = </span><br><span class="line">          <span class="keyword">new</span> VengefulSLList&lt;Integer&gt;(<span class="number">9</span>);</span><br><span class="line">   SLList&lt;Integer&gt; sl = vsl;   </span><br><span class="line"></span><br><span class="line">sl.addLast(<span class="number">50</span>); <span class="comment">// VengefulSLList doesn’t override, uses SLList’s.</span></span><br><span class="line">   sl.removeLast(); <span class="comment">// Uses VengefulSLList’s.</span></span><br><span class="line">    </span><br><span class="line">    sl.printLostItems(); <span class="comment">// Compilation errorvg!</span></span><br><span class="line">    VengefulSLList&lt;Integer&gt; vsl2 = sl; <span class="comment">// Compilation error!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Reminder: Dynamic Method Selection</strong></p><p>If overridden, decide which method to call based on <strong>run-time</strong> (Also called dynamic type) type of variable.</p><ul><li>sl’s runtime type: VengefulSLList.</li></ul><p><strong>Compile-Time Type Checking</strong></p><p>Compiler allows method calls based on <strong>compile-time</strong> (Also called static type) type of variable.</p><ul><li>sl’s runtime type: VengefulSLList.</li><li>But cannot call printLostItems.</li></ul><p>Compiler also allows assignments based on compile-time types.</p><ul><li>Even though sl’s runtime-type is VengefulSLList, cannot assign to vsl2.</li><li>Compiler plays it as safe as possible with type checking.</li></ul><h3 id="compile-time-types-and-expressions">Compile-Time Types and Expressions</h3><p>Expressions have compile-time types</p><ul><li>An expression using the new keyword has the specified compile-time type.</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SLList&lt;Integer&gt; sl = <span class="keyword">new</span> VengefulSLList&lt;Integer&gt;();  </span><br></pre></td></tr></table></figure><ul><li>Compile-time type of right hand side (RHS) expression is VengefulSLList.</li><li>A VengefulSLList is-an SLList, so assignment is allowed.</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">VengefulSLList&lt;Integer&gt; vsl = <span class="keyword">new</span> SLList&lt;Integer&gt;(); <span class="comment">// Compilation error!</span></span><br></pre></td></tr></table></figure><ul><li><p>Compile-time type of RHS expression is SLList.</p></li><li><p>An SLList is not necessarily a VengefulSLList, so compilation error results.</p></li><li><p>Method calls have compile-time type equal to their declared type.</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Dog <span class="title">maxDog</span><span class="params">(Dog d1, Dog d2)</span> </span>&#123; … &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>Any call to maxDog will have compile-time type Dog!</strong></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Example */</span></span><br><span class="line">Poodle frank  = <span class="keyword">new</span> Poodle(<span class="string">&quot;Frank&quot;</span>, <span class="number">5</span>);</span><br><span class="line">Poodle frankJr = <span class="keyword">new</span> Poodle(<span class="string">&quot;Frank Jr.&quot;</span>, <span class="number">15</span>);</span><br><span class="line"></span><br><span class="line">Dog largerDog = maxDog(frank, frankJr);</span><br><span class="line">Poodle largerPoodle = maxDog(frank, frankJr); </span><br><span class="line"><span class="comment">/* Compilation error! RHS has compile-time type Dog. */</span></span><br></pre></td></tr></table></figure><h3 id="casting">Casting</h3><p>Java has a special syntax for specifying the compile-time type of any expression.</p><ul><li><p>Put desired type in parenthesis before the expression.</p></li><li><p>Examples:</p><ul><li><p>Compile-time type Dog:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">maxDog(frank, frankJr);</span><br></pre></td></tr></table></figure></li><li><p>Compile-time type Poodle:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(Poodle) maxDog(frank, frankJr);</span><br></pre></td></tr></table></figure><p>Tells compiler to pretend it sees a particular type.</p></li></ul></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">oodle frank  = <span class="keyword">new</span> Poodle(<span class="string">&quot;Frank&quot;</span>, <span class="number">5</span>);</span><br><span class="line">Poodle frankJr = <span class="keyword">new</span> Poodle(<span class="string">&quot;Frank Jr.&quot;</span>, <span class="number">15</span>);</span><br><span class="line">Dog largerDog = maxDog(frank, frankJr);</span><br><span class="line">Poodle largerPoodle = (Poodle) maxDog(frank, frankJr);</span><br><span class="line"><span class="comment">/* Compilation OK! RHS has compile-time type Poodle. */</span></span><br></pre></td></tr></table></figure><p>Casting is a powerful but dangerous tool.</p><ul><li>Tells Java to treat an expression as having a different compile-time type.</li><li>In example below, effectively tells the compiler to ignore its type checking duties.</li><li>Does not actually change anything: sunglasses don’t make the world dark.</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Poodle frank  = <span class="keyword">new</span> Poodle(<span class="string">&quot;Frank&quot;</span>, <span class="number">5</span>);</span><br><span class="line">Malamute frankSr = <span class="keyword">new</span> Malamute(<span class="string">&quot;Frank Sr.&quot;</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">Poodle largerPoodle = (Poodle) maxDog(frank, frankSr);</span><br></pre></td></tr></table></figure><p>If we run the code above, we get a ClassCastException at runtime.</p><ul><li>So much for .class files being verifiably type checked...</li></ul><h2 id="dynamic-method-selection-and-casting-puzzle">Dynamic Method Selection and Casting Puzzle</h2><h3 id="is-it-overriding-overloading">Is it Overriding? Overloading?</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bird</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">gulgate</span><span class="params">(Bird b)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;BiGulBi&quot;</span>); &#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Falcon</span> <span class="keyword">extends</span> <span class="title">Bird</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">gulgate</span><span class="params">(Falcon f)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;FaGulFa&quot;</span>);&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Bird bird = <span class="keyword">new</span> Falcon();</span><br><span class="line">Falcon falcon = (Falcon) bird;</span><br><span class="line">bird.gulgate(falcon);</span><br><span class="line">falcon.gulgate(falcon);</span><br></pre></td></tr></table></figure><p>What gets printed?</p><ul><li><del>BiGulBi BiGulBi</del></li><li><strong>BiGulBi FaGulFa</strong></li><li><del>FaGulFa BiGulBi</del></li><li><del>FaGulFa FaGulFa</del></li></ul><p><strong>Casting causes no change to the bird variable, nor to the object the bird variable points at!</strong></p><p>Remember: The compiler chooses the most specific matching method signature from the <u>static type of the invoking class</u>.</p><ul><li>Falcon is <u>overloading</u> the gulgate method, <u>not overriding</u>.</li><li>Compiler basically thinks “does Bird class have a gulgate method? Yes! I’ll use that”. Since there is no overriding, no dynamic method selection occurs.</li></ul><h2 id="higher-order-functions-in-java"><a href="https://www.youtube.com/watch?v=OcfTN1PZ7oA&amp;list=PL8FaHk7qbOD6Mi8gDriGGeSnHi68QLuVD&amp;index=8">Higher Order Functions in Java</a></h2><p><strong>Higher Order Function</strong>: A function that treats another function as data.</p><ul><li>e.g. takes a function as input.</li></ul><p>Example in Python:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tenX</span>(<span class="params">x</span>):</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">10</span>*x</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_twice</span>(<span class="params">f, x</span>):</span></span><br><span class="line"><span class="keyword">return</span> f(f(x))</span><br><span class="line"> </span><br><span class="line">print(do_twice(tenX, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">200</span></span><br></pre></td></tr></table></figure><h3 id="higher-order-functions-in-java-7">Higher Order Functions in Java 7</h3><p>Old School (Java 7 and earlier)</p><ul><li>Fundamental issue: Memory boxes (variables) cannot contain pointers to functions.</li></ul><p>Can use an interface instead. Let’s try it out.</p><p><img src="/images/CS61B/1645239.png" /></p><p>Java code below is equivalent to given python code.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IntUnaryFunction</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">apply</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TenX</span> <span class="keyword">implements</span> <span class="title">IntUnaryFunction</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">apply</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">10</span> * x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HoFDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">do_twice</span><span class="params">(IntUnaryFunction f, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> f.apply(f.apply(x));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">   System.out.println(do_twice(<span class="keyword">new</span> TenX(), <span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="higher-order-functions-in-java-8-or-later">Higher Order Functions in Java 8 or Later</h3><p>In Java 8, new types were introduced: now can can hold references to methods.</p><ul><li>Why? The old way is still widely used, e.g. Comparators (see next lecture).</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Java8HoFDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tenX</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="number">10</span>*x;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">doTwice</span><span class="params">(Function&lt;Integer, Integer&gt; f, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> f.apply(f.apply(x));</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = doTwice(Java8HoFDemo::tenX, <span class="number">2</span>);</span><br><span class="line">     System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="implementation-inheritance-cheatsheet">Implementation Inheritance Cheatsheet</h3><p>VengefulSLList extends SLList means a VenglefulSLList is-an SLList. Inherits all members!</p><ul><li>Variables, methods, nested classes.</li><li>Not constructors.</li><li>Subclass constructor must invoke superclass constructor first.</li><li>Use super to invoke overridden superclass methods and constructors.</li></ul><p>Invocation of overridden methods follows two simple rules:</p><ul><li>Compiler plays it safe and only lets us do things allowed by <strong>static</strong> type.</li><li>For <u>overridden</u> methods the actual method invoked is based on <strong>dynamic</strong> type of invoking expression, e.g. Dog.maxDog(d1, d2).bark();</li><li>Can use casting to overrule compiler type checking.</li></ul><h2 id="extra-problem-just-for-fun">Extra Problem Just For Fun</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Showdog dogC = <span class="keyword">new</span> ShowDog(<span class="string">&quot;Franklin&quot;</span>, <span class="string">&quot;Malamute&quot;</span>, <span class="number">180</span>, <span class="number">6</span>);</span><br><span class="line">Showdog dogD = <span class="keyword">new</span> ShowDog(<span class="string">&quot;Gargamel&quot;</span>, <span class="string">&quot;Corgi&quot;</span>, <span class="number">44</span>, <span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">Dog.maxDog(dogC, dogD);</span><br><span class="line"></span><br><span class="line">Dog md = Dog.maxDog(dogC, dogD);</span><br><span class="line">ShowDog msd = Dog.maxDog(dogC, dogD);</span><br><span class="line"></span><br><span class="line">Object o = <span class="keyword">new</span> Dog(<span class="string">&quot;Hammy&quot;</span>, <span class="string">&quot;Beagle&quot;</span>, <span class="number">15</span>);</span><br><span class="line">Dog d = <span class="keyword">new</span> Dog(<span class="string">&quot;Ammo&quot;</span>, <span class="string">&quot;Labrador&quot;</span>, <span class="number">54</span>);</span><br><span class="line">Object stuff[] = <span class="keyword">new</span> Object[<span class="number">5</span>];</span><br><span class="line">stuff[<span class="number">0</span>] = o;</span><br><span class="line">stuff[<span class="number">1</span>] = d;</span><br><span class="line">stuff[<span class="number">2</span>] = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><p>1. What is the static type of Dog.maxDog(dogC, dog D)?</p><p>2. Which (if any), will compile:</p><p>3. How many memory boxes are there in the code below? What are the dynamic types of their contents?</p><h2 id="overview">Overview</h2><p><strong>The Interface and implements.</strong> Up to now we have been writing classes and interfaces, and you have may noticed places where we have had to write redundant code for different (but similar!) classes. This leads us to the idea of inheritance, the idea that a class/object does not need to redefine all its methods, and instead can use properties of a parent class. Lets first note some differences between inheritence of a parent class and interfaces (Note that a class can do both, even at the same time! Here is the syntax for implemeting an interface:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SLList&lt;Blorp&gt; implements List61B&lt;Blorp&gt;</span><br></pre></td></tr></table></figure><p>Similarly, the way for a class to extend the qualities of another class the syntax is as follows:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class_Name extends Class_Name</span><br></pre></td></tr></table></figure><p><strong>Usage of Inheritance.</strong> Say we wanted to make a special type of <code>SLList</code> called <code>RotatingSLList</code>. <code>RotatingSLList</code> should be able to do everyhthing that SLList can; however, it should also be able to rotate to the right. How can we do this? Well this is just an application of Inheritance! Doing the following will allow for RotatingSLList to have all the qualities of SLList as well as its own method <code>rotateRight</code>.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RotatingSLList</span>&lt;<span class="title">Blorp</span>&gt; <span class="keyword">extends</span> <span class="title">SLList</span>&lt;<span class="title">Blorp</span>&gt;</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotateRight</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>What is Inherited?</strong> We have a powerful tool in Inheritance now; however, we will define a few rules. For now, we will say that we can inherit:</p><ul><li>instance and static variables</li><li>all methods</li><li>all nested classes This changes a little bit with the introduction of private variables but don’t worry about that right now. The one item that is not inherited is a class’s constructor.</li></ul><p><strong>The Special Case of the Constructor?</strong> Even though constructor’s are not inherited, we still use them. We can call the constructor explicitly by using the keyword <code>super()</code>. At the start of every constructor, there is already an implicit call to its super class`s constructor. As a result</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">VengefulSLList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  deletedItems = <span class="keyword">new</span> SLList&lt;Item&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>is equivalent to</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">VengefulSLList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">super</span>();</span><br><span class="line">  deletedItems = <span class="keyword">new</span> SLList&lt;Item&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>However, constructor`s with arguments are not implicitly called. This means that.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">VengefulSLList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(x);</span><br><span class="line">    deletedItems = <span class="keyword">new</span> SLList&lt;Item&gt;();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>is not equivalent to</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">VengefulSLList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    deletedItems = <span class="keyword">new</span> SLList&lt;Item&gt;();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>This is because only the empty argument <code>super()</code> is called.</p><p><strong>Is A.</strong> When a class inherits from another, we know that it must have all the qualities of it. This means that <code>VengefulSLList</code> is a <code>SLList</code> because it has all the qualities of an <code>SLList</code>- it just has a few additional ones too.</p><p>Every single class is a descendent on the Object class, meaning they are all Objects.</p><p><strong>Abstraction</strong> As you’ll learn later in this class, programs can get a tad confusing when they are really large. A way to make programs easier to handle is to use abstraction. Basically abstraction is hiding components of programs that people do not need to see. The user of the hidden methods should be able to use them without knowing how they work.</p><p>An intuitive way to realize the motivation of abstraction is to look at yourself. You are a human (unless some robot is looking at this in which case I am sorry for offending you) and humans can eat food and convert it to energy. You do not need to know how you convert food to energy you just know that it works. In this case think of your conversion of food to energy as a method and the input is food and the output is energy.</p><p><strong>Casting</strong> In Java, every object has a static type (defined at compile-time) and a dynamic type (defined at run-time). Our code may rely on the fact that some variable may be a more specific type than the static type. For example if we had the below definitions:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Poodle frank  = <span class="keyword">new</span> Poodle(<span class="string">&quot;Frank&quot;</span>, <span class="number">5</span>);</span><br><span class="line">Poodle frankJr = <span class="keyword">new</span> Poodle(<span class="string">&quot;Frank Jr.&quot;</span>, <span class="number">15</span>);</span><br></pre></td></tr></table></figure><p>This statement would be valid</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Dog largerDog = maxDog(frank, frankJr);</span><br></pre></td></tr></table></figure><p>But this one would not be</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Poodle largerPoodle = maxDog(frank, frankJr);</span><br></pre></td></tr></table></figure><p>The reason the former statement is valid is because the compilers knows for a fact that anything that is returned from a <code>maxDog</code> function call is a <code>Dog</code>. However, in the latter case, the compiler does not know for a fact that the return value of <code>maxDog</code> would result in a <code>Poodle</code> even though both <code>Dog</code> arguments are <code>Poodle</code>s.</p><p>Instead of being happy with just having a generic <code>Dog</code>, we can be a bit risky and use a technique called casting. Casting allows us to force the static type of a variable, basically tricking the compiler into letting us force the static type of am expression. To make <code>largerPoodle</code> into a static type <code>Poodle</code> we will use the following:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Poodle largerPoodle = (Poodle) maxDog(frank, frankJr);</span><br></pre></td></tr></table></figure><p>Note that we are not changing the actual dynamic type of maxDog- we are just telling the compiler what is coming out of maxDog will be a <code>Poodle</code>. This means that any reference to <code>largerPoodle</code> will have a static type of <code>Poodle</code> associated with it.</p><p>Casting, while powerful is also quite dangerous. You need to ensure that what you are casting to can and will actually happen. There are a few rules that can be used:</p><ul><li>You can always cast up (to a more generic version of a class) without fear of ruining anything because we know the more specific version is a version of the generic class. For example you can always cast a Poodle to a Dog because all Poodles are Dog’s.</li><li>You can also cast down (to a more specific version of a class) with caution as you need to make sure that, during runtime, nothing is passed in that violates your cast. For example, sometimes Dog’s are Poodle’s but not always.</li><li>Finally, you cannot ever cast to a class that is neither above or below the class being cast. For an example, you cannot cast a Dog to a Monkey because a Monkey is not in the direct lineage of a Dog - it is a child of Animal so a bit more distant. You can think of this as “side casting” and it will result in a compile time error since the compiler knows this cast cannot possibly work.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structures </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Circuits</title>
      <link href="2021/03/11/2021-03-11-Circuits/"/>
      <url>2021/03/11/2021-03-11-Circuits/</url>
      
        <content type="html"><![CDATA[<h1 id="circuits">Circuits</h1><p><a href="https://www.youtube.com/watch?v=6g5aGILDH1k&amp;list=PL6BsET-8jgYVYo5aO-aILl_unTQIPg0fn">Video</a></p><h2 id="circuits-1"><a href="https://www.youtube.com/watch?v=xBsYspgjlaY&amp;list=PL6BsET-8jgYVYo5aO-aILl_unTQIPg0fn&amp;index=2">Circuits</a></h2><p>A <strong>circuit</strong> is a collection of logical gates that transforms a set of binary inputs into a set of binary outputs.</p><p><img src="/images/CS61A/0637112.png" /></p><h2 id="designing-circuits"><a href="https://www.youtube.com/watch?v=R1AFhjo5k-g&amp;list=PL6BsET-8jgYVYo5aO-aILl_unTQIPg0fn&amp;index=3">Designing Circuits</a></h2><h3 id="step-1.-build-truth-table-for-all-possible-inputoutput-values">Step 1. build truth-table for all possible input/output values</h3><p><img src="/images/CS61A/0637113.png" /></p><h3 id="step-2.-build-sub-expressions-with-andnot-for-each-output-column">Step 2. build sub-expressions with <strong><em>and/not</em></strong> for each output column</h3><p><img src="/images/CS61A/0637114.png" /></p><p><img src="/images/CS61A/0637115.png" /></p><p><img src="/images/CS61A/0637116.png" /></p><h3 id="step-3.-combine-two-at-a-time-sub-expressions-with-an-or">Step 3. combine, two at a time, sub-expressions with an or</h3><p><img src="/images/CS61A/0637117.png" /></p><h3 id="step-4.-draw-circuit-diagram">Step 4. draw circuit diagram</h3><p><img src="/images/CS61A/0637118.png" /></p><h2 id="bit-compare-for-equality-ce"><a href="https://www.youtube.com/watch?v=QnpQmg5i9vU&amp;list=PL6BsET-8jgYVYo5aO-aILl_unTQIPg0fn&amp;index=4">1-Bit Compare for Equality (CE)</a></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">If two bits a, b are equal then</span><br><span class="line"> <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p><img src="/images/CS61A/0637119.png" /></p><h2 id="bit-compare-for-equality-ce-1"><a href="https://www.youtube.com/watch?v=AbnPYBWvLK4&amp;list=PL6BsET-8jgYVYo5aO-aILl_unTQIPg0fn&amp;index=5">4-Bit Compare for Equality (CE)</a></h2><p><img src="/images/CS61A/0637120.png" /></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">If two <span class="number">4</span>-bit numbers are equal then</span><br><span class="line"> <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p><span class="math display">\[a_3 a_2 a_1 a_0 == b_3 b_2 b_1 b_0\]</span></p><figure><img src="/images/CS61A/0637121.png" alt="" /><figcaption>how many rows?</figcaption></figure><p><img src="/images/CS61A/0637122.png" /></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">two <span class="number">4</span>-bit numbers are equal <span class="keyword">if</span>:</span><br><span class="line"> a3 == b3 <span class="keyword">and</span></span><br><span class="line"> a2 == b2 <span class="keyword">and</span></span><br><span class="line"> a1 == b1 <span class="keyword">and</span></span><br><span class="line"> a0 == b0</span><br></pre></td></tr></table></figure><p><img src="/images/CS61A/0637123.png" /></p><p><img src="/images/CS61A/0637124.png" /></p><h2 id="bit-adder"><a href="https://www.youtube.com/watch?v=xE5rBWd4_i0&amp;list=PL6BsET-8jgYVYo5aO-aILl_unTQIPg0fn&amp;index=6">1-Bit Adder</a></h2><p>build a circuit that adds two 1-bit numbers</p><ul><li>0 + 0 = 0</li><li>0 + 1 = 1</li><li>1 + 0 = 1</li><li>1 + 1 = 10 <em>need to carry</em></li></ul><p><strong>input</strong>: two digits a, b and a carry c</p><p><strong>output</strong>: sum d and carry e</p><p><img src="/images/CS61A/0637125.png" /></p><p><img src="/images/CS61A/0637126.png" /></p><p><img src="/images/CS61A/0637127.png" /></p><p><img src="/images/CS61A/0637128.png" /></p><p><img src="/images/CS61A/0637129.png" /></p><h2 id="bit-adder-1"><a href="https://www.youtube.com/watch?v=xcK2LAHs3Jo&amp;list=PL6BsET-8jgYVYo5aO-aILl_unTQIPg0fn&amp;index=7">4-Bit Adder</a></h2><p>build a circuit that adds two 4-bit numbers</p><p><img src="/images/CS61A/0637130.png" /></p><p><img src="/images/CS61A/0637131.png" /></p><h2 id="bit-adder-2">32-bit Adder</h2><ul><li><p>96 = 32x3 not gates</p></li><li><p>512 = 32x16 and gates</p></li><li><p>192 = 32x6 or gates</p></li><li><p>800 gates</p></li><li><p>1,504 = 96+1024+384 transistors</p></li><li><p>1945: refrigerator-sized computer</p></li><li><p>2015: .-sized computer</p></li></ul><h2 id="equals-0"><a href="https://www.youtube.com/watch?v=Dw67t2F8SWw&amp;list=PL6BsET-8jgYVYo5aO-aILl_unTQIPg0fn&amp;index=8">Equals 0</a></h2><p>build a circuit that determines if an 8-bit number is 0 <span class="math display">\[a_7 a_6 a_5 a_4 a_3 a_2 a_1 a_0 = 00000000\]</span> <img src="/images/CS61A/0637132.png" alt="How many rows?" /></p><table><thead><tr class="header"><th>a</th><th>b</th><th>c</th><th>d</th><th>e</th><th>f</th><th>g</th><th>h</th><th>i</th></tr></thead><tbody><tr class="odd"><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td><strong>1</strong></td></tr></tbody></table><p>Only one row has an output of 1 <span class="math display">\[i = a’ ⋅ b’ ⋅ c’ ⋅ d’ ⋅ e’ ⋅ f’ ⋅ g’ ⋅ h’\]</span> <img src="/images/CS61A/0637133.png" /></p><h2 id="optimization-karnaugh-maps"><a href="https://www.youtube.com/watch?v=dnLArnHWbtA&amp;list=PL6BsET-8jgYVYo5aO-aILl_unTQIPg0fn&amp;index=9">Optimization (Karnaugh maps)</a></h2><p><img src="/images/CS61A/0637110.png" /></p><p><img src="/images/CS61A/0637111.png" /></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Structure and Interpretation of Computer Programs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Structured Query Language</title>
      <link href="2021/03/10/2021-03-10-Structured-Query-Language/"/>
      <url>2021/03/10/2021-03-10-Structured-Query-Language/</url>
      
        <content type="html"><![CDATA[<h1 id="structured-query-language">Structured Query Language</h1><p><a href="https://recordings.reu1.blindsidenetworks.com/vub/aff251b8c6a26b470d4c2aa8be088ad19c0645d0-1615381021180/capture/">Video</a></p><figure><img src="/images/DB/17001700.png" alt="" /><figcaption>Context of Today's Lecture</figcaption></figure><h2 id="structured-query-language-sql-0039">Structured Query Language (SQL) 00:39</h2><ul><li><strong><em>Declarative query language</em></strong> to create database schemas, insert, update, delete and query information based on a data definition and data manipulation language</li><li><strong><em>Data definition language (DDL)</em></strong><ul><li>definition of database structure (relation schemas)</li><li>data access control</li></ul></li><li><strong><em>Data manipulation language (DML)</em></strong><ul><li>query language to create, read, update and delete tuples (CRUD operations)</li></ul></li><li><strong>The SQL language</strong> further deals with the following issues<ul><li>transaction control</li><li>integrity constraints (DDL)</li><li>authorisation (DDL)</li><li>views (DDL)</li><li>embedded SQL and dynamic SQL</li></ul></li></ul><h3 id="history-of-sql-258">History of SQL 2:58</h3><ul><li>SEQUEL (70's)<ul><li><strong>s</strong>tructured <strong>e</strong>nglish <strong>que</strong>ry <strong>l</strong>anguage</li><li>developed by Raymond F. Boyce and Donald D. Chamberlin</li><li>access data stored in IBM's System R relational database</li></ul></li><li>SQL-86<ul><li>first ANSI standard version</li></ul></li><li>SQL-89 / SQL 1</li><li>SQL-92 / SQL 2<ul><li><strong>we will mainly discuss features of the SQL-92 standard</strong></li></ul></li><li>SQL:1999 / SQL 3<ul><li>recursive queries, triggers, object-oriented features, ...</li></ul></li><li>SQL:2003<ul><li>window functions, XML-related features, ...</li></ul></li><li>SQL:2006<ul><li>XML Query Language (XQuery) support, ...</li></ul></li><li>SQL:2008</li><li>SQL:2011<ul><li>improved support for temporal databases</li></ul></li><li>…</li></ul><h3 id="sql-standard-406">SQL "Standard" 4:06</h3><ul><li>Each specific SQL implementation by a database vendor is called a <strong><em>dialect</em></strong></li><li>The vendors implement parts of the SQL standard (e.g. most implement SQL-92) but add their <strong>vendor-specific extensions</strong></li><li>Most relational database vendors conform to a set of <strong>Core SQL</strong> features but portability might still be limited due to missing or additional features</li></ul><h2 id="data-definition-language-ddl-456">Data Definition Language (DDL) 4:56</h2><p>The data definition language (DDL) is used to specify the relation schemas as well as other information about the relations</p><ul><li>relation schemas</li><li>attribute domain types</li><li>integrity constraints (e.g. foreign keys)</li><li>relation indexes</li><li>access information</li><li>physical storage structure of relations</li></ul><h3 id="database-creation-526">Database Creation 5:26</h3><ul><li><p>The concrete process of creating a new database might differ for different relational database products</p></li><li><p>According to the SQL standard, an SQL environment contains one or more <strong>catalogues</strong></p><p><img src="/images/DB/17001701.png" /></p></li><li><p>Each catalogue manages various metadata</p><ul><li>set of schemas consisting of<ul><li>relations/tables</li><li>views</li><li>assertions</li><li>indexes</li></ul></li><li><strong>SET SCHEMA</strong> <em>name</em> can be used to set the current schema</li><li>users and user groups</li></ul></li><li><p>The creation of catalogues is not covered by the SQL standard and therefore implementation specific</p></li><li><p>Schemas can be created and deleted via the <strong>CREATE</strong> and <strong>DROP</strong> statements</p></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">createSchema <span class="operator">=</span> &quot;CREATE SCHEMA&quot; , name , &quot;AUTHORIZATION&quot; , creator ,</span><br><span class="line">[ ddlStatements ];</span><br><span class="line">dropSchema <span class="operator">=</span> &quot;DROP SCHEMA&quot; , name , [ &quot;RESTRICT&quot; <span class="operator">|</span> &quot;CASCADE&quot; ];</span><br></pre></td></tr></table></figure><ul><li>The default parameter of the <strong>DROP SCHEMA</strong> statement is <strong>RESTRICT</strong><ul><li>only empty schema can be deleted</li></ul></li><li>If <strong>CASCADE</strong> is specified, all objects associated with the schema will be dropped</li></ul><h3 id="extended-backus-naur-form-ebnf-808"><a href="https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form">Extended Backus-Naur Form (EBNF)</a> 8:08</h3><p>Notation to describe computer programming languages (context-free grammars)</p><ul><li>developed by Niklaus Wirth</li><li>We use the EBNF to describe different SQL concepts</li></ul><table><thead><tr class="header"><th>Notation</th><th>Meaning</th></tr></thead><tbody><tr class="odd"><td>=</td><td>Definition</td></tr><tr class="even"><td>,</td><td>Sequence</td></tr><tr class="odd"><td>;</td><td>Termination</td></tr><tr class="even"><td>|</td><td>Choice</td></tr><tr class="odd"><td>[...]</td><td>Option</td></tr><tr class="even"><td>{...}</td><td>Repetition</td></tr><tr class="odd"><td>(...)</td><td>Grouping</td></tr><tr class="even"><td>"..."</td><td>Terminal String</td></tr></tbody></table><h3 id="relational-database-example">Relational Database Example</h3><p><em>customer</em></p><table><thead><tr class="header"><th>customerID</th><th>name</th><th>street</th><th>postcode</th><th>city</th></tr></thead><tbody><tr class="odd"><td>1</td><td>Max Frisch</td><td>Bahnhofstrasse 7</td><td>8001</td><td>Zurich</td></tr><tr class="even"><td>2</td><td>Eddy Merckx</td><td>Pleinlaan 25</td><td>1050</td><td>Brussels</td></tr><tr class="odd"><td>5</td><td>Claude Debussy</td><td>12 Rue Louise</td><td>75008</td><td>Paris</td></tr><tr class="even"><td>53</td><td>Albert Einstein</td><td>Bergstrasse 18</td><td>8037</td><td>Zurich</td></tr><tr class="odd"><td>8</td><td>Max Frisch</td><td>ETH Zentrum</td><td>8092</td><td>Zurich</td></tr></tbody></table><p><em>cd</em></p><table><thead><tr class="header"><th>cdID</th><th>name</th><th>duration</th><th>price</th><th>year</th></tr></thead><tbody><tr class="odd"><td>1</td><td>Falling into Place</td><td>2007</td><td>17.90</td><td>2007</td></tr><tr class="even"><td>2</td><td>Carcassonne</td><td>3156</td><td>15.50</td><td>1993</td></tr><tr class="odd"><td>3</td><td>Chromatic</td><td>3012</td><td>16.50</td><td>1993</td></tr></tbody></table><p><em>order</em></p><table><thead><tr class="header"><th>orderID</th><th>customerID</th><th>cdID</th><th>date</th><th>amount</th><th>status</th></tr></thead><tbody><tr class="odd"><td>1</td><td>53</td><td>1</td><td>13.02.2010</td><td>2</td><td>open</td></tr><tr class="even"><td>2</td><td>2</td><td>2</td><td>15.02.2010</td><td>2</td><td>delievered</td></tr></tbody></table><p><em>supplier</em></p><table><thead><tr class="header"><th>supplierID</th><th>name</th><th>postcode</th><th>city</th></tr></thead><tbody><tr class="odd"><td>5</td><td>Max Frisch</td><td>8037</td><td>Zurich</td></tr><tr class="even"><td>2</td><td>Mario Botta</td><td>6901</td><td>Lugano</td></tr></tbody></table><p>Customer (<u><strong>customerID</strong></u>, name, street, postcode, city)</p><p>CD (<strong><u>cdID</u></strong>, name, duration, price, year)</p><p>Order (<u><strong>orderId</strong></u>, customerID, cdID, date, amount, status)</p><p>Supplier (<u><strong>supplierID</strong></u>, name, postcode, city)</p><h4 id="table-definition-example-1053">Table Definition Example 10:53</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Customer (</span><br><span class="line">customerID <span class="type">INTEGER</span> <span class="keyword">CHECK</span> (customerID <span class="operator">&gt;</span> <span class="number">0</span>) <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span>,</span><br><span class="line">name <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">street <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">postcode <span class="type">SMALLINT</span> <span class="keyword">CHECK</span> (postcode <span class="operator">&gt;</span> <span class="number">0</span>),</span><br><span class="line">city <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> CD (</span><br><span class="line">cdID <span class="type">INTEGER</span> <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span>,</span><br><span class="line">name <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">duration <span class="type">TIME</span>,</span><br><span class="line">price <span class="type">NUMERIC</span>(<span class="number">6</span>,<span class="number">2</span>),</span><br><span class="line"><span class="keyword">year</span> <span class="type">SMALLINT</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Supplier (</span><br><span class="line">supplierID <span class="type">INTEGER</span> <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span>,</span><br><span class="line">name <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">postcode <span class="type">SMALLINT</span> <span class="keyword">CHECK</span> (postcode <span class="operator">&gt;</span> <span class="number">0</span>),</span><br><span class="line">city <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">Order</span> (</span><br><span class="line">orderID <span class="type">INTEGER</span> <span class="keyword">CHECK</span> (orderID <span class="operator">&gt;</span> <span class="number">0</span>) <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span>,</span><br><span class="line">customerID <span class="type">INTEGER</span>,</span><br><span class="line">cdID <span class="type">INTEGER</span> ,</span><br><span class="line"><span class="type">date</span> <span class="type">DATE</span>,</span><br><span class="line">amount <span class="type">INTEGER</span>,</span><br><span class="line">Status <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;open&#x27;</span>,</span><br><span class="line"><span class="keyword">UNIQUE</span> (customerID, cdID, <span class="type">date</span>),</span><br><span class="line"><span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (customerID) <span class="keyword">REFERENCES</span> Customer(customerID)</span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">UPDATE</span> CASCADE <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">SET</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (cdID) <span class="keyword">REFERENCES</span> CD(cdID)</span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">UPDATE</span> CASCADE</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="table-constraints-1537">Table Constraints 15:37</h3><ul><li>We can have only one PRIMARY KEY constraint but multiple UNIQUE constraints<ul><li>if no primary key is defined, duplicates are allowed (bag)</li></ul></li><li><strong>Referential integrity</strong><ul><li>a <strong>foreign key</strong> always has to have a <em>matching value in the referenced table</em> (or it can be null)</li><li>different <strong><em>referential actions</em></strong> can be defined for update (<strong>ON UPDATE</strong>) and delete (<strong>ON DELETE</strong>) operations on the referenced candidate key<ul><li>CASCADE: propagate operations to the foreign keys which might lead to further cascaded operations</li><li>SET DEFAULT: set the foreign keys to their default value</li><li>SET NULL: set the foreign keys to NULL</li><li>NO ACTION: the operation on the candidate key will be rejected (default)</li></ul></li></ul></li></ul><h3 id="table-definition">Table Definition</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">createTable <span class="operator">=</span> &quot;CREATE TABLE&quot; , <span class="keyword">table</span> , &quot;(&quot; ,</span><br><span class="line">( columnElement <span class="operator">|</span> tableConstraint ) ,</span><br><span class="line">&#123; &quot;,&quot; , ( columnElement | tableConstraint ) &#125; , &quot;)&quot;;</span><br><span class="line"></span><br><span class="line">columnElement <span class="operator">=</span> <span class="keyword">column</span> , datatype ,</span><br><span class="line">[ &quot;DEFAULT&quot; , ( value | &quot;NULL&quot; ) ] , &#123; columnConstraint &#125;;</span><br><span class="line"></span><br><span class="line">columnConstraint <span class="operator">=</span> &quot;NOT NULL&quot; <span class="operator">|</span> &quot;UNIQUE&quot; <span class="operator">|</span> &quot;PRIMARY KEY&quot; <span class="operator">|</span></span><br><span class="line">( &quot;REFERENCES&quot; , <span class="keyword">table</span> , [ &quot;(&quot; , <span class="keyword">column</span> , &quot;)&quot; ] ,</span><br><span class="line">&#123; referentialAction &#125; ) |</span><br><span class="line">( &quot;CHECK (&quot; , searchCondition , &quot;)&quot; );</span><br><span class="line"></span><br><span class="line">tableConstraint <span class="operator">=</span> ( ( &quot;UNIQUE&quot; <span class="operator">|</span> &quot;PRIMARY KEY ) , &quot;(&quot; , column ,</span><br><span class="line">&#123; &quot;,&quot; , column &#125; , &quot;)&quot; ) |</span><br><span class="line">( &quot;<span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (&quot; , column , &#123; &quot;,&quot; , column &#125; , &quot;)&quot; ,</span><br><span class="line">&quot;<span class="keyword">REFERENCES</span>&quot; , table , [ &quot;(&quot; , column , &#123; &quot;,&quot; , column &#125; , &quot;)&quot; ] ,</span><br><span class="line">&#123; referentialAction &#125; ) |</span><br><span class="line">( &quot;<span class="keyword">CHECK</span> (&quot; , searchCondition , &quot;)&quot; );</span><br><span class="line"></span><br><span class="line">referentialAction = ( &quot;<span class="keyword">ON</span> <span class="keyword">UPDATE</span>&quot; | &quot;<span class="keyword">ON</span> <span class="keyword">DELETE</span>&quot; ) ,</span><br><span class="line">( &quot;CASCADE&quot; | &quot;<span class="keyword">SET</span> <span class="keyword">DEFAULT</span>&quot; | &quot;<span class="keyword">SET</span> <span class="keyword">NULL</span>&quot; | &quot;<span class="keyword">NO</span> ACTION&quot; );  </span><br></pre></td></tr></table></figure><h2 id="sql-datatypes-2024">SQL Datatypes 20:24</h2><h3 id="character-data">Character data</h3><ul><li>fixed-length or variable-length sequence of characters</li><li>optional multibyte character sets (e.g. for Japanese etc.)</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> <span class="operator">=</span> fixedChar <span class="operator">|</span> varyingChar [charSet];</span><br><span class="line">fixedChar <span class="operator">=</span> &quot;CHAR&quot; , [ &quot;(&quot; , length , &quot;)&quot; ];</span><br><span class="line">varyingChar <span class="operator">=</span> &quot;VARCHAR&quot; , [ &quot;(&quot; , maxLength , &quot;)&quot; ];</span><br><span class="line">charSet <span class="operator">=</span> &quot;CHARACTER SET&quot; charSetName;</span><br></pre></td></tr></table></figure><h3 id="large-character-data-or-binary-data">Large character data or binary data</h3><ul><li>often a so-called <strong>locator</strong> is returned to access a large object in pieces instead of loading the entire object into memory</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">lob <span class="operator">=</span> <span class="type">clob</span> <span class="operator">|</span> <span class="type">blob</span>;</span><br><span class="line"><span class="type">clob</span> <span class="operator">=</span> &quot;CLOB&quot; , [ &quot;(&quot; , size , &quot;)&quot; ];</span><br><span class="line"><span class="type">blob</span> <span class="operator">=</span> &quot;BLOB&quot; , [ &quot;(&quot; , size , &quot;)&quot; ];</span><br></pre></td></tr></table></figure><h3 id="numeric-data">Numeric data</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="type">numeric</span> <span class="operator">=</span> <span class="type">decimal</span> <span class="operator">|</span> <span class="type">int</span> <span class="operator">|</span> <span class="type">smallInt</span> <span class="operator">|</span> <span class="type">float</span> <span class="operator">|</span> <span class="type">real</span> <span class="operator">|</span> <span class="keyword">double</span>;</span><br><span class="line"><span class="type">decimal</span> <span class="operator">=</span> &quot;DECIMAL&quot; , [ &quot;(&quot; , <span class="keyword">precision</span> , [ &quot;,&quot; , scale ] , &quot;)&quot; ];</span><br><span class="line"><span class="type">int</span> <span class="operator">=</span> &quot;INTEGER&quot;;</span><br><span class="line"><span class="type">smallInt</span> <span class="operator">=</span> &quot;SMALLINT&quot;;</span><br><span class="line"><span class="type">float</span> <span class="operator">=</span> &quot;FLOAT&quot; , [ &quot;(&quot; , <span class="keyword">precision</span> , &quot;)&quot; ];</span><br><span class="line"><span class="type">real</span> <span class="operator">=</span> &quot;REAL&quot;;</span><br><span class="line"><span class="keyword">double</span> <span class="operator">=</span> &quot;DOUBLE PRECISION&quot;;</span><br></pre></td></tr></table></figure><p>The DECIMAL datatype is sometimes used as a synonym for the NUMERIC datatype</p><h3 id="datetime-data">Datetime data</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">datetime <span class="operator">=</span> <span class="type">date</span> <span class="operator">|</span> <span class="type">time</span> <span class="operator">|</span> <span class="type">timestamp</span>;</span><br><span class="line"><span class="type">date</span> <span class="operator">=</span> &quot;DATE&quot;;</span><br><span class="line"><span class="type">time</span> <span class="operator">=</span> &quot;TIME&quot; , [ &quot;(&quot; , <span class="keyword">precision</span> , &quot;)&quot; ] ,</span><br><span class="line">[ &quot;WITH TIME ZONE&quot; , timezone ];</span><br><span class="line"><span class="type">timestamp</span> <span class="operator">=</span> &quot;TIMESTAMP&quot; , [ &quot;(&quot; , <span class="keyword">precision</span> , &quot;)&quot; ] ,</span><br><span class="line">[ &quot;WITH TIME ZONE&quot; , timezone ]; </span><br></pre></td></tr></table></figure><p>Format of the datetime values:</p><ul><li>date: YYYY-MM-DD</li><li>time: hh:mm:ss.p ± hh:mm</li><li>timestamp: YYYY-MM-DD hh:mm:ss.p ± hh:mm</li></ul><h3 id="boolean">Boolean</h3><ul><li>the domain of boolean values consist of the two truth values TRUE and FALSE</li><li>a thrid UNKNOWN truth value is used to represent NULL values</li><li>introduced in SQL:1999</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="operator">=</span> &quot;BOOLEAN&quot;;</span><br></pre></td></tr></table></figure><h3 id="bit-data">Bit data</h3><ul><li>fixed or varying sequence of binary digits (0 or 1)</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">bit <span class="operator">=</span> fixedBit <span class="operator">|</span> varyingBit;</span><br><span class="line">fixedBit <span class="operator">=</span> &quot;BIT&quot; , [ &quot;(&quot; , length , &quot;)&quot; ];</span><br><span class="line">varyingBit <span class="operator">=</span> &quot;BIT VARYING&quot; , [ &quot;(&quot; , maxLength , &quot;)&quot; ];</span><br></pre></td></tr></table></figure><p>For further details about the presented datatypes as well as information about vendor-specific datatypes one has to consult the specific database manuals</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">datatype <span class="operator">=</span> <span class="type">char</span> <span class="operator">|</span> lob <span class="operator">|</span> <span class="type">numeric</span> <span class="operator">|</span> datetime <span class="operator">|</span> <span class="type">boolean</span> <span class="operator">|</span> bit;</span><br></pre></td></tr></table></figure><h2 id="data-manipulation-2532">Data Manipulation 25:32</h2><p>After a table has been created, we can use the <strong>INSERT</strong> command to add tuples</p><ul><li>unspecified attribute values are set to the default value or NULL</li><li>attribute order can be changed via optional column names</li><li>"bulk loader" utilities to insert large amounts of tuples</li></ul><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="operator">=</span> &quot;INSERT INTO&quot; , <span class="keyword">table</span> ,</span><br><span class="line">[ &quot;(&quot; , column , &#123; &quot;,&quot; , column &#125; , &quot;)&quot; ] ,</span><br><span class="line">( &quot;VALUES (&quot; , expr , &#123; &quot;,&quot; , expr &#125; , &quot;)&quot; ) | ( &quot;(&quot; , query , &quot;)&quot; ); </span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Customer <span class="keyword">VALUES</span>(<span class="number">8</span>,<span class="string">&#x27;Max Frisch&#x27;</span>,<span class="string">&#x27;ETH Zentrum&#x27;</span>, <span class="number">8001</span>, <span class="string">&#x27;Zurich&#x27;</span>); </span><br></pre></td></tr></table></figure><p>Expressions</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">expr = exprElement &#123; ( &quot;+&quot; | &quot;-&quot; | &quot;*&quot; | &quot;/&quot; ) , exprElement &#125;;</span><br><span class="line">exprElement <span class="operator">=</span> <span class="keyword">column</span> <span class="operator">|</span> <span class="keyword">value</span> <span class="operator">|</span></span><br><span class="line">&quot;COUNT&quot; , &quot;(&quot; ( &quot;*&quot; <span class="operator">|</span> ( [ &quot;ALL&quot; <span class="operator">|</span> &quot;DISTINCT&quot; ] , <span class="keyword">column</span> ) , &quot;)&quot; <span class="operator">|</span></span><br><span class="line">( &quot;MIN&quot; <span class="operator">|</span> &quot;MAX&quot; ) , &quot;(&quot; , expr , &quot;)&quot; <span class="operator">|</span></span><br><span class="line">( &quot;SUM&quot; <span class="operator">|</span> &quot;AVG&quot; ) , &quot;(&quot; , [ &quot;DISTINCT&quot; ] , expr , &quot;)&quot;; </span><br></pre></td></tr></table></figure><ul><li>The <strong>DELETE</strong> statement can be used to delete tuples</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="operator">=</span> &quot;DELETE FROM&quot; , <span class="keyword">table</span> [ &quot;WHERE&quot; , searchCondition ];</span><br></pre></td></tr></table></figure><ul><li><p>Tuples can be updated via the <strong>UPDATE</strong> statement</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="operator">=</span> &quot;UPDATE&quot; , <span class="keyword">table</span> , &quot;SET&quot; ,</span><br><span class="line"><span class="keyword">column</span> , &quot;=&quot; , ( &quot;NULL&quot; <span class="operator">|</span> expr <span class="operator">|</span> &quot;(&quot; , query , &quot;)&quot; ) ,</span><br><span class="line">&#123; &quot;,&quot; , column , &quot;=&quot; , (&quot;NULL&quot; | expr | &quot;(&quot; , query , &quot;)&quot; ) &#125; ,</span><br><span class="line">[ &quot;WHERE&quot; , searchCondition ];</span><br></pre></td></tr></table></figure><ul><li>Example</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> Customer <span class="keyword">SET</span> name <span class="operator">=</span> <span class="string">&#x27;Walter Faber&#x27;</span> <span class="keyword">WHERE</span> customerID <span class="operator">=</span> <span class="number">8</span>; </span><br></pre></td></tr></table></figure></li><li><p>The <strong>DROP TABLE</strong> statement can be used to delete a relation from the database</p></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">dropTable <span class="operator">=</span> &quot;DROP TABLE&quot; , <span class="keyword">table</span>; </span><br></pre></td></tr></table></figure><ul><li><p>A relation schema can be modified via the <strong>ALTER TABLE</strong> command</p><ul><li><p>existing tuples are assigned a NULL value for the new attribute</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">alterTable <span class="operator">=</span> &quot;ALTER TABLE&quot; , <span class="keyword">table</span> , &quot;ADD&quot; ,</span><br><span class="line">( columnElement <span class="operator">|</span> columnConstraint );</span><br></pre></td></tr></table></figure></li><li><p>Example</p></li></ul><p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Customer <span class="keyword">ADD</span> birthdate <span class="type">DATE</span>;</span><br></pre></td></tr></table></figure> ## Basic SQL Query Structure 34:53</p></li></ul><p>A basic SQL query consists of a <strong>SELECT</strong>, a <strong>FROM</strong> and a <strong>WHERE</strong> clause</p><ul><li><strong>SELECT</strong><ul><li>specifies the columns to appear in the result (projection in relational algebra)</li></ul></li><li><strong>FROM</strong><ul><li>specifies the relations to be used (cartesian product in relational algebra)</li></ul></li><li><strong>WHERE</strong><ul><li>filters the tuples (selection in relational algebra)</li><li><strong><em>join conditions</em></strong> are explicitly specified in the WHERE clause</li></ul></li><li><strong>GROUP BY</strong><ul><li>groups rows with the same column values</li><li>the HAVING construct can be used to further filter the groups</li></ul></li><li><strong>ORDER BY</strong><ul><li>defines the order of the resulting tuples</li></ul></li></ul><p>In general, the <strong>SELECT FROM WHERE</strong> parts are evaluated as follows</p><ol type="1"><li>generate a cartesian product of the relations listed in the FROM clause</li><li>apply the predicates specified in the WHERE clause on the result of the first step</li><li>for each tuple in the result of the second step output the attributes (or results of expressions) specified in the SELECT clause</li></ol><p>The evaluation is normally optimised by a query optimiser</p><p>The <strong>order</strong> of clauses in an SQL query <strong><u>cannot be changed</u></strong></p><p>Note that the SELECT is equivalent to a relational algebra projection</p><p><img src="/images/DB/17001702.png" /></p><p>In contrast to the relational algebra, <strong><u>SQL does not eliminate duplicates automatically</u></strong></p><ul><li>the automatic elimination of duplicates would be time consuming</li><li>user has to eliminate duplicates explicitly via <strong>DISTINCT</strong> keyword</li></ul><h3 id="select-clause-4106">SELECT Clause 41:06</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Customer;</span><br></pre></td></tr></table></figure><table><thead><tr class="header"><th>customerID</th><th>name</th><th>street</th><th>postcode</th><th>city</th></tr></thead><tbody><tr class="odd"><td>1</td><td>Max Frisch</td><td>Bahnhofstrasse 7</td><td>8001</td><td>Zurich</td></tr><tr class="even"><td>2</td><td>Eddy Merckx</td><td>Pleinlaan 25</td><td>1050</td><td>Brussels</td></tr><tr class="odd"><td>5</td><td>Claude Debussy</td><td>12 Rue Louise</td><td>75008</td><td>Paris</td></tr><tr class="even"><td>53</td><td>Albert Einstein</td><td>Bergstrasse 18</td><td>8037</td><td>Zurich</td></tr><tr class="odd"><td>8</td><td>Max Frisch</td><td>ETH Zentrum</td><td>8092</td><td>Zurich</td></tr></tbody></table><p>A '<strong>*</strong>' can be used in the SELECT clause as a shortcut to get all tuple attributes</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name</span><br><span class="line"><span class="keyword">FROM</span> Customer;</span><br></pre></td></tr></table></figure><table><thead><tr class="header"><th>name</th></tr></thead><tbody><tr class="odd"><td>Max Frisch</td></tr><tr class="even"><td>Eddy Merckx</td></tr><tr class="odd"><td>Claude Debussy</td></tr><tr class="even"><td>Albert Einstein</td></tr><tr class="odd"><td>Max Frisch</td></tr></tbody></table><ul><li><strong>Duplicate tuples</strong> resulting from a projection to specific attributes are <strong><u>not eliminated by default</u></strong></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> name</span><br><span class="line"><span class="keyword">FROM</span> Customer;</span><br></pre></td></tr></table></figure><table><thead><tr class="header"><th>name</th></tr></thead><tbody><tr class="odd"><td>Max Frisch</td></tr><tr class="even"><td>Eddy Merckx</td></tr><tr class="odd"><td>Claude Debussy</td></tr><tr class="even"><td>Albert Einstein</td></tr></tbody></table><ul><li>The DISTINCT keyword can be used to eliminate duplicates</li></ul><h3 id="computed-attributes-and-rename-4257">Computed Attributes and Rename 42:57</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, price <span class="operator">*</span> <span class="number">1.5</span> <span class="keyword">AS</span> newPrice</span><br><span class="line"><span class="keyword">FROM</span> CD;</span><br></pre></td></tr></table></figure><table><thead><tr class="header"><th>name</th><th>newprice</th></tr></thead><tbody><tr class="odd"><td>Falling into Place</td><td>26.85</td></tr><tr class="even"><td>Carcassonne</td><td>23.20</td></tr><tr class="odd"><td>Chromatic</td><td>24.75</td></tr></tbody></table><ul><li>Computations can be performed in the SELECT clause<ul><li><strong>multiple numeric attributes</strong> can be used in a computation</li></ul></li><li>The <strong>rename operation</strong> (AS) is used to rename relations as well as attributes<ul><li>computed columns have no name by default</li><li>also used when multiple relations have the same attribute names</li></ul></li></ul><h3 id="where-clause-4411">WHERE Clause 44:11</h3><p>In the WHERE clause we can use five basic predicates (<strong>search conditions</strong>)</p><ul><li><strong>comparison</strong><ul><li>compare two expressions</li></ul></li><li><strong>range</strong><ul><li>check whether the value is within a specified range of values (<strong>BETWEEN</strong>)</li></ul></li><li><strong>set membership</strong><ul><li>check whether the value is equal to a value of a given set (<strong>IN</strong>)</li></ul></li><li><strong>pattern matching</strong><ul><li>test whether the expression matches a specifies string pattern (<strong>LIKE</strong>)</li></ul></li><li><strong>check for NULL values</strong><ul><li>check whether the expression is a NULL value (<strong>IS NULL</strong>)</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, postcode</span><br><span class="line"><span class="keyword">FROM</span> Customer</span><br><span class="line"><span class="keyword">WHERE</span> city <span class="operator">=</span> <span class="string">&#x27;Zurich&#x27;</span> <span class="keyword">AND</span> postcode <span class="operator">&gt;=</span> <span class="number">8040</span>;</span><br></pre></td></tr></table></figure><table><thead><tr class="header"><th>Max Frisch</th><th>8001</th></tr></thead><tbody><tr class="odd"><td>Max Frisch</td><td>8092</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, price</span><br><span class="line"><span class="keyword">FROM</span> CD</span><br><span class="line"><span class="keyword">WHERE</span> price <span class="keyword">BETWEEN</span> <span class="number">15.0</span> <span class="keyword">AND</span> <span class="number">17.0</span>;</span><br></pre></td></tr></table></figure><table><thead><tr class="header"><th>name</th><th>price</th></tr></thead><tbody><tr class="odd"><td>Carcassonne</td><td>15.50</td></tr><tr class="even"><td>Chromatic</td><td>16.50</td></tr></tbody></table><ul><li>Check for set membership with the <strong>IN</strong> construct</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Customer</span><br><span class="line"><span class="keyword">WHERE</span> city <span class="keyword">IN</span> (<span class="string">&#x27;Zurich&#x27;</span>, <span class="string">&#x27;Brussels&#x27;</span>);</span><br></pre></td></tr></table></figure><table><thead><tr class="header"><th>customerID</th><th>name</th><th>street</th><th>postcode</th><th>city</th></tr></thead><tbody><tr class="odd"><td>1</td><td>Max Frisch</td><td>Bahnhofstrasse 7</td><td>8001</td><td>Zurich</td></tr><tr class="even"><td>2</td><td>Eddy Merckx</td><td>Pleinlaan 25</td><td>1050</td><td>Brussels</td></tr><tr class="odd"><td>53</td><td>Albert Einstein</td><td>Bergstrasse 18</td><td>8037</td><td>Zurich</td></tr><tr class="even"><td>8</td><td>Max Frisch</td><td>ETH Zentrum</td><td>8092</td><td>Zurich</td></tr></tbody></table><h3 id="pattern-matching-4554">Pattern Matching 45:54</h3><ul><li>Strings are enclosed in single quotes<ul><li>use a double single quote for escaping</li></ul></li><li>The LIKE operator is used for pattern matching<ul><li>the <strong>underscore</strong> ( _ ) is a placeholder for a single character</li><li>the <strong>percent</strong> sign ( % ) is a placeholder for any substring</li><li>e.g. LIKE '_e%'</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> name</span><br><span class="line"><span class="keyword">FROM</span> Customer</span><br><span class="line"><span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;%Ein%&#x27;</span>;</span><br></pre></td></tr></table></figure><table><thead><tr class="header"><th>name</th></tr></thead><tbody><tr class="odd"><td>Albert Einstein</td></tr></tbody></table><h3 id="null-values-4704">Null Values 47:04</h3><ul><li>Missing (unknown) info is represented by <strong>NULL</strong> values<ul><li>result of any comparison involving a NULL value is Unknown</li><li><strong>three-valued logic (3VL)</strong> based on True, False and Unknown</li></ul></li></ul><p><img src="/images/DB/17001703.png" /></p><ul><li>The NULL keyword can also be used in predicates to check for null values</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> CD</span><br><span class="line"><span class="keyword">WHERE</span> price <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><table><thead><tr class="header"><th>cdID</th><th>name</th><th>duration</th><th>price</th><th>year</th></tr></thead><tbody><tr class="odd"><td>1</td><td>Falling into Place</td><td>2007</td><td>17.90</td><td>2007</td></tr><tr class="even"><td>2</td><td>Carcassonne</td><td>3156</td><td>15.50</td><td>1993</td></tr><tr class="odd"><td>3</td><td>Chromatic</td><td>3012</td><td>16.50</td><td>1993</td></tr></tbody></table><ul><li>Note that a check for NULL is not the same as a check for the empty String ''</li></ul><h3 id="from-clause-5135">FROM Clause 51:35</h3><ul><li>The FROM clause creates a cartesian product of multiple relations and can be used to specify <strong>join operations</strong></li><li>In a previous lecture we have seen the following relational algebra expression<ul><li><em>"list the name and street of customers whose order is still open"</em></li><li>π<sub>name, street</sub>(σ<sub>status="open"</sub>(<em>order</em> ⋈ <em>customer</em>))</li><li>the same can be achieved in SQL by explicitly specifying the <strong>matching attributes</strong></li></ul></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, street</span><br><span class="line"><span class="keyword">FROM</span> Customer, <span class="keyword">Order</span></span><br><span class="line"><span class="keyword">WHERE</span> Order.customerID <span class="operator">=</span> Customer.customerID <span class="keyword">AND</span> status <span class="operator">=</span> <span class="string">&#x27;open&#x27;</span>;</span><br></pre></td></tr></table></figure><table><thead><tr class="header"><th>name</th><th>street</th></tr></thead><tbody><tr class="odd"><td>Albert Einstein</td><td>Bergstrasse 18</td></tr></tbody></table><h3 id="inner-and-outer-joins-5353">Inner and Outer Joins 53:53</h3><p>Note that there exist SQL extensions to perform join operations between two relations <em>R</em> and <em>S</em> in the FROM clause</p><ul><li>Inner Joins</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> R <span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> S;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> R <span class="keyword">CROSS</span> <span class="keyword">JOIN</span> S;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> R <span class="keyword">JOIN</span> S <span class="keyword">ON</span> R.A <span class="operator">&gt;</span> S.B;</span><br></pre></td></tr></table></figure><ul><li>Outer Joins</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> R <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> S <span class="keyword">ON</span> R.A <span class="operator">=</span> S.B;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> R <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> S <span class="keyword">ON</span> R.A <span class="operator">=</span> S.B;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> R <span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> S <span class="keyword">ON</span> R.A <span class="operator">=</span> S.B;</span><br></pre></td></tr></table></figure><h3 id="correlation-variable-5522">Correlation Variable 55:22</h3><ul><li>A correlation variable can be used as an alias for a table</li><li>Example<ul><li><em>"Find all pairs of CDs that were produced in the same year"</em></li></ul></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> c1.name <span class="keyword">AS</span> name1, c2.name <span class="keyword">AS</span> name2</span><br><span class="line"><span class="keyword">FROM</span> CD c1, CD c2</span><br><span class="line"><span class="keyword">WHERE</span> c1.year <span class="operator">=</span> c2.year <span class="keyword">AND</span> c1.cdID <span class="operator">&lt;</span> c2.cdID;</span><br></pre></td></tr></table></figure><table><thead><tr class="header"><th>name1</th><th>name2</th></tr></thead><tbody><tr class="odd"><td>Carcassonne</td><td>Chromatic</td></tr></tbody></table><h3 id="sorting-5835">Sorting 58:35</h3><p>The <strong>ORDER BY</strong> clause can be used to arrange the result tuples in acending (<strong>ASC</strong>) or descending (<strong>DESC</strong>) order</p><ul><li>multiple sort keys can be specified; highest priority first</li><li>tuples with NULL values are either before or after non-NULL tuples</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, street, city</span><br><span class="line"><span class="keyword">FROM</span> Customer</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> city <span class="keyword">ASC</span>, name <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><table><thead><tr class="header"><th>Eddy Merckx</th><th>Pleinlaan 25</th><th>Brussels</th></tr></thead><tbody><tr class="odd"><td>Claude Debussy</td><td>12 Rue Louise</td><td>Paris</td></tr><tr class="even"><td>Max Frisch</td><td>ETH Zentrum</td><td>Zurich</td></tr><tr class="odd"><td>Max Frisch</td><td>Bahnhofstrasse 7</td><td>Zurich</td></tr><tr class="even"><td>Albert Einstein</td><td>Bergstrasse 18</td><td>Zurich</td></tr><tr class="odd"><td>Max Frisch</td><td>ETH Zentrum</td><td>Zurich</td></tr></tbody></table><h3 id="set-operations-5901">Set Operations 59:01</h3><p>The <strong>UNION</strong>, <strong>INTERSECT</strong> and <strong>EXCEPT</strong> operations correspond to the ∪, ∩ and - relational algebra operations</p><ul><li>the relations have to be compatible (same attributes)</li><li>these operations remove duplicates by default<ul><li>the ALL keyword has to be used to retain duplicates</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">SELECT</span> name</span><br><span class="line"><span class="keyword">FROM</span> Customer)</span><br><span class="line"><span class="keyword">INTERSECT</span></span><br><span class="line">(<span class="keyword">SELECT</span> name</span><br><span class="line"><span class="keyword">FROM</span> Supplier);</span><br></pre></td></tr></table></figure><table><thead><tr class="header"><th>name</th></tr></thead><tbody><tr class="odd"><td>Max Frisch</td></tr></tbody></table><h3 id="aggregate-functions-and-grouping-10111">Aggregate Functions and Grouping 1:01:11</h3><p>In SQL there are five aggregate functions (<strong>MIN</strong>, <strong>MAX</strong>, <strong>AVG</strong>, <strong>SUM</strong> and <strong>COUNT</strong>) that take a set or multiset of values as input and return a single value</p><p>Example:</p><ul><li><em>"Find the number of customers in each city"</em></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> city, <span class="built_in">COUNT</span>(customerID) <span class="keyword">AS</span> number</span><br><span class="line"><span class="keyword">FROM</span> Customer</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> city;</span><br></pre></td></tr></table></figure><table><thead><tr class="header"><th>city</th><th>number</th></tr></thead><tbody><tr class="odd"><td>Zurich</td><td>3</td></tr><tr class="even"><td>Brussels</td><td>1</td></tr><tr class="odd"><td>Paris</td><td>1</td></tr></tbody></table><ul><li>Aggregate functions (except COUNT(*)) ignore NULL values in the input set<ul><li>input set might be empty in which case NULL is returned</li></ul></li></ul><h3 id="subqueries-10406">Subqueries 1:04:06</h3><ul><li>A subquery is a <strong>SELECT FROM WHERE</strong> expression that is nested within another query<ul><li>e.g. via check for set membership (IN or NOT IN)</li></ul></li><li>Example<ul><li><em>"Find all the suppliers who are no customers"</em></li></ul></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">ELECT <span class="keyword">DISTINCT</span> name</span><br><span class="line"><span class="keyword">FROM</span> Supplier</span><br><span class="line"><span class="keyword">WHERE</span> name <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span> name</span><br><span class="line">       <span class="keyword">FROM</span> Customer);</span><br></pre></td></tr></table></figure><table><thead><tr class="header"><th>name</th></tr></thead><tbody><tr class="odd"><td>Mario Botta</td></tr></tbody></table><h4 id="nested-subqueries-10445">Nested Subqueries 1:04:45</h4><p>Example: <em>"Find all CDs with a price smaller than average"</em></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> CD</span><br><span class="line"><span class="keyword">WHERE</span> price <span class="operator">&lt;</span> (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(price)</span><br><span class="line">      <span class="keyword">FROM</span> CD);</span><br></pre></td></tr></table></figure><table><thead><tr class="header"><th>cdID</th><th>name</th><th>duration</th><th>price</th><th>year</th></tr></thead><tbody><tr class="odd"><td>2</td><td>Carcassonne</td><td>3156</td><td>15.50</td><td>1993</td></tr><tr class="even"><td>3</td><td>Chromatic</td><td>3012</td><td>16.50</td><td>1993</td></tr></tbody></table><h3 id="set-comparison-10622">Set Comparison 1:06:22</h3><p>For nested queries with conditions like "greater than at least one" we can use these set comparison operators</p><ul><li>&gt; SOME, &gt;= SOME, &lt; SOME, &lt;= SOME, = SOME, &lt;&gt; SOME as well as the same combination with AL</li></ul><p>Example: <em>"Find the customers with a postcode greater than all supplier postcodes"</em></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name ,postcode</span><br><span class="line"><span class="keyword">FROM</span> Customer</span><br><span class="line"><span class="keyword">WHERE</span> postcode <span class="operator">&gt;</span> <span class="keyword">ALL</span> (<span class="keyword">SELECT</span> postcode</span><br><span class="line">           <span class="keyword">FROM</span> Supplier);</span><br></pre></td></tr></table></figure><table><thead><tr class="header"><th>name</th><th>postcode</th></tr></thead><tbody><tr class="odd"><td>Claude Debussy</td><td>75008</td></tr><tr class="even"><td>Max Frisch</td><td>8092</td></tr></tbody></table><h3 id="existence-test-10737">Existence Test 1:07:37</h3><p>The <strong>EXISTS</strong> operator can be used to check if a tuple exists in a subquery</p><ul><li>Example: <em>"Find the customers who are also suppliers"</em></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name</span><br><span class="line"><span class="keyword">FROM</span> Customer</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Supplier</span><br><span class="line"><span class="keyword">WHERE</span> Supplier.name <span class="operator">=</span> Customer.name);</span><br></pre></td></tr></table></figure><table><thead><tr class="header"><th>name</th></tr></thead><tbody><tr class="odd"><td>Max Frisch</td></tr></tbody></table><h3 id="derived-relations-10815">Derived Relations 1:08:15</h3><p>A subquery expression can also be used in the FROM clause</p><ul><li>in this case, a name has to be given to the relation</li></ul><p>Example: <em>"Find the number of customers in the city with the most customers"</em></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(noCustomers) <span class="keyword">AS</span> max</span><br><span class="line"><span class="keyword">FROM</span> (<span class="keyword">SELECT</span> city, <span class="built_in">COUNT</span>(customerID)</span><br><span class="line"><span class="keyword">FROM</span> Customer</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> city) <span class="keyword">AS</span> CityTotal(city, noCustomers);</span><br></pre></td></tr></table></figure><h2 id="basic-sql-query-structure">Basic SQL Query Structure</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">query = select &#123; (&quot;UNION&quot; | &quot;INTERSECT&quot; | &quot;EXCEPT&quot;) , [ &quot;ALL&quot; ] , select&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">=</span> &quot;SELECT&quot; [ &quot;ALL&quot; <span class="operator">|</span> &quot;DISTINCT&quot; ] ,</span><br><span class="line">(&quot;*&quot; <span class="operator">|</span> ( expr , [ &quot;AS&quot; , newName ] ,</span><br><span class="line">&#123; &quot;,&quot; , expr , [ &quot;AS&quot; , newName ] &#125; ) ,</span><br><span class="line">&quot;FROM&quot; , <span class="keyword">table</span> , [ correlationVar ] ,</span><br><span class="line">&#123; &quot;,&quot; , table , [ correlationVar ] &#125; ,</span><br><span class="line">[ &quot;WHERE&quot; , searchCondition ] ,</span><br><span class="line">[ &quot;GROUP BY&quot; , column , &#123; &quot;,&quot; , column &#125; ,</span><br><span class="line">[ &quot;HAVING&quot; , searchCondition ] ];</span><br><span class="line"> </span><br><span class="line">orderedQuery <span class="operator">=</span> query , &quot;ORDER BY&quot; , <span class="keyword">column</span> , [ &quot;ASC&quot; <span class="operator">|</span> &quot;DESC&quot; ] ,</span><br><span class="line">&#123; &quot;,&quot; , column , [ &quot;ASC&quot; | &quot;DESC&quot; ] &#125;;</span><br></pre></td></tr></table></figure><p>The query statement can be used to retrieve information from one or multiple database tables</p><ul><li>can perform the relational algebra's <strong>selection</strong>, <strong>projection</strong> and <strong>join</strong> operation in a single SELECT FROM WHERE command</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">searchCondition <span class="operator">=</span> [ &quot;NOT&quot; ] , <span class="keyword">search</span> ,</span><br><span class="line">&#123; ( &quot;AND&quot; | &quot;OR&quot; ) , [ &quot;NOT&quot; ] , search &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">search</span> <span class="operator">=</span> ( expr , [ &quot;NOT&quot; ] , &quot;BETWEEN&quot; , expr , &quot;AND&quot; , expr ) <span class="operator">|</span></span><br><span class="line">( expr , [ &quot;NOT&quot; ] , &quot;LIKE&quot; , &quot;&#x27;&quot; , ( string <span class="operator">|</span> &quot;_&quot; <span class="operator">|</span> &quot;%&quot; ) ,</span><br><span class="line">&#123; string | &quot;_&quot; | &quot;%&quot; &#125; , &quot;&#x27;&quot; ) |</span><br><span class="line">( <span class="keyword">column</span> <span class="operator">|</span> ( &quot;(&quot; , expr , &quot;)&quot; ) , &quot;IS&quot; , [ &quot;NOT&quot; ] , &quot;NULL&quot; ) <span class="operator">|</span></span><br><span class="line">( expr , ( &quot;=&quot; <span class="operator">|</span> &quot;&lt;&gt;&quot; <span class="operator">|</span> &quot;&gt;&quot; <span class="operator">|</span> &quot;&gt;=&quot; <span class="operator">|</span> &quot;&lt;&quot; <span class="operator">|</span> &quot;&lt;=&quot; ) , ( expr <span class="operator">|</span></span><br><span class="line">( [ &quot;SOME&quot; <span class="operator">|</span> &quot;ALL&quot; ] , &quot;(&quot; , query , &quot;)&quot; ) ) ) <span class="operator">|</span></span><br><span class="line">( expr , [ &quot;NOT&quot; ] , &quot;IN (&quot; ,</span><br><span class="line">( ( value , &#123; &quot;,&quot; , value &#125; ) | query ) , &quot;)&quot; |</span><br><span class="line">( &quot;EXISTS (&quot; , query , &quot;)&quot;; </span><br></pre></td></tr></table></figure><h3 id="with-clause-10953">WITH Clause 1:09:53</h3><p>The <strong>WITH</strong> clause can be used to improve the readability by introducing temporary new relations</p><ul><li>introduced only in SQL:1999 and not supported by all databases</li></ul><p>Example: <em>"Find all customers who bought one of the most expensive CDs"</em></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WITH</span> Expensive(price) <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(price)</span><br><span class="line"><span class="keyword">FROM</span> CD</span><br><span class="line"><span class="keyword">SELECT</span> Customer.name</span><br><span class="line"><span class="keyword">FROM</span> Customer, CD, <span class="keyword">Order</span></span><br><span class="line"><span class="keyword">WHERE</span> CD.price <span class="operator">=</span> Expensive.price <span class="keyword">AND</span> CD.cdID <span class="operator">=</span> Order.cdID <span class="keyword">AND</span></span><br><span class="line">Order.customerID <span class="operator">=</span> Customer.customerID;</span><br></pre></td></tr></table></figure><table><thead><tr class="header"><th>name</th></tr></thead><tbody><tr class="odd"><td>Albert Einstein</td></tr></tbody></table><h3 id="views-11142">Views 1:11:42</h3><p>New virtual relations (views) can be defined on top of an existing logical model</p><ul><li>simplify queries</li><li>provide access to only parts of the logical model (security)</li><li>computed by executing the query whenever the view is used</li></ul><p>Some DBMS allow views to be stored (<strong><em>materialised views</em></strong>)</p><ul><li>materialised views have to be updated when its relations change (<strong><em>view maintenance</em></strong>)</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">createView <span class="operator">=</span> &quot;CREATE VIEW&quot; , <span class="keyword">table</span> ,</span><br><span class="line">[ &quot;(&quot; , column , &#123; &quot;,&quot; , column &#125; , &quot;)&quot; ] ,</span><br><span class="line">&quot;AS&quot; , query; </span><br></pre></td></tr></table></figure><p>Example:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> CustomerCD <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Customer.customerID, Customer.name, CD.cdID, CD.name <span class="keyword">AS</span> cdName</span><br><span class="line"><span class="keyword">FROM</span> Customer, <span class="keyword">Order</span>, CD</span><br><span class="line"><span class="keyword">WHERE</span> Customer.customerID <span class="operator">=</span> Order.customerID <span class="keyword">AND</span></span><br><span class="line">Order.cdID <span class="operator">=</span> CD.cdID;</span><br></pre></td></tr></table></figure><ul><li>Note that a view can be used like any other relation</li><li>Views are useful for queries but they present a serious problem for UPDATE, INSERT and DELETE operations<ul><li>modifications are difficult to be propagated to the actual relations</li><li>modifications on views are therefore generally not permitted</li></ul></li></ul><h2 id="transactions-12234">Transactions 1:22:34</h2><ul><li>A <strong><em>transaction</em></strong> consists of a <strong><em>sequence of query and/or update statements</em></strong><ul><li>atomic set of statements</li></ul></li><li>A transaction explicitly starts when an SQL statement is executed and is ended by<ul><li>a <strong>COMMIT</strong> statement</li><li>a <strong>ROLLBACK</strong> statement</li></ul></li><li>In many SQL implementations each SQL statement is a transaction on its own (automatic commit)<ul><li>this default behaviour can be disabled</li><li>SQL:1999 introduced <strong>BEGIN ATOMIC ... END</strong> blocks</li></ul></li><li>Transactions will be discussed in detail later</li></ul>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Databases </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Binary Numbers</title>
      <link href="2021/03/10/2021-03-10-Binary-Numbers/"/>
      <url>2021/03/10/2021-03-10-Binary-Numbers/</url>
      
        <content type="html"><![CDATA[<h1 id="binary-numbers">Binary Numbers</h1><p><a href="https://www.youtube.com/watch?v=bKtfLI1AXq4&amp;list=PL6BsET-8jgYWmz2mUj8-p2kMnWZccTHcA&amp;index=3">Video</a></p><h2 id="binary-numbers-1"><a href="https://www.youtube.com/watch?v=bKtfLI1AXq4&amp;list=PL6BsET-8jgYWmz2mUj8-p2kMnWZccTHcA&amp;index=3">Binary Numbers</a></h2><p>Check the number 723, in common language:</p><ul><li>in base 10</li><li>723 = 7x100 + 2x10 + 3x1</li><li>= 7x10<sup>2</sup> + 2x10<sup>1<sup> + 3x10<sup>0</sup></li></ul><p>A few examples for other bases:</p><ul><li>base 8<ul><li>257</li><li>2 x 8<sup>2</sup> + 5 x 8<sup>1</sup> + 7 x 8<sup>0</sup></li><li>2 x 64 + 5 x 8 + 7 x 1</li><li>175 (base 10)</li></ul></li><li>base 2<ul><li>0110</li><li>0 x 2<sup>3</sup> + 1 x 2<sup>2</sup> + 1 x 2<sup>1</sup> + 0 x 2<sup>0</sup></li><li>0 x 8 + 1 x 4 + 1 x 2 + 0 x 1</li><li>6 (base 10)</li></ul></li></ul><p>Because computers have finite memory and finite precision, we always need s to specify how many bits are available (everything has the same length presentation)</p><table><thead><tr class="header"><th>2<sup>2</sup></th><th></th></tr></thead><tbody><tr class="odd"><td>00</td><td>0</td></tr><tr class="even"><td>01</td><td>1</td></tr><tr class="odd"><td>10</td><td>2</td></tr><tr class="even"><td>11</td><td>3</td></tr></tbody></table><p>2-bit binary number - &gt; max value = 2<sup>2</sup> -1</p><table><thead><tr class="header"><th>000</th><th>0</th></tr></thead><tbody><tr class="odd"><td>001</td><td>1</td></tr><tr class="even"><td>010</td><td>2</td></tr><tr class="odd"><td>011</td><td>3</td></tr><tr class="even"><td>100</td><td>4</td></tr><tr class="odd"><td>101</td><td>5</td></tr><tr class="even"><td>110</td><td>6</td></tr><tr class="odd"><td>111</td><td>7</td></tr></tbody></table><p>3-bit binary number - &gt; 2<sup>3</sup> -1</p><h3 id="why-modern-computer-talk-in-binary-numbers"><a href="https://www.youtube.com/watch?v=SCunRd4YXjI&amp;list=PL6BsET-8jgYWmz2mUj8-p2kMnWZccTHcA&amp;index=4">Why <strong>Modern computer talk in binary numbers</strong>?</a></h3><h3 id="reliability">Reliability!</h3><figure><img src="/images/CS61A/0804140.png" alt="" /><figcaption>Base 10</figcaption></figure><p>We have to be able to represent different numbers.</p><p>For example, in base 10, we have a little test tube to be filled to the level corresponds to the number and that test tube would represent the number. But electrons has a little bit instability that it is difficult to keep the level.</p><p><img src="/images/CS61A/0804141.png" /></p><p>If just distinguish between 2 tube, that is much easier!</p><h2 id="how-do-we-encode-negative-numbers">How do we encode negative numbers?</h2><p>Use left-most bit to represent sign</p><ul><li>0 = “+”</li><li>1 = “-”</li></ul><p>3-bit <em>signed</em> binary number (not the computer do)</p><table><thead><tr class="header"><th>000</th><th>0</th></tr></thead><tbody><tr class="odd"><td>001</td><td>1</td></tr><tr class="even"><td>010</td><td>2</td></tr><tr class="odd"><td>011</td><td>3</td></tr><tr class="even"><td><strong>100</strong></td><td><strong>-0???</strong></td></tr><tr class="odd"><td>101</td><td>-1</td></tr><tr class="even"><td>110</td><td>-2</td></tr><tr class="odd"><td>111</td><td>-3</td></tr></tbody></table><h3 id="two-complements-representation">Two complements Representation</h3><ol type="1"><li>.start with an unsigned 4-bit binary number where leftmost bit is 0<ul><li>0110 = 6</li></ul></li><li>complement your binary number (flip bits)<ul><li>1001</li></ul></li><li>add one to your binary number<ul><li>1010 = -6</li></ul></li></ol><p><img src="/images/CS61A/0804142.png" /></p><p>we lost a number?</p><p><img src="/images/CS61A/0804143.png" /></p><p><img src="/images/CS61A/0804144.png" /></p><p>summing unsigned binary numbers is easy</p><p><img src="/images/CS61A/0804145.png" /></p><h3 id="decoding-twos-complement"><a href="https://www.youtube.com/watch?v=ttmr2giZ4X0&amp;list=PL6BsET-8jgYWmz2mUj8-p2kMnWZccTHcA&amp;index=6">Decoding two’s complement</a></h3><p>4-bit signed (two’s complement) binary number:</p><ul><li>0111 = 7</li><li>1011 -&gt; 1010(subtract 1) -&gt; 0101(complement) -&gt; 5</li><li>1011 = -5</li></ul><h2 id="how-do-we-encode-fractional-numbers">How do we encode fractional numbers?</h2><ul><li><strong>± mantissa x base ± exponent</strong></li></ul><h2 id="boolean-logic-variables"><a href="https://www.youtube.com/watch?v=moSm3iv2sek&amp;list=PL6BsET-8jgYWmz2mUj8-p2kMnWZccTHcA&amp;index=6">Boolean Logic (variables)</a></h2><ul><li>1 = True</li><li>0 = False</li></ul><h3 id="gates">Gates</h3><table><thead><tr class="header"><th style="text-align: center;">a</th><th style="text-align: center;">b</th><th style="text-align: center;">a and b</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td></tr><tr class="even"><td style="text-align: center;">1</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td></tr><tr class="odd"><td style="text-align: center;">0</td><td style="text-align: center;">1</td><td style="text-align: center;">0</td></tr><tr class="even"><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td></tr></tbody></table><p><img src="/images/CS61A/0804146.png" /></p><table><thead><tr class="header"><th style="text-align: center;">a</th><th style="text-align: center;">b</th><th style="text-align: center;">a or b</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td></tr><tr class="even"><td style="text-align: center;">1</td><td style="text-align: center;">0</td><td style="text-align: center;">1</td></tr><tr class="odd"><td style="text-align: center;">0</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td></tr><tr class="even"><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td></tr></tbody></table><p><img src="/images/CS61A/0804147.png" /></p><table><thead><tr class="header"><th style="text-align: center;">a</th><th style="text-align: center;">not a</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">1</td><td style="text-align: center;">1</td></tr><tr class="even"><td style="text-align: center;">0</td><td style="text-align: center;">0</td></tr></tbody></table><p><img src="/images/CS61A/0804148.png" /></p><h3 id="building-gates-transistors"><a href="https://www.youtube.com/watch?v=p19_3S61eyQ&amp;list=PL6BsET-8jgYWmz2mUj8-p2kMnWZccTHcA&amp;index=7">Building Gates (transistors)</a></h3><h4 id="and-gate">And gate</h4><p><img src="/images/CS61A/0804149.png" /></p><h4 id="or-gate">Or gate</h4><p><img src="/images/CS61A/0804150.png" /></p><h4 id="not-gate">Not gate</h4><p><img src="/images/CS61A/0804151.png" /></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Structure and Interpretation of Computer Programs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Photonics Introduction</title>
      <link href="2021/03/09/2021-03-09-Photonics---Introduction/"/>
      <url>2021/03/09/2021-03-09-Photonics---Introduction/</url>
      
        <content type="html"><![CDATA[<h1 id="photonics-introduction">Photonics: Introduction</h1><p><a href="https://recordings.reu1.blindsidenetworks.com/vub/a27a4fbcde76dbdcd803f31af3c7f99884e7d5f4-1615193925594/capture/">Video</a></p><p>We live in the era of ICT</p><p>Emphasis on electronics &amp; Moore’s law ...</p><ul><li>Videoconferencing</li><li>Teleworking</li><li>Travelling</li><li>Communication</li><li>Medical imaging</li><li>Education</li></ul><h2 id="photonics-the-silent-revolution-158">Photonics: the “silent” revolution 1:58</h2><p><strong>Technological impact on society:</strong></p><p><strong>Photonics</strong> is the physical science of light (photon) generation, detection, and manipulation through emission, transmission, modulation, signal processing, switching, amplification and sensing. <u>Photonics parallels electronics.</u> Photonic applications are typically in the visible and near-visible wavelength range.</p><h2 id="application-domains-overview-400">Application domains <strong>Overview</strong> 4:00</h2><ul><li>Lasers</li><li>Optical Fibers</li><li>LED</li><li>Imaging technology</li><li>Biophotonics</li><li>Energy production</li></ul><h2 id="lasers-538">Lasers 5:38</h2><h3 id="light-amplification-by-stimulated-emission-of-radiation"><strong>Light Amplification by Stimulated Emission of Radiation</strong></h3><p>Properties:</p><ul><li>Bright</li><li>Directional</li><li>Coherent</li><li>Monochromatic</li></ul><p><img src="/images/EP/1418200.png" /></p><h3 id="early-days-1128">Early days 11:28</h3><p><em>“a physicist’s dream, but an engineer’s nightmare”</em></p><ul><li>• Lasers had a pure and tuneable spectrum</li><li>Lasers had unprecedented optical intensity</li><li>But they were unpractical and power hungry</li></ul><h3 id="miniaturization-1254">Miniaturization 12:54</h3><p><img src="/images/EP/1418201.png" /></p><h3 id="modern-diodes-1425">Modern diodes 14:25</h3><p>Almost all wavelengths, sizes and powers</p><p><img src="/images/EP/1418202.png" /></p><h3 id="optical-storage-1713">Optical storage 17:13</h3><p>Encoding binary data with lasers</p><p><img src="/images/EP/1418203.png" /></p><p>Future of long-term data storage? In 2018, ~10TB which can be preserved for centuries</p><h3 id="medicine">Medicine</h3><p>Lasers to alter the shapes of biological tissue</p><p>Example:</p><ul><li>The laser in Ophthalmology</li><li>The laser as a scalpel</li><li>Photodynamic skin cancer The laser in Ophthalmology The laser as a scalpel therapy</li></ul><h3 id="industry">Industry</h3><p>Fabrication with high-power lasers</p><ul><li>Steel cutting with a laser</li><li>Aluminium laser welding</li><li>Heat treatment for surface hardening</li><li>3D printing (Selective Laser Sintering)</li></ul><h3 id="interferometry-and-holography-2534">Interferometry and Holography 25:34</h3><p>Accurately measuring distance with <strong>interference</strong></p><p><img src="/images/EP/1418204.png" /></p><ul><li>Interferometry for characterizing microlenses</li><li>Gravitational wave detection (LIGO)</li><li>Digital holographic microscopy of cells</li></ul><h3 id="nuclear-fusion">Nuclear Fusion</h3><p><strong>Laser fusion reactors</strong></p><ul><li>National Ignition Facility (NIF)</li><li>Gold cylinder with fuel pellet (H isotopes)</li></ul><h2 id="optical-fibers-3837">Optical fibers 38:37</h2><p><strong>Transporting light signals</strong></p><ul><li><p>“Light pipes” in 1880</p></li><li><p>Internal medical examinations in 1920-30s</p></li><li><p>First semi-flexible gastroscope in 1956</p></li><li><p>Attenuation in fibers was caused by impurities</p><ul><li>The crucial attenuation limit of 20 dB/km was first achieved in 1970</li></ul></li><li><p>High speed manufacturing in 1983</p></li><li><p>In 2018 attenuation of only 0.14 dB/km are achievable.</p></li><li><p>Advantages:</p><ul><li>high-information-carrying capacity</li><li>small size and weight</li><li>immunity to electromagnetic interference</li><li>abundant availability of required raw materials (i.e. ordinary sand)</li></ul></li></ul><h3 id="guiding-light-in-optical-fibers-4406">Guiding light in optical fibers 44:06</h3><p><strong>Total internal reflection</strong></p><p><img src="/images/EP/1418205.png" /></p><p><img src="/images/EP/1418206.png" /></p><p><img src="/images/EP/1418207.png" /></p><h3 id="evolution-projections-4813">Evolution &amp; Projections 48:13</h3><p><img src="/images/EP/1418208.png" /></p><h3 id="backbone-of-the-internet">Backbone of the internet</h3><p><img src="/images/EP/1418209.png" /></p><h3 id="optical-fiber-telecom-5230">Optical fiber telecom 52:30</h3><figure><img src="/images/EP/1418210.png" alt="" /><figcaption>Leveraging photonic technologies</figcaption></figure><figure><img src="/images/EP/1418211.png" alt="" /><figcaption>Fiber-to-the-home and beyond</figcaption></figure><h3 id="optical-fiber-interconnects-5714">Optical fiber interconnects 57:14</h3><p>Fiber To The Home/Building (FTTH/FTTB)</p><h3 id="optical-fiber-sensors-5800">Optical fiber sensors 58:00</h3><p><img src="/images/EP/1418212.png" /></p><h2 id="light-emitting-diodes-led-10039">Light-Emitting Diodes (LED) 1:00:39</h2><h3 id="photonics-in-lighting">Photonics in lighting</h3><p>Light Emitting Diodes (LED) are everywhere!</p><p><img src="/images/EP/1418213.png" /></p><h3 id="organic-leds-10430">Organic LEDs 1:04:30</h3><ul><li>OLED-based lighting panels</li><li>OLED interior lighting</li><li>Flexible displays</li></ul><h2 id="imaging-novel-display-technologies-10750">Imaging &amp; Novel display technologies 1:07:50</h2><h3 id="imaging-with-charge-coupled-devices-ccd">Imaging with Charge Coupled Devices (CCD)</h3><figure><img src="/images/EP/1418214.png" alt="" /><figcaption>Basic working principle</figcaption></figure><figure><img src="/images/EP/1418215.png" alt="" /><figcaption>CCDs are ubiquitous</figcaption></figure><h3 id="liquid-crystal-displays-lcd-11153">Liquid Crystal displays (LCD) 1:11:53</h3><p><strong>Current major technology for flat-panel displays</strong></p><p><img src="/images/EP/1418216.png" /></p><h3 id="high-intensity-display-systems-11700">High-intensity display systems 1:17:00</h3><ul><li>High-end LED displays + Laser-based projectors</li><li>Laser-based projectors for high-end cinema</li></ul><h3 id="d-displays-12009">3D displays 1:20:09</h3><h4 id="how-to-make-things-appear-3d">How to make things appear 3D?</h4><p>We experience our world as 3D by means of many visual cues</p><ul><li>2 eyes (stereoscopy) with different inputs</li><li>Eye focusing (accomodation)</li><li>Occlusion, Parallax, Shading, etc..</li></ul><p><img src="/images/EP/1418217.png" /></p><ul><li>Problem 1: Accomodation-vergence conflict</li><li>Problem 2: No parallax (viewing angle changes)</li><li>Result: Limited 3D effect, limited cues, discomfort with prolonged usage</li></ul><h4 id="light-field-displays-12459">Light-field displays 1:24:59</h4><p>+ Relatively simple to manufacture, leverages existing display technology, accurate separate views</p><p>− Limited depth range, discrete views</p><p><img src="/images/EP/1418218.png" /></p><h4 id="volumetric-displays-12755">Volumetric displays 1:27:55</h4><p>+ Accurate depth cues, real-sized objects</p><p>− Limited volume, limited/no occlusion, limited shading</p><h4 id="holographic-displays-13022">Holographic displays 1:30:22</h4><p>+ All visual cues, considered “holy grail” of 3D display technology</p><p>− Requires very high resolutions (up and beyond billions of pixels for large high quality displays), creating digital content is computationally complex (wave based modelling)</p><h3 id="lidar-light-radar-portmanteau-13350">LIDAR (Light + radar portmanteau) 1:33:50</h3><p><strong>Measuring the environment as a point cloud</strong></p><p><img src="/images/EP/1418219.png" /></p><h2 id="biophotonics-13606">Biophotonics 1:36:06</h2><h3 id="lab-on-a-chip-devices">Lab-on-a-chip devices</h3><figure><img src="/images/EP/1418220.png" alt="" /><figcaption>Point-of-care diagnosis</figcaption></figure><h3 id="human-on-a-chip">Human-on-a-chip</h3><figure><img src="/images/EP/1418221.png" alt="" /><figcaption>More accurate (and even personalized) testing</figcaption></figure><h2 id="solar-energy-production-14103">Solar Energy production 1:41:03</h2><h3 id="sustainable-energy-production">Sustainable energy production</h3><ul><li>Photovoltaics</li><li>Solar concentrators</li></ul><h2 id="and-so-much-more">…and so much more!</h2><ul><li>Art restoration 1:45:53<ul><li>Laser ablation</li><li>Multi-spectral analysis</li></ul></li><li>Textile industry<ul><li>Laser cutting and marking of jeans</li></ul></li><li>Optical sorting<ul><li>food-sorting, quality &amp; safety control, and plastic recycling</li></ul></li><li>Astronomy<ul><li>Understanding the universe</li></ul></li><li>3D printing<ul><li>Two-photon polymerization based 3D nanoprinting</li></ul></li><li>Machine learning with photonic chips<ul><li>Potentially millions of times more energy efficient than electronic equivalents</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Technology and Applications of Electronics and Photonics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Finite Automata and their Languages</title>
      <link href="2021/03/08/2021-03-08-Finite-Automata-and-their-Languages/"/>
      <url>2021/03/08/2021-03-08-Finite-Automata-and-their-Languages/</url>
      
        <content type="html"><![CDATA[<h1 id="finite-automata-and-their-languages">Finite Automata and their Languages</h1><h2 id="introduction">Introduction</h2><ul><li><strong>Recognition</strong> is a fundamental computational problem for formal languages:<ul><li>For string x and language L: <em>does</em> x belong to L?</li></ul></li><li>The problem is solved by designing an <strong>automaton</strong> for L:<ul><li>Complete computational model of the recognition process for L</li></ul></li><li>The <strong>complexity</strong> of language classes can be studied by comparing the complexity of the corresponding classes of automata</li></ul><h2 id="automata-the-general-idea">Automata: The General Idea</h2><ul><li>An <strong>automaton</strong> is a specification for a <strong>symbol processing machine</strong></li><li>Different from a real machine:<ul><li>It is a specification</li><li>Operates on symbols</li><li>Relatively simple internal structure to study</li></ul></li><li>An automaton can <strong>recognize</strong> whether a string is part of the language that is specifies</li></ul><h3 id="states">States</h3><ul><li>As an automaton executes:<ul><li>Changes in its internal condition</li><li>Each possible internal condition is called a <strong>state</strong></li></ul></li><li>The states form the <strong>internal memory</strong> of the automaton</li><li>A <strong>Finite Automaton (FA)</strong> has a <strong>finite number of states</strong> and <strong>no other form of memory</strong></li></ul><h2 id="diagrams-and-recognition">Diagrams and recognition</h2><h3 id="state-transition-diagram">State transition diagram</h3><ul><li>A <strong>State Transition Diagram</strong> graphically represents an automaton</li><li>It consists of:<ul><li>States (encircled letters)</li><li>Start State (state with short arrow pointing to it)</li><li>Transitions (arrows from one state to another)</li><li>Accepting State (double encircled letters)</li></ul></li><li>A string is <strong>accepted</strong> if it leads from the start state to an accepting state</li><li>The set of strings that an automaton accepts is called its <strong>language</strong></li></ul><h4 id="example">Example</h4><p><img src="/images/FOCS/0931270.png" /></p><ul><li>Start State: A</li><li>Accepting State: C</li><li>Transitions: A → C, A → B, B → C</li></ul><p><img src="/images/FOCS/0931271.png" /></p><ul><li>The language of this automaton is {a, bc}</li><li>E.g. aa passes through an accepting state, but is not accepted itself</li></ul><h3 id="skiptrap-sate">Skip/trap sate</h3><p><img src="/images/FOCS/0931272.png" /></p><ul><li>State D is a <strong>sink state</strong> (no way out)</li><li>A non-accepting sink state is called a <strong>trap state</strong></li><li>Trap states clutter diagrams and are usually not drawn</li></ul><h3 id="trap-free-diagram">Trap-free diagram</h3><p><img src="/images/FOCS/0931275.png" /></p><ul><li>Equivalent, trap-free diagram</li><li>Missing transitions are assumed to lead to the trap state</li></ul><h3 id="proof-l-a-bc">Proof: <em>L</em> = {A, <em>BC</em>}</h3><p><img src="/images/FOCS/0931275.png" /></p><ul><li>Prove that: <em>L</em> = {a, <em>bc</em>}<ul><li>Prove: {a, <em>bc</em>} ⊆ <em>L</em></li><li>Prove: <em>L</em> ⊆ {a, <em>bc</em>}</li></ul></li></ul><h3 id="proof-a-bc-l">Proof: {A, <em>BC</em>} ⊆ <em>L</em></h3><p><img src="/images/FOCS/0931275.png" /></p><ul><li>Prove that: {a, <em>bc</em>} ⊆ <em>L</em></li><li>Prove that the strings a and <em>bc</em> are part of the language specified by the automaton</li><li>Recognize both strings using the automaton</li></ul><h3 id="proof-l-a-bc-1">Proof: <em>L</em> ⊆ {A, <em>BC</em>}</h3><p><img src="/images/FOCS/0931275.png" /></p><p>Prove that: <em>L</em> ⊆ {a, <em>bc</em>}</p><ul><li>x ∈ <em>L</em> → x ∈ {a, <em>bc</em>}</li><li>x ∉ {a, <em>bc</em>} → x ∉ <em>L</em> (contrapositive)</li><li>Prove that no other strings than a and <em>bc</em> are part of the language described by the automaton<ul><li>String has to start by a or b, otherwise it is not accepted</li><li>If string starts by a, then it cannot be followed by any other symbol, as there is no transition from state C</li><li>If string starts by b, then it cannot be followed by a or b, if the second symbol is a c, then there cannot be a next symbol</li></ul></li></ul><h3 id="exercise-1">Exercise 1</h3><p>1. Draw a transition diagram without a trap state for an FA that recognizes the language L, where: L = {x|x ∈ {a, b}<sup>∗</sup> and there is no odd block of bs in x}</p><figure><img src="/images/FOCS/0931273.png" alt="" /><figcaption>Solution</figcaption></figure><p>2. Draw a transition diagram without a trap state for an FA that recognizes the language L over Σ = {<em>a, b, c, d</em>} that contains all and only the strings over x such that:</p><ol type="1"><li>x begins with dc</li><li>x ends in a substring cd (where the c’s in 1 and 2 are not the same)</li><li>between these substrings there is no other occurrence of cd</li></ol><p><em>Cf. comments in java between /</em> and <em>/</em></p><h4 id="solution">Solution</h4><p><img src="/images/FOCS/0931274.png" /></p><ul><li>NOT a solution!</li><li>Occurrence of c must lead to the end of the string here!</li></ul><p><img src="/images/FOCS/0931276.png" /></p><ul><li>Problem solved</li></ul><p>3. Draw a state transition diagram for each of the languages specified. Omit trap states. Be sure that each diagram, besides accepting all the strings described, also excludes all others. The languages are the sets of all strings over {a,b,c} that:</p><ol type="1"><li>start with c.</li><li>end in c.</li><li>contain exactly one c.</li><li>contain at least one c.</li><li>contain at least one c and are of length exactly 2.</li><li>are of length at most 2.</li><li>are of length at most n for some integer n.</li></ol><h4 id="solution-1">Solution</h4><p><img src="/images/FOCS/0931277.png" /></p><p><img src="/images/FOCS/0931278.png" /></p><h2 id="formal-notation-for-finite-automata">Formal notation for finite automata</h2><h3 id="definition-finite-automata">Definition: Finite Automata</h3><p>A finite automaton M is a quintuple (Q, Σ, q<sub>0</sub>, δ, A), where:</p><ul><li>Q is a finite set of states</li><li>Σ is a finite set of symbols</li><li>q<sub>0</sub> ∈ Q, where q0 is the start state</li><li>A ⊆ Q, where A is the set of accepting states</li><li>δ : Q × Σ → Q</li></ul><p>δ is the <strong>transition function</strong>, with as domain the set of all ordered pairs (q, σ)</p><h3 id="example-1">Example</h3><p>Specify a machine <em>M</em> = (<em>Q</em>, Σ, q<sub>0</sub>, δ, <em>A</em>) for the language {a}<sup><em></sup> by giving the values of </em>Q<em>, Σ, δ and </em>A*, and also by drawing the corresponding diagram.</p><p>Q = {q<sub>0</sub>},</p><p>Σ = {a},</p><p>A = {q<sub>0</sub>} ,</p><p>δ(q<sub>0</sub>, A) = q<sub>0</sub>.</p><p><img src="/images/FOCS/0931279.png" /></p><p><img src="/images/FOCS/0931280.png" /></p><ul><li>Draw the transition diagram</li><li>Justify the claim that M accepts all strings over the alphabet beginning with a and no others</li></ul><h4 id="solution-2">Solution</h4><p><img src="/images/FOCS/0931281.png" /></p><ul><li>f the first symbol is a, the automaton will always stay in the accepting state q<sub>1</sub>, no matter what other symbols follow</li><li>If the first symbol is d, it will be trapped in the state q<sub>2</sub>, no matter what other symbols follow</li></ul><h3 id="exercise-2">Exercise 2</h3><p>Draw a state transition diagram for comments in C or C++. These are the strings that</p><ol type="1"><li>begin with /*,</li><li>end in */ without overlap (so /*/ is excluded), and</li><li>have no other occurrence of */.</li></ol><p><img src="/images/FOCS/0931276.png" /></p><h4 id="solution-3">Solution</h4><p><img src="/images/FOCS/0931282.png" /></p><h3 id="exercise-3">Exercise 3</h3><p>Formally specify a machine <em>M</em> = (<em>Q</em>, Σ, q<sub>0</sub>, δ, <em>A</em>) by giving the values of <em>Q</em>, Σ, q<sub>0</sub>, δ and <em>A</em> corresponding to</p><ol type="1"><li>the state transition diagram in Example 9.4, as shown, with 6 being a partial function.</li><li>the same diagram except that you first add the trap state and the transitions associated with it. Note that 6 is now a total function.</li></ol><p><img src="/images/FOCS/0931273.png" /></p><h4 id="solution-4">Solution</h4><p><img src="/images/FOCS/0931283.png" /></p><ol type="1"><li><p>M = ({A, B}, {a, b}, A, δ, {A})</p><p><img src="/images/FOCS/0931284.png" /></p></li><li><p>M = ({A, B, C}, {a, b}, A, δ, {A})</p><p><img src="/images/FOCS/0931285.png" /></p></li></ol><h3 id="exercise-4">Exercise 4</h3><p>Let M = ({q<sub>0</sub>, q<sub>1</sub>, q<sub>2</sub>, q<sub>3</sub>}, {a}, q<sub>0</sub>, δ, {q, q<sub>3</sub>}), where δ is specified by the following table.</p><p><img src="/images/FOCS/0931286.png" /></p><ol type="1"><li>Draw the state transition diagram for this finite automaton.</li><li>Very briefly describe the language <em>L</em>(M) in English.</li><li>Using a quintuple, give a complete specification of a two-state automaton that accepts <em>L</em>(M).</li></ol><h4 id="solution-5">Solution</h4><ul><li><img src="/images/FOCS/0931287.png" /></li><li>The language consists of strings over the alphabet Σ = {a}, that have an odd number of symbols</li><li><img src="/images/FOCS/0931288.png" /></li><li>M = ({q<sub>0</sub>, q<sub>1</sub>}, {a}, q<sub>0</sub>, δ, {q<sub>1</sub>})</li><li><img src="/images/FOCS/0931289.png" /></li></ul><h3 id="closure-of-the-transition-function">Closure of the transition function</h3><h4 id="definition"><strong>Definition:</strong></h4><ul><li><p>M = (Q, Σ, q<sub>0</sub>, δ, A)</p></li><li><p>δ<sup>∗</sup> : Q × Σ<sup>∗</sup> → Q</p></li><li><p>For any q ∈ Q, δ<sup>∗</sup> (q,Λ) = q</p></li><li><p>For any q ∈ Q, any σ ∈ Σ and any x ∈ Σ<sup>∗</sup> , δ<sup>∗</sup> (q, xσ) = δ(δ<sup>∗</sup> (q, x), σ)</p><p><em>Note that the definition is recursive!</em></p></li></ul><h4 id="theorem-δ-for-strings-of-length-1">Theorem : δ<sup>∗</sup> for strings of length 1</h4><ul><li><p>Theorem: ∀q ∈ Q : ∀σ ∈ Σ for which |σ| = 1 : δ<sup>∗</sup> (q, σ) = δ(q, σ)</p></li><li><p>Proof:</p><ul><li><p>δ<sup>∗</sup> (q, σ) = δ<sup>∗</sup> (q,Λσ) Substitution</p><p>​ = δ(δ<sup>∗</sup> (q,Λ), σ) Closure of δ (recursive case)</p><p>​ = δ(q, σ) Closure of δ (base case)</p></li></ul></li></ul><h4 id="example-2">Example</h4><ul><li><p>M = ({q<sub>0</sub>, q<sub>1</sub>, q<sub>2</sub>}, {a, d}, q<sub>0</sub>, δ, {q<sub>1</sub>})</p></li><li><p><img src="/images/CS61A/0931290.png" /></p></li><li><p>Proof that ad takes M to state q<sub>1</sub></p></li><li><p>Proof:</p><ul><li><p>δ<sup>∗</sup>(q<sub>0</sub>, ad) = δ(δ<sup>∗</sup>(q<sub>0</sub>, a), d) Closure of δ (recursive case)</p><p>​ = δ(δ(q<sub>0</sub>, a), d) Theorem δ<sup>∗</sup> for strings of length 1</p><p>​ = δ(q<sub>1</sub>, d) Evaluation</p><p>​ = q<sub>1</sub> Evaluation</p></li></ul></li></ul><h3 id="exercise-5">Exercise 5</h3><p>Specify just the the transition function of a finite automaton for the second state transition diagram in Exercise 1.3. Omit the trap state. Label the states q<sub>0</sub>, q<sub>1</sub>, q<sub>2</sub>, q<sub>3</sub> and q<sub>4</sub>.</p><p><img src="/images/FOCS/0931276.png" /></p><h4 id="solution-6">Solution</h4><table><thead><tr class="header"><th></th><th>a</th><th>b</th><th>c</th><th>d</th></tr></thead><tbody><tr class="odd"><td>q<sub>0</sub></td><td></td><td></td><td></td><td>q<sub>1</sub></td></tr><tr class="even"><td>q<sub>1</sub></td><td></td><td></td><td>q<sub>2</sub></td><td></td></tr><tr class="odd"><td>q<sub>2</sub></td><td>q<sub>2</sub></td><td>q<sub>2</sub></td><td>q<sub>3</sub></td><td>q<sub>2</sub></td></tr><tr class="even"><td>q<sub>3</sub></td><td>q<sub>2</sub></td><td>q<sub>2</sub></td><td>q<sub>3</sub></td><td>q<sub>4</sub></td></tr><tr class="odd"><td>q<sub>4</sub></td><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id="exercise-6">Exercise 6</h3><p>For your automaton in Exercise 5, give the values of δ<sup>∗</sup> for the arguments shown here:</p><ol type="1"><li>δ<sup>∗</sup>(q<sub>1</sub>, dcba)</li><li>δ<sup>∗</sup>(q<sub>0</sub>, dcd)</li><li>δ<sup>∗</sup>(q<sub>0</sub>, dccccd)</li></ol><p>Solution</p><ol type="1"><li><img src="/images/CS61A/0931291.png" /></li><li><img src="/images/CS61A/0931292.png" /></li><li><img src="/images/CS61A/0931293.png" /></li></ol><h3 id="recognized-language">Recognized language</h3><h4 id="definition-language-recognized-by-a-fa">Definition: Language recognized by a FA</h4><ul><li>The language L(M) <strong>recognized</strong> by a finite automaton M = (Q, Σ, q<sub>0</sub>, δ, A) is the set of all strings x ∈ Σ<sup>∗</sup> such that δ<sup>∗</sup> (q<sub>0</sub>, x) ∈ A</li><li>M <strong>accepts</strong> the strings of L(M)</li><li>M <strong>rejects</strong> the strings of Σ<sup>∗</sup>  L(M)</li></ul><h4 id="algorithm-recognizing-the-language-of-a-fa">Algorithm: Recognizing the language of a FA</h4><p><img src="/images/FOCS/0931290.png" /></p><ul><li>q: current state, x: input string, σ: current symbol, ⇐: assignment</li><li>dequeue: remove an element from the front and return it</li><li>Algorithm returns <em>TRUE</em> (accept) or <em>FALSE</em> (reject)</li></ul><h2 id="nondeterministic-finite-automata">Nondeterministic finite automata</h2><h3 id="general-idea">General idea</h3><p>In contrast to Deterministic Finite Automata (DFAs), Nondeterministic Finite Automata (NFAs) can have <u><strong>more than 1 transition</strong></u> for a single symbol out of a state</p><h3 id="example-3">Example</h3><p>For the finite language <em>L</em> = {ab, ac}, draw an NFA state transition diagram, giving each string of <em>L</em> its own states and transitions, sharing only the start state</p><p><img src="/images/FOCS/0931291.png" /></p><h3 id="characteristics">Characteristics</h3><ul><li>An NFA makes a series of choices that lead to acceptance of the input whenever this is possible</li><li>Codomain of δ:<ul><li>DFA: Q : Set of states</li><li>DFA: 2<sup>Q</sup> : Powerset (all subsets) of the set of states</li></ul></li></ul><h3 id="definition-nondeterministic-fa">Definition: nondeterministic FA</h3><ul><li>M = (Q, Σ, q<sub>0</sub>, δ, A)</li><li>δ : Q × Σ → 2<sup>Q</sup></li></ul><h3 id="definition-nondeterministic-generalized-transition-function">Definition: nondeterministic generalized transition function</h3><ul><li><p>M = (Q, Σ, q<sub>0</sub>, δ, A)</p></li><li><p>δ : Q × Σ → 2<sup>Q</sup></p></li><li><p>For any q ∈ Q, δ<sup>∗</sup> (q,Λ) = {q}</p></li><li><p>For any q ∈ Q, any σ ∈ Σ, and any x ∈ Σ<sup>∗</sup> <span class="math display">\[δ^∗(q,xσ)=∪_{p∈δ^∗(q,x)}δ(p, σ)\]</span></p></li></ul><h3 id="definition-language-recognized-by-a-nfa">Definition: Language recognized by a NFA</h3><ul><li>The language L(M) recognized by a NFA M = (Q, Σ, q<sub>0</sub>, δ, A) is the set of all strings x ∈ Σ<sup>∗</sup> such that δ<sup>∗</sup>(q<sub>0</sub>, x) ∩ A ≠ ∅</li><li>The NFA accepts the strings of L(M)</li><li>The NFA rejects the strings of Σ<sup>∗</sup>  L(M)</li></ul><h4 id="example-4">Example</h4><p>Consider the language <em>L</em> = {x | x ∈ {a, b}<sup><em></sup>} and x ends with ab}. This language contains, for example, the string </em>bbab<em>, but not </em>abba<em>. Draw a state transition diagram for both a DFA and an NFA to recognize </em>L*. Make each as simple as possible.</p><p><img src="/images/FOCS/0931292.png" /></p><h5 id="solution-7">Solution</h5><p><img src="/images/FOCS/0931293.png" /></p><h2 id="removing-nondeterminism">Removing nondeterminism</h2><h3 id="simulating-nfas">Simulating NFAs</h3><ul><li><p>How to turn NFAs into real computational devices?</p><ul><li>backtracking</li><li>parallel computing</li><li><strong>simulate it using a DFA</strong></li></ul></li><li><p>Simulation also proofs that NFAs are not more powerful than DFAs: they recognize the <strong>same class of language</strong></p></li></ul><p><img src="/images/FOCS/0931294.png" /></p><ul><li>After consuming a, there is no way to know whether the NFA is in q<sub>0</sub> or q<sub>1</sub></li><li>We tolerate this uncertainty: our <strong>state of knowledge</strong> about the current state is {q<sub>0</sub>, q<sub>1</sub>}</li><li>The states of knowledge become the states of a new, deterministic automaton</li></ul><h3 id="subset-construction">Subset construction</h3><h4 id="definition-1">Definition</h4><p>The subset construction, S, is a function, S : N → D, that applies to any NFA, M = (Q, Σ, q<sub>0</sub>, δ, A), to yield a DFA M′ = S(M) = (Q′ , Σ′ , q′<sub>0</sub> , δ′ , A′), where the following relationships hold between the parts of M and M′ :</p><ul><li><p>Σ′ = Σ</p></li><li><p>q′<sub>0</sub> = {q<sub>0</sub>}</p></li><li><p>Q′ ⊆ 2<sup>Q</sup></p></li><li><p>δ′ : Q′ × Σ → Q′ , where <span class="math display">\[∀q′∈ Q : ∀σ ∈ Σ : δ ′ (q ′ , σ) = ∪_{q ∈ q′} δ(q, σ)\]</span></p></li><li><p>A′ = {q′ ∈ Q′ |q′ ∩ A ≠ ∅}</p></li></ul><h4 id="algorithm">Algorithm</h4><p><img src="/images/FOCS/0931295.png" /></p><h4 id="example-5">Example</h4><p>Find a DFA equivalent to this NFA:</p><p><img src="/images/FOCS/0931294.png" /></p><p><img src="/images/FOCS/0931296.png" /></p><p>Note:</p><ul><li>No row stating where to go from q<sub>1</sub></li><li>This is reasonable as we are never sure to be in state q<sub>1</sub></li><li>Table is complete, as it has a row for every “state of knowledge” that can be reached directly or indirectly from q<sub>0</sub></li></ul><h3 id="exercise-7">Exercise 7</h3><p>For both the DFA and NFA in Example, evaluate δ<sup>∗</sup>(q<sub>0</sub>, x) for each of the following strings:</p><ol type="1"><li>ab</li><li>abab</li><li>a<sup>k</sup> , where k ≥ 1</li></ol><p><img src="/images/FOCS/0931297.png" /></p><h3 id="exercise-8">Exercise 8</h3><p>Create an NFA for the set of all strings over {a, b} ending in abab and use the subset construction to convert it to a DFA. The NFA should have a self-loop on the start state labeled with both a and b. Transitions labeled a and then b, a, and b should take the NFA from q<sub>0</sub> to q<sub>1</sub> and then to q<sub>2</sub>, q<sub>3</sub> and q<sub>4</sub>, which is accepting.</p><h3 id="exercise-9">Exercise 9</h3><p>This problem concerns automata for the language L consisting of all strings over {a, b} that end in either adab or baa.</p><ol type="1"><li>Draw the transition diagram of an NFA for L starting with the same states and transitions as in Exercise 8 and adding some states by a similar technique, so that transitions labeled b and then a take the NFA from q<sub>0</sub> to a new accepting state. Label the new states q<sub>5</sub>, ...</li><li>Use the subset construction to convert your NFA to a DFA expressed as a quintuple.</li></ol><h2 id="λ-transitions">Λ-transitions</h2><h3 id="general-idea-1">General idea</h3><ul><li><p>Just like nondeterminism, <strong>Λ-transitions</strong> allow simpler solutions</p></li><li><p>They can also be converted into a <strong>deterministic</strong> form by simulation</p></li><li><p>An NFA that allows Λ-transitions is called a <strong>Λ-NFA</strong></p></li><li><p>Λ-NFA allow Λ as a label on transitions</p><ul><li>Such a transition consumes no symbol</li></ul></li></ul><h3 id="example-6">Example</h3><p><img src="/images/FOCS/0931298.png" /></p><h3 id="λ-nfa-formal-definition">Λ-NFA formal definition</h3><ul><li><p>M = (Q, Σ, q<sub>0</sub>, δ, λ, A)</p></li><li><p>λ : Q → 2 Q</p></li><li><p>For any state q<sub>i</sub> and input σ: the next state q<sub>j</sub> ∈ δ(qi , σ) ∪ λ(q<sub>i</sub>)</p><ul><li>Using σ if choice was based on δ</li><li>Not using σ if choice was based on λ</li><li>Using or not using σ if both sets or non-empty</li></ul></li></ul><h3 id="λ-closure">λ-closure</h3><p>Yields the set of all states reachable by zero or more Λ-transitions</p><p><strong>Definition:</strong></p><p><img src="/images/FOCS/0931299.png" /></p><ul><li><strong>n = |Q|</strong></li></ul><h3 id="λ-elimination">Λ-Elimination</h3><ul><li><p>M = (Q′ , Σ, q<sub>0</sub>, δ′ , A′ )</p><ol type="1"><li><p>For each q ∈ Q, compute and record λ<sup>∗</sup> (q) (needed for the next two steps)</p></li><li><p>For each q ∈ Q and σ ∈ Σ, compute δ′ , knowing that <span class="math display">\[δ′ (q, σ) = ∪_{p∈λ^∗(q)}δ(p, σ)\]</span></p></li><li><p>For each q ∈ Q, if λ<sup>∗</sup>(q) ∩ A ≠ ∅, then make q a member of A′</p></li><li><p>Compute Q′ by eliminating unreachable states</p></li></ol></li></ul><p><img src="/images/FOCS/0931230.png" /></p><h4 id="solution-8">Solution</h4><p>(a):</p><table><thead><tr class="header"><th></th><th>Λ</th></tr></thead><tbody><tr class="odd"><td>q<sub>0</sub></td><td>{q<sub>1</sub>, q<sub>2</sub>}</td></tr><tr class="even"><td>q<sub>1</sub></td><td>∅</td></tr><tr class="odd"><td>q<sub>2</sub></td><td>∅</td></tr><tr class="even"><td>q<sub>3</sub></td><td>∅</td></tr><tr class="odd"><td>q<sub>4</sub></td><td>∅</td></tr></tbody></table><p>(b):</p><table><thead><tr class="header"><th></th><th>a</th><th>b</th></tr></thead><tbody><tr class="odd"><td>q<sub>0</sub></td><td>{q<sub>1</sub>, q<sub>2</sub>}</td><td>{q<sub>3</sub>}</td></tr><tr class="even"><td>q<sub>1</sub></td><td>{q<sub>1</sub>}</td><td>{q<sub>3</sub>}</td></tr><tr class="odd"><td>q<sub>2</sub></td><td>{q<sub>4</sub>}</td><td>∅</td></tr><tr class="even"><td>q<sub>3</sub></td><td>∅</td><td>∅</td></tr><tr class="odd"><td>q<sub>4</sub></td><td>∅</td><td>{q<sub>4</sub>}</td></tr></tbody></table><ol start="3" type="a"><li>: A ′ = A = {q<sub>3</sub>, q<sub>4</sub>}</li></ol><p>(d): Eliminate q<sub>2</sub></p><p><img src="/images/FOCS/0931231.png" /></p><h3 id="exercise-10">Exercise 10</h3><p>Give both a nondeterministic and a deterministic finite automaton for the language L in which each string contains the substring aa and at some later point the substring bb. Thus, for example, <em>baaababba</em> ∈ <em>L</em> but <em>bbaa</em> ∉ <em>L</em>.</p><h3 id="exercise-11">Exercise 11</h3><p>Carry out the following steps to get a simple, correct state-transition diagram for a<sup>∗</sup> b<sup>∗</sup>. Begin with the simple diagram for a<sup>∗</sup> in Exercise 3 and a similar one for b∗. Use these two diagrams together with the correct diagram construction operation for concatenation (introducing a Λ-transition). to get a diagram for a<sup>∗</sup> b<sup>∗</sup>. Draw this diagram. Then demonstrate the process of Λ-elimination by showing the successive results of applying steps (i)-(iii) of Algorithm 9.3.</p><h3 id="exercise-12">Exercise 12</h3><p>Give an automaton with Λ and another without Λ for the language L in which each string consists of an even number of as followed by an even number of bs. Recall that 0 is even.</p><h3 id="previous-exam-questions">Previous exam questions</h3><ul><li>Convert the following Λ-NFA into a DFA</li><li>M = ({q<sub>0</sub>, q<sub>1</sub>, q<sub>2</sub>}, {a, b}, q<sub>0</sub>, δ, {q<sub>2</sub>})</li></ul><p><img src="/images/FOCS/0931232.png" /></p><h2 id="regular-languages">Regular languages</h2><h3 id="definition-regular-languages">Definition: Regular Languages</h3><p>A language L is a regular language if (and only if) there exists an FA M such that L = L(M)</p><h3 id="closure-properties">Closure properties</h3><ul><li>The set of regular languages is closed for:<ul><li>Concatenation</li><li>Closure</li><li>Union</li><li>Intersection</li><li>Set Difference</li><li>Symmetric difference</li><li>Complementation</li></ul></li><li>This means that the result of applying these operations to regular languages L<sub>1</sub> and L<sub>2</sub> always is a regular language itself</li><li>Closure can be proven by constructing an FA for the result</li></ul><h3 id="closure-of-l1l2">Closure of L<sub>1</sub>L<sub>2</sub></h3><ul><li><p><strong>Theorem</strong>: If L<sub>1</sub> and L<sub>2</sub> are regular languages, then their concatenation L = L<sub>1</sub>L<sub>2</sub> is a regular language</p></li><li><p>Proof:</p><ul><li>L<sub>1</sub> = L(M<sub>1</sub>) where M<sub>1</sub> = (Q<sub>1</sub>, Σ<sub>1</sub>, q<sub>0,1</sub>, δ<sub>1</sub>, A<sub>1</sub>)</li><li>L<sub>2</sub> = L(M<sub>2</sub>) where M2 = (Q<sub>2</sub>, Σ<sub>2</sub>, q<sub>0,2</sub>, δ<sub>2</sub>, A<sub>2</sub>)</li><li>New machine L = L(M) where M = (Q<sub>1</sub> ∪ Q<sub>2</sub>, Σ<sub>1</sub> ∪ Σ<sub>2</sub>, q<sub>0,1</sub>, δ, A<sub>2</sub>)</li><li>New transition function contains all transitions from δ<sub>1</sub> and δ<sub>2</sub> and Λ-transitions from each state in A<sub>1</sub> to q<sub>0,2</sub></li><li>Finish proof by showing that L = L(M) = L<sub>1</sub>L<sub>2</sub></li></ul></li></ul><h3 id="closure-of-l1">Closure OF L<sub>1</sub><sup>*</sup></h3><ul><li><p><strong>Theorem</strong>: If L<sub>1</sub> is a regular language, then L = L<sub>1</sub><sup>*</sup> is a regular language.</p></li><li><p><strong>Proof</strong>:</p><ul><li>New machine L = L(M) where M = (Q<sub>1</sub> ∪ {q<sub>0</sub>}, q<sub>0</sub>, δ, {q<sub>0</sub>})</li><li>New transition function contains all transitions from δ<sub>1</sub> and Λ-transitions from q<sub>0</sub> to q{0, 1} and from each state in A<sub>1</sub> back to to q<sub>0</sub></li><li>Finish proof by showing that L = L(M) = L<sub>1</sub><sup>*</sup></li></ul></li></ul><h3 id="closure-of-l1-l2">Closure of L<sub>1</sub> ∪ L<sub>2</sub></h3><ul><li><p><strong>Theorem</strong>: If L<sub>1</sub> and L<sub>2</sub> are regular languages, then L = L<sub>1</sub> ∪ L<sub>2</sub> is a regular language.</p></li><li><p><strong>Proof</strong>:</p><ul><li>New machine L = L(M) where M = (Q<sub>1</sub> × Q<sub>2</sub>, Σ,(q<sub>0,1</sub>, q<sub>0,2</sub>) , δ, A)</li><li>New transition function: δ((q<sub>1</sub>, q<sub>2</sub>), σ) = (δ<sub>1</sub>(q<sub>1</sub>, σ), δ<sub>2</sub>(q<sub>2</sub>, σ)) for every q<sub>1</sub> ∈ Q<sub>1</sub>, q<sub>2</sub> ∈ Q<sub>2</sub> and σ ∈ Σ</li><li>New accepting states: A = {(q<sub>1</sub>, q<sub>2</sub>)|q<sub>1</sub> ∈ A<sub>1</sub> or q<sub>2</sub> ∈ A<sub>2</sub>}</li></ul></li></ul><h3 id="closure-of-l1-l2-1">Closure of L<sub>1</sub> ∩ L<sub>2</sub></h3><ul><li><p><strong>Theorem</strong>: If L<sub>1</sub> and L<sub>2</sub> are regular languages, then L = L<sub>1</sub> ∩ L<sub>2</sub> is a regular language.</p></li><li><p><strong>Proof</strong>:</p><ul><li>New machine L = L(M) where M = (Q<sub>1</sub> × Q<sub>2</sub>, Σ,(q<sub>0,1</sub>, q<sub>0,2</sub>) , δ, A)</li><li>New transition function: δ((q<sub>1</sub>, q<sub>2</sub>), σ) = (δ<sub>1</sub>(q<sub>1</sub>, σ), δ<sub>2</sub>(q<sub>2</sub>, σ)) for every q<sub>1</sub> ∈ Q<sub>1</sub>, q<sub>2</sub> ∈ Q<sub>2</sub> and σ ∈ Σ</li><li>New accepting states: A = {(q<sub>1</sub>, q<sub>2</sub>)|q<sub>1</sub> ∈ A<sub>1</sub> and q<sub>2</sub> ∈ A<sub>2</sub>}</li></ul></li></ul><h4 id="example-7">Example</h4><p>Find an FA for the language <em>L</em>, over Σ = {a,b}. of strings that have both an odd number of <em>as</em> and an odd number of <em>bs</em>. Now clearly L<sub>1</sub> ∩ L<sub>2</sub> where</p><p>L<sub>1</sub> = {x | x ∈ {a,b}<sup><em></sup> ∧ x contains an odd number of </em>as<em>}, and L<sub>1</sub> = {x | x ∈ {a,b}<sup></em></sup> x ∧ contains an odd number of <em>bs</em>}</p><p><img src="/images/FOCS/0931233.png" /></p><h3 id="closure-of-σ-l1">Closure of Σ  L<sub>1</sub></h3><ul><li><p><strong>Theorem</strong>: If L<sub>1</sub> is a regular language, then L = Σ  L<sub>1</sub> is a regular language.</p></li><li><p><strong>Proof</strong>:</p></li><li><p>New machine L = L(M) where M = (Q, Σ, q<sub>0</sub>, δ, Q  A)</p></li><li><p>Transition function must be total (add trap state if necessary)</p></li></ul><h3 id="exercise-13">Exercise 13</h3><p>Show that the regular languages are closed under set difference. In particular, show that if L<sub>1</sub> and L<sub>2</sub> are regular then L<sub>1</sub>  L<sub>2</sub> is also regular.</p><h3 id="exercise-14">Exercise 14</h3><p>Use the cross-product technique to build an FA for this language over E = {a, b}:</p><p>L = {x | there is at most one a in x ∧ there is at least one b in x}.</p><h3 id="exercise-15">Exercise 15</h3><p>Prove by mathematical induction that if <em>L</em> is a regular language (an FA language), then ∀k ∈ N: L<sup>k</sup> is a regular language (an FA language)</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fundamentals of Computer Science </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Inheritance</title>
      <link href="2021/03/08/2021-03-08-Inheritance/"/>
      <url>2021/03/08/2021-03-08-Inheritance/</url>
      
        <content type="html"><![CDATA[<h1 id="inheritance">Inheritance</h1><p><a href="https://www.youtube.com/watch?v=QkF8zLG2Tks">Video</a></p><h2 id="junit-tests">JUnit Tests</h2><h3 id="what-are-the-advantages-and-disadvantages-of-writing-junit-tests">What are the advantages and disadvantages of writing JUnit tests?</h3><ul><li>Advantages:<ol type="1"><li>Keeps your code organized - each test corresponds to different building blocks of your program</li><li>You can debug your code locally and find which part of your program is not working</li><li>Provides documentation that your program actually works</li><li>Can reduce the amount of test code you need to write because you can reuse code</li></ol></li><li>Disadvantages:<ol type="1"><li>Hard to use for higher-level testing</li></ol></li></ul><h2 id="creating-cats">Creating Cats</h2><p>Given the Animal class, fill in the definition of the Cat class so that when greet() is called, “Cat [name] says: Meow!” is printed (instead of “Animal [name] says: Huh?”). Cats less than the ages of 5 should say “MEOW!” instead of “Meow!”.</p><p>Don’t forget to use <span class="citation" data-cites="Override">@Override</span> if you are writing a function with the same signature as a function in the superclass.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"><span class="keyword">protected</span> String name, noise;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.noise = <span class="string">&quot;Huh?&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">makeNoise</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (age &lt; <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> noise.toUpperCase();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> noise;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal &quot;</span> + name + <span class="string">&quot; says: &quot;</span> + makeNoise());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(name, age); <span class="comment">// Call superclass&#x27; constructor.</span></span><br><span class="line">    <span class="keyword">this</span>.noise = <span class="string">&quot;Meow!&quot;</span>; <span class="comment">// Change the value of the field.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Cat &quot;</span> + name + <span class="string">&quot; says: &quot;</span> + makeNoise());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="raining-cats-and-dogs">Raining Cats and Dogs</h2><ol type="a"><li>Assume that Animal and Cat are defined as above. What would Java print on each of the indicated lines?</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age);</span><br><span class="line">        noise = <span class="string">&quot;Woof!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog &quot;</span> + name + <span class="string">&quot; says: &quot;</span> + makeNoise());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playFetch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Fetch, &quot;</span> + name + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAnimals</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Animal a = <span class="keyword">new</span> Animal(<span class="string">&quot;Pluto&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        Cat c = <span class="keyword">new</span> Cat(<span class="string">&quot;Garfield&quot;</span>, <span class="number">6</span>);</span><br><span class="line">        Dog d = <span class="keyword">new</span> Dog(<span class="string">&quot;Fido&quot;</span>, <span class="number">4</span>);</span><br><span class="line">        </span><br><span class="line">        a.greet(); <span class="comment">// (A) Animal Pluto says: Huh?</span></span><br><span class="line">        c.greet(); <span class="comment">// (B) Cat Garfield says: Meow!</span></span><br><span class="line">        d.greet(); <span class="comment">// (C) Dog Fido says: WOOF!</span></span><br><span class="line"></span><br><span class="line">        a = c;</span><br><span class="line">        ((Cat) a).greet(); <span class="comment">// (D) Cat Garfield says: Meow!</span></span><br><span class="line">        a.greet(); <span class="comment">// (E) Cat Garfield says: Meow!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2" type="a"><li>Consider what would happen if we added the following to the bottom of main under line 27:</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">a = **<span class="keyword">new</span>** Animal(<span class="string">&quot;Fluffy&quot;</span>, <span class="number">2</span>); </span><br><span class="line">c = a;</span><br></pre></td></tr></table></figure><p>Would this code produce a compiler error? What if we set the second line to be c = (Cat) a instead?</p><p><strong>This code would produce a compiler error. This is because we are trying to assign a variable of static type Animal to a variable of static type Cat. Since Animal is a more generic type than Cat, not all Animals are Cats. This specifically fails at compile time because Java runs a check before executing code to prevent you form assigning things of the wrong type. </strong></p><p><strong>If we were set the second line to be c = (Cat) a instead, this code will fail at runtime instead. This is because by casting a to Cat, we are telling the Java compiler that we know that a actually contains a Cat, even though it is statically typed to be an Animal. When Java goes to execute the code, it tries to assign the Animal to c, which errors.</strong></p><ol start="3" type="a"><li>Consider what would happen if we instead added the following to the bottom of main under line 27:</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">a = <span class="keyword">new</span> Dog(<span class="string">&quot;Spot&quot;</span>, <span class="number">10</span>);</span><br><span class="line">d = a</span><br></pre></td></tr></table></figure><p>Why would this code produce a compiler error? How could we fix this error?</p><p><strong>This code produces a compiler error in the second line. The static type of d is Dog while the static type of a is Animal. Dog is a subclass of Animal, so this assignment will fail at compile time because not all Animals are Dogs. Use casting to address the problem.</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">d = (Dog) a; </span><br></pre></td></tr></table></figure><p><strong>This represents a promise to the compiler that at runtime, a will be bound to an object that is compatible with the Dog type.</strong></p><p><strong>Note: The <span class="citation" data-cites="Override">@Override</span> tag specifies that the function overrides a parent class’s function. Note 2: You can only call <em>one</em> other constructor from a constructor, and the call <em>has</em> to be on the first line. This call is “super” which means the superclass’ constructor. You can use “this(...)” to call a different constructor defined in the same class.) Note 3: A runtime error would occur if we lie during casting. (That if “a” was not <em>actually</em> a Dog object, and instead was a Cat or something else, the code would fail at runtime.)</strong></p><h2 id="an-exercise-in-inheritance-misery-extra">An Exercise in Inheritance Misery <em>Extra</em></h2><p>Cross out any lines that cause compile-time errors or cascading errors (failures that occur because of an error that happened earlier in the program), and put an X through runtime errors (if any). Don’t just limit your search to main, there could be errors in classes A,B,C. What does D.main output after removing these lines?</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> x = <span class="number">5</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;Am1-&gt; &quot;</span> + x); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;Am2-&gt; &quot;</span> + <span class="keyword">this</span>.x); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123; x = <span class="number">99</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;Bm2-&gt; &quot;</span> + x); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">(<span class="keyword">int</span> y)</span> </span>&#123; System.out.println(<span class="string">&quot;Bm2y-&gt; &quot;</span> + y); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m3</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;Bm3-&gt; &quot;</span> + <span class="string">&quot;called&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> y = x + <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;Cm2-&gt; &quot;</span> + <span class="keyword">super</span>.x); &#125;</span><br><span class="line">\\ <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m4</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;Cm4-&gt; &quot;</span> + <span class="keyword">super</span>.<span class="keyword">super</span>.x); &#125; can<span class="string">&#x27;t do super.super</span></span><br><span class="line"><span class="string">public void m5() &#123; System.out.println(&quot;Cm5-&gt; &quot; + y); &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">class D &#123;</span></span><br><span class="line"><span class="string">public static void main (String[] args) &#123;</span></span><br><span class="line"><span class="string">\\ B a0 = new A(); Dynamic type must be B or subclass of B</span></span><br><span class="line"><span class="string">\\ a0.m1(); cascading: prev line failed, so a0 can&#x27;</span>t be initialized</span><br><span class="line">\\ a0.m2(<span class="number">16</span>); cascading: prev line failed, so a0 can<span class="string">&#x27;t be initialized</span></span><br><span class="line"><span class="string">A b0 = new B();</span></span><br><span class="line"><span class="string">System.out.println(b0.x); [prints &quot;5&quot;]</span></span><br><span class="line"><span class="string">b0.m1(); [prints &quot;Am1-&gt; 5&quot;]</span></span><br><span class="line"><span class="string">b0.m2(); [prints &quot;Bm2-&gt; 5&quot;]</span></span><br><span class="line"><span class="string">\\ b0.m2(61); m2 (int y) not defined in static type of b0</span></span><br><span class="line"><span class="string">B b1 = new B();</span></span><br><span class="line"><span class="string">b1.m2(61); [prints &quot;Bm2y-&gt; 61&quot;]</span></span><br><span class="line"><span class="string">b1.m3(); [prints &quot;Bm3-&gt; called&quot;]</span></span><br><span class="line"><span class="string">A c0 = new C();</span></span><br><span class="line"><span class="string">c0.m2(); [prints &quot;cm2-&gt; 5&quot;]</span></span><br><span class="line"><span class="string">\\ C c1 = (A) new C(); Can&#x27;</span>t assign c1 to an A</span><br><span class="line">A a1 = (A) c0;</span><br><span class="line">C c2 = (C) a1;</span><br><span class="line">c2.m3(); [print Bm3-&gt; called]</span><br><span class="line">\\ c2.m4(); C.m4() is invalid</span><br><span class="line">c2.m5(); [print Cm5-&gt; <span class="number">6</span>]</span><br><span class="line">((C) c0).m3(); [print Bm3-&gt; called]</span><br><span class="line">\\ (C) c0.m2(); NOT RUNTIME ERROR This would cast the result of what the method returns and</span><br><span class="line">it returns <span class="keyword">void</span> therefore compile-time error</span><br><span class="line">b0.update();</span><br><span class="line">b0.m1(); [print Am1-&gt; <span class="number">99</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Discussions </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structures </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Artificial Neural Networks</title>
      <link href="2021/03/07/2021-03-07-Artificial-Neural-Networks/"/>
      <url>2021/03/07/2021-03-07-Artificial-Neural-Networks/</url>
      
        <content type="html"><![CDATA[<h1 id="artificial-neural-networks">Artificial Neural Networks</h1><h2 id="outline">Outline</h2><ul><li>Motivation for neural processing</li><li>Neural basis</li><li>Perceptrons</li><li>Training</li><li>Testing</li></ul><h2 id="motivation">Motivation</h2><ul><li>Computers are not like brains/bodies<ul><li>they are better than brains at some things<ul><li>symbolic calculations</li><li>reliably doing what they are told</li></ul></li><li>they are (much) worse than brains/bodies at others<ul><li>understanding human language</li><li>learning</li><li>perceiving (ie seeing, hearing)</li></ul></li></ul></li><li>Question<ul><li>Can we build computers and/or programs that are (more) like brains?</li><li>If so, is it useful?</li></ul></li></ul><h2 id="von-neumann-architecture">von Neumann architecture</h2>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Techniques of Artificial Intelligence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Trees</title>
      <link href="2021/03/07/2021-03-07-Trees/"/>
      <url>2021/03/07/2021-03-07-Trees/</url>
      
        <content type="html"><![CDATA[<h1 id="trees">Trees</h1><p><a href="https://www.youtube.com/watch?v=4QtFOwTIAgI&amp;list=PL6BsET-8jgYWjZJMtCKJCdEBGUg2wZEgd">Video</a></p><p><a href="http://composingprograms.com/pages/23-sequences.html">Textbook</a></p><h2 id="box-and-pointer-notation"><a href="https://www.youtube.com/watch?v=aSqOiUZg7kQ&amp;list=PL6BsET-8jgYWjZJMtCKJCdEBGUg2wZEgd&amp;index=3">Box-and-Pointer Notation</a></h2><h3 id="the-closure-property-of-data-types">The Closure Property of Data Types</h3><ul><li>A method for combining data values satisfies the closure property if: The result of combination can itself be combined using the same method</li><li>Closure is powerful because it permits us to create hierarchical structures</li><li>Hierarchical structures are made up of parts, which themselves are made up of parts, and so on</li></ul><p><strong>Lists can contain lists as elements (in addition to anything else)</strong></p><h3 id="box-and-pointer-notation-in-environment-diagrams">Box-and-Pointer Notation in Environment Diagrams</h3><p>Lists are represented as a row of index-labeled adjacent boxes, one per element Each box either contains a primitive value or points to a compound value</p><p><img src="/images/AI/0546010.png" /></p><h2 id="slicing"><a href="https://www.youtube.com/watch?v=Y4L-4q52prk&amp;list=PL6BsET-8jgYWjZJMtCKJCdEBGUg2wZEgd&amp;index=4">Slicing</a></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Slicing</span></span><br><span class="line"></span><br><span class="line">odds = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>]</span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">[odds[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">3</span>)]</span><br><span class="line">odds[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">odds[<span class="number">1</span>:]</span><br><span class="line">odds[:<span class="number">3</span>]</span><br><span class="line">odds[:]</span><br></pre></td></tr></table></figure><h3 id="slicing-creates-new-values">Slicing Creates New Values</h3><p><img src="/images/CS61A/0546011.png" /></p><h2 id="processing-container-values"><a href="https://www.youtube.com/watch?v=omcBjDT6588&amp;list=PL6BsET-8jgYWjZJMtCKJCdEBGUg2wZEgd&amp;index=5">Processing Container Values</a></h2><h3 id="sequence-aggregation">Sequence Aggregation</h3><p>Several built-in functions take iterable arguments and aggregate them into a value</p><ul><li><p><strong>sum</strong>(iterable[, start]) -&gt; value</p><p>Return the sum of a 'start' value (default: 0) plus an iterable of numbers.</p></li><li><p><strong>max</strong>(iterable[, key=func]) -&gt; value</p><p><strong>max</strong>(a, b, c, ...[, key=func]) -&gt; value</p><p>With a single iterable argument, return its largest item. With two or more arguments, return the largest argument.</p></li><li><p><strong>all</strong>(iterable) -&gt; bool</p><p>Return True if bool(x) is True for all values x in the iterable. If the iterable is empty, return True.</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span>(&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;)</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span>([<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>])</span><br><span class="line">TypeError</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span>([<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], <span class="number">5</span>)</span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">2</span>,<span class="number">3</span>] + [<span class="number">4</span>]</span><br><span class="line">[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>] </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span>([<span class="number">2</span>,<span class="number">3</span>], [<span class="number">4</span>], [])</span><br><span class="line">[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="number">0</span> + [<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">TypeError</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span>([[<span class="number">2</span>,<span class="number">3</span>], [<span class="number">4</span>]])</span><br><span class="line">TypeError</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[] + [<span class="number">2</span>,<span class="number">3</span>] + [<span class="number">4</span>]</span><br><span class="line">[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="trees-1"><a href="https://www.youtube.com/watch?v=qFCJANh5ht8&amp;list=PL6BsET-8jgYWjZJMtCKJCdEBGUg2wZEgd&amp;index=6">Trees</a></h2><h3 id="tree-abstraction">Tree Abstraction</h3><p><img src="/images/CS61A/0546012.png" /></p><h3 id="implementing-the-tree-abstraction">Implementing the Tree Abstraction</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tree</span>(<span class="params">label, branches=[]</span>):</span></span><br><span class="line"><span class="keyword">for</span> branch <span class="keyword">in</span> branches: <span class="comment"># Verifies the tree definition</span></span><br><span class="line"> <span class="keyword">assert</span> is_tree(branch)</span><br><span class="line">    <span class="keyword">return</span> [label] + <span class="built_in">list</span>(branches) <span class="comment"># Creates a list from a sequence of branches</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">label</span>(<span class="params">tree</span>):</span></span><br><span class="line">    <span class="keyword">return</span> tree[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">branches</span>(<span class="params">tree</span>):</span></span><br><span class="line">    <span class="keyword">return</span> tree[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_tree</span>(<span class="params">tree</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(tree) != <span class="built_in">list</span> <span class="keyword">or</span> <span class="built_in">len</span>(tree) &lt; <span class="number">1</span>:</span><br><span class="line">    <span class="comment"># Verifies that tree is bound to a list</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> branch <span class="keyword">in</span> branches(tree):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_tree(branch):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_leaf</span>(<span class="params">tree</span>):</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">not</span> branches(tree)</span><br></pre></td></tr></table></figure><p><img src="/images/CS61A/0546013.png" /></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tree(<span class="number">3</span>, [tree(<span class="number">1</span>),</span><br><span class="line"><span class="meta">... </span>tree(<span class="number">2</span>, [tree(<span class="number">1</span>),</span><br><span class="line"><span class="meta">... </span>tree(<span class="number">1</span>)])])</span><br><span class="line">[<span class="number">3</span>, [<span class="number">1</span>], [<span class="number">2</span>, [<span class="number">1</span>], [<span class="number">1</span>]]]</span><br></pre></td></tr></table></figure><h2 id="tree-processing"><a href="https://www.youtube.com/watch?v=gI2-CKJMgjE&amp;list=PL6BsET-8jgYWjZJMtCKJCdEBGUg2wZEgd&amp;index=7">Tree Processing</a></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### +++ === ABSTRACTION BARRIER === +++ ###</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib_tree</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Construct a Fibonacci tree.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib_tree(1)</span></span><br><span class="line"><span class="string">    [1]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib_tree(3)</span></span><br><span class="line"><span class="string">    [2, [1], [1, [0], [1]]]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib_tree(5)</span></span><br><span class="line"><span class="string">    [5, [2, [1], [1, [0], [1]]], [3, [1, [0], [1]], [2, [1], [1, [0], [1]]]]]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> <span class="keyword">or</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> tree(n)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        left = fib_tree(n-<span class="number">2</span>)</span><br><span class="line">        right = fib_tree(n-<span class="number">1</span>)</span><br><span class="line">        fib_n = label(left) + label(right)</span><br><span class="line">        <span class="keyword">return</span> tree(fib_n, [left, right])</span><br></pre></td></tr></table></figure><h3 id="tree-processing-uses-recursion">Tree Processing Uses Recursion</h3><p>Processing a leaf is often the base case of a tree processing function</p><p>The recursive case typically makes a recursive call on each branch, then aggregates</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_leaves</span>(<span class="params">t</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;The number of leaves in tree.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_leaves(fib_tree(5))</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>([count_leaves(b) <span class="keyword">for</span> b <span class="keyword">in</span> branches(t)])</span><br></pre></td></tr></table></figure><h3 id="discussion-question">Discussion Question</h3><p>Implement <strong>leaves</strong>, which returns a list of the leaf labels of a tree</p><p><em>Hint</em>: If you <strong>sum</strong> a list of lists, you get a list containing the elements of those lists</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leaves</span>(<span class="params">tree</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a list containing the leaf labels of tree.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; leaves(fib_tree(5))</span></span><br><span class="line"><span class="string">    [1, 0, 1, 0, 1, 1, 0, 1]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(tree):</span><br><span class="line">        <span class="keyword">return</span> [label(tree)]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>([leaves(b) <span class="keyword">for</span> b <span class="keyword">in</span> branches(tree)], [])</span><br></pre></td></tr></table></figure><h3 id="creating-trees">Creating Trees</h3><p>A function that creates a tree from another tree is typically also recursive</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">increment_leaves</span>(<span class="params">t</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a tree like t but with leaf labels incremented.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(increment_leaves(fib_tree(4)))</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">      1</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">        2</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">        2</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">          1</span></span><br><span class="line"><span class="string">          2</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="keyword">return</span> tree(label(t) + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        bs = [increment_leaves(b) <span class="keyword">for</span> b <span class="keyword">in</span> branches(t)]</span><br><span class="line">        <span class="keyword">return</span> tree(label(t), bs)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">increment</span>(<span class="params">t</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a tree like t but with all labels incremented.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(increment(fib_tree(4)))</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">        2</span></span><br><span class="line"><span class="string">      3</span></span><br><span class="line"><span class="string">        2</span></span><br><span class="line"><span class="string">        2</span></span><br><span class="line"><span class="string">          1</span></span><br><span class="line"><span class="string">          2</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> tree(label(t) + <span class="number">1</span>, [increment(b) <span class="keyword">for</span> b <span class="keyword">in</span> branches(t)])</span><br></pre></td></tr></table></figure><h2 id="example-printing-trees"><a href="https://www.youtube.com/watch?v=aQ9HmQKaFzw&amp;list=PL6BsET-8jgYWjZJMtCKJCdEBGUg2wZEgd&amp;index=8">Example: Printing Trees</a></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_tree</span>(<span class="params">t, indent=<span class="number">0</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print a representation of this tree in which each label is</span></span><br><span class="line"><span class="string">    indented by two spaces times its depth from the root.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(tree(1))</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(tree(1, [tree(2)]))</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(fib_tree(4))</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">      1</span></span><br><span class="line"><span class="string">        0</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">          0</span></span><br><span class="line"><span class="string">          1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    print(<span class="string">&#x27;  &#x27;</span> * indent + <span class="built_in">str</span>(label(t)))</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> branches(t):</span><br><span class="line">        print_tree(b, indent + <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="example-summing-paths"><a href="https://www.youtube.com/watch?v=zSEvi3sF3Z0&amp;list=PL6BsET-8jgYWjZJMtCKJCdEBGUg2wZEgd&amp;index=9">Example: Summing Paths</a></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Order</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return n * n-1 * ... * 1.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fact(4)</span></span><br><span class="line"><span class="string">    24</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * fact(n - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact_tail</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return n * n-1 * ... * 1.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fact_tail(4)</span></span><br><span class="line"><span class="string">    24</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> fact_times(n, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact_times</span>(<span class="params">n, k</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return k * n * n-1 * ... * 1.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fact_times(4, 3)</span></span><br><span class="line"><span class="string">    72</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> k</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fact_times(n - <span class="number">1</span>, k * n)</span><br><span class="line"></span><br><span class="line">haste = tree(<span class="string">&#x27;h&#x27;</span>, [tree(<span class="string">&#x27;a&#x27;</span>, [tree(<span class="string">&#x27;s&#x27;</span>), tree(<span class="string">&#x27;t&#x27;</span>)]), tree(<span class="string">&#x27;e&#x27;</span>)])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_sums</span>(<span class="params">t, path_sum</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print the sum of labels along the path from the root to each leaf.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_sums(tree(3, [tree(4), tree(5, [tree(6)])]), 0)</span></span><br><span class="line"><span class="string">    7</span></span><br><span class="line"><span class="string">    14</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_sums(haste, &#x27;&#x27;)</span></span><br><span class="line"><span class="string">    has</span></span><br><span class="line"><span class="string">    hat</span></span><br><span class="line"><span class="string">    he</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    path_sum = path_sum + label(t)</span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        print(path_sum)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> branch <span class="keyword">in</span> branches(t):</span><br><span class="line">            print_sums(branch, path_sum)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Structure and Interpretation of Computer Programs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ID3 algorithm for learning classification</title>
      <link href="2021/03/06/2021-03-06-Algorithm-for-learning-classification/"/>
      <url>2021/03/06/2021-03-06-Algorithm-for-learning-classification/</url>
      
        <content type="html"><![CDATA[<h1 id="id3-algorithm-for-learning-classification">ID3 algorithm for learning classification</h1><h2 id="outline">Outline</h2><ul><li>The classification problem<ul><li>geometrical interpretation</li></ul></li><li>Attribute selection<ul><li>entropy, mutual information</li></ul></li><li>Some classifiers<ul><li>bayesian, SVM, decision trees</li></ul></li><li>The ID3 algorithm<ul><li>Avoiding overfitting</li></ul></li></ul><h2 id="classification">Classification</h2><p><strong>Goal</strong>: given a set of examples described by several attributes (or features) and a set of classes, label each example with a class</p><p><strong>Applications:</strong></p><ul><li>biometry: identify a person from her voice, face, gait, ...</li><li>category recognition (object, speech, musical instrument,...)</li><li>data mining: predict the user’s behaviour depending on his past history</li><li>medical diagnosis: knowing the symptoms and eventual test results, determine whether a patient is sick</li></ul><h3 id="why-is-it-hard">Why is it hard?</h3><ul><li><p>The classes themselves are not observable</p><ul><li><p>the classes represent high-level information (identity, behaviour,...) but only low-level attributes (pixel values, numbers of clicks on a web page,...) are observed</p></li><li><p>the human brain is good at making sense of data, but we still don’t know how</p></li></ul></li><li><p>There are many attributes</p><ul><li>each attribute individually has little correlation with the classes<ul><li>so we need a lot of attributes</li></ul></li><li>the correlation between the attributes and the classes is not known beforehand<ul><li>it has to be learnt</li></ul></li></ul></li><li><p>There are many examples</p><ul><li>if not, it could be done by hand</li><li>learning algorithms are costly</li></ul></li></ul><h3 id="machine-learning-for-classification">Machine learning for classification</h3><ul><li><p>Classifier: a function that takes features and returns the class of an example with those features</p><ul><li>a classifier can label any possible example, not only the problem set</li></ul></li><li><p>Machine learning approach</p><ul><li>learn the classifier from a training set, then apply it to the problem examples<ul><li>supervised learning: the classes of the training examples are known</li><li>the training set is much smaller than the problem set</li></ul></li></ul></li><li><p>The learning step is costly but performed only once</p></li><li><p>How can we ensure that the classifier will work on the problem data?</p><ul><li>we cannot for sure :(</li><li>Occam’s razor: the simplest solution is often the right one</li></ul></li></ul><h3 id="geometrical-view">Geometrical view</h3><ul><li>The examples lie in the attribute space ‣ each attribute is a dimension ‣ each example is a point<ul><li>classes are represented by colours</li></ul></li><li>A classifier embodies a partition of the attribute space</li><li>Learning a classifier is partitioning the training set into homogeneous subsets<ul><li>each subspace contains training examples of exactly 1 class</li></ul></li><li>Applying a classifier is therefore just checking in which subspace a point lies</li></ul><figure><img src="/images/AI/2006470.png" alt="" /><figcaption>Geometrical view</figcaption></figure><figure><img src="/images/AI/2006471.png" alt="" /><figcaption>Learning a classifier</figcaption></figure><figure><img src="/images/AI/2006472.png" alt="" /><figcaption>Applying the classifier</figcaption></figure><h4 id="structure-of-the-classifier">Structure of the classifier</h4><p><img src="/images/AI/2006473.png" /></p><ul><li>The subspaces of the classifier do not have to be connected</li><li>The border can be much more complex than a single line</li><li>Generally, the types of borders allowed are set by the algorithm<ul><li>need expert knowledge of the problem</li><li>there is no single algorithm that solves every problem</li></ul></li></ul><h2 id="attribute-selection">Attribute selection</h2><h3 id="symbolic-and-numeric-attributes">Symbolic and numeric attributes</h3><ul><li>Symbolic attributes<ul><li>finite, discrete valued: e.g. gender, status,...</li><li>no notion of order or distance between values, only boolean comparison</li><li>can be enumerated</li><li>must use logic to combine different attributes after testing them</li></ul></li><li>Numeric attributes<ul><li>real or integer valued: e.g. grades, temperature, pixels, samples,...</li><li>can be measured</li><li>can use algebra to combine different attributes before testing them<ul><li>can create new attributes</li></ul></li></ul></li></ul><h3 id="attribute-selectionengineering">Attribute selection/engineering</h3><ul><li><p>Learning is hard. Learning algorithms in general are both costly and suboptimal.</p></li><li><p>Learning is easier if one starts with “good” attributes</p><ul><li>fewer attributes decrease the cost of learning</li><li>a good initial guess helps finding the best classifier</li></ul></li><li><p>What is a “good” attribute?</p><ul><li>easiest case: the classes themselves as an attribute</li><li>hardest case (insoluble): no attributes at all</li><li>an attribute that carries a lot of “information”</li><li>an attribute whose “information” is related to the clas</li></ul></li></ul><h3 id="entropy">Entropy</h3><h4 id="information-theory-shannon-1948">Information theory (Shannon 1948)</h4><ul><li>Communication problem: how to compress a signal, i.e. a stream of independent random variables X ?<ul><li>e.g.: signal = succession of coin tosses</li></ul></li><li>Quantity of information in the signal = minimum bit rate needed to transmit it<ul><li>i.e. the average number of bits per symbol.</li></ul></li><li>It is a function of the probability distribution of the signal<ul><li>the distribution represents what is known before the actual transmission, i.e. what does not depend on the number of samples</li><li>the bit rate should be chosen before transmission</li></ul></li><li>The more uncertain the distribution, the more information in the content<ul><li>if the coin is double-headed, then there is nothing to transmit</li></ul></li><li>Probabilities are multiplicative, information is additive<ul><li>if ones tosses a coin n times, there are 2 n possible outcomes, but they can all be written using n bits only</li><li>information content depends on the logarithm of the probability distribution</li></ul></li><li>Impossible events should not matter<ul><li>adding “the coin can rest on its side with probability 0” should not change the amount of information</li><li>weight the logarithms by the probability of each event</li></ul></li><li>Entropy: <span class="math display">\[H(x) = - \sum_{X = x}p_x\log_2p_x\]</span></li></ul><h4 id="example-coin-toss">Example: coin toss</h4><ul><li>Two values (e.g. Heads and Tails)<ul><li>respective frequencies p and 1-p</li></ul></li></ul><p><img src="/images/AI/2006474.png" /></p><h5 id="what-does-it-mean">What does it mean?</h5><ul><li>How can one coin-toss hold less than 1 bit of information when there are still 2 possible outcomes?<ul><li>The result is <em>probabilistic</em>: for any bit rate b&gt;H(X) and any arbitrarily low error rate e&gt;0, there is an encoder with bit rate b and error rate e.</li></ul></li><li>What does an non-integer quantity of information mean?<ul><li>It is a rate for a stream of independent samples</li><li>The stream is encoded by grouping samples together into words</li><li>H(X) = 0.4 means that words of 10 samples can be encoded using 4 bits only.</li></ul></li><li>How does it work?<ul><li>If H(X) is less than maximal, then there are rare events</li><li>Conjunctions of rare events become rarer and rarer as word length increases</li><li>At some point they become negligible and do not need to be encoded anymore</li></ul></li></ul><h3 id="mutual-information">Mutual information</h3><p>Objective: measure how much of the information in two random variables is shared</p><ul><li>0 if the variables are independent</li><li>maximal if one variable is a function of the other.</li><li>Mutual information: <em>I(X;Y) = H(X) + H(Y) - H(X,Y)</em></li></ul><p><img src="/images/AI/2006475.png" /></p><h4 id="computing-the-entropy-numerically">Computing the entropy numerically</h4><ul><li><p>Don’t forget that log(0<sup>+</sup>) tends to -∞...</p><ul><li>... but 0 +log0<sup>+</sup>) converges to 0</li><li>test if the probability is 0, do not compute explicitly in that case</li></ul></li><li><p>How to compute log<sub>2</sub>:</p><ul><li><p>many languages do have a log<sub>2</sub> function (MATLAB, C, C++,...)</p></li><li><p>... but some do not (Java,...)</p></li><li><p>for any bases a and b, <span class="math display">\[\log_bx = \frac{\log_ax}{\log_ab}\]</span></p></li><li><p>in our case b=2</p></li><li><p>a is usually e, maybe 10 (does it matter?)</p></li></ul></li></ul><h4 id="back-to-attribute-selection">Back to attribute selection</h4><ul><li>Finding attributes with high entropy:<ul><li>start with a compressing transform (e.g. time/frequency for sounds, wavelet or DCT for images, movement vectors for video,...)</li><li>for numeric attributes, variance can often be used as a good surrogate for entropy, and is easier to compute</li></ul></li><li>Finding features with high mutual information with the classes:<ul><li>expert knowledge may be available (e.g., pitch is key to music transcription)</li></ul></li><li>Common sense works!<ul><li>e.g., don’t classify text documents based on frequency of “a”, “the”, “and”, ...</li></ul></li></ul><h2 id="some-common-classifiers">Some common classifiers</h2><h3 id="bayesian-classifiers">Bayesian classifiers</h3><ul><li><p>Maximum Likelihood learning: for each class C, learn a probability distribution p(.|C) that maximizes ∏p(m|C) for all the <em>m</em> in the training data.</p></li><li><p>classification: for a point <em>m</em>, find the class C that maximises p(C|m)</p><ul><li><p>using Bayes’ rule: <span class="math display">\[p(C|m) = \frac{p(C)p(m|C)}{p(m)}\]</span></p></li><li><p>scales linearly with the number of classes</p></li></ul></li></ul><h3 id="support-vector-machines-svm">Support Vector Machines (SVM)</h3><ul><li>linear classifiers: boundaries are hyperplanes</li><li>Maximal Margin learning: learn the hyperplane that is the furthest away from making a mistake<ul><li>maximize the distance to the closest (=worst) points of each class (the support vectors)</li></ul></li><li>mainly for 2 classes</li></ul><h3 id="decision-trees">Decision trees</h3><ul><li>A tool to represent decision making</li><li>Decompose a complex problem into a sequence of simple questions</li><li>Which question to ask next depends on the previous answers<ul><li>can be represented as a tree</li></ul></li><li>Tree structure:<ul><li>leaves: decisions</li><li>nodes: questions</li><li>branches: possible answers to the parent question</li></ul></li></ul><h4 id="the-morning-problem">The morning problem</h4><p>Should I attend the class or not?</p><p><img src="/images/AI/2006476.png" /></p><h4 id="decision-trees-and-classification">Decision trees and classification</h4><ul><li>Classification can be seen as a decision problem<ul><li>the decision to take: which label apply to a data point?</li></ul></li><li>Classifiers can be represented as a decision tree<ul><li>a decision tree also partitions the attribute space</li><li>question: on which side of a given border is the point we’re interested in?</li><li>several trees can represent the same classifier</li></ul></li></ul><h4 id="learning-decision-trees">Learning decision trees</h4><ul><li><p>Learning problem</p><ul><li>which questions to ask?</li></ul></li><li><p>If one asks enough questions, one will eventually classify the training set</p><ul><li>1 question = 1 new split of the space</li><li>with enough splits, one can eventually separate each training point from all others</li></ul><p>but would that classifier generalise well to data it hasn’t seen before?</p></li><li><p>Goals of the learning:</p><ul><li>the classifier should be general</li><li>it should be fast to apply<ul><li>build a classifier that needs to ask few questions before taking a decision (a shallow, bushy tree)</li></ul></li></ul></li></ul><h2 id="id3-algorithm-quinlan-1986">ID3 algorithm (Quinlan 1986)</h2><p>ID3 takes a training set and builds a decision tree such that each leaf is homogeneous</p><ul><li>builds the tree from the root to the leaves</li><li>greedy algorithm: no backtracking</li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ID3(Training_Set) =</span><br><span class="line"><span class="keyword">if</span> all the points in Training_Set have the same class C</span><br><span class="line">then <span class="keyword">return</span> Leaf(C);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">Question = Find_Best_Question(Training_Set);</span><br><span class="line">[Set_1,...,Set_n] = Split(Training_set, Question);</span><br><span class="line"><span class="keyword">return</span> Tree(Question, ID3(Set_1),...,ID3(Set_n));</span><br></pre></td></tr></table></figure><p>How does Find_Best_Question work?</p><ul><li>which questions are allowed?</li><li>how to select the best one?</li></ul><h4 id="finding-the-next-question-to-ask">Finding the next question to ask</h4><ul><li>ID3 restricts itself to questions that test only one attribute<ul><li>fewer questions to choose from</li><li>geometrically, all the borders are orthogonal to one axis</li><li>for symbolic attributes mainly<ul><li>symbolic attributes cannot be combined</li><li>symbolic attributes can be enumerated</li></ul></li></ul></li><li>Each question is chosen so that the resulting subsets are as classified as possible<ul><li>the entropy of the class variable within a set measures how classified it is</li></ul></li></ul><p><span class="math display">\[H(s) = - \sum_{C = c}p_c\log_2p_c\]</span></p><h4 id="finding-the-best-question">Finding the best question</h4><ul><li><p>The entropy of a partition is the sum of the entropies of the subsets weighted by their size</p></li><li><p>Entropy also provides a stopping criterion: a leaf is a node with entropy 0</p></li><li><p>The information gain is defined as the difference between the total entropies before and after partitioning</p><ul><li>It is also the mutual information between the attribute and the class, conditioned to the previous splits <span class="math display">\[G(S,Q) = H(S)-\sum_{S_i∈Split(S,Q)}\frac{|S_i|}{|S|}H(S_i)\]</span></li></ul></li><li><p>Compute G for all possible questions and select the largest one</p></li></ul><h4 id="which-questions-to-ask">Which questions to ask?</h4><ul><li>Symbolic attributes (gender, hair colour,...):<ul><li>only a finite number of possible values for all data</li><li>one branch for each different value</li></ul></li><li>Numerical attributes (temperature, pixel value,...):<ul><li>infinite range even if only a finite number of values are present in the training set</li><li>choose a threshold t and ask the question: value &lt; t?</li></ul></li><li>Threshold choice:<ul><li>the information gain criterion still holds</li><li>the best threshold must be between two training examples of different classes</li><li>try all possible thresholds</li></ul></li></ul><p><img src="/images/AI/2006477.png" /></p><h4 id="example-attend-the-lecture-or-not">Example: attend the lecture or not?</h4><table><thead><tr class="header"><th style="text-align: center;">Outlook</th><th style="text-align: center;">Temperature</th><th style="text-align: center;">Windy</th><th style="text-align: center;">Attend?</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">sunny</td><td style="text-align: center;">29</td><td style="text-align: center;">No</td><td style="text-align: center;">Yes</td></tr><tr class="even"><td style="text-align: center;">sunny</td><td style="text-align: center;">27</td><td style="text-align: center;">Yes</td><td style="text-align: center;">No</td></tr><tr class="odd"><td style="text-align: center;">overcast</td><td style="text-align: center;">28</td><td style="text-align: center;">No</td><td style="text-align: center;">Yes</td></tr><tr class="even"><td style="text-align: center;">rain</td><td style="text-align: center;">21</td><td style="text-align: center;">Yes</td><td style="text-align: center;">No</td></tr><tr class="odd"><td style="text-align: center;">rain</td><td style="text-align: center;">20</td><td style="text-align: center;">No</td><td style="text-align: center;">Yes</td></tr><tr class="even"><td style="text-align: center;">rain</td><td style="text-align: center;">18</td><td style="text-align: center;">Yes</td><td style="text-align: center;">No</td></tr><tr class="odd"><td style="text-align: center;">overcast</td><td style="text-align: center;">17</td><td style="text-align: center;">No</td><td style="text-align: center;">Yes</td></tr><tr class="even"><td style="text-align: center;">sunny</td><td style="text-align: center;">22</td><td style="text-align: center;">Yes</td><td style="text-align: center;">No</td></tr></tbody></table><p><span class="math display">\[H(S)=-\frac{4}{8}\log_2\frac{4}{8}-\frac{4}{8}\log_2\frac{4}{8}=1\]</span></p><h5 id="example-split-along-outlook">Example: split along Outlook</h5><p><span class="math display">\[H(sunny)=-\frac{1}{3}\log_2\frac{1}{3}-\frac{2}{3}\log_2\frac{2}{3}≈0.9183\\H(overcast)=-\frac{2}{2}\log_2\frac{2}{2}-\frac{0}{2}\log_2\frac{0}{2}≈0\\H(rain)=-\frac{1}{3}\log_2\frac{1}{3}-\frac{2}{3}\log_2\frac{2}{3}≈0.9183\\G(Outlook)=H(S) - \frac{3}{8}H(sunny)- \frac{2}{8}H(overcast)-\frac{3}{8}H(rain)≈0.3113\]</span></p><h5 id="example-split-along-temperature">Example: split along Temperature</h5><p><img src="/images/AI/2006478.png" /></p><h6 id="split-at-t17.5c">Split at t=17.5°C</h6><p><span class="math display">\[H(t&lt;17.5)=-\frac{1}{1}\log_2\frac{1}{1}-\frac{0}{1}\log_2\frac{0}{1}≈0\\H(t&gt;17.5)=-\frac{3}{7}\log_2\frac{3}{7}-\frac{4}{7}\log_2\frac{4}{7}≈0.9852\\G(t=17.5)=H(S) - \frac{1}{8}H(t&lt;17.5)- \frac{7}{8}H(t&gt;17.5)≈0.1379\]</span></p><h6 id="split-at-t19c">Split at t=19°C</h6><p><span class="math display">\[H(t&lt;19)=-\frac{1}{2}\log_2\frac{1}{2}-\frac{1}{2}\log_2\frac{1}{2}≈1\\H(t&gt;19)=-\frac{3}{6}\log_2\frac{3}{6}-\frac{3}{6}\log_2\frac{3}{6}≈1\\G(t=19)=H(S) - \frac{2}{8}H(t&lt;19)- \frac{6}{8}H(t&gt;19)=0\]</span></p><h6 id="split-at-t20.5c">Split at t=20.5°C</h6><p><span class="math display">\[H(t&lt;20.5)=-\frac{2}{3}\log_2\frac{2}{3}-\frac{1}{3}\log_2\frac{1}{3}≈0.9183\\H(t&gt;20.5)=-\frac{3}{5}\log_2\frac{3}{5}-\frac{2}{5}\log_2\frac{2}{5}≈0.9710\\G(t=20.5)=H(S) - \frac{3}{8}H(t&lt;20.5)- \frac{5}{8}H(t&gt;20.5)=0.0488\]</span></p><h6 id="split-at-t27.5c">Split at t=27.5°C</h6><p><span class="math display">\[H(t&lt;27.5)=-\frac{2}{6}\log_2\frac{2}{6}-\frac{4}{6}\log_2\frac{4}{6}≈0.9183\\H(t&gt;27.5)=-\frac{2}{2}\log_2\frac{2}{2}-\frac{0}{2}\log_2\frac{0}{2}≈0\\G(t=27.5)=H(S) - \frac{6}{8}H(t&lt;27.5)- \frac{2}{8}H(t&gt;27.5)=0.3113\]</span></p><h6 id="split-along-windy">Split along windy</h6><p><span class="math display">\[H(windy)=-\frac{1}{4}\log_2\frac{1}{4}-\frac{3}{4}\log_2\frac{3}{4}≈0.8113\\H(¬windy)=-\frac{3}{4}\log_2\frac{3}{4}-\frac{1}{4}\log_2\frac{1}{4}≈0.8133\\G(windy?)=H(S) - \frac{4}{8}H(windy)- \frac{4}{8}H(¬windy)=0.1887\]</span></p><h5 id="example-first-iteration">Example: first iteration</h5><ul><li>The best splits were either Outlook or t=27.5°C</li><li>Let us assume we split on Outlook:</li></ul><p><img src="/images/AI/2006479.png" /></p><h5 id="example-the-sunny-branch">Example: the Sunny branch</h5><table><thead><tr class="header"><th style="text-align: center;">Outlook</th><th style="text-align: center;">Temperature</th><th style="text-align: center;">Windy</th><th style="text-align: center;">Attend?</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">sunny</td><td style="text-align: center;">29</td><td style="text-align: center;">No</td><td style="text-align: center;">Yes</td></tr><tr class="even"><td style="text-align: center;">sunny</td><td style="text-align: center;">27</td><td style="text-align: center;">Yes</td><td style="text-align: center;">No</td></tr><tr class="odd"><td style="text-align: center;">sunny</td><td style="text-align: center;">22</td><td style="text-align: center;">Yes</td><td style="text-align: center;">No</td></tr></tbody></table><p>A split at t=28.5°C classifies the branch</p><h5 id="example-the-rainy-branch">Example: the Rainy branch</h5><table><thead><tr class="header"><th style="text-align: center;">sunny</th><th style="text-align: center;">27</th><th style="text-align: center;">Yes</th><th style="text-align: center;">No</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">rain</td><td style="text-align: center;">21</td><td style="text-align: center;">Yes</td><td style="text-align: center;">No</td></tr><tr class="even"><td style="text-align: center;">rain</td><td style="text-align: center;">20</td><td style="text-align: center;">No</td><td style="text-align: center;">Yes</td></tr><tr class="odd"><td style="text-align: center;">rain</td><td style="text-align: center;">18</td><td style="text-align: center;">Yes</td><td style="text-align: center;">No</td></tr></tbody></table><p>A split along Windy classifies the branch</p><h5 id="example-the-final-tree">Example: the final tree</h5><p><img src="/images/AI/2006480.png" /></p><h3 id="strong-and-weak-points-of-id3">Strong and weak points of ID3</h3><ul><li>Each question only checks one feature:<ul><li>works well with attributes of different types (ex: size and gender)</li><li>designs rectangular regions only, even if it does not fit the data</li></ul></li><li>Generates the shortest possible tree:<ul><li>fast classification after learning</li><li>helps to generalise the model</li><li>helps to understand the generated rules</li></ul></li><li>Training is expensive:<ul><li>try all possible questions at each node</li><li>for each question, compute the answer with each data point of the subset</li><li>infinite range attributes generate lots of different questions</li></ul></li></ul><h3 id="a-word-on-overfitting">A word on overfitting</h3><ul><li>Noise blurs the boundaries between classes</li><li>Sampling can alter the perception of the problem<ul><li>selection bias</li><li>rare events</li></ul></li><li>General solution: more data! (not always possible)</li><li><strong>Overfitting</strong><ul><li>learning a tree that models properties specific to the training set<ul><li>the tree works on the training set but not on the problem data</li><li>perfect classification of the training set is most often too much</li></ul></li></ul></li></ul><p><img src="/images/AI/2006481.png" /></p><h3 id="reduced-error-pruning">Reduced-error pruning</h3><ul><li>Split the training set in two:<ul><li>one for learning</li><li>one for pruning</li></ul></li><li>Goal: learn a tree that classifies the pruning set well although it was not learnt on it</li><li>First build a tree with ID3 on the training set</li><li>Then greedily prune nodes to improve the classification of the pruning set</li><li>What if we don’t have enough data to make a pruning set?</li></ul><h3 id="rule-pruning">Rule pruning</h3><p>The tree can be written as a set of logical rules</p><ul><li>each path is a single conjunction of tests</li><li>there is a disjunction between different paths</li></ul><p><img src="/images/AI/2006481.png" /></p><h3 id="rule-post-pruning">Rule post-pruning</h3><ul><li>First convert the tree into rules</li><li>Then greedily prune the rules by removing preconditions</li><li>Only prune if the precision of the rule does not decrease<ul><li>Precision = fraction of points of the correct class among the points picked by the rule</li></ul></li><li>The pruning is done on the training set directly<ul><li>no need to split the set in two</li><li>more used in practice</li></ul></li></ul><h3 id="summary">Summary</h3><ul><li>Information as a measurable quantity<ul><li>information as structure in data</li></ul></li><li>ID3: a method of using information to decide on structure</li><li>Overfitting<ul><li>pruning to re-generalise</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Techniques of Artificial Intelligence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tree Recursion &amp; Lists</title>
      <link href="2021/03/06/2021-03-06-Tree-Recursion-&amp;-Lists/"/>
      <url>2021/03/06/2021-03-06-Tree-Recursion-&amp;-Lists/</url>
      
        <content type="html"><![CDATA[<h1 id="tree-recursion-lists">Tree Recursion &amp; Lists</h1><h2 id="tree-recursion"><a href="https://www.youtube.com/watch?v=5C4-fIN-zyA&amp;list=PLx38hZJ5RLZd35oDi3TGz5p9DyyxU3WwA&amp;index=4">Tree Recursion</a></h2><p>Consider a function that requires more than one recursive call. A simple example is the recursive fibonacci function:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>This type of recursion is called tree recursion, because it makes more than one recursive call in its recursive case. If we draw out the recursive calls, we see the recursive calls in the shape of an upside-down tree:</p><p><img src="/images/CS61A/1431431.png" /></p><p>We could, in theory, use loops to write the same procedure. However, problems that are naturally solved using tree recursive procedures are generally difficult to write iteratively. It is sometimes the case that a tree recursive problem also involves iteration: for example, you might use a while loop to add together multiple recursive calls.</p><p>As a general rule of thumb, whenever you need to try multiple possibilities at the same time, you should consider using tree recursion.</p><h3 id="questions">Questions</h3><p><a href="https://www.youtube.com/watch?v=VcZPTlE56G8&amp;t=4026s">1.</a> You want to go up a flight of stairs that has n steps. You can either take 1 or 2 steps each time. How many different ways can you go up this flight of stairs?</p><p>Write a function count_stair_ways that solves this problem. Assume n is positive.</p><p>Before we start, what’s the base case for this question? What is the simplest input?</p><p><strong>When there is only 1 step, there is only one way to go up the stair. When there are two steps, we can go up in two ways: take a two-step, or take 2 one-steps.</strong></p><p>What do count_stair_ways(n - 1) and count_stair_ways(n - 2) represent?</p><p><strong>count_stair_ways(n - 1) represents the number of different ways to go up the last n − 1 stairs (this is the case where we take 1 step as our move). count_stair_ways(n - 2) represents the number of different ways to go up the last n − 2 stairs (this is the case where we take 2 steps as our move). Our base cases will take care of the remaining 1 or 2 steps.</strong></p><p>Fill in the code for count stair ways:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_stair_ways</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> n == <span class="number">1</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> count_stair_ways(n-<span class="number">1</span>) + count_stair_ways(n-<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p><a href="https://www.youtube.com/watch?v=oGBcPguM9vo&amp;list=PLx38hZJ5RLZd35oDi3TGz5p9DyyxU3WwA&amp;index=6">2.</a> Consider a special version of the count_stairways problem, where instead of taking 1 or 2 steps, we are able to take <strong>up to and including k</strong> steps at a time.</p><p>Write a function count_k that figures out the number of paths for this scenario. Assume n and k are positive.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_k</span>(<span class="params">n, k</span>):</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; count_k(3, 3) # 3, 2 + 1, 1 + 2, 1 + 1 + 1</span></span><br><span class="line"><span class="string">4</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; count_k(4, 4)</span></span><br><span class="line"><span class="string">8</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; count_k(10, 3)</span></span><br><span class="line"><span class="string">274</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; count_k(300, 1) # Only one step at a time</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> n &lt; <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">total = <span class="number">0</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= k:</span><br><span class="line">total += count_k(n - i, k)</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> total</span><br></pre></td></tr></table></figure><h2 id="lists">Lists</h2><p>A <em>sequence</em> is an ordered collection of values. It has two fundamental properties: length and element selection. In this discussion, we’ll explore one of Python’s data types, the <em>list</em>, which implements this abstraction.</p><p>In Python, we can have lists of whatever values we want, be it numbers, strings, functions, or even other lists! Furthermore, the types of the list’s contents need not be the same. In other words, the list need not be homogenous.</p><p>Lists can be created using square braces. Their elements can be accessed (or <em>indexed</em>) with square braces. Lists are zero-indexed: to access the first element, we must index at 0; to access the <em>i</em>th element, we must index at <em>i</em> − 1.</p><p>We can also index with negative numbers. These begin indexing at the end of the list, so the index −1 is equivalent to the index len(list) - 1 and index −2 is the same as len(list) - 2.</p><p>Let’s try out some indexing:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>fantasy_team = [<span class="string">&#x27;aaron rodgers&#x27;</span>, <span class="string">&#x27;desean jackson&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(fantasy_team)</span><br><span class="line">[<span class="string">&#x27;aaron rodgers&#x27;</span>, <span class="string">&#x27;desean jackson&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fantasy_team[<span class="number">0</span>]</span><br><span class="line"><span class="string">&#x27;aaron rodgers&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fantasy_team[<span class="built_in">len</span>(fantasy_team) - <span class="number">1</span>]</span><br><span class="line"><span class="string">&#x27;desean jackson&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fantasy_team[-<span class="number">1</span>]</span><br><span class="line"><span class="string">&#x27;desean jackson&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="list-slicing">List Slicing</h3><p>If we want to access more than one element of a list at a time, we can use a <em>slice</em>. Slicing a sequence is very similar to indexing. We specify a starting index and an ending index, separated by a colon. Python creates a new list with the elements from the starting index up to (but not including) the ending index.</p><p>We can also specify a step size, which tells Python how to collect values for us. For example, if we set step size to 2, the returned list will include every <strong>other</strong> value, from the starting index until the ending index. A negative step size indicates that we are stepping backwards through a list when collecting values.</p><p>You can also choose not to specify any/all of the slice arguments. Python will perform some default behaviour if this is the case:</p><ul><li>If the step size is left out, the default step size is 1.</li><li>If the start index is left out, the default start index is the beginning of the list.</li><li>If the end index is left out, the default end index is the end of the list.</li><li>If the step size is negative, the default start index becomes the end of the list, and the default end index becomes the beginning of the list.</li></ul><p>Thus, lst[:] creates a list that is identical to lst (a copy of lst). lst[::-1] creates a list that has the same elements of lst, but reversed. Those rules still apply if more than just the step size is specified e.g. lst[3::-1].</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>directors = [<span class="string">&#x27;jenkins&#x27;</span>, <span class="string">&#x27;spielberg&#x27;</span>, <span class="string">&#x27;bigelow&#x27;</span>, <span class="string">&#x27;kubrick&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>directors[:<span class="number">2</span>]</span><br><span class="line">[<span class="string">&#x27;jenkins&#x27;</span>, <span class="string">&#x27;spielberg&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>directors[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">[<span class="string">&#x27;spielberg&#x27;</span>, <span class="string">&#x27;bigelow&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>directors[<span class="number">1</span>:]</span><br><span class="line">[<span class="string">&#x27;spielberg&#x27;</span>, <span class="string">&#x27;bigelow&#x27;</span>, <span class="string">&#x27;kubrick&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>directors[<span class="number">0</span>:<span class="number">4</span>:<span class="number">2</span>]</span><br><span class="line">[<span class="string">&#x27;jenkins&#x27;</span>, <span class="string">&#x27;bigelow&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>directors[::-<span class="number">1</span>]</span><br><span class="line">[<span class="string">&#x27;kubrick&#x27;</span>, <span class="string">&#x27;bigelow&#x27;</span>, <span class="string">&#x27;spielberg&#x27;</span>, <span class="string">&#x27;jenkins&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="list-comprehensions">List Comprehensions</h3><p>A <strong>list comprehension</strong> is a compact way to create a list whose elements are the results of applying a fixed expression to elements in another sequence.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[&lt;<span class="built_in">map</span> exp&gt; <span class="keyword">for</span> &lt;name&gt; <span class="keyword">in</span> &lt;<span class="built_in">iter</span> exp&gt; <span class="keyword">if</span> &lt;<span class="built_in">filter</span> exp&gt;]</span><br></pre></td></tr></table></figure><p>It might be helpful to note that we can rewrite a list comprehension as an equivalent for statement. See the example to the right.</p><p>Let’s break down an example:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[x * x - <span class="number">3</span> <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>] <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>In this list comprehension, we are creating a new list after performing a series of operations to our initial sequence [1, 2, 3, 4, 5]. We only keep the elements that satisfy the filter expression x % 2 == 1 (1, 3, and 5). For each retained element, we apply the map expression x*x - 3 before adding it to the new list that we are creating, resulting in the output [-2, 6, 22].</p><p><em>Note: The if clause in a list comprehension is optional.</em></p><h3 id="questions-1">Questions</h3><p><a href="https://www.youtube.com/watch?v=zP4jWZpwACM&amp;list=PLx38hZJ5RLZcgrSJp16YmzNwn9hL5JD8q&amp;index=2&amp;t=862s">1.</a> What would Python display?</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">4</span>, [<span class="number">2</span>, <span class="number">3</span>], <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a[<span class="number">0</span>], a[-<span class="number">1</span>])</span><br><span class="line"><span class="number">1</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(a)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> <span class="keyword">in</span> a</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4</span> <span class="keyword">in</span> a</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">3</span>][<span class="number">0</span>]</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p><a href="https://www.youtube.com/watch?v=Am6m8YgAnYY&amp;list=PLx38hZJ5RLZdJgRCgpaTbmRXKAHOUmomO&amp;index=5">2.</a> Write a function that takes a list s and returns a new list that keeps only the even-indexed elements of s and multiplies them by their corresponding index.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">even_weighted</span>(<span class="params">s</span>):</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; x = [1, 2, 3, 4, 5, 6]</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; even_weighted(x)</span></span><br><span class="line"><span class="string">[0, 6, 20]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">return</span> [i * s[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)) <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>The key point to note is that instead of iterating over each element in the list, we must instead iterate over the indices of the list. Otherwise, there’s no way to tell if we should keep a given element</p><p>One way of solving these problems is to try and write your solution as a for loop first, and then transform it into a list comprehension. The for loop solution might look something like this:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line"><span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">result = result + [i * s[i]]</span><br><span class="line"><span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p><a href="https://www.youtube.com/watch?v=Am6m8YgAnYY&amp;list=PLx38hZJ5RLZdJgRCgpaTbmRXKAHOUmomO&amp;index=5&amp;t=180s">3.</a> Write a function that takes in a list and returns the maximum product that can be formed using non-consecutive elements of the list. The input list will contain only numbers greater than or equal to 1.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_product</span>(<span class="params">s</span>):</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;Return the maximum product that can be formed using non-consecutive elements of s.</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; max_product([10,3,1,9,2]) # 10 * 9</span></span><br><span class="line"><span class="string">90</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; max_product([5,10,5,10,5]) # 5 * 5 * 5</span></span><br><span class="line"><span class="string">125</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; max_product([])</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s == []:</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> <span class="built_in">len</span>(s) == <span class="number">1</span>: <span class="comment"># Base case optional</span></span><br><span class="line"><span class="keyword">return</span> s[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">max</span>(max_product(s[<span class="number">1</span>:]), s[<span class="number">0</span>] * max_product(s[<span class="number">2</span>:]))</span><br></pre></td></tr></table></figure><p>At each step, we choose if we want to include the current number in our product or not:</p><ul><li>If we include the current number, we cannot use the adjacent number.</li><li>If we don’t use the current number, we try the adjacent number (and obviously ignore the current number).</li></ul><p>The recursive calls represent these two alternate realities. Finally, we pick the one that gives us the largest product.</p><h4 id="whole-numbers">Whole Numbers</h4><p>1. A <em>hole number</em> is a number in which every other digit dips below the digits immediately adjacent to it. For example, the number 968 would be considered a hole number because the number 6 is smaller than both of its surrounding digits. Other hole numbers include 9192959 or 324364989. The number 544 would not be considered a hole number. For simplicity assume that we only pass in numbers that have an odd number of digits. Define the following function so that it properly identifies hole numbers.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_hole_number</span>(<span class="params">n</span>):</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; check_hole_number(123)</span></span><br><span class="line"><span class="string">False</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; check_hole_number(3241968)</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; check_hole_number(3245968)</span></span><br><span class="line"><span class="string">False</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">if</span> n // <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="comment"># The \ symbol just allows me to continue this line of code on a new line.</span></span><br><span class="line"><span class="comment"># It&#x27;s only included to make sure all the code stays on the page</span></span><br><span class="line"><span class="keyword">return</span> ((n // <span class="number">10</span>) % <span class="number">10</span>) &lt; (n % <span class="number">10</span>) <span class="keyword">and</span> ((n // <span class="number">10</span>) % <span class="number">10</span>) &lt; ((n // <span class="number">100</span>) % <span class="number">10</span>) \</span><br><span class="line"><span class="keyword">and</span> check_hole_number(n // <span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>2. A <em>mountain number</em> is a number in which the digits from right to left increase toward the middle of the number (not necessarily the exact middle digit). After the maximum digit has been reached, the digits to the left of that maximum digit should strictly decrease. Define the following function so that it properly identifies mountain numbers</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_mountain_number</span>(<span class="params">n</span>):</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; check_mountain_number(103)</span></span><br><span class="line"><span class="string">False</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; check_mountain_number(153)</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; check_mountain_number(3241968)</span></span><br><span class="line"><span class="string">False</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; check_mountain_number(2345986)</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">helper</span>(<span class="params">x, is_increasing</span>):</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> x // <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="keyword">if</span> is_increasing <span class="keyword">and</span> (x % <span class="number">10</span>) &lt; ((x // <span class="number">10</span>) % <span class="number">10</span>):</span><br><span class="line"><span class="keyword">return</span> helper(x // <span class="number">10</span>, is_increasing)</span><br><span class="line"><span class="keyword">return</span> (x % <span class="number">10</span>) &gt; ((x // <span class="number">10</span>) % <span class="number">10</span>) <span class="keyword">and</span> helper(x // <span class="number">10</span>, <span class="literal">False</span>)</span><br><span class="line"><span class="keyword">return</span> helper(n, <span class="literal">True</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Discussions </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Structure and Interpretation of Computer Programs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data Abstraction</title>
      <link href="2021/03/06/2021-03-06-Data-Abstraction/"/>
      <url>2021/03/06/2021-03-06-Data-Abstraction/</url>
      
        <content type="html"><![CDATA[<h1 id="data-abstraction">Data Abstraction</h1><p><a href="https://www.youtube.com/watch?v=DarG5Ff9d0k&amp;list=PL6BsET-8jgYUYq2VR6hWSGLw2RvCWwPiD">Video</a></p><p><a href="http://composingprograms.com/pages/22-data-abstraction.html">Textbook</a></p><h2 id="data-abstraction-1"><a href="https://www.youtube.com/watch?v=nzP3nJ2np8w&amp;list=PL6BsET-8jgYUYq2VR6hWSGLw2RvCWwPiD&amp;index=3">Data Abstraction</a></h2><p>All Programmers:</p><ul><li>Compound values combine other values together<ul><li>A date: a year, a month, and a day</li><li>A geographic position: latitude and longitude</li></ul></li></ul><p>Great Programmers:</p><ul><li><strong>Data abstraction</strong> lets us manipulate compound values as units</li><li>Isolate two parts of any program that uses data:<ul><li>How data are represented (as parts)</li><li>How data are manipulated (as units)</li></ul></li><li>Data abstraction: A methodology by which functions enforce an abstraction barrier between <strong><em>representation</em></strong> and <strong><em>use</em></strong></li></ul><h3 id="rational-numbers">Rational Numbers</h3><p><span class="math display">\[\frac{numerator}{denominator}\]</span></p><ul><li>Exact representation of fractions</li><li>A pair of integers</li><li>As soon as division occurs, the exact representation may be lost!</li></ul><p>Assume we can compose and decompose rational numbers:</p><ul><li>Constructor<ul><li>rational(n, d)<ul><li>returns a rational number x</li></ul></li></ul></li><li>Selectors<ul><li>numer(x)<ul><li>returns the numerator of x</li></ul></li><li>denom(x)<ul><li>returns the denominator of x</li></ul></li></ul></li></ul><h3 id="rational-number-arithmetic">Rational Number Arithmetic</h3><p>Example: <span class="math display">\[\frac{3}{2} * \frac{3}{5} = \frac{9}{10} \\\frac{3}{2} + \frac{3}{5} = \frac{21}{10}\]</span> General Form: <span class="math display">\[\frac{nx}{dx} * \frac{ny}{dy} = \frac{nx*ny}{dx*dy}\\\frac{nx}{dx} * \frac{ny}{dy} = \frac{nx*dy + ny*dx}{dx*dy}\]</span></p><h3 id="rational-number-arithmetic-implementation">Rational Number Arithmetic Implementation</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Rational arithmetic</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mul_rational</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> rational(numer(x) * numer(y), denom(x) * denom(y))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_rational</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    nx, dx = numer(x), denom(x)</span><br><span class="line">    ny, dy = numer(y), denom(y)</span><br><span class="line">    <span class="keyword">return</span> rational(nx * dy + ny * dx, dx * dy)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_rational</span>(<span class="params">x</span>):</span></span><br><span class="line">    print(numer(x), <span class="string">&#x27;/&#x27;</span>, denom(x))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rationals_are_equal</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> numer(x) * denom(y) == numer(y) * denom(x)</span><br></pre></td></tr></table></figure><p>These functions implement an abstract representation for rational numbers:</p><ul><li>rational(n, d) returns a rational number x</li><li>numer(x) returns the numerator of x</li><li>denom(x) returns the denominator of x</li></ul><h2 id="pairs"><a href="https://www.youtube.com/watch?v=ptOghgWvAD0&amp;list=PL6BsET-8jgYUYq2VR6hWSGLw2RvCWwPiD&amp;index=4">Pairs</a></h2><h3 id="representing-pairs-using-lists">Representing Pairs Using Lists</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># A list literal: Comma-separated expressions in brackets</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pair = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pair</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># &quot;Unpacking&quot; a list</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x, y = pair</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Element selection using the selection operator</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pair[<span class="number">0</span>]</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pair[<span class="number">1</span>]</span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Element selection function</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> operator <span class="keyword">import</span> getitem</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getitem(pair, <span class="number">0</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getitem(pair, <span class="number">1</span>)</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="representing-rational-numbers">Representing Rational Numbers</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Constructor and selectors</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rational</span>(<span class="params">n, d</span>):</span></span><br><span class="line"> <span class="string">&quot;&quot;&quot;Construct a rational number that represents N/D.&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">return</span> [n, d] <span class="comment"># Construct a list</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">numer</span>(<span class="params">x</span>):</span></span><br><span class="line"> <span class="string">&quot;&quot;&quot;Return the numerator of rational number X.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x[<span class="number">0</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">denom</span>(<span class="params">x</span>):</span></span><br><span class="line"> <span class="string">&quot;&quot;&quot;Return the denominator of rational number X.&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">return</span> x[<span class="number">1</span>] <span class="comment"># Select item from a lis</span></span><br></pre></td></tr></table></figure><h3 id="reducing-to-lowest-terms">Reducing to Lowest Terms</h3><p><strong>Example</strong>: <span class="math display">\[\frac{3}{2} * \frac{5}{3} = \frac{15}{6} = \frac{5}{3}\]</span></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Improved specification</span></span><br><span class="line"><span class="keyword">from</span> fractions <span class="keyword">import</span> gcd</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rational</span>(<span class="params">n, d</span>):</span> <span class="comment"># Greatest common divisor</span></span><br><span class="line"> <span class="string">&quot;&quot;&quot;Construct a rational that represents n/d in lowest terms.&quot;&quot;&quot;</span></span><br><span class="line">g = gcd(n, d)</span><br><span class="line">    <span class="keyword">return</span> [n//g, d//g]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">numer</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the numerator of rational number X in lowest terms and having</span></span><br><span class="line"><span class="string">    the sign of X.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">denom</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the denominator of rational number X in lowest terms and positive.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Functional implementation</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rational</span>(<span class="params">n, d</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;A representation of the rational number N/D.&quot;&quot;&quot;</span></span><br><span class="line">    g = gcd(n, d)</span><br><span class="line">    n, d = n//g, d//g</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">select</span>(<span class="params">name</span>):</span></span><br><span class="line">        <span class="keyword">if</span> name == <span class="string">&#x27;n&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> n</span><br><span class="line">        <span class="keyword">elif</span> name == <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> d</span><br><span class="line">    <span class="keyword">return</span> select</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">numer</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the numerator of rational number X in lowest terms and having</span></span><br><span class="line"><span class="string">    the sign of X.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x(<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">denom</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the denominator of rational number X in lowest terms and positive.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x(<span class="string">&#x27;d&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="abstraction-barriers"><a href="https://www.youtube.com/watch?v=7zu30DhJLKU&amp;list=PL6BsET-8jgYUYq2VR6hWSGLw2RvCWwPiD&amp;index=5">Abstraction Barriers</a></h2><h3 id="abstraction-barriers-1">Abstraction Barriers</h3><p><img src="/images/CS61A/1431438.png" /></p><h3 id="violating-abstraction-barriers-510">Violating Abstraction Barriers 5:10</h3><p><img src="/images/CS61A/143143.png" /></p><h2 id="data-representations"><a href="https://www.youtube.com/watch?v=NgL6JsQNTPg&amp;list=PL6BsET-8jgYUYq2VR6hWSGLw2RvCWwPiD&amp;index=6">Data Representations</a></h2><h3 id="what-are-data">What are Data?</h3><ul><li>We need to guarantee that constructor and selector functions work together to specify the right behaviour</li><li>Behaviour condition: If we construct rational number x from numerator n and denominator d, then numer(x)/denom(x) must equal n/d</li><li>Data abstraction uses selectors and constructors to define behaviour</li><li>If behaviour conditions are met, then the representation is valid</li></ul><p><strong>You can recognize an abstract data representation by its behaviour</strong></p><h3 id="rationals-implemented-as-functions">Rationals Implemented as Functions</h3><p><img src="/images/CS61A/1431430.png" /></p><h2 id="dictionaries"><a href="https://www.youtube.com/watch?v=4sZQtQCZ-x0&amp;list=PL6BsET-8jgYUYq2VR6hWSGLw2RvCWwPiD&amp;index=7">Dictionaries</a></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Dicts</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dict_demos</span>():</span></span><br><span class="line">    numerals = &#123;<span class="string">&#x27;I&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;V&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;X&#x27;</span>: <span class="number">10</span>&#125;</span><br><span class="line">    numerals[<span class="string">&#x27;X&#x27;</span>]</span><br><span class="line">    numerals.values()</span><br><span class="line">    <span class="built_in">list</span>(numerals.values())</span><br><span class="line">    <span class="built_in">sum</span>(numerals.values())</span><br><span class="line">    <span class="built_in">dict</span>([(<span class="number">3</span>, <span class="number">9</span>), (<span class="number">4</span>, <span class="number">16</span>), (<span class="number">5</span>, <span class="number">25</span>)])</span><br><span class="line">    numerals.get(<span class="string">&#x27;X&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">    numerals.get(<span class="string">&#x27;X-ray&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">    &#123;x: x*x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,<span class="number">6</span>)&#125;</span><br><span class="line"></span><br><span class="line">    &#123;<span class="number">1</span>: <span class="number">2</span>, <span class="number">1</span>: <span class="number">3</span>&#125;</span><br><span class="line">    &#123;[<span class="number">1</span>]: <span class="number">2</span>&#125;</span><br><span class="line">    &#123;<span class="number">1</span>: [<span class="number">2</span>]&#125;</span><br></pre></td></tr></table></figure><h3 id="limitations-on-dictionaries">Limitations on Dictionaries</h3><p>Dictionaries are <strong>unordered</strong> collections of key-value pairs</p><p>Dictionary keys do have two restrictions:</p><ul><li>A key of a dictionary <strong>cannot be</strong> a list or a dictionary (or any mutable type)</li><li>Two <strong>keys cannot be equal</strong>; There can be at most one value for a given key</li></ul><p>This first restriction is tied to Python's underlying implementation of dictionaries</p><p>The second restriction is part of the dictionary abstraction</p><p>If you want to associate multiple values with a key, store them all in a sequence value</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Structure and Interpretation of Computer Programs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Discussion 4</title>
      <link href="2021/03/05/2021-03-05-Discussion-4---(E)ER-to-Relational-Model/"/>
      <url>2021/03/05/2021-03-05-Discussion-4---(E)ER-to-Relational-Model/</url>
      
        <content type="html"><![CDATA[<h1 id="eer-to-relational-model">(E)ER to Relational Model</h1><p><a href="https://recordings.reu1.blindsidenetworks.com/vub/1de88b7bb42489772156b621280549001d079e6f-1614948775792/capture/">Video</a></p><h2 id="aggregate-function-Ꮆ">Aggregate Function (Ꮆ)</h2><table><thead><tr class="header"><th>loginId</th><th>name</th><th>dateTime</th><th>device</th><th>duration</th></tr></thead><tbody><tr class="odd"><td>1</td><td>Maxim Van de Wynckel</td><td>2020-03-01 12:12</td><td>Android</td><td>5</td></tr><tr class="even"><td>2</td><td>Yunior Pacheco Correa</td><td>2020-03-01 13:58</td><td>iOS</td><td>10</td></tr><tr class="odd"><td>3</td><td>Maxim Van de Wynckel</td><td>2020-03-02 10:01</td><td>Windows</td><td>8</td></tr><tr class="even"><td>4</td><td>Maxim Van de Wynckel</td><td>2020-03-02 10:12</td><td>macOS</td><td>3</td></tr><tr class="odd"><td>5</td><td>Bas Ketsman</td><td>2020-03-03 06:04</td><td>Windows</td><td>20</td></tr><tr class="even"><td>6</td><td>Yunior Pacheco Correa</td><td>2020-03-04 10:58</td><td>macOS</td><td>9</td></tr></tbody></table><ul><li><p>Get the amount of times each user logged in</p><p>π<sub>name,totalLogins</sub>(<sub>nameᎶcount(loginId) as totalLogins </sub>(Logins))</p></li><li><p>Get the amount of logins for each device type</p><p>π<sub>device,totalLogins</sub>(<sub>deviceᎶcount(loginId) as totalLogins</sub>(Logins))</p></li><li><p>Get the total amount of minutes each user spent while logged in</p><p>π<sub>name,totalTime</sub>(<sub>nameᎶsum(duration) as totalTime</sub>(Logins))</p></li><li><p>Get the average login duration</p><p>Ꮆ<sub>avg(duration)</sub></p></li></ul><figure><img src="/images/DB/1921470.png" alt="" /><figcaption>(E)ER to Relational Model</figcaption></figure><p>Start by converting the entities and one-to-one one relations:</p><ul><li>Actor(<strong>firstName, lastName</strong>)</li><li>Movie(<strong>title, year</strong>)</li><li>Producer(<strong>firstName, lastName</strong>)</li></ul><p>Next, create schemas for the * relations:</p><ul><li><strong>MovieActors(title, year, firstName, lastName)</strong></li><li><strong>MovieProducers(title, year, firstName, lastName)</strong></li></ul><p><img src="/images/DB/1921471.png" /></p><p>Start by converting the entities and one-to-one one relations:</p><ul><li>Recipe(<strong>rname, author</strong>)</li><li>Ingredient(<strong>iname</strong>, calories)</li><li>RecipeStep(<strong>rname, author, stepNr,</strong> instructions)</li></ul><p><em>Note: the name attribute of ingredients and recipes is renamed to avoid confusion</em></p><ul><li>RecipeIngredient(<strong>rname, author, iname,</strong> weight, unit)</li></ul><h2 id="twitter-description">Twitter: Description</h2><p>Twitter is a platform where users can register with a unique username (their Twitter handle). When logged in, they can post messages called ’ Tweets ’ that are max 120 characters long and optionally can contain an image, video or poll. However, a tweet can only contain one interactive component (either an image, video or poll). These tweets are uniquely identified by a number and can be liked by other users. Any user can reply to tweets and even ’ retweet ’/repost the tweet on their own homepage. Users can choose to follow other users to get notified on their activity.</p><figure><img src="/images/DB/1921472.png" alt="" /><figcaption>Twitter: (E)ER</figcaption></figure><h3 id="step-7-reduce-the-eer-to-schemas">Step 7: Reduce the (E)ER to schemas</h3><p><strong>Create the user entity</strong></p><ul><li>User(<strong>handle</strong>, firstName, lastName, email)</li><li>Tweet(<strong>tweetUID</strong>, text, dateTime)</li></ul><p><strong>Create the relation ’author’</strong></p><ul><li>User(<strong>handle</strong>, firstName, lastName, email)</li><li>Tweet(<strong>tweetUID</strong>, <em>handle</em>, text, dateTime)</li><li>TweetLikes(<strong>tweetUID, handle</strong>, dateTime)</li></ul><p><strong>Create the ’replyTo’ relation</strong></p><ul><li>User(<strong>handle</strong>, firstName, lastName, email)</li><li>Tweet(<strong>tweetUID</strong>, <em>handle, parentUID</em>, text, dateTime)</li><li>TweetLikes(<strong>tweetUID, handle</strong>, dateTime)</li></ul><p><strong>Create the ’follow’ relation</strong></p><ul><li>User(<strong>handle</strong>, firstName, lastName, email)</li><li>UserFollowers(<strong>handle, followerHandle</strong>, dateTime)</li><li>Tweet(<strong>tweetUID</strong>, <em>handle, parentUID</em>, text, dateTime)</li><li>TweetLikes(<strong>tweetUID, handle,</strong> dateTime)</li></ul><p><strong>Create photo, video and retweet schemas</strong></p><ul><li>User(<strong>handle</strong>, firstName, lastName, email)</li><li>UserFollowers(<strong>handle, followerHandle</strong>, dateTime)</li><li>Tweet(<strong>tweetUID</strong>, <em>handle, parentUID</em>, text, dateTime) TweetLikes(<strong>tweetUID</strong>, <strong>handle</strong>, dateTime)</li><li>TweetPhoto(<strong>tweetUID</strong>, url)</li><li>TweetVideo(<strong>tweetUID</strong>, url, service)</li><li>TweetRetweet(<strong>tweetUID</strong>, <em>retweetUID</em>)</li></ul><p><em>Note: <a href="https://yintelligence.tech/2021/02/21/2021-02-21-Relational-Database-Design/#toc-heading-10">Lecture 4, Specialisation and Generalisation 20:25</a> - we would create a “Media” schema to enforce our disjoint ISA.</em></p><p><strong>Create the poll schemas</strong></p><ul><li>User(<strong>handle</strong>, firstName, lastName, email)</li><li>UserFollowers(<strong>handle</strong>, <strong>followerHandle</strong>, dateTime)</li><li>Tweet(<strong>tweetUID</strong>, handle, parentUID, text, dateTime)</li><li>TweetLikes(<strong>tweetUID</strong>, <strong>handle</strong>, dateTime)</li><li>TweetPhoto(<strong>tweetUID</strong>, url)</li><li>TweetVideo(<strong>tweetUID</strong>, url, service)</li><li>TweetRetweet(<strong>tweetUID</strong>, retweetUID)</li><li>TweetPoll(<strong>tweetUID</strong>, endDate)</li><li>TweetPollItem(<strong>tweetUID, optionNr</strong>, text)</li><li>TweetPollItemVote(<strong>tweetUID, optionNr, handle</strong>, dateTime)</li></ul><p><strong>Create the report schema</strong></p><ul><li>User(<strong>handle</strong>, firstName, lastName, email)</li><li>UserFollowers(<strong>handle, followerHandle</strong>, dateTime)</li><li>Tweet(<strong>tweetUID</strong>, handle, parentUID, text, dateTime)</li><li>TweetLikes(<strong>tweetUID, handle</strong>, dateTime)</li><li>TweetPhoto(<strong>tweetUID</strong>, url)</li><li>TweetVideo(<strong>tweetUID</strong>, url, service)</li><li>TweetRetweet(<strong>tweetUID</strong>, <em>retweetUID</em>)</li><li>TweetPoll(<strong>tweetUID</strong>, endDate)</li><li>TweetPollItem(<strong>tweetUID</strong>, optionNr, text)</li><li>TweetPollItemVote(<strong>tweetUID</strong>, <strong>optionNr</strong>, <strong>handle</strong>, dateTime)</li><li>TweetReport(<strong>tweetUID, handle, reason</strong>, dateTime, status)</li></ul><h2 id="exercise">Exercise</h2><h3 id="relational-algebra">1: Relational Algebra</h3><p>Given the following relational database:</p><ul><li>Employee(<u>person-name</u>, street, city)</li><li>Works(<u>person-name</u>, company-name, salary)</li><li>Company(<u>company-name</u>, city)</li><li>Manages(<u>person-name</u>, manager-name)</li></ul><p>Give an expression in relational algebra to express each of the following queries:</p><ol type="1"><li>Find the names of all employees who live in the same city and street as their managers.</li><li>Find the names of all employees in this database who do not work for ”First Bank Corporation”.</li><li>Find the names of all employees who earn more than every employee of ”Small Bank Corporation”.</li><li>Find those companies whose employees earn a higher salary, on average, than the average salary at “First Bank Corporation”.</li></ol><p><em>Note: Watch out, in this database we assume that employees work for only one company. We do not keep temporal aspects of contracts between companies and employees.</em></p><h4 id="solution">Solution</h4><ol type="1"><li><p><strong>Find the names of all employees who live in the same city and street as their managers.</strong></p><p>π<sub>person−name</sub>((Employee ⋈ Manages) ⋈ ρ<sub>E2(manager−name,street,city)</sub>(Employee))</p></li><li><p><strong>Find the names of all employees in this database who do not work for "First Bank Corporation".</strong></p><p>π<sub>person−name</sub>(σ<sub>company−name ≠ ”First Bank Corporation”</sub>(Works))</p></li><li><p><strong>Find the names of all employees who earn more than every employee of "Small Bank Corporation".</strong></p><p>MS ← Ꮆ<sub>max(salary) as max−sal−sbc</sub>(σ<sub>company−name=”Small Bank Corporation”</sub>(Works))</p><p>π<sub>person−name</sub>(σ<sub>salary &gt; max−sal−sbc</sub>(Works × MS))</p></li><li><p><strong>Find those companies whose employees earn a higher salary, on average, than the average salary at "First Bank Corporation".</strong></p><p>AS ← Ꮆ<sub>avg(salary) as avg−sal−fbc</sub>(σ<sub>company−name=”First Bank Corporation”</sub>(Works))</p><p>AS2 ←<sub>company−name Ꮆavg(salary) as avg−sal−comp</sub>(Works)</p><p>π<sub>company−name</sub>(σ<sub>avg−sal−comp &gt; avg−sal−fbc</sub>(AS2 × AS))</p></li></ol><h3 id="reduction-of-eer-to-relational-model">2: Reduction of (E)ER to Relational Model</h3><ol type="1"><li><p>Reduce the first ER model you made during the <a href="https://yintelligence.tech/2021/02/17/2021-02-17-Exercise-1-Entity-Relationship-Model/">first exercise session</a> (Video Rental Store) to the relational model.</p></li><li><p>Reduce the second ER model you made during the <a href="https://yintelligence.tech/2021/02/17/2021-02-17-Exercise-1-Entity-Relationship-Model/">first exercise session</a> (DIGI-BIKE) to the relational model.</p></li><li><p>Reduce the EER model you made during the <a href="https://yintelligence.tech/2021/02/20/2021-02-20-Exercise-2---Extended-Entity-Relationship-Model/">second exercise session</a> (Medical Database) to the relational model.</p><p><em>Note: You will have to find a way to model the ISA relationships, You can use the solutions of the first and second exercise session.</em></p></li></ol><h4 id="solution-1">Solution</h4><h5 id="video-store">1. Video store</h5><ul><li>Movie(<strong>catalogNr</strong>, releaseYear, title, category, dailyRate, nrOfCoppies)</li><li>Supplier(<strong>supplierNr</strong>, faxNumber, address, name, phoneNumber)</li><li>Copy(<strong>copyNr</strong>, status, catalogNr, supplierNr)</li><li>ContractCoppies(<strong>copyNr</strong>, <strong>contractNr</strong>)</li><li>Contract(<strong>contractNr</strong>, totalPrice, dateOut, dateBack, nrOfDays, memberNr)</li><li>Member(<strong>memberNr</strong>, birthDate, lastName, firstName, address, phoneNumber, dateJoined)</li></ul><h5 id="digi-bike">2. Digi-Bike</h5><ul><li>AnnualFee(<strong>year</strong>, amount)</li><li>Member(<strong>membershipNr</strong>, name, emailAddress, paidStatus)</li><li>Paid(<strong>membershipNr</strong>, <strong>year</strong>)</li><li>Request(<strong>membershipNr</strong>, <strong>date</strong>, minKM, maxKM, maxFee)</li><li>Race(<strong>name</strong>, date, startHour, fee, nrOfKM)</li><li>MatchesWith(<strong>membershipNr</strong>, <strong>date</strong>, <strong>name</strong>, emailSendDate)</li></ul><h5 id="medical-database">3. Medical Database</h5><p><em>The reduction of ISA relationships can be done in different ways. Sometimes it is as easy as adding a column to the schema, sometimes you create different schemas and sometimes you create a relation to another schema.</em></p><ul><li><p>Person(<strong>ssn</strong>, address, telephoneNumber, birthDate)</p></li><li><p>Patient(<strong>ssn</strong>, name)</p></li><li><p>ContactPerson(<strong>ssn</strong>, email)</p></li><li><p>MedicalPerson(<strong>ssn</strong>, medicalperson-ssn)</p><p><em>The intermediate MedicalPerson still allows us to join data from patient to a medical person</em></p></li><li><p>Doctor(<strong>medicalperson-ssn</strong>, address, telephoneNumber, birthDate, name)</p><p><em>We copy the data from person to make sure that we can not have foreign key contraints (<a href="https://yintelligence.tech/2021/02/21/2021-02-21-Relational-Database-Design/#toc-heading-10">Lecture 4, Specialisation and Generalisation 20:25</a>)</em></p></li><li><p>DoctorSpecialisations(<strong>medicalperson-ssn</strong>, specialisation)</p></li><li><p>Apothecary(<strong>medicalperson-ssn</strong>, address, telephoneNumber, birthDate)</p></li><li><p>Prescription(<strong>ssn</strong>, <strong>time</strong>, <strong>date</strong>)</p></li><li><p>Medicine(<strong>medicine-name</strong>, formula)</p></li><li><p>PharmaceuticalCompany(<strong>pharmaceuticalcompany-name</strong>, address, telephoneNumber, contactpersonssn)</p></li><li><p>Pharmacy(<strong>pharmacy-address</strong>, medicalperson-ssn)</p><p><em>The medicalperson-ssn is a link to Apothecary (1 for each pharmacy)</em></p></li><li><p>LongtermContract(<strong>pharmaceuticalcompany-name</strong>, <strong>pharmacy-address</strong>, <strong>startDate</strong>, <strong>endDate</strong>, text)</p></li><li><p>DoctorPrescriptions(<strong>medicalperson-ssn</strong>, <strong>ssn</strong>, <strong>time</strong>, <strong>date</strong>)</p></li><li><p>PrescriptionMedicine(<strong>ssn</strong>, <strong>time</strong>, <strong>date</strong>, <strong>medicine-name</strong>, dose)</p></li><li><p>PharmacyMedicine(<strong>pharmacy-addres</strong>s,<strong>medicine-name</strong>, price)</p></li><li><p>MedicineManufacturers(<strong>medicine-name</strong>, <strong>pharmaceuticalcompmany-name</strong>)</p></li><li><p>LongtermContractMedicines(<strong>pharmaceuticalcompany-name</strong>, <strong>pharmacy-address</strong>, <strong>startDate</strong>, <strong>endDate</strong>, <strong>medicine-name</strong>)</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Discussions </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Databases </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linked Lists &amp; Arrays</title>
      <link href="2021/03/05/2021-03-05-Linked-Lists-&amp;-Arrays/"/>
      <url>2021/03/05/2021-03-05-Linked-Lists-&amp;-Arrays/</url>
      
        <content type="html"><![CDATA[<h1 id="linked-lists-arrays">Linked Lists &amp; Arrays</h1><p><a href="https://www.youtube.com/watch?v=ZHUZuADGLkM">Video</a></p><h2 id="more-practice-with-linked-lists">More Practice with Linked Lists</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SLList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">IntNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> item;</span><br><span class="line">        <span class="keyword">public</span> IntNode next;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">IntNode</span><span class="params">(<span class="keyword">int</span> item, IntNode next)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.item = item;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> IntNode first;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        first = <span class="keyword">new</span> IntNode(x, first);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol type="a"><li>Implement SLList.insert which takes in an integer x and an integer position. It inserts x at the given position. If position is after the end of the list, insert the new node at the end.</li></ol><p>For example, if the SLList is 5 → 6 → 2, insert(10, 1) results in 5 → 10 → 6 → 2 and if the SLList is 5 → 6 → 2, insert(10, 7) results in 5 → 6 → 2 → 10. Additionally, for this problem assume that position is a non-negative integer.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> item, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (first == <span class="keyword">null</span> || position == <span class="number">0</span>) &#123;</span><br><span class="line">        addFirst(item)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    IntNode currentNode = first;</span><br><span class="line">    <span class="keyword">while</span> (position &gt; <span class="number">1</span> &amp;&amp; currentNode.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        position--;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">    IntNode newNode = <span class="keyword">new</span> IntNode(item, currentNode.next);</span><br><span class="line">    currentNode.next = newNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2" type="a"><li>Add another method to SLList that recursively removes all nodes that contain a certain item. This method takes in an integer x and destructively changes the list.</li></ol><p>For example, if the SLList is 3 → 5 → 4 → 5 → 6 → 5, removeItem(5) results in 3 → 4 → 6.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeItem</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    first = removeItemHelper(x, first);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> IntNode <span class="title">removeItemHelper</span><span class="params">(<span class="keyword">int</span> x, IntNode current)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (current == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (current.item == x) &#123;</span><br><span class="line">        <span class="keyword">return</span> removeItemHelper(x, current.next);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        current.next = removeItemHelper(x, current.next);</span><br><span class="line">        <span class="keyword">return</span> current;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3" type="a"><li><em>Extra</em>: Add another method to the SLList class that reverses the elements. Do this using the existing IntNode objects (you should not use new).</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (first == <span class="keyword">null</span> || first.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    IntNode ptr = first.next;</span><br><span class="line">    first.next = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (ptr != <span class="keyword">null</span>) &#123;</span><br><span class="line">        IntNode temp = ptr.next;</span><br><span class="line">        ptr.next = first;</span><br><span class="line">        first = ptr;</span><br><span class="line">        ptr = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="arrays">Arrays</h2><ol type="a"><li>Consider a method that inserts an <strong>int</strong> item into an <strong>int</strong>[] arr at the given position. The method should return the resulting array. For example, if arr = [5, 9, 14, 15], item = 6, and position = 2, then the method should return [5, 9, 6, 14, 15]. If position is past the end of the array, insert item at the end of the array. Assume we will only ever pass in a non-negative position.</li></ol><p>Is it possible to write a version of this method that returns void and changes arr in place (i.e., destructively)? <em>Hint</em>: These arrays are filled meaning an array containing n elements will have length n.</p><p><strong>No, because arrays have a fixed size, so to add an element, you need to create a new array.</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] insert(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> item, <span class="keyword">int</span> position) &#123;</span><br><span class="line">    <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length + <span class="number">1</span>];</span><br><span class="line">    position = Math.min(arr.length, position);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; position; i++) &#123;</span><br><span class="line">        result[i] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    result[position] = item;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = position; i &lt; arr.length; i++) &#123;</span><br><span class="line">        result[i + <span class="number">1</span>] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2" type="a"><li>Write a non-destructive method replicate(<strong>int</strong>[] arr) that replaces the number at index i with arr[i] copies of itself. For example, replicate([3, 2, 1]) would return [3, 3, 3, 2, 2, 1]. For this question assume that all elements of the array are positive.</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] replicate(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">    <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> item : arr) &#123;</span><br><span class="line">        total += item;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[total];</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> item : arr) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> counter = <span class="number">0</span>; counter &lt; item; counter++) &#123;</span><br><span class="line">            result[i] = item;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.youtube.com/watch?v=MNBWnkOva0E">Video</a></p><h2 id="flatten">Flatten</h2><p>Write a method flatten that takes in a 2-D array x and returns a 1-D array that contains all of the arrays in x concatenated together.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">For example, flatten(&#123;&#123;1, 2, 3&#125;, &#123;&#125;, &#123;7, 8&#125;&#125;) should return &#123;1, 2, 3, 7, 8&#125;. (Summer 2016 MT1)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] flatten(<span class="keyword">int</span>[][] x) &#123;</span><br><span class="line">    <span class="keyword">int</span> totalLength = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span>[] arr: x) &#123;</span><br><span class="line">        totalLength += arr.length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[totalLength];</span><br><span class="line">    <span class="keyword">int</span> aIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span>[] arr: x) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> value: arr) &#123;</span><br><span class="line">            a[aIndex] = value;</span><br><span class="line">            aIndex++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Alternate Solutions: */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] flatten(<span class="keyword">int</span>[][] x) &#123;</span><br><span class="line">    <span class="keyword">int</span> totalLength = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span>[] arr: x) &#123;</span><br><span class="line">        totalLength += arr.length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[totalLength];</span><br><span class="line">    <span class="keyword">int</span> aIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span>[] arr: x) &#123;</span><br><span class="line">        System.arraycopy(arr, <span class="number">0</span>, a, aIndex, arr.length);</span><br><span class="line">        aIndex += arr.length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] flatten(<span class="keyword">int</span>[][] x) &#123;</span><br><span class="line">    <span class="keyword">int</span> totalLength = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x.length; i++) &#123;</span><br><span class="line">        totalLength += x[i].length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span>[] a = newint[totalLength];</span><br><span class="line">    <span class="keyword">int</span> aIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; x[i].length; j++) &#123;</span><br><span class="line">            a[aIndex] = x[i][j];</span><br><span class="line">            aIndex++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="skippify">Skippify</h2><p>Suppose we have the following IntList class, as defined in lecture and lab, with an added skippify function. Suppose that we define two IntLists as follows</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">IntList A = IntList.list(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line">IntList B = IntList.list(<span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>Fill in the method skippify such that the result of calling skippify on A and B are as below:</p><ul><li>After calling A.skippify(), A: (1, 3, 6, 10)</li><li>After calling B.skippify(), B: (9, 7, 4)</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> first;</span><br><span class="line">    <span class="keyword">public</span> IntList rest;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123; ... &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IntList <span class="title">list</span><span class="params">(<span class="keyword">int</span>... args)</span> </span>&#123; ... &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">skippify</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        IntList p = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">/* Fill your answer from here */</span></span><br><span class="line">            IntList next = p.rest;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                next = next.rest;</span><br><span class="line">            &#125;</span><br><span class="line">            p.rest = next;</span><br><span class="line">            p = p.rest;</span><br><span class="line">                n++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Explanation</strong>:</p><p>Looking at IntList A, we only need to change the rest attribute of IntList instances 1, 3, and 6.</p><p>To achieve this, we will use the <strong>for</strong> loop to find the new rest attribute (which we will store in next) of the current IntList instance (p).</p><p>The outer <strong>while</strong> loop enables us to repeat these actions for, in our case, IntList instances 3 and 6.</p><p>The <strong>int</strong> n will increment by one each iteration and gives us the number of iterations in the for loop, i.e. how many IntList instances to skip.</p><p>Finally, the <strong>if</strong> check accounts allows us to exit the for loop early if we ever hit the end of the Linked List</p><h2 id="even-odd">Even Odd</h2><p>Implement the method evenOdd by destructively changing the ordering of a given IntList so that even indexed links <strong>precede</strong> odd indexed links.</p><p>For instance, if lst is defined as IntList.list(0, 3, 1, 4, 2, 5), evenOdd(lst) would modify lst to be IntList.list(0, 1, 2, 3, 4, 5).</p><p><strong>Hint</strong>: Make sure your solution works for lists of odd and even lengths.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">evenOdd</span><span class="params">(IntList lst)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lst == <span class="keyword">null</span> || lst.rest == <span class="keyword">null</span> || lst.rest.rest == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    IntList second = lst.rest;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!(index % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; (lst.rest == <span class="keyword">null</span> || lst.rest.rest == <span class="keyword">null</span>))) &#123;</span><br><span class="line">        IntList temp = lst.rest;</span><br><span class="line">        lst.rest = lst.rest.rest;</span><br><span class="line">        lst = temp;</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line">    lst.rest = second;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Explanation</strong>:</p><p>For any linked list, observe that we simply want to change the rest attribute of each IntList instance to skip an IntList instance. Looking at lst, we want to link 0 to 1, 3 to 4, and so on.</p><p>This will constitute the work of the body of the <strong>while</strong> loop, so we just to need to figure out how to link the last even indexed IntList instance to the first odd indexed IntList instance.</p><p>To keep track of the first odd indexed IntList instance, we can use second.</p><p>Now, we just need to exit the <strong>while</strong> loop when we are at the last even indexed IntList instance.</p><p>This occurs when the index is even and we are either at the second to last element (lst.rest. rest == <strong>null</strong>) or the last element (lst.rest == <strong>null</strong>)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Alternate Solutions: */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">evenOdd</span><span class="params">(IntList lst)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lst == <span class="keyword">null</span> || lst.rest == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    IntList second = lst.rest;</span><br><span class="line">    <span class="keyword">while</span> (lst.rest != <span class="keyword">null</span> &amp;&amp; lst.rest.rest != <span class="keyword">null</span>) &#123;</span><br><span class="line">        IntList t = lst.rest;</span><br><span class="line">        lst.rest = t.rest;</span><br><span class="line">        lst = lst.rest;</span><br><span class="line">        t.rest = lst.rest;</span><br><span class="line">    &#125;</span><br><span class="line">    lst.rest = second;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Discussions </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structures </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Inheritance, Implements</title>
      <link href="2021/03/05/2021-03-05-Inheritance,-Implements/"/>
      <url>2021/03/05/2021-03-05-Inheritance,-Implements/</url>
      
        <content type="html"><![CDATA[<h1 id="inheritance-implements">Inheritance, Implements</h1><p><a href="https://www.youtube.com/playlist?list=PL8FaHk7qbOD6km6LlaHLWgRl9SbhlTHk2">Video</a></p><p><a href="https://joshhug.gitbooks.io/hug61b/content/chap4/chap41.html">Textbook</a></p><h2 id="the-problem"><a href="https://www.youtube.com/watch?v=IaEq_fogI08&amp;list=PL8FaHk7qbOD6km6LlaHLWgRl9SbhlTHk2&amp;index=2&amp;t=2s">The Problem</a></h2><h3 id="alist-and-sllist">AList and SLList</h3><p>After adding the insert methods from discussion 3, our AList and SLList classes have the following methods (exact same method signatures for both classes).</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AList</span>&lt;<span class="title">Item</span>&gt;</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AList</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Item x, <span class="keyword">int</span> position)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(Item x)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(Item i)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Item <span class="title">getFirst</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Item <span class="title">getLast</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Item <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span>  <span class="title">size</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Item <span class="title">removeLast</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class SLList&lt;Blorp&gt;</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SLList</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SLList</span><span class="params">(Blorp x)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Blorp item, <span class="keyword">int</span> position)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(Blorp x)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(Blorp x)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Blorp <span class="title">getFirst</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Blorp <span class="title">getLast</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Blorp <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span>   <span class="title">size</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Blorp <span class="title">removeLast</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="using-alists-and-sllists-wordutils.java">Using ALists and SLLists: WordUtils.java</h3><p>Suppose we’re writing a library to manipulate lists of words. Might want to write a function that finds the longest word from a list of words:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">longest</span><span class="params">(SLList&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> maxDex = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i += <span class="number">1</span>) &#123;</span><br><span class="line">     String longestString = list.get(maxDex);</span><br><span class="line">     String thisString = list.get(i);</span><br><span class="line">     <span class="keyword">if</span> (thisString.length() &gt; longestString.length()) &#123;</span><br><span class="line">        maxDex = i;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> list.get(maxDex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If we want longest to be able to handle ALists, what changes do we need to make?</p><ul><li>Change the (SLList&lt;String&gt; list) to <strong>AList&lt;String&gt; list</strong></li></ul><h3 id="method-overloading-in-java">Method Overloading in Java</h3><p>Java allows multiple methods with same name, but different parameters.</p><ul><li>This is called method <strong>overloading</strong>.</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">longest</span><span class="params">(AList&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">longest</span><span class="params">(SLList&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="the-downsides">The Downsides</h3><p>While overloading works, it is a bad idea in the case of longest. Why?</p><ul><li>Code is virtually identical. Aesthetically gross.</li><li>Won’t work for future lists. If we create a QList class, have to make a third method.</li><li>Harder to <strong>maintain</strong>.<ul><li>Example: Suppose you find a bug in one of the methods. You fix it in the SLList version, and forget to do it in the AList version.</li></ul></li></ul><h2 id="hypernyms-hyponyms-and-interface-inheritance">Hypernyms, Hyponyms, and Interface Inheritance</h2><h3 id="hypernyms"><a href="https://www.youtube.com/watch?v=S-wcA94Oekc&amp;list=PL8FaHk7qbOD6km6LlaHLWgRl9SbhlTHk2&amp;index=3">Hypernyms</a></h3><p>In natural languages (<a href="https://en.wikipedia.org/wiki/Hyponymy_and_hypernymy">English</a>, Spanish, <a href="https://zh.wikipedia.org/wiki/%E4%B8%8A%E4%B8%8B%E4%BD%8D%E9%97%9C%E4%BF%82">Chinese</a>, Tagalog, etc.), we have a concept known as a “hypernym” to deal with this problem.</p><ul><li>Dog is a “hypernym” of poodle, malamute, yorkie, etc.</li></ul><h3 id="hypernym-and-hyponym">Hypernym and Hyponym</h3><p>We use the word hyponym for the opposite type of relationship.</p><ul><li>“dog”: Hypernym of “poodle”, “malamute”, “dachshund”, etc.</li><li>“poodle”: Hyponym of “dog”</li></ul><p>Hypernyms and hyponyms comprise a hierarchy.</p><ul><li>A dog “is-a” canine.</li><li>A canine “is-a” carnivore.</li><li>A carnivore “is-an” animal.</li></ul><p><img src="/images/CS61B/7550160.png" /></p><h3 id="simple-hyponymic-relationships-in-java"><a href="https://www.youtube.com/watch?v=hoYMyvWjCTg&amp;list=PL8FaHk7qbOD6km6LlaHLWgRl9SbhlTHk2&amp;index=4">Simple Hyponymic Relationships in Java</a></h3><p>SLLists and ALists are both clearly some kind of “list”.</p><ul><li>List is a hypernym of SLList and AList.</li></ul><p>Expressing this in Java is a two-step process:</p><ul><li>Step 1: Define a reference type for our hypernym (List61B.java).</li><li>Step 2: Specify that SLLists and ALists are hyponyms of that type.</li></ul><h4 id="step-1-defining-a-list61b">Step 1: Defining a List61B</h4><p>We’ll use the new keyword <strong>interface</strong> instead of <strong>class</strong> to define a List61B.</p><ul><li>Idea: Interface is a specification of <u><strong>what</strong></u> a List is able to do, <u><strong>not how</strong></u> to do it.</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">List61B</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(Item x)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(Item y)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">getFirst</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">getLast</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">removeLast</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Item x, <span class="keyword">int</span> position)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span>  <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Private is not allowed here*/</span></span><br></pre></td></tr></table></figure><h4 id="step-2-implementing-the-list61b-interface">Step 2: Implementing the List61B Interface</h4><p>We’ll now:</p><ul><li>Use the new <strong>implements</strong> keyword to tell the Java compiler that SLList and AList are hyponyms of List61B.</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AList</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">implements</span> <span class="title">List61B</span>&lt;<span class="title">Item</span>&gt;</span>&#123;</span><br><span class="line">   ...</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(Item x)</span> </span>&#123;    </span><br><span class="line">      ...</span><br></pre></td></tr></table></figure><h4 id="adjusting-wordutils.java">Adjusting WordUtils.java</h4><p>We can now adjust our longest method to work on either kind of list:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">longest</span><span class="params">(List61B&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> maxDex = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i += <span class="number">1</span>) &#123;</span><br><span class="line">     String longestString = list.get(maxDex);</span><br><span class="line">     String thisString = list.get(i);</span><br><span class="line">     <span class="keyword">if</span> (thisString.length() &gt; longestString.length()) &#123;</span><br><span class="line">        maxDex = i;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> list.get(maxDex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="overriding-vs.-overloading"><a href="https://www.youtube.com/watch?v=iOiNQ68H3Gk&amp;list=PL8FaHk7qbOD6km6LlaHLWgRl9SbhlTHk2&amp;index=5">Overriding vs. Overloading</a></h2><h3 id="method-overriding">Method Overriding</h3><p>If a “subclass” has a method with the exact same signature as in the “superclass”, we say the subclass <strong>overrides</strong> the method.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">List61B</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(Item y)</span></span>;</span><br><span class="line">    ...</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AList</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">implements</span> <span class="title">List61B</span>&lt;<span class="title">Item</span>&gt;</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(Item x)</span> </span>&#123;    </span><br><span class="line">      ...   </span><br></pre></td></tr></table></figure><p>AList <strong>overrides</strong> addLast(Item)</p><h3 id="method-overriding-vs.-overloading">Method Overriding vs. Overloading</h3><p>If a “subclass” has a method with the exact same signature as in the “superclass”, we say the subclass <strong>overrides</strong> the method.</p><ul><li>Animal’s subclass Pig overrides the makeNoise() method.</li><li>Methods with the same name but different signatures are <strong>overloaded</strong>.</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Pig overrides makeNoise() */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeNoise</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pig</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeNoise</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.print(“oink”);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* makeNoise is overloaded */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeNoise</span><span class="params">(Dog x)</span> </span>&#123;</span><br><span class="line">      ...  </span><br><span class="line"></span><br><span class="line"><span class="comment">/* abs is overloaded */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Math</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span>    <span class="title">abs</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function">   <span class="keyword">public</span> <span class="keyword">double</span> <span class="title">abs</span><span class="params">(<span class="keyword">double</span> a)</span></span></span><br></pre></td></tr></table></figure><h4 id="optional-step-2b-adding-the-override-annotation">Optional Step 2B: Adding the <span class="citation" data-cites="Override">@Override</span> Annotation</h4><p>In this course, we’ll always mark every overriding method with the <strong><span class="citation" data-cites="Override">@Override</span></strong> annotation.</p><ul><li>Example: Mark AList.java’s overriding methods with <strong><span class="citation" data-cites="Override">@Override</span></strong>.</li><li>The only effect of this tag is that the code won’t compile if it is not actually an overriding method.</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AList</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">implements</span> <span class="title">List61B</span>&lt;<span class="title">Item</span>&gt;</span>&#123;</span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(Item x)</span> </span>&#123;    </span><br><span class="line">      ...   </span><br></pre></td></tr></table></figure><h3 id="method-overriding-1">Method Overriding</h3><p>If a subclass has a method with the exact same signature as in the superclass, we say the subclass <strong>overrides</strong> the method.</p><ul><li>Even if you don’t write <span class="citation" data-cites="Override">@Override</span>, subclass still overrides the method.</li><li><span class="citation" data-cites="Override">@Override</span> is just an optional reminder that you’re overriding.</li></ul><p>Why use <span class="citation" data-cites="Override">@Override</span>?</p><ul><li>Main reason: Protects against typos.<ul><li>If you say <span class="citation" data-cites="Override">@Override</span>, but it the method isn’t actually overriding anything, you’ll get a compile error.</li><li>e.g. <strong>public</strong> void addLats(Item x)</li></ul></li><li>Reminds programmer that method definition came from somewhere higher up in the inheritance hierarchy.</li></ul><h2 id="interface-inheritance"><a href="https://www.youtube.com/watch?v=hwU0Hx1VTBw&amp;list=PL8FaHk7qbOD6km6LlaHLWgRl9SbhlTHk2&amp;index=6">Interface Inheritance</a></h2><p>Specifying the capabilities of a subclass using the <strong>implements</strong> keyword is known as <strong><u>interface inheritance</u></strong>.</p><ul><li>Interface: The list of all method signatures.</li><li>Inheritance: The subclass “inherits” the interface from a superclass.</li><li>Specifies what the subclass can do, but not how.</li><li>Subclasses <u>must</u> override all of these methods!<ul><li>Will fail to compile otherwise.</li></ul></li><li>Such relationships can be multi-generational.<ul><li>Figure: Interfaces in white, classes in green.</li><li>We’ll talk about this in a later lecture.</li></ul></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">List61B</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(Item x)</span></span>;</span><br><span class="line">   ...</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">proo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* If AList doesn’t have a proo() method, AList will not compile! */</span></span><br></pre></td></tr></table></figure><p><img src="/images/CS61B/7550161.png" /></p><h3 id="copying-the-bits">Copying the Bits</h3><p>Two seemingly contradictory facts:</p><ul><li>#1: When you set x = y or pass a parameter, you’re just copying the bits.</li><li>#2: A memory box can only hold 64 bit addresses for the appropriate type.<ul><li>e.g. <strong>String</strong> <strong>x</strong> can never hold the 64 bit address of a <strong>Dog</strong>.</li></ul></li></ul><p><img src="/images/CS61B/7550162.png" /></p><p>Answer: If X is a superclass of Y, then memory boxes for X may contain Y.</p><ul><li>An AList is-a List.</li><li>Therefore List variables can hold ALList addresses.</li></ul><p><img src="/images/CS61B/7550163.png" /></p><h3 id="question">Question</h3><p>Will the code below compile? If so, what happens when it runs?</p><ol type="1"><li><del>Will not compile.</del></li><li><del>Will compile, but will cause an error at runtime on the <strong>new</strong> line.</del></li><li><del>When it runs, an SLList is created and its address is stored in the someList variable, but it crashes on someList.addFirst() since the List class doesn’t implement addFirst.</del></li><li><strong>When it runs, an SLList is created and its address is stored in the someList variable. Then the string “elk” is inserted into the SLList referred to by addFirst.</strong></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List61B&lt;String&gt; someList = <span class="keyword">new</span> SLList&lt;String&gt;();</span><br><span class="line">    someList.addFirst(<span class="string">&quot;elk&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="implementation-inheritance-default-methods"><a href="https://www.youtube.com/watch?v=Z2Z1LHPGsdk&amp;list=PL8FaHk7qbOD6km6LlaHLWgRl9SbhlTHk2&amp;index=7">Implementation Inheritance: Default Methods</a></h2><p>Interface inheritance:</p><ul><li>Subclass inherits signatures, but NOT implementation.</li></ul><p>For better or worse, Java also allows <strong>implementation inheritance</strong>.</p><ul><li>Subclasses can inherit signatures AND implementation.</li></ul><p>Use the <strong>default</strong> keyword to specify a method that subclasses should inherit from an <strong>interface.</strong></p><ul><li>Example: Let’s add a default print() method to List61B.java</li></ul><h3 id="default-method-example-print">Default Method Example: print()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">List61B</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(Item x)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(Item y)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">getFirst</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">getLast</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">removeLast</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Item x, <span class="keyword">int</span> position)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;  </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size(); i += <span class="number">1</span>) &#123;</span><br><span class="line">          System.out.print(get(i) + <span class="string">&quot; &quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="question-1">Question</h4><p>Is the print() method efficient?</p><ul><li><del>Inefficient for AList and SLList</del></li><li><strong>Efficient for AList, inefficient for SLList</strong></li><li><del>Inefficient for AList, efficient for SLList</del></li><li><del>Efficient for both AList and SLList</del></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">List61B</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">   <span class="function"><span class="keyword">default</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size(); i += <span class="number">1</span>) &#123;</span><br><span class="line">         System.out.print(get(i) + <span class="string">&quot; &quot;</span>);</span><br><span class="line"><span class="comment">/* get has to seek all the way to the given item for SLists. */</span></span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="overriding-default-methods"><a href="https://www.youtube.com/watch?v=9M9exmhsjmc&amp;list=PL8FaHk7qbOD6km6LlaHLWgRl9SbhlTHk2&amp;index=8">Overriding Default Methods</a></h3><p>If you don’t like a default method, you can override it.</p><ul><li>Any call to print() on an SLList will use this method instead of default.</li><li>Use (optional) <span class="citation" data-cites="Override">@Override</span> to catch typos like <strong>public void pirnt()</strong></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SLList</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">implements</span>  </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (Node p = sentinel.next; p != <span class="keyword">null</span>; p = p.next) &#123;</span><br><span class="line">         System.out.print(p.item + <span class="string">&quot; &quot;</span>);     </span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   System.out.println();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="question-2"><a href="https://www.youtube.com/watch?v=eNtItRCIkBg&amp;list=PL8FaHk7qbOD6km6LlaHLWgRl9SbhlTHk2&amp;index=9">Question</a></h4><p>Recall that if X is a superclass of Y, then an X variable can hold a reference to a Y.</p><p>Which print method do you think will run when the code below executes?</p><ul><li>List.print()</li><li><strong>SLList.print() : And this is the sensible choice. But how does it work?</strong><ul><li>Before we can answer that, we need new terms: static and dynamic type.</li></ul></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">   List61B&lt;String&gt; someList = <span class="keyword">new</span> SLList&lt;String&gt;();</span><br><span class="line">   someList.addLast(<span class="string">&quot;elk&quot;</span>);</span><br><span class="line">   someList.addLast(<span class="string">&quot;are&quot;</span>);</span><br><span class="line">   someList.addLast(<span class="string">&quot;watching&quot;</span>);</span><br><span class="line">   someList.print();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="static-and-dynamic-type-dynamic-method-selection"><a href="https://www.youtube.com/watch?v=eNtItRCIkBg&amp;list=PL8FaHk7qbOD6km6LlaHLWgRl9SbhlTHk2&amp;index=9">Static and Dynamic Type, Dynamic Method Selection</a></h2><h3 id="static-type-vs.-dynamic-type">Static Type vs. Dynamic Type</h3><p>Every variable in Java has a “compile-time type”, a.k.a. “static type”.</p><ul><li>This is the type specified at <strong>declaration</strong>. Never changes!</li></ul><p>Variables also have a “run-time type”, a.k.a. “dynamic type”.</p><ul><li>This is the type specified at <strong>instantiation</strong> (e.g. when using new).</li><li>Equal to the type of the object being pointed at.</li></ul><p><img src="/images/CS61B/7550164.png" /></p><h3 id="dynamic-method-selection-for-overridden-methods">Dynamic Method Selection For Overridden Methods</h3><p>Suppose we call a method of an object using a variable with:</p><ul><li>compile-time type X</li><li>run-time type Y</li></ul><p>Then if Y <strong>overrides</strong> the method, Y’s method is used instead.</p><ul><li>This is known as “dynamic method selection”.</li></ul><p><img src="/images/CS61B/7550165.png" /></p><h2 id="more-dynamic-method-selection-overloading-vs.-overriding"><a href="https://www.youtube.com/watch?v=OHgKMipGdy8&amp;list=PL8FaHk7qbOD6km6LlaHLWgRl9SbhlTHk2&amp;index=10">More Dynamic Method Selection, Overloading vs. Overriding</a></h2><h3 id="dynamic-method-selection-puzzle">Dynamic Method Selection Puzzle</h3><p>Suppose we have classes defined below. Try to predict the results.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">greet</span><span class="params">(Animal a)</span> </span>&#123;</span><br><span class="line">    print(<span class="string">&quot;hello animal&quot;</span>); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">sniff</span><span class="params">(Animal a)</span> </span>&#123;</span><br><span class="line">    print(<span class="string">&quot;sniff animal&quot;</span>); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">flatter</span><span class="params">(Animal a)</span> </span>&#123;</span><br><span class="line">    print(<span class="string">&quot;u r cool animal&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">sniff</span><span class="params">(Animal a)</span> </span>&#123;</span><br><span class="line">    print(<span class="string">&quot;dog sniff animal&quot;</span>); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">flatter</span><span class="params">(Dog a)</span> </span>&#123;</span><br><span class="line">    print(<span class="string">&quot;u r cool dog&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Animal a = <span class="keyword">new</span> Dog();</span><br><span class="line">Dog d = <span class="keyword">new</span> Dog();</span><br><span class="line">a.greet(d);</span><br><span class="line">a.sniff(d);</span><br><span class="line">d.flatter(d);</span><br><span class="line">a.flatter(d);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Animal a = <span class="keyword">new</span> Dog();</span><br><span class="line">Dog d = <span class="keyword">new</span> Dog();</span><br><span class="line">a.greet(d);   <span class="comment">// &quot;hello animal&quot;</span></span><br><span class="line">a.sniff(d);   <span class="comment">// &quot;dog sniff animal&quot;</span></span><br><span class="line">d.flatter(d); <span class="comment">// &quot;u r cool dog&quot;</span></span><br><span class="line">a.flatter(d); <span class="comment">// “u r cool animal”</span></span><br></pre></td></tr></table></figure><p>flatter is <u><strong>overloaded</strong></u>, not overridden!</p><h3 id="the-method-selection-algorithm">The Method Selection Algorithm</h3><p>Consider the function call foo.bar(x1), where foo has static type TPrime, and x1 has static type T1.</p><p>At compile time, the compiler verifies that TPrime has a method that can handle T1. It then records the signature of this method.</p><ul><li>Note: If there are multiple methods that can handle T1, the compiler records the “most specific” one. For example, if T1=Dog, and TPrime has bar(Dog) and bar(Animal), it will record bar(Dog).</li></ul><p>At runtime, if foo’s dynamic type overrides the recorded signature, use the overriding method. Otherwise, use TPrime’s version of the method.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Animal a = <span class="keyword">new</span> Dog();</span><br><span class="line">Dog d = <span class="keyword">new</span> Dog();</span><br><span class="line">a.flatter(d);</span><br></pre></td></tr></table></figure><p>Compiler asks “Is there a method in Animal that can handle Dog? Yes! flatter(Animal a)”. It then records the signature flatter(Animal a).</p><h2 id="interface-vs.-implementation-inheritance"><a href="https://www.youtube.com/watch?v=9KuVnIje2Ys&amp;list=PL8FaHk7qbOD6km6LlaHLWgRl9SbhlTHk2&amp;index=11">Interface vs. Implementation Inheritance</a></h2><p>Interface Inheritance (a.k.a. what):</p><ul><li>Allows you to generalize code in a powerful, simple way.</li></ul><p>Implementation Inheritance (a.k.a. how):</p><ul><li>Allows code-reuse: Subclasses can rely on superclasses or interfaces.<ul><li>Example: print() implemented in List61B.java.</li><li>Gives another dimension of control to subclass designers: Can decide whether or not to override default implementations.</li></ul></li></ul><p><strong>Important:</strong> In both cases, we specify “is-a” relationships, not “has-a”.</p><ul><li>Good: Dog implements Animal, SLList implements List61B.</li><li>Bad: Cat implements Claw, Set implements SLList.</li></ul><h3 id="the-dangers-of-implementation-inheritance">The Dangers of Implementation Inheritance</h3><p>Particular Dangers of Implementation Inheritance</p><ul><li>Makes it harder to keep track of where something was actually implemented (though a good IDE makes this better).</li><li>Rules for resolving conflicts can be arcane. Won’t cover in 61B.<ul><li>Example: What if two interfaces both give conflicting default methods?</li></ul></li><li>Encourages overly complex code (especially with novices).<ul><li>Common mistake: Has-a vs. Is-a!</li></ul></li><li>Breaks encapsulation!<ul><li>What is encapsulation? See next week.</li></ul></li></ul><h3 id="terminology-summary">Terminology Summary</h3><p>New terms from this lecture:</p><ul><li>Overloading</li><li>Hypernym</li><li>Hyponym</li><li>Overriding</li><li>Interface Inheritance</li><li>Implementation Inheritance</li><li>Static Type, a.k.a. Compile-time Type</li><li>Dynamic Type, a.k.a. Run-time Type</li><li>Dynamic Method Selection</li></ul><h2 id="overview">Overview</h2><p><strong>Method Overloading</strong> In Java, methods in a class can have the same name, but different parameters. For example, a <code>Math</code> class can have an <code>add(int a, int b)</code> method and an <code>add(float a, float b)</code> method as well. The Java compiler is smart enough to choose the correct method depending on the parameters that you pass in. Methods with the same name but different parameters are said to be overloaded.</p><p><strong>Making Code General</strong> Consider a <code>largestNumber</code> method that only takes an AList as a parameter. The drawback is that the logic for <code>largestNumber</code> is the same regardless of if we take an <code>AList</code> or <code>SLList</code>. We just operate on a different type of list. If we use our previous idea of method overriding, we result in a very long Java file with many similar methods. This code is hard to maintain; if we fix a bug in one method, we have to duplicate this fix manually to all the other methods.</p><p>The solution to the above problem is to define a new reference type that represents both <code>AList</code> and <code>SLList</code>. We will call it a <code>List</code>. Next, we specify an “is-a” relationship: An <code>AList</code> is a <code>List</code>. We do the same for <code>SLList</code>. Let’s formalize this into code.</p><p><strong>Interfaces</strong> We will use the keyword <code>interface</code> instead of <code>class</code> to create our <code>List</code>. More explicitly, we write:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">List</span>&lt;<span class="title">Item</span>&gt; </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure><p>The key idea is that interfaces specify what this <code>List</code> can do, not how to do it. Since all lists have a <code>get</code> method, we add the following method signature to the interface class:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Item <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br></pre></td></tr></table></figure><p>Notice we did not define this method. We simply stated that this method should exist as long as we are working with a <code>List</code> interface.</p><p>Now, we want to specify that an <code>AList</code> is a <code>List</code>. We will change our class declaration of <code>AList</code> to:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> AList&lt;Item&gt; implements List&lt;Item&gt; &#123; ... &#125;</span><br></pre></td></tr></table></figure><p>We can do the same for <code>SLList</code>. Now, going back to our <code>largestNumber</code> method, instead of creating one method for each type of list, we can simply create one method that takes in a <code>List</code>. As long as our actual object implements the <code>List</code> interface, then this method will work properly!</p><p><strong>Overriding</strong> For each method in <code>AList</code> that we also defined in <code>List</code>, we will add an <span class="citation" data-cites="Override">@Override</span> right above the method signature. As an example:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Item <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure><p>This is not technically necessary, but is good style and thus we will require it. Also, it allows us to check against typos. If we mistype our method name, the compiler will prevent our compilation if we have the <span class="citation" data-cites="Override">@Override</span> tag.</p><p><strong>Interface Inheritance</strong> Formally, we say that subclasses inherit from the superclass. Interfaces contain all the method signatures, and each subclass must implement every single signature; think of it as a contract. In addition, relationships can span multiple generations. For example, C can inherit from B, which can inherit from A.</p><p><strong>Default Methods</strong> Interfaces can have default methods. We define this via:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure><p>We can actually implement these methods inside the interface. Note that there are no instance variables to use, but we can freely use the methods that are defined in the interface, without worrying about the implementation. Default methods should work for any type of object that implements the interface! The subclasses do not have to re-implement the default method anywhere; they can simply call it for free. However, we can still override default methods, and re-define the method in our subclass.</p><p><strong>Static vs. Dynamic Type</strong> Every variable in Java has a static type. This is the type specified when the variable is declared, and is checked at compile time. Every variable also has a dynamic type; this type is specified when the variable is instantiated, and is checked at runtime. As an example:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thing a;</span><br><span class="line">a = <span class="keyword">new</span> Fox();</span><br></pre></td></tr></table></figure><p>Here, <code>Thing</code> is the static type, and <code>Fox</code> is the dynamic type. This is fine because all foxes are things. We can also do:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Animal b = (Animal) a;</span><br></pre></td></tr></table></figure><p>This is fine, because all foxes are animals too. We can do:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Fox c = (Fox) b;</span><br></pre></td></tr></table></figure><p>This is fine, because <code>b</code> points to a <code>Fox</code>. Finally, we can do:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">a = <span class="keyword">new</span> Squid()</span><br></pre></td></tr></table></figure><p>This is fine, because the static type of <code>a</code> is a <code>Thing</code>, and <code>Squid</code> is a thing.</p><p><strong>Dynamic Method Selection</strong> The rule is, if we have a static type <code>X</code>, and a dynamic type <code>Y</code>, then if <code>Y</code> overrides the method from <code>X</code>, then on runtime, we use the method in <code>Y</code> instead. Student often confuse overloading and overriding.</p><p><strong>Overloading and Dynamic Method Selection</strong> Dynamic method selection plays no role when it comes to overloaded methods. Consider the following piece of code, where <code>Fox extends Animal</code>.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>  Fox f = <span class="keyword">new</span> Fox();</span><br><span class="line"><span class="number">2</span>  Animal a = f;</span><br><span class="line"><span class="number">3</span>  define(f);</span><br><span class="line"><span class="number">4</span>  define(a);</span><br></pre></td></tr></table></figure><p>Let’s assume we have the following overloaded methods in the same class:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">define</span><span class="params">(Fox f)</span> </span>&#123; ... &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">define</span><span class="params">(Animal a)</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure><p>Line 3 will execute <code>define(Fox f)</code>, while line 4 will execute <code>define(Animal a)</code>. Dynamic method selection only applies when we have overridden methods. There is no overriding here, and therefore dynamic method selection does not apply.</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structures </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Language and Models</title>
      <link href="2021/03/05/2021-03-05-Language-and-Models/"/>
      <url>2021/03/05/2021-03-05-Language-and-Models/</url>
      
        <content type="html"><![CDATA[<h1 id="language-and-models">Language and Models</h1><h2 id="programming-languages-and-computer-science">Programming languages and computer science</h2><h3 id="motivation-for-modelling">Motivation for modelling</h3><p>Programming Languages</p><ul><li>Why do they take the form they do?</li><li>How are they processed by a computer?</li></ul><p>To gain insight into these questions, we model:</p><ul><li>Language</li><li>Mechanisms for processing language</li></ul><h3 id="key-aspects">Key aspects</h3><ul><li>Language is about<ul><li>Structure (form)</li><li>Meaning</li></ul></li><li>Formal models of language deal with <strong>structure only</strong></li><li><strong>Meaning</strong> often studied through predicate logic (see Part I of the course)</li></ul><h2 id="ambiguity-and-language-design">Ambiguity and language design</h2><h3 id="human-natural-vs.-programming-languages">Human (natural) VS. programming languages</h3><h4 id="natural-languages">Natural languages</h4><ul><li>The result of evolutionary processes</li><li>Guided by communicative needs and cognitive capacities</li><li>No central control / design</li><li>Vagueness<ul><li>E.g. When does a wide chair become a bench?</li></ul></li><li>Ambiguity<ul><li>Word-level ambiguity: figure out meaning from context (e.g. bank or trip)</li><li>Structural ambiguity: different groupings for the same words (e.g. old men and women)</li></ul></li></ul><figure><img src="/images/FOCS/1026370.png" alt="" /><figcaption>Example of structural ambiguity in natural languages</figcaption></figure><h4 id="programming-languages">Programming languages</h4><ul><li>Tightly organised, controlled design</li><li>No vagueness<ul><li>E.g. clear boundary between integers and reals</li></ul></li><li>Ambiguity<ul><li>Sometimes word-level amibuity: e.g. in certain programming languages keywords can also be used as variable names</li><li>No structural ambiguity: precedence rules, parentheses, ...</li></ul></li></ul><figure><img src="/images/FOCS/1026371.png" alt="" /><figcaption>Example of structural ambiguity when precedence rules and parentheses are ignored</figcaption></figure><ul><li>X = Y = 2<sup>5</sup> = 32, <em>log</em> = <em>log</em><sub>2</sub></li><li>6 or 37 ?</li></ul><h4 id="motivation">Motivation</h4><p>The study of formals models of language provides insights in:</p><ul><li>Ambiguity of statements</li><li>Efficiency in processing of programming languages</li></ul><h2 id="formal-languages">Formal languages</h2><h3 id="introduction">Introduction</h3><ul><li>Formal language models focus on <strong>sequences of symbols</strong> (strings)</li><li>No meaning, except for structural differences</li></ul><h3 id="definition">Definition</h3><ul><li><strong>Alphabet</strong><ul><li>An alphabet (Σ) is a finite set of symbols</li></ul></li><li><strong>String</strong><ul><li>A string is a finite sequence of symbols from an alphabet</li></ul></li><li><strong>Language</strong><ul><li>A language is a set of strings</li></ul></li></ul><h3 id="central-question">Central question</h3><p><strong>For any particular language, how can we specify precisely the correct strings and no others?</strong></p><h4 id="alphabet-and-strings">Alphabet and strings</h4><ul><li>For convenience, we use small symbol sets as alphabets</li><li>E.g.:<ul><li>Let Σ = {a, b, c} be the set of symbols. Some strings composed from the symbols of Σ are ab, bbc, and abcba. These are <strong>strings over Σ</strong></li><li>Let Σ = {0, 1, +} be the set of symbols. Some strings over Σ are 0,1+1 and 10+11+1010</li></ul></li></ul><h4 id="length-of-strings">Length of strings</h4><p>The length of the string =</p><ul><li>The number of symbols in it</li><li>E.g. |abc| = 3</li></ul><h4 id="empty-string">Empty string</h4><ul><li>Empty string =<ul><li>Λ</li><li>|Λ| = 0</li></ul></li><li><strong>Λ is a string, NOT a symbol!!</strong></li><li><strong>Λ is not listed in Σ</strong></li></ul><h4 id="set-of-strings">Set of strings</h4><p>E.g.</p><ul><li>Finite set:<ul><li>The set of strings over Σ = {a, b} of length ≤ 2 is {Λ, a, b, aa, ab, ba, bb}</li><li>Cf. variable names in e.g. Fortran, Pascal</li></ul></li><li>Infinite set:<ul><li>The set of strings over Σ = {0, 1, +} that represent sums of 0s and 1s is {0 + 0, 0 + 1, 1 + 0, 1 + 1, 0 + 0 + 0, 0 + 0 + 1, ...}</li></ul></li></ul><h4 id="language-σ">Language Σ<sup>∗</sup></h4><ul><li>Σ<sup>∗</sup> is the language consisting of <strong>all possible strings</strong> over Σ</li><li>Any language over Σ is a subset of Σ<sup>∗</sup></li><li>E.g.:<ul><li>Any language over {a, b} is a subset of {a, b} <sup>∗</sup></li><li>{a, b, } <sup>∗</sup> = {Λ, a, b, aa, bb, ba, bb, aaa, aab, ...}</li></ul></li></ul><h4 id="set-formats">Set formats</h4><ul><li>Extensional format<ul><li>Explicit list of arguments</li><li>E.g.: L = {Λ, a, b, aa, ab, ba, bb}</li></ul></li><li>Intentional format<ul><li>E.g.: L = the set of strings over {a, b}, of length no more than two</li><li>E.g.: L = {x|x ∈ {a, b} <sup>∗</sup> ∧ |x| ≤ 2}</li></ul></li></ul><h3 id="exercise-1">Exercise 1</h3><p>Write the extension of each of the following sets:</p><ul><li>{x|x ∈ {a, b} <sup>∗</sup> ∧ |x| = 3}.</li><li>{x|x ∈ {a, b} <sup>∗</sup> ∧ |x| =4 ∧ ∃y: (x =aya)}.</li></ul><h4 id="solution">Solution</h4><ul><li>{aaa, baa, aba, bba, aab, bab, abb, bbb}</li><li>{abba, aaba, abaa, aaaa}</li></ul><h3 id="exercise-2">Exercise 2</h3><p>Express the following sets intentionally using formal language terminology:</p><ul><li>{aa, ab, ac, ba, bb, bc, ca, cb, cc}</li><li>{αa}<sup>∗</sup></li></ul><h4 id="solution-1">Solution</h4><ul><li>{x|x ∈ {a, b, c} <sup>∗</sup> ∧ |x| = 2}</li><li>{x|x ∈ {a} <sup>∗</sup> ∧ ∃y ∈ <strong>I</strong> : |x| = 2y}</li></ul><h2 id="operations-on-languages">Operations on languages</h2><h3 id="operations">Operations</h3><p>Language are <strong>sets</strong> (of strings), notated here as L<sub>1</sub> , L<sub>2</sub></p><ul><li>Union: L<sub>1</sub> ∪ L<sub>2</sub></li><li>Intersection: L<sub>1</sub> ∩ L<sub>2</sub></li><li>Difference: L<sub>1</sub>  L<sub>2</sub></li><li>Symmetric difference: L<sub>1</sub> ∆ L<sub>2</sub></li><li>Complement: Σ<sup>∗</sup>  L</li></ul><h3 id="empty-language">Empty language</h3><ul><li>Empty language: ∅</li><li>Has no strings</li><li>Language {Λ}<ul><li>Has 1 string, the empty string, which has length 0</li></ul></li><li>Language {Λ, a, aa}<ul><li>Has 3 strings, of length 0, 1 and 2</li></ul></li></ul><h3 id="concatenation-of-strings">Concatenation of strings</h3><p><strong>Definition:</strong> Concatenation of <strong>strings</strong></p><ul><li>x and y are strings: xy is their concatenation</li><li>x is a string: xΛ = x = Λx</li><li>x is a string: xx<sup>k</sup> = x<sup>k+1</sup></li><li>x is a string: x<sup>0</sup> = Λ</li></ul><p><strong>Concatenation is NOT commutative!!!</strong></p><h3 id="exercise-3">Exercise 3</h3><p>Give the length of each of the following strings:</p><ul><li>b<sup>3</sup>c<sup>4</sup></li><li>(aΛaΛbΛb)<sup>2</sup></li><li>Λ<Sup>5</sup></li></ul><h4 id="solution-2">Solution</h4><ul><li>7</li><li>8</li><li>0</li></ul><h3 id="concatenation-of-languages">Concatenation of languages</h3><p><strong>Definition:</strong> Concatenation of <strong>languages</strong></p><ul><li>For language L<sub>1</sub> and L<sub>2</sub>, their concatenation is written as L<sub>1</sub>L<sub>2</sub></li><li>L<sub>1</sub>L<sub>2</sub> = {xy|x ∈ L<sub>1</sub> ∧ y ∈ L<sub>2</sub>}</li></ul><p>E.g.: Let L<sub>1</sub> = {a, aa} and L<sub>2</sub> = {b, bb, bbb}. Then the concatenations L<sub>1</sub>L<sub>2</sub> and L<sub>2</sub>L<sub>1</sub> are as follows:</p><ul><li>L<sub>1</sub>L<sub>2</sub> = {ab, abb, abbb, aab, aabb, aabbb}</li><li>L<sub>2</sub>L<sub>1</sub> = {ba, bba, bbba, baa, bbaa, bbbaa}</li></ul><p><strong>Concatenation is NOT commutative!!!</strong></p><h3 id="more-concatenation">More concatenation</h3><p>L<sub>1</sub> = {a, aa} and L<sub>2</sub> = {b, bb, bbb}</p><ul><li>L<sub>1</sub>L<sub>2</sub>: 2 x 3 unique concatenations<ul><li>{ab, abb, abbb, aab, aabb, aabbb}</li></ul></li><li>L<sub>2</sub>L<sub>2</sub>: 3 x 3 concatenations, but only 5 unique ones<ul><li>{bb, bbb, bbbb, bbbbb, bbbbbb}</li></ul></li></ul><h3 id="exercise-4">Exercise 4</h3><p>How many of the strings over the symbol set Σ = {a, b, c} are of length exactly 5?</p><h4 id="solution-3">Solution</h4><p>n<sup>k</sup> = 3<sup>5</sup> = 243</p><h3 id="exercise-5">Exercise 5</h3><p>Use the notation of formal languages, sets, logic, and arithmetic to express in intentional form each of the following sets, using no English.</p><ul><li>The set of strings of length 5 over {0, 1}.</li><li>The set of strings over {0, 1} that begin with 1 and that represent, as binary numbers, the values from 1 to 31 (in decimal notation).</li></ul><h4 id="solution-4">Solution</h4><ul><li>{x|x ∈ {0, 1} <sup>∗</sup> ∧ |x| = 5}</li><li>{x|y ∈ {0, 1} <sup>∗</sup> ∧ |y| ≤ 4 ∧ x = 1y}</li></ul><h3 id="exercise-6">Exercise 6</h3><ul><li>L = {x|x ∈ {a, b} <sup>∗</sup> ∧ |x| ≤ 2} = {Λ, a, b, aa, ab, ba, bb}</li><li>L<sub>1</sub> = {a, aa} and L<sub>2</sub> = {b, bb, bbb}</li><li>Give the extensional form of (L<sub>1</sub>L<sub>2</sub>) ∩ L</li></ul><h4 id="solution-5">Solution</h4><ul><li>L<sub>1</sub>L<sub>2</sub> = {ab, abb, abbb, aab, aabb, aabbb}</li><li>(L<sub>1</sub>L<sub>2</sub>) ∩ L = {ab}</li></ul><h3 id="superscript-for-languages">Superscript for languages</h3><p><strong>Definition</strong>: Superscript for Languages</p><p>For each language L:</p><ul><li>L<sup>0</sup> = {Λ}</li><li>L<sup>k+1</sup> = LL<sup>k</sup> , for any integer k</li></ul><h3 id="closure-for-languages">Closure for Languages</h3><p><strong>Definition</strong>: Closure for Languages</p><ul><li><p>L<sup>∗</sup> = L<sup>0</sup> ∪ L<sup>1</sup> ∪ L<sup>2</sup> ∪, ...</p></li><li><p><span class="math display">\[L^*=U_{i=0}^∞L^i\]</span></p></li><li><p>For any language, except ∅ and {Λ}, L<sup>∗</sup> has infinitely many strings</p></li></ul><p>Eg.:</p><p>Let L = {a, bb}. Then L<sup>0</sup> = {Λ}, which is true for any language. Also,</p><ul><li>L<sup>1</sup> = L = {a, bb}</li><li>L<sup>2</sup> = LL = {a, abb, bba, bbbb}</li><li>L<sup>3</sup> = LL<sup>2</sup> = {aaa, aabb, abba. abbbb, bbaa, bbabb. bbbba, bbbbbb}</li><li>L<sup>*</sup> = L = {Λ, a , bb. aa. abb. bba, bbbb, aaa, aabb, abba, abbbb, bbaa, ...}</li></ul><h3 id="exercise-7">Exercise 7</h3><p>Express each of the following as briefly as possible using correct notation: an alphabet, the set of all strings over that alphabet, the empty string, the empty language, the length of string x, and the closure of language L.</p><h4 id="solution-6">Solution</h4><ul><li>alphabet: Σ</li><li>set of all strings over alphabet: Σ<sup>∗</sup></li><li>empty string: Λ</li><li>empty language: ∅</li><li>length of string x: |x|</li><li>closure of language L: L<sup>∗</sup></li></ul><h3 id="exercise-8">Exercise 8</h3><p>Let L be the language {a, bb} and consider its closure, L<sup>∗</sup><em>.</em></p><ul><li>How many strings in L<sup>∗</sup> are of length 4?</li><li>How many strings in L<sup>∗</sup> are of length 5?</li></ul><h4 id="solution-7">Solution</h4><ul><li>L<sup>0</sup> : 0</li><li>L<sup>1</sup> : 0</li><li>L<sup>2</sup> : 1</li><li>L<sup>3</sup> : 3</li><li>L<sup>4</sup> : 1</li><li>4 strings: {bbbb, aabb, abba, bbaa, aaaa}</li></ul><h2 id="two-levels-and-two-language-classes">Two levels and two language classes</h2><h3 id="words-and-sentences">Words and sentences</h3><p>Human Language</p><ul><li>Symbols: individual letters<ul><li>Σ is called the <strong>alphabet</strong></li><li>Strings of the language are called <strong>words</strong></li></ul></li><li>Symbols: individual words<ul><li>Σ is called the <strong>vocabulary</strong></li><li>Strings of the language are called <strong>sentences</strong></li></ul></li></ul><h3 id="tokens-and-statements">Tokens and statements</h3><ul><li><p>Programming Languages</p><ul><li><p>Characters combine into tokens</p><ul><li>Tokens correspond to words in human languages</li><li>E.g. for, &lt;=, and try in Java</li></ul></li><li><p>Tokens combine into statements</p><ul><li><p>Statements correspond to words in human languages</p></li><li><p>E.g. (loop for el in list do (format t " a %" el))</p></li></ul></li></ul></li><li><p>One is interested at on particular symbol set at any particular time</p></li><li><p>Combining tokens to form statements is more complex than combining characters to make tokens</p></li><li><p>Language classes:</p><ul><li>Class of regular languages<ul><li>For forming tokens out of characters</li><li>No recursion</li></ul></li><li>Class of context-free languages<ul><li>For forming statements out of tokens</li><li>Can have recursion</li></ul></li></ul></li></ul><h3 id="notion-of-recursion">Notion of recursion</h3><p><strong>Definition</strong>: Recursive Construct</p><ul><li><p>A construct is recursive if it can contain within itself a structure of the same type</p></li><li><p>No restrictions on nested, ‘inner’ statements:</p></li><li><p>E.g. (loop for sublist in list do</p><p>​ (loop for el in sublist do (print el)))</p></li></ul><h2 id="questions-of-formal-language-theory">Questions of formal language theory</h2><h3 id="language-specification">Language specification</h3><p>How is a language specified?</p><ul><li>Extensional format<ul><li>Explicitly enumerates elements</li></ul></li><li>Intentional format<ul><li>Uses a specification of the properties of the strings it contains</li><li>e.g. L = {x|x ∈ {a, b} <sup>∗</sup> ∧ N<sub>a</sub>(x) = N<sub>b</sub>(x)}</li><li>N<sub>a</sub>(x) denotes the number of occurrences of the symbol a in the string x</li></ul></li></ul><h3 id="generation">Generation</h3><p>How can we generate the sentences of a language?</p><ul><li>Problem:<ul><li>Generate an unlimited number of strings of an infinite language such that any particular string would ultimately occur</li></ul></li><li>Solution<ul><li>Building a <strong>grammar</strong></li></ul></li></ul><h3 id="recognition">Recognition</h3><p>How can we recognize the sentences of a language?</p><ul><li>Problem:<ul><li>Given language L and any string x over the alphabet of the language, how can we determine whether x ∈ L</li></ul></li><li>Solution<ul><li>Building an <strong>automaton</strong></li></ul></li></ul><h3 id="language-specification-1">Language specification</h3><p>What is the best way to specify a language?</p><ul><li>There are 3 ways to specify an infinite language:<ul><li>Intentional format</li><li>Grammar that generates the language</li><li>Automaton that recognizes the language</li></ul></li><li>There are correspondences between these ways<ul><li>E.g. Use grammar to produce automaton</li><li>Translations can be done mechanically</li></ul></li></ul><h3 id="languages-classes">Languages classes</h3><ul><li>There are an infinite number of different languages over Σ</li><li>Some are more complex than others</li><li>E.g. some might be recursive</li></ul><p><strong>Definition</strong>: Language class</p><ul><li>A language class is a set of languages that can be recognized by some automaton that abides certain restrictions</li><li>Or parallel to this, that can be generated by grammars that abide certain restrictions</li></ul><p><strong>The same language classes can be defined in terms of automata and grammars!!</strong></p><p>Language classes are sets that are subets of other classes</p><p>E.g. Regular languages are context-free languages</p><p><img src="/images/FOCS/1490250.png" /></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fundamentals of Computer Science </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Containers</title>
      <link href="2021/03/05/2021-03-05-Containers/"/>
      <url>2021/03/05/2021-03-05-Containers/</url>
      
        <content type="html"><![CDATA[<h1 id="containers">Containers</h1><p><a href="https://www.youtube.com/watch?v=gXw6_D_B7xQ&amp;list=PL6BsET-8jgYUaHO4eXAJD2v53HYAdFNk-">Video</a></p><p>Textbook <a href="http://composingprograms.com/pages/21-introduction.html">1</a>, <a href="http://composingprograms.com/pages/23-sequences.html">2</a></p><h2 id="lists"><a href="https://www.youtube.com/watch?v=-Q45UcQ2XJk&amp;list=PL6BsET-8jgYUaHO4eXAJD2v53HYAdFNk-&amp;index=3">Lists</a></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Lists</span></span><br><span class="line">odds = [<span class="number">41</span>, <span class="number">43</span>, <span class="number">47</span>, <span class="number">49</span>]</span><br><span class="line"><span class="built_in">len</span>(odds)</span><br><span class="line">odds[<span class="number">1</span>]</span><br><span class="line">odds[<span class="number">0</span>] - odds[<span class="number">3</span>] + <span class="built_in">len</span>(odds)</span><br><span class="line">odds[odds[<span class="number">3</span>]-odds[<span class="number">2</span>]]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>digits = [<span class="number">1</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>digits = [<span class="number">2</span>//<span class="number">2</span>, <span class="number">2</span>+<span class="number">2</span>+<span class="number">2</span>+<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>*<span class="number">2</span>*<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># The number of elements</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(digits)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># An element selected by its index</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>digits[<span class="number">3</span>] </span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getitem(digits, <span class="number">3</span>)</span><br><span class="line"><span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Concatenation and repetition</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">2</span>, <span class="number">7</span>] + digits * <span class="number">2</span></span><br><span class="line">[<span class="number">2</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">8</span>]</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add([<span class="number">2</span>, <span class="number">7</span>], mul(digits, <span class="number">2</span>))</span><br><span class="line">[<span class="number">2</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Nested lists</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pairs = [[<span class="number">10</span>, <span class="number">20</span>], [<span class="number">30</span>, <span class="number">40</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pairs[<span class="number">1</span>]</span><br><span class="line">[<span class="number">30</span>, <span class="number">40</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pairs[<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line"><span class="number">30</span></span><br></pre></td></tr></table></figure><h2 id="containers-1"><a href="https://www.youtube.com/watch?v=TgeU-nYxdlE&amp;list=PL6BsET-8jgYUaHO4eXAJD2v53HYAdFNk-&amp;index=4">Containers</a></h2><p>Built-in operators for testing whether an element appears in a compound value</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>digits = [<span class="number">1</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> <span class="keyword">in</span> digits</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;1&#x27;</span> <span class="keyword">in</span> digits</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">8</span> <span class="keyword">in</span> digits</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span> <span class="keyword">not</span> <span class="keyword">in</span> digits</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">not</span>(<span class="number">5</span> <span class="keyword">in</span> digits)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>, <span class="number">8</span>] <span class="keyword">in</span> digits</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>, <span class="number">2</span>] <span class="keyword">in</span> [[<span class="number">1</span>, <span class="number">2</span>], <span class="number">3</span>]</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>, <span class="number">2</span>] <span class="keyword">in</span> [<span class="number">4</span>,[[<span class="number">1</span>, <span class="number">2</span>]], <span class="number">3</span>]</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><h2 id="for-statements"><a href="https://www.youtube.com/watch?v=nMbXYJE8Xos&amp;list=PL6BsET-8jgYUaHO4eXAJD2v53HYAdFNk-&amp;index=5">For Statements</a></h2><h3 id="sequence-iteration">Sequence Iteration</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_while</span>(<span class="params">s, value</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Count the number of occurrences of value in sequence s.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_while(digits, 8)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    total, index = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> index &lt; <span class="built_in">len</span>(s):</span><br><span class="line">        <span class="keyword">if</span> s[index] == value:</span><br><span class="line">            total = total + <span class="number">1</span></span><br><span class="line">        index = index + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_for</span>(<span class="params">s, value</span>):</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> s: </span><br><span class="line"><span class="comment"># Name bound in the first frame of the current environment (not a new frame)</span></span><br><span class="line">        <span class="keyword">if</span> element == value:</span><br><span class="line">            total = total + <span class="number">1</span></span><br><span class="line">     <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure><h3 id="for-statement-execution-procedure">For Statement Execution Procedure</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> &lt;name&gt; <span class="keyword">in</span> &lt;expression&gt;:</span><br><span class="line">    &lt;suite&gt;</span><br></pre></td></tr></table></figure><ol type="1"><li>Evaluate the header &lt;expression&gt;, which must yield an iterable value (a sequence)</li><li>For each element in that sequence, in order:<ol type="1"><li>. Bind &lt;name&gt; to that element in the current frame</li><li>Execute the &lt;suite&gt;</li></ol></li></ol><h3 id="sequence-unpacking-in-for-statements">Sequence Unpacking in For Statements</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pairs = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">2</span>], [<span class="number">4</span>, <span class="number">4</span>]]</span><br><span class="line"><span class="comment"># A sequence of fixed-length sequences</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>same_count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> x, y <span class="keyword">in</span> pairs:</span><br><span class="line"><span class="comment"># x, y : A name for each element in a</span></span><br><span class="line">fixed-length sequence</span><br><span class="line"><span class="meta">... </span><span class="keyword">if</span> x == y:</span><br><span class="line"><span class="meta">... </span>same_count = same_count + <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>same_count</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p>Each name is bound to a value, as in multiple assignment</p><h2 id="ranges"><a href="https://www.youtube.com/watch?v=XPHeaItep-Y&amp;list=PL6BsET-8jgYUaHO4eXAJD2v53HYAdFNk-&amp;index=6">Ranges</a></h2><p>A range is a sequence of consecutive integers.*</p><p><em>* Ranges can actually represent more general integer sequences.</em></p><p><img src="/images/CS61A/090241.png" /></p><p><strong>Length</strong>: ending value - starting value</p><p><strong>Element selection</strong>: starting value + index</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">range</span>(-<span class="number">2</span>, <span class="number">2</span>)) <span class="comment"># List constructor</span></span><br><span class="line">[-<span class="number">2</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">4</span>)) <span class="comment"># Range with a 0 starting value</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Ranges</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">range</span>(<span class="number">5</span>,<span class="number">8</span>)</span><br><span class="line"><span class="built_in">range</span>(<span class="number">5</span>,<span class="number">8</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">5</span>, <span class="number">8</span>))</span><br><span class="line">[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">range</span>(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">range</span>(<span class="number">0</span>,<span class="number">4</span>)</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">4</span>))</span><br><span class="line">[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_below</span>(<span class="params">n</span>):</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        total += i</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sum_below(<span class="number">5</span>)</span><br><span class="line"><span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cheer</span>():</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        print(<span class="string">&#x27;Go Bears!&#x27;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cheer()</span><br><span class="line">Go Bears!</span><br><span class="line">Go Bears!</span><br><span class="line">Go Bears!</span><br></pre></td></tr></table></figure><h2 id="recursive-sums"><a href="https://www.youtube.com/watch?v=VuPU2Wr6xoI&amp;list=PL6BsET-8jgYUaHO4eXAJD2v53HYAdFNk-&amp;index=7">Recursive Sums</a></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sum (recursively)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mysum</span>(<span class="params">L</span>):</span></span><br><span class="line">    <span class="keyword">if</span> (L == []):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> L[<span class="number">0</span>] + mysum( L[<span class="number">1</span>:] )</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mysum( [2, 4, 1, 5] )</span></span><br><span class="line"><span class="string">2 + mysum( [4, 1, 5] )</span></span><br><span class="line"><span class="string">    4 + mysum( [1, 5] )</span></span><br><span class="line"><span class="string">        1 + mysum( [5] )</span></span><br><span class="line"><span class="string">            5 + mysum( [] )</span></span><br><span class="line"><span class="string">                0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ——— DRILL ———</span></span><br><span class="line"><span class="comment"># Write an iterative function that takes as input</span></span><br><span class="line"><span class="comment"># integer “n” and returns the sum of the first “n”</span></span><br><span class="line"><span class="comment"># integers: sum(5) returns 1+2+3+4+5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># iteratively sum first n integers</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_iter</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,n+<span class="number">1</span>):</span><br><span class="line">        <span class="built_in">sum</span> = <span class="built_in">sum</span> + i</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>( <span class="built_in">sum</span> )</span><br><span class="line"></span><br><span class="line">print( sum_iter(<span class="number">10</span>) )</span><br><span class="line"></span><br><span class="line"><span class="comment"># ——— DRILL ———</span></span><br><span class="line"><span class="comment"># Write a recursive function that takes as input</span></span><br><span class="line"><span class="comment"># integer “n” and returns the sum of the first “n”</span></span><br><span class="line"><span class="comment"># integers: sum(5) returns 1+2+3+4+5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># recursively sum first n integers</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_rec</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span>( n == <span class="number">0</span> ):</span><br><span class="line">        <span class="keyword">return</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n + sum_rec(n-<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">print( sum_rec(<span class="number">10</span>) )</span><br></pre></td></tr></table></figure><h2 id="list-comprehensions"><a href="https://www.youtube.com/watch?v=HH8Dugs8tTc&amp;list=PL6BsET-8jgYUaHO4eXAJD2v53HYAdFNk-&amp;index=8">List Comprehensions</a></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;p&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[letters[i] <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]] </span><br><span class="line">[<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;o&#x27;</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># List comprehensions</span></span><br><span class="line"></span><br><span class="line">odds = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x+<span class="number">1</span> <span class="keyword">for</span> x <span class="keyword">in</span> odds]</span><br><span class="line">[<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x <span class="keyword">for</span> x <span class="keyword">in</span> odds <span class="keyword">if</span> <span class="number">25</span> % x == <span class="number">0</span>]</span><br><span class="line">[<span class="number">2</span>,<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">divisors</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the integers that evenly divide n.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; divisors(1)</span></span><br><span class="line"><span class="string">    [1]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; divisors(4)</span></span><br><span class="line"><span class="string">    [1, 2]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; divisors(12)</span></span><br><span class="line"><span class="string">    [1, 2, 3, 4, 6]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; [n for n in range(1, 1000) if sum(divisors(n)) == n]</span></span><br><span class="line"><span class="string">    [1, 6, 28, 496]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span>] + [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n) <span class="keyword">if</span> n % x == <span class="number">0</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[&lt;<span class="built_in">map</span> exp&gt; <span class="keyword">for</span> &lt;name&gt; <span class="keyword">in</span> &lt;<span class="built_in">iter</span> exp&gt; <span class="keyword">if</span> &lt;<span class="built_in">filter</span> exp&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Short version: </span></span><br><span class="line">[&lt;<span class="built_in">map</span> exp&gt; <span class="keyword">for</span> &lt;name&gt; <span class="keyword">in</span> &lt;<span class="built_in">iter</span> exp&gt;]</span><br></pre></td></tr></table></figure><p>A combined expression that evaluates to a list using this evaluation procedure:</p><ol type="1"><li>Add a new frame with the current frame as its parent</li><li>Create an empty <em>result list</em> that is the value of the expression</li><li>For each element in the iterable value of &lt;iter exp&gt;:<ol type="1"><li>Bind &lt;name&gt; to that element in the new frame from step 1</li><li>If &lt;filter exp&gt; evaluates to a true value, then add the value of to the result list</li></ol></li></ol><h2 id="strings"><a href="https://www.youtube.com/watch?v=FvSXDUUTbgE&amp;list=PL6BsET-8jgYUaHO4eXAJD2v53HYAdFNk-&amp;index=9">Strings</a></h2><h3 id="strings-are-an-abstraction">Strings are an Abstraction</h3><ul><li><p><strong>Representing data:</strong></p><ul><li>'200'</li><li>'1.2e-5'</li><li>'False'</li><li>'[1, 2]'</li></ul></li><li><p>Representing language:</p><ul><li><p>"""And, as imagination bodies forth</p><p>The forms of things unknown, the poet's pen</p><p>Turns them to shapes, and gives to airy nothing</p><p>A local habitation and a name.</p><p>"""</p></li></ul></li><li><p>Representing programs:</p><ul><li>'curry = lambda f: lambda x: lambda y: f(x, y)'</li></ul></li></ul><h3 id="string-literals-have-three-forms">String Literals Have Three Forms</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;I am string!&#x27;</span></span><br><span class="line"><span class="string">&#x27;I am string!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;I&#x27;ve got an apostrophe&quot;</span> </span><br><span class="line"><span class="comment"># Single-quoted and double-quoted strings are equivalent</span></span><br><span class="line"><span class="string">&quot;I&#x27;ve got an apostrophe&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;您好&#x27;</span></span><br><span class="line"><span class="string">&#x27;您好&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;&quot;&quot;The Zen of Python</span></span><br><span class="line"><span class="string">claims, Readability counts.</span></span><br><span class="line"><span class="string">Read more: import this.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;The Zen of Python\nclaims, Readability counts.\nRead more: import this.&#x27;</span></span><br><span class="line"><span class="comment"># \ -&gt; A backslash &quot;escapes&quot; the following character</span></span><br><span class="line"><span class="comment"># \n -&gt; &quot;Line feed&quot; character represents a new line</span></span><br></pre></td></tr></table></figure><h3 id="strings-are-sequences">Strings are Sequences</h3><p>Length and element selection are similar to all sequences</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>city = <span class="string">&#x27;London&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(city)</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>city[<span class="number">3</span>]</span><br><span class="line"><span class="string">&#x27;d&#x27;</span></span><br></pre></td></tr></table></figure><p>However, the "in" and "not in" operators match substrings</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;here&#x27;</span> <span class="keyword">in</span> <span class="string">&quot;Where&#x27;s Tom&quot;</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">234</span> <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>] <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><p><strong>When working with strings, care about <em>whole</em> words more than letters</strong></p><h2 id="reversing-a-string"><a href="https://www.youtube.com/watch?v=ADaBhsEeY2M&amp;list=PL6BsET-8jgYUaHO4eXAJD2v53HYAdFNk-&amp;index=10">Reversing a String</a></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Reversing a List (recursively)</span></span><br><span class="line"></span><br><span class="line">reverse(“ward”) = “draw”</span><br><span class="line">reverse(“ward”) = reverse(“ard”) + “w”</span><br><span class="line">     reverse(“ard”) = reverse(“rd”) + “a”</span><br><span class="line">          reverse(“rd”) = reverse(“d”) + “r”</span><br><span class="line">               reverse(“d”) = “d”</span><br><span class="line">          </span><br><span class="line"><span class="comment"># String reversal</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse_string</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Reverse a string s.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; reverse_string(&#x27;draw&#x27;)</span></span><br><span class="line"><span class="string">    &#x27;ward&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(s) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> reverse_string(s[<span class="number">1</span>:]) + s[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Structure and Interpretation of Computer Programs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>From sequence to structure</title>
      <link href="2021/03/04/2021-03-04-From-sequence-to-structure/"/>
      <url>2021/03/04/2021-03-04-From-sequence-to-structure/</url>
      
        <content type="html"><![CDATA[<h1 id="from-sequence-to-structure---secondary-structure-prediction">From sequence to structure - Secondary structure prediction</h1><p><a href="https://vub-my.sharepoint.com/personal/wim_vranken_vub_be/_layouts/15/onedrive.aspx?id=%2Fpersonal%2Fwim%5Fvranken%5Fvub%5Fbe%2FDocuments%2FOpnamen%2FAlgorithms%20in%20bioinfo%5Fcomputational%20biology%2D20210304%5F100320%2DMeeting%20Recording%2Emp4&amp;parent=%2Fpersonal%2Fwim%5Fvranken%5Fvub%5Fbe%2FDocuments%2FOpnamen&amp;originalPath=aHR0cHM6Ly92dWItbXkuc2hhcmVwb2ludC5jb20vOnY6L2cvcGVyc29uYWwvd2ltX3ZyYW5rZW5fdnViX2JlL0VWakxIeVdwX2F0SG1rZV9VMVNRZGdNQjBYNDNXMl9zWHR2bmVQbHFxWXIyZ0E_cnRpbWU9aVpuUjFqN2YyRWc">Video Part 1</a></p><h2 id="protein-secondary-structure-prediction-600"><a href="https://en.wikipedia.org/wiki/Protein_secondary_structure">Protein secondary structure</a> prediction 6:00</h2><p><img src="/images/ADVMB/2002180.png" /></p><h2 id="why-proteins-834">Why <a href="https://en.wikipedia.org/wiki/Protein">proteins</a>? 8:34</h2><ul><li><strong>Interacting</strong> is what proteins do!<ul><li>Proteins can interact with many types of molecules, including <a href="https://en.wikipedia.org/wiki/Protein–protein_interaction">with other proteins</a>, <a href="https://en.wikipedia.org/wiki/Protein–lipid_interaction">with lipids</a>, <a href="https://en.wikipedia.org/wiki/Protein–carbohydrate_interaction">with carboyhydrates</a>, and <a href="https://en.wikipedia.org/wiki/Protein–DNA_interaction">with DNA</a>.</li></ul></li><li>Abundance in cells: Proteins in the cell are <strong>vastly complicated</strong><ul><li>It has been estimated that average-sized <a href="https://en.wikipedia.org/wiki/Bacteria">bacteria</a> contain about 2 million proteins per cell.</li></ul></li></ul><h2 id="bioinformatics-dna-and-proteins-1220">Bioinformatics, DNA and proteins 12:20</h2><table><thead><tr class="header"><th></th><th style="text-align: right;">total</th><th style="text-align: right;">percentage</th></tr></thead><tbody><tr class="odd"><td>Evidence at protein level</td><td style="text-align: right;">20622</td><td style="text-align: right;">0.05%</td></tr><tr class="even"><td>Evidence at transcript level</td><td style="text-align: right;">818805</td><td style="text-align: right;">1.91%</td></tr><tr class="odd"><td>Inferred from homology</td><td style="text-align: right;">9893252</td><td style="text-align: right;">23.10%</td></tr><tr class="even"><td>Predicted</td><td style="text-align: right;">32089200</td><td style="text-align: right;">74.94%</td></tr></tbody></table><p>The key method to investigate proteins is understand its level, like how to catalyse reaction and which signa, that is related to structural biology.</p><h2 id="structural-biology-1538"><a href="https://en.wikipedia.org/wiki/Structural_biology#:~:text=Structural%20biology%20is%20a%20branch%20of%20molecular%20biology,,how%20alterations%20in%20their%20structures%20affect%20their%20function.">Structural biology</a> 15:38</h2><figure><img src="/images/ADVMB/2002182.png" alt="" /><figcaption>21:24</figcaption></figure><h3 id="what-do-we-want-to-find-out-2303">What do we want to find out? 23:03</h3><ul><li><p>How does a protein <strong>interact with a ligand</strong>?</p><ul><li><p>What does <a href="https://nl.wikipedia.org/wiki/Ibuprofen">ibuprofen</a> do?</p><p><img src="/images/ADVMB/2002181.png" /></p></li></ul></li><li><p>What do protein complexes look like?</p><ul><li>E.g. How do pili from bacteria form?</li></ul></li></ul><h3 id="protein-behaviour-2629"><a href="https://alevelbiology.co.uk/notes/proteins-physical-chemical-properties/">Protein behaviour</a> 26:29</h3><p>Everything constructed proteins move all the time.</p><figure><img src="/images/ADVMB/2002183.png" alt="" /><figcaption>28:00</figcaption></figure><figure><img src="/images/ADVMB/2002184.png" alt="" /><figcaption>29:27</figcaption></figure><h4 id="structural-relationship-of-proteins-and-amino-acids"><a href="https://www.dnatube.com/video/833/Structural-relationship-of-proteins-and-amino-acids">Structural relationship of proteins and amino acids</a></h4><p>Amino acids are the building blocks of polypeptides and proteins. In polypeptides and proteins, amino acids molecules are linked to each other by polypeptide bonds. The sequence of amino acids in polypeptide is encoded by the DNA.</p><h2 id="sequence-and-structure-4140"><a href="https://en.wikipedia.org/wiki/Protein_sequencing">Sequence</a> and <a href="https://en.wikipedia.org/wiki/Protein_structure">structure</a> 41:40</h2><figure><img src="/images/ADVMB/2002185.png" alt="" /><figcaption>38:17 ~ 39:41</figcaption></figure><ul><li><p><a href="https://en.wikipedia.org/wiki/Protein_folding">Protein folding</a></p></li><li><p>The structure is encoded in the sequence, but how?</p><ul><li>100 amino acid protein<ul><li>198 backbone angles</li><li>3 conformations each</li><li>3<sup>198</sup> possibilities!</li></ul></li></ul></li><li><p>How do we get from a sequence to secondary or tertiary structure? 47:17</p><ul><li>Experimental data!<ul><li>NMR, X-ray, …</li><li>But what if you don’t have any? – <strong>Bioinformatics</strong>!</li></ul></li></ul></li></ul><figure><img src="/images/ADVMB/2002186.png" alt="" /><figcaption>Bioinformatics approach 1:06:29</figcaption></figure><figure><img src="/images/ADVMB/2002187.png" alt="" /><figcaption>1:09:41</figcaption></figure><h2 id="protein-secondary-structure-prediction-11032">Protein secondary structure prediction 1:10:32</h2><h3 id="how-do-we-define-secondary-structure-classes">How do we define <em>secondary structure classes</em>?</h3><ul><li><p><a href="https://www.youtube.com/watch?v=aH2IbYs_XjY">Hydrogen bonding</a> 1:10:48</p><ul><li>Hydrogen on electronegative atom (N, O) has partial positive charge</li><li>Can form a <em>hydrogen bond</em> with another electronegative atom</li></ul></li><li><p>Regular patterns of hydrogen bonding in secondary structure elements 1:16:35</p><ul><li><img src="/images/ADVMB/2002188.png" /></li></ul></li><li><p><a href="https://en.wikipedia.org/wiki/DSSP_(hydrogen_bond_estimation_algorithm)">DSSP (hydrogen bond estimation algorithm)</a> 1:17:54</p><ul><li><p>1983, in Pascal</p></li><li><p>Simple definition for backbone hydrogen bond</p><p><img src="/images/ADVMB/2002114.png" /></p><ul><li>r is distance</li><li>N, H backbone atoms from residue i</li><li>O, C backbone atoms from residue j</li></ul></li><li><p>Assigns secondary structure based on patterns</p><ul><li>α helix (H), i → i+4</li><li>β strand (E), long set of connected hydrogen bonds</li><li>3<sub>10</sub> helix (G), i → i+3</li><li>And others…</li></ul></li></ul></li><li><p>Look at the local conformation of the amino acid.</p></li><li><figure><img src="/images/ADVMB/2002189.png" alt="" /><figcaption>1:20:48</figcaption></figure></li><li><p>Using structural biology data</p><ul><li><img src="/images/ADVMB/2002190.png" title="fig:" alt="1:27:30" /></li></ul></li></ul><h3 id="is-there-bias-in-the-input-data-14307">Is there bias in the input data? 1:43:07</h3><ul><li><p>Reference structure data set is crucial</p><ul><li>Not too much overlap between sequences!</li></ul></li><li><p>In general, proteins with less than 25-30% sequence identity between them</p></li><li><p>Other considerations</p><ul><li>Structure quality and origin, …</li></ul></li><li><p>Only about 6000 out of 80000 proteins</p></li><li><p>Define secondary structure</p><ul><li><p>DSSPH</p><ul><li>bonds</li></ul></li><li><p>STRIDE</p><ul><li>H bonds and (Φ,Ψ)</li></ul></li><li><p>DEFINE</p><ul><li>Interatomic distances</li></ul></li></ul></li><li><p>Secondary structure is a human concept!</p></li><li><p>Atom coordinate information from tertiary structure is converted into <strong>discrete</strong> secondary structure states</p></li><li><p>This is what is used to develop secondary structure predictors.</p></li></ul><p><img src="/images/ADVMB/2002191.png" /></p><p><a href="https://vub-my.sharepoint.com/personal/wim_vranken_vub_be/_layouts/15/onedrive.aspx?id=%2Fpersonal%2Fwim%5Fvranken%5Fvub%5Fbe%2FDocuments%2FOpnamen%2FAlgorithms%20in%20bioinfo%5Fcomputational%20biology%2D20210311%5F100144%2DMeeting%20Recording%2Emp4&amp;parent=%2Fpersonal%2Fwim%5Fvranken%5Fvub%5Fbe%2FDocuments%2FOpnamen&amp;originalPath=aHR0cHM6Ly92dWItbXkuc2hhcmVwb2ludC5jb20vOnY6L2cvcGVyc29uYWwvd2ltX3ZyYW5rZW5fdnViX2JlL0VlQ2JydHBTTHRGQ2tQclFhV0Jhd3hJQnc2UnVQWXdoc0dVdzBNQ0tPY0pTX2c_cnRpbWU9TEZoQTM2UGsyRWc">Video Part 2 1:02 ~ 1:50:17</a></p><h3 id="how-do-we-prepare-and-clean-up-the-data">How do we prepare and clean up the data?</h3><h4 id="input-data-227">Input data 2:27</h4><ul><li>Need clean protein structure data with bias removed as much as possible<ul><li>What about sequence overlap? Relatively common problem, does someone already have a solution</li></ul></li><li>Look for servers/articles/… – Common bioinformatics approach 3:56<ul><li>With a bit of luck the data are still live and accessible</li></ul></li><li>Determine which cutoffs/dataset to use for your approach 5:25<ul><li>Very strict:<ul><li>Only X-ray crystallography</li><li>Resolution of 1.6 Å or better (lower value)</li><li>Sequence identity cutoff of 25%</li><li>cullpdb_pc20_res1.6_R0.25_d120323_chains1998</li></ul></li></ul></li><li>What is in the PISCES file? 6:27</li></ul><p><img src="/images/ADVMB/2002192.png" /></p><ul><li>Run DSSP and STRIDE on 498 PDB structure 8:16<ul><li>Original set reduced for computational reasons</li></ul></li><li>Parse and interpret results<ul><li>Files for DSSP and for STRIDE</li></ul></li></ul><p><img src="/images/ADVMB/2002193.png" /></p><ul><li>Associated information 9:26</li><li>Protein family, from CATH</li></ul><p><img src="/images/ADVMB/2002194.png" /></p><h3 id="other-issues-1139">Other issues 11:39</h3><h4 id="proteins-are-dynamic">Proteins are dynamic</h4><h5 id="example-1222"><strong>Example</strong> 12:22:</h5><p>Does a given amino acid always fully adopt one type of secondary structure in reality?</p><ul><li>No!</li><li>Even possible that it switches secondary structure<ul><li>E.g. plaque formation in Alzheimers, where α helices from native protein form βstrands in plaques.</li></ul></li></ul><h5 id="could-you-avoid-using-structures-1547">Could you avoid using structures? 15:47</h5><ul><li><p>Develop predictions directly from data for protein in solution</p></li><li><p><strong>NMR</strong> data is recorded on proteins in solution</p><ul><li>Estimate in-solution secondary structure populations from NMR observations</li><li>Get secondary structure fractions, not states…</li></ul></li></ul><h3 id="variability-1650">Variability! 16:50</h3><figure><img src="/images/ADVMB/2002195.png" alt="" /><figcaption>Many combinations and variations!</figcaption></figure><p>How will we validate how well our approach works? 18:02</p><h4 id="validation-2035">Validation 20:35</h4><ul><li>Understand how well the method works<ul><li>Plan ahead</li></ul></li><li>Need independent test set<ul><li>Cannot use data that is included in statistical analysis or training of method</li></ul></li><li>Jackknife (leave-one-out) 23:50<ul><li>If method can be primed fast enough, leave out one protein, train the method, test it on the protein that you took out, ...</li></ul></li><li>But what measures or scores do you use to assess how well your method works? 25:03</li><li>Do you look at only what you predict correctly? Or also at what you predict incorrectly?</li></ul><h2 id="protein-secondary-structure-prediction">Protein secondary structure prediction</h2><h3 id="q3-measure-3535">Q<sub>3</sub> measure 35:35</h3><p><span class="math display">\[Q_3 = \frac{N_{residues\_correctly\_predicted}}{N_{residues\_total}}\]</span></p><ul><li>Random prediction should give 0.33</li><li>Real random prediction gives 0.38<ul><li>Frequencies of secondary structure are not the same</li></ul></li><li>Bad predictions can give <strong>high</strong> scores ...</li></ul><p><img src="/images/ADVMB/2002196.png" /></p><h3 id="matthews-correlation-coefficient-mcc-4048">Matthews correlation coefficient (MCC) 40:48</h3><ul><li>Predicted for each secondary structure state</li><li>Uses false/true positives and false/true negative</li></ul><p><img src="/images/ADVMB/2002197.png" /> <span class="math display">\[MCC = \frac{TP×TN-TP×FN}{\sqrt{(TP+FP)(TP+FN)(TN+FP)(TN+FN)}}\]</span></p><ul><li><p>Sensitivity (hit rate, recall)</p><p><em>TPR = TP / (TP + FN)</em></p></li><li><p>Specificity</p><p><em>SPC = TN / (FP + TN)</em></p></li></ul><figure><img src="/images/ADVMB/2002198.png" alt="" /><figcaption>Always has to add up to number of residues!</figcaption></figure><ul><li>Report MCC always <strong><u>per secondary structure class</u></strong></li><li>Multi-class definition also available</li></ul><p><span class="math display">\[MCC_{multiclass} = \frac{\sum_k\sum_l\sum_mC_{kk}C_{lm}-C_{kl}C_{mk}}{\sqrt{\sum_k(\sum_lC_{kl})(\sum_{k&#39;|k&#39;≠k}\sum_{l&#39;}C_{k&#39;l&#39;})}\sqrt{\sum_k(\sum_lC_{lk})(\sum_{k&#39;|k&#39;≠k}\sum_{l&#39;}C_{l&#39;k&#39;})}}\]</span></p><h3 id="sov-measure-5029">Sov measure 50:29</h3><p>Segment-based, heuristic</p><ul><li>Punishes broken predictions</li></ul><p><img src="/images/ADVMB/2002199.png" /></p><h3 id="predictions-5330">Predictions 53:30</h3><figure><img src="/images/ADVMB/2002200.png" alt="" /><figcaption>A bit of history… how predictions evolve</figcaption></figure><ul><li>Model based<ul><li>Preferably using some actual experimental data</li></ul></li><li>Machine learning<ul><li>Many approaches, training steps essentia</li></ul></li></ul><h4 id="chou-fasman-5442">Chou-Fasman 54:42</h4><ul><li>Original attempt at predicting secondary structure</li><li>Chou and Fasman (1970s)</li><li>Based on very limited number of protein structures</li></ul><p>Statistical propensity for each amino acid (R) to adopt a certain secondary structure (S)</p><p><img src="/images/ADVMB/2002201.png" /></p><h5 id="chou-fasman-algorithm">Chou-Fasman algorithm</h5><ul><li>Assign α/β propensities to each amino acid</li></ul><p><img src="/images/ADVMB/2002202.png" /></p><ul><li>Find region with 4/6 connected residues p<sub>α</sub> &gt; 1.0<ul><li>Extend on both ends until:<ul><li>4 connected residues have average p<sub>α</sub> &lt; 1.0 → End of α helix</li></ul></li><li>Total segment longer than 5 residues, average p<sub>α</sub> &gt; p<sub>β</sub> ?<ul><li>Assign as α helix</li></ul></li></ul></li></ul><p><img src="/images/ADVMB/2002203.png" /></p><ul><li>Find region with 3/5 connected residues p<sub>β</sub> &gt; 1.0<ul><li>Extend on both ends until:<ul><li>4 connected residues have average p<sub>β</sub> &lt; 1.0 → End of β sheet</li></ul></li><li>Average p<sub>β</sub> &gt; 1.05 and average p<sub>β</sub> &gt; p<sub>α</sub>?<ul><li>Assign as β sheet</li></ul></li></ul></li><li>Repeat for whole sequence</li><li>If α/β overlap, choose which one by highest average p</li></ul><p>Overall Chou-Fasman algorithm:</p><ul><li>Based on statistics</li><li>Very simple<ul><li>Per-residue, no residue interactions included</li><li>Algorithm <strong>cutoffs</strong> are pretty arbitrary</li></ul></li><li>But gives better than random results!<ul><li>Q<sub>3</sub> score of 42-52% depending on protein family</li></ul></li></ul><p><img src="/images/ADVMB/2002204.png" /></p><h4 id="gor-method-11122">GOR method 1:11:22</h4><ul><li><p>Evolved from GOR to GOR-V</p><ul><li><em>Jean Garnier, David Osguthorpe, Barry Robson</em></li></ul></li><li><p>Based on information theory approach (Bayes)</p><ul><li>Self-information</li><li>Directional information</li><li>Pair information</li></ul></li><li><p>Clearly defined model to get to results</p></li><li><p>Self-information (related to Chou-Fasman)</p></li></ul><p><img src="/images/ADVMB/2002205.png" /></p><ul><li>Self-information, more general</li></ul><p><img src="/images/ADVMB/2002206.png" /></p><p><em>Calculated for the three conformations, the highest value of Eq. (2) for one of the conformations S will be the predicted conformation and will be the propensity for that residue to be in that conformation, usually expressed in centinat units when natural logarithms are used.</em></p><ul><li>Include local sequence information<ul><li>How often do you see a residue in relation to a secondary structure element at position j?</li></ul></li></ul><p><span class="math display">\[I(ΔS_j;R_1,..., R_n ) = \log[P(S_j, R_1,..., R_n )/ P(n − S_j, R_1,..., R_n )]+log[P(n − S)/ P(S)]\]</span></p><h5 id="gor-iii-12122">GOR I/II 1:21:22</h5><h6 id="gor-i-and-ii-approximation">GOR I and II approximation</h6><ul><li>Self and directional information<ul><li>26 proteins, ~4500 residues (1978, GOR I)</li></ul></li><li>Uses windows of 17 residues<ul><li>For residue at position j, consider j-8 to j+8</li></ul></li></ul><p><img src="/images/ADVMB/2002207.png" /></p><ul><li>GOR I and II implementation</li></ul><p><img src="/images/ADVMB/2002208.png" /></p><p><img src="/images/ADVMB/2002209.png" /></p><p><img src="/images/ADVMB/2002210.png" /></p><ul><li>GOR I results…<ul><li>Has Q<sub>3</sub> around 49%, but includes turns</li><li>Bad at β sheet, tweaks get higher Q<sub>3</sub> (up to 60%)</li></ul></li></ul><p><img src="/images/ADVMB/2002211.png" /></p><h5 id="gor-iii-13505">GOR III 1:35:05</h5><h6 id="gor-iii-approximation">GOR III approximation</h6><ul><li>68 proteins, 12000 residues (1987)</li></ul><p><img src="/images/ADVMB/2002212.png" /></p><ul><li>The results<ul><li>GOR III has Q<sub>3</sub> around 63%</li></ul></li></ul><p><img src="/images/ADVMB/2002213.png" /></p><p>How to improve this method?</p><h5 id="gor-iv-13706">GOR IV 1:37:06</h5><h6 id="gor-iv-approximation">GOR IV approximation</h6><ul><li>267 proteins, 63000 residues (1996)</li><li>Consider information for all residue pairs</li></ul><p><img src="/images/ADVMB/2002214.png" /></p><ul><li>GOR IV implementation</li></ul><p><img src="/images/ADVMB/2002215.png" /></p><ul><li>Residue at position j in conformation S (and n-S):<ul><li>For threonine T at position j-8:<ul><li>Probability of histidine H at position j-7</li><li>Same for j-6 to j+8</li></ul></li><li>For histidine H at position j-7:<ul><li>…</li></ul></li></ul></li></ul><p><img src="/images/ADVMB/2002216.png" /></p><ul><li><p>Residue at position j in conformation S (and n-S):</p></li><li><p>Probability threonine T at position j-8</p></li><li><p>Probability histidine H at position j-7</p></li><li><p>…</p></li><li><p>The results</p><ul><li>have mean Q<sub>3</sub> of 64.4%</li><li>Example sequence of each protein class<ul><li><em>Zvelebil and Baum, Understanding Bioinformatics, Garland Science.</em></li><li>All α, all β, α/β and α+β</li></ul></li><li>Ranges from 39.2% (α+β) to 67.2% (α/β)</li></ul></li></ul><p><img src="/images/ADVMB/2002217.png" /></p><h5 id="gor-v-14506">GOR V 1:45:06</h5><ul><li>Uses multiple sequence alignment<ul><li>Structure is more conserved than sequence<ul><li>Insertions/deletions not as common in αhelices andβsheets, more so in loops.</li></ul></li><li>PSI-BLAST on query sequence<ul><li>Get set of sequences with high identity<ul><li>Cutoff 30% if lots of hits, lower to 20% if not that many</li></ul></li><li>Predict secondary structure for each sequence</li><li>Average predictions for each residue</li></ul></li></ul></li><li>Various other improvements<ul><li>513 proteins, 84107 residues (2002)</li></ul></li><li>The results…<ul><li>Has mean Q<sub>3</sub> of 73.5%</li><li>Q<sub>3</sub> ranges from 60.3% (allβ) to 84.3% (allα)</li></ul></li></ul><p><img src="/images/ADVMB/2002218.png" /></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computational Biology and Bioinformatics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Testing</title>
      <link href="2021/03/04/2021-03-04-Testing/"/>
      <url>2021/03/04/2021-03-04-Testing/</url>
      
        <content type="html"><![CDATA[<h1 id="testing">Testing</h1><p><a href="https://www.youtube.com/playlist?list=PL8FaHk7qbOD4ZfVY8g8lo5dFrLP-ctGmT">Video</a></p><p><a href="https://www.youtube.com/watch?v=wSuZmP-WE44&amp;list=PL8FaHk7qbOD4ZfVY8g8lo5dFrLP-ctGmT&amp;index=2">How Does a Programmer Know That Their Code Works?</a></p><p>In the real world, programmers believe their code works because of <strong>tests they write themselves</strong>.</p><ul><li>Knowing that it works for sure is usually impossible.</li><li>This will be our new way.</li></ul><p><strong>Sorting: The McGuffin for Our Testing Adventure</strong></p><p>To try out this new way™, we need a task to complete.</p><ul><li>Let’s try to write a method that sorts arrays of Strings.</li></ul><p><img src="/images/CS61B/1816110" /></p><p>In this lecture we’ll write sort, as well as our own test for sort.</p><ul><li>Even crazier idea: We’ll start by writing testSort first!</li></ul><p><img src="/images/CS61B/1816111" /></p><h2 id="ad-hoc-testing-vs.-junit"><a href="https://www.youtube.com/watch?v=Y2_oyfQV52c&amp;list=PL8FaHk7qbOD4ZfVY8g8lo5dFrLP-ctGmT&amp;index=3">Ad Hoc Testing vs. JUnit</a></h2><p><strong>Ad-Hoc Testing is Tedious</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSort</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** Tests the sort method of the Sort class. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String[] input = &#123;<span class="string">&quot;beware&quot;</span> , <span class="string">&quot;of&quot;</span>, <span class="string">&quot;falling&quot;</span>, <span class="string">&quot;rocks&quot;</span>&#125;;</span><br><span class="line">        String[] expected = &#123;<span class="string">&quot;beware&quot;</span> , <span class="string">&quot;falling&quot;</span>, <span class="string">&quot;of&quot;</span>, <span class="string">&quot;rocks&quot;</span>&#125;;</span><br><span class="line">        Sort.sort(input);</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* JUnit saves us the trouble of writing code like this (and more!). */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; input.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (!input[i].equals(expected[i])) &#123;</span><br><span class="line">              System.out.println(<span class="string">&quot;Mismatch at position &quot;</span> + i + <span class="string">&quot;, expected: &#x27;&quot;</span> + expected[i] + </span><br><span class="line">                             <span class="string">&quot;&#x27;, but got &#x27;&quot;</span> + input[i] + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  testSort();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>JUnit: A Library for Making Testing Easier (example below)</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSort</span> </span>&#123;</span><br><span class="line">  <span class="comment">/** Tests the sort method of the Sort class. */</span>  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">testSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String[] input = &#123;<span class="string">&quot;cows&quot;</span>, <span class="string">&quot;dwell&quot;</span>, <span class="string">&quot;above&quot;</span>, <span class="string">&quot;clouds&quot;</span>&#125;;</span><br><span class="line">    String[] expected = &#123;<span class="string">&quot;above&quot;</span>, <span class="string">&quot;cows&quot;</span>, <span class="string">&quot;clouds&quot;</span>, <span class="string">&quot;dwell&quot;</span>&#125;;</span><br><span class="line">    Sort.sort(input);</span><br><span class="line"> </span><br><span class="line">    org.junit.Assert.assertArrayEquals(expected, input);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    testSort();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="selection-sort">Selection Sort</h2><h3 id="back-to-sorting-selection-sort"><a href="https://www.youtube.com/watch?v=aYuM9VQJcUs&amp;list=PL8FaHk7qbOD4ZfVY8g8lo5dFrLP-ctGmT&amp;index=5">Back to Sorting: Selection Sort</a></h3><p>Selection sorting a list of N items:</p><ul><li>Find the smallest item.</li><li>Move it to the front.</li><li>Selection sort the remaining N-1 items (without touching front item!).</li></ul><figure><img src="/images/CS61B/1816112" alt="" /><figcaption>As an aside: Can prove correctness of this sort using invariants.</figcaption></figure><p><strong>Let’s try implementing this.</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sort</span> </span>&#123;</span><br><span class="line"><span class="comment">/** Sorts strings destructively. */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(String[] x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Find the smallest item</span></span><br><span class="line">        <span class="comment">// Move it to the front</span></span><br><span class="line">        <span class="comment">// Selection sort the rest (using recursion)</span></span><br><span class="line">        sort(x, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Sorts x starting at position start. */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(String[] x, <span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (start == x.length) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">int</span> smallestIndex = findSmallest(x, start);</span><br><span class="line">    swap(x, start, smallestIndex);</span><br><span class="line">    sort(x, start + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Swap item a with b. */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(String[] x, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    String temp = x[a];</span><br><span class="line">    x[a] = x[b];</span><br><span class="line">    x[b] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Return the index of the smallest String in x, starting at start. */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findSmallest</span><span class="params">(String[] x, <span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> smallestIndex = start;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; x.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> cmp = x[i].compareTo(x[smallestIndex]);</span><br><span class="line">            <span class="comment">// from the internet, if x[i] &lt; x[smallestIndex], cmp will be -1.</span></span><br><span class="line">            <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                smallestIndex = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> smallestIndex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="the-evolution-of-our-design">The Evolution of Our Design</h3><p><img src="/images/CS61B/1816113" /></p><p>Now we have all the helper methods we need, as well as tests that make us pretty sure that they work! All that’s left is to write the sort method itself.</p><h3 id="very-tricky-problem">Very Tricky Problem</h3><h4 id="bad-but-tempting-solution">Bad But Tempting Solution</h4><p>Without changing the signature of public static void sort(String[] a), how can we use recursion? What might the recursive call look like?</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(String[] x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> smallest = findSmallest(x);</span><br><span class="line">    swap(inputs, <span class="number">0</span>, smallest);</span><br><span class="line">    <span class="comment">// recursive call??</span></span><br><span class="line">    <span class="comment">// sort(x[1:]); ← Would be nice, but not possible!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Some languages support sub-indexing into arrays. Java does not.</p><ul><li>Bottom line: No way to get address of the middle of an array.</li></ul><h4 id="good-solution">Good Solution</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(String[] x)</span> </span>&#123;</span><br><span class="line">    sort(x, <span class="number">0</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Destructively sorts x starting at index k */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(String[] x, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    sort(x, k + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="major-design-flaw-in-findsmallest">Major Design Flaw in findSmallest</h3><p>We didn’t properly account for how findSmallest would be used.</p><ul><li><p>Example: Want to find smallest item from among the last 4:</p><p><img src="/images/CS61B/1816114" /></p></li><li><p>We need another parameter so that it’s actually useful for sorting.</p></li></ul><p><img src="/images/CS61B/1816115" /></p><p><strong>And We’re Done!</strong></p><p>Often, development is an incremental process that involves lots of task switching and on the fly design modification.</p><p>Tests provide stability and scaffolding.</p><ul><li>Provide confidence in basic units and mitigate possibility of breaking them.</li><li>Help you focus on one task at a time.</li></ul><p>In larger projects, tests also allow you to safely <strong>refactor</strong>! Sometimes code gets ugly, necessitating redesign and rewrites (see project 2).</p><p>One remaining problem: Sure was annoying to have to constantly edit which tests were running. Let’s take care of that.</p><h2 id="simpler-junit-tests-using-two-new-syntax-tricks"><a href="https://www.youtube.com/watch?v=hm5_pYuw-Dk&amp;list=PL8FaHk7qbOD4ZfVY8g8lo5dFrLP-ctGmT&amp;index=13">Simpler JUnit Tests (using two new syntax tricks)</a></h2><h3 id="simple-junit">Simple JUnit</h3><p>New Syntax #1: org.junit.Assert.assertEquals(expected, actual);</p><ul><li>Tests that expected equals actual.</li><li>If not, program terminates with verbose message.</li></ul><p>We’ve already seen this throughout today.</p><p>JUnit does much more:</p><ul><li>Other methods like assertEquals include assertFalse, assertNotNull, etc., <a href="http://junit.org/junit4/javadoc/4.12/org/junit/Assert.htmlOther">Link.</a></li><li>Other more complex behavior to support more sophisticated testing.</li></ul><h3 id="better-junit">Better JUnit</h3><p>The messages output by JUnit are kind of ugly, and invoking each test manually is annoying.</p><p>New Syntax #2 (just trust me):</p><ul><li><p><strong>Annotate</strong> each test with <strong><span class="citation" data-cites="org.junit.Test">@org.junit.Test</span></strong>.</p></li><li><p>Change all test methods to non-static.</p><p># <em>Yes this is weird, as it implies you’d be instantiating TestSort.java. In fact, JUnit runners do this. I don’t know wh</em>y.</p></li><li><p>Use a JUnit runner to run all tests and tabulate results.</p><ul><li>IntelliJ provides a default runner/renderer. OK to delete main.</li><li>If you want to use the command line instead, see the jh61b runner in the lab 3 supplement. Not preferred.</li><li>Rendered output is easier to read, no need to manually invoke tests!</li></ul></li></ul><p><strong>There is a lot of black magic happening here! Just accept it all for now.</strong></p><h3 id="even-better-junit">Even Better JUnit</h3><p>It is annoying to type out the name of the library repeatedly, e.g. <strong>org.junit.</strong></p><p>Test and <strong>org.junit.Assert.</strong>assertEquals.</p><p>New Syntax #3: To avoid this we’ll start every test file with:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br></pre></td></tr></table></figure><p>This will magically eliminate the need to type ‘org.junit’ or ‘org.junit.Assert’ (more after the midterm on what these imports really mean).</p><h2 id="testing-philosophy-web-video-only"><a href="https://www.youtube.com/watch?v=pfGYUHUbfxA&amp;list=PL8FaHk7qbOD4ZfVY8g8lo5dFrLP-ctGmT&amp;index=13">Testing Philosophy (Web Video Only)</a></h2><h3 id="correctness-tool-1-autograder">Correctness Tool #1: Autograder</h3><p>Idea: Magic autograder tells you code works.</p><ul><li>We use JUnit + jh61b libraries.</li></ul><p>Why?</p><ul><li>Less time wasted on “boring” stuff.</li><li>Determines your grade.</li><li>Gamifies correctness</li></ul><p>Why not?</p><ul><li>Autograders don’t exist in real world.</li><li>Errors may be hard to understand.</li><li>Slow workflow.</li><li>No control if grader breaks / misbehaves.</li></ul><h4 id="autograder-driven-development-add">Autograder Driven Development (ADD)</h4><p>The worst way to approach programming:</p><ul><li>Read and (mostly) understand the spec.</li><li>Write entire program.</li><li>Compile. Fix all compilation errors.</li><li>Send to autograder. Get many errors.</li><li>Until correct, repeat randomly:<ul><li>Run autograder.</li><li>Add print statements to zero in on the bug.</li><li>Make changes to code to try to fix bug.</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[63, 12, 91, 5, 0]</span><br><span class="line">got to this spot, lt is: 1</span><br><span class="line">got to this spot, lt is: 2</span><br><span class="line">got here!</span><br><span class="line">[63, 12, 0, 5, 91]</span><br><span class="line">got to this spot, lt is: 3</span><br><span class="line">got to this spot, lt is: 4</span><br><span class="line">got here!</span><br><span class="line">[5, 12, 0, 63, 91]</span><br><span class="line">Test Failed. Expected: ...</span><br></pre></td></tr></table></figure><h3 id="correctness-tool-2-unit-tests">Correctness Tool #2: Unit Tests</h3><p>Idea: Write tests for every “unit”.</p><ul><li>JUnit makes this easy!</li></ul><p>Why?</p><ul><li>Build confidence in basic modules.</li><li>Decrease debugging time.</li><li>Clarify the task.</li></ul><p>Why not?</p><ul><li>Building tests takes time.</li><li>May provide false confidence.</li><li>Hard to test units that rely on others.<ul><li>e.g. how do you test addFirst?</li></ul></li></ul><p><img src="/images/CS61B/1816116" /></p><h4 id="test-driven-development-tdd">Test-Driven Development (TDD)</h4><p>Steps to developing according to TDD:</p><ul><li>Identify a new feature.</li><li>Write a unit test for that feature.</li><li>Run the test. It should fail. (RED)</li><li>Write code that passes test. (GREEN)<ul><li>Implementation is certifiably good!</li></ul></li><li>Optional: Refactor code to make it faster, cleaner, etc.</li></ul><p><img src="/images/CS61B/1816117" /></p><h3 id="a-tale-of-two-workflows">A Tale of Two Workflows</h3><p>TDD is an extreme departure from the naive workflow.</p><ul><li>What’s best for you is probably in the middle.</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python sort.py</span><br><span class="line">[63, 12, 91, 5, 0]</span><br><span class="line">got to this spot, lt is: 1</span><br><span class="line">got to this spot, lt is: 2</span><br><span class="line">got here!</span><br><span class="line">[63, 12, 0, 5, 91]</span><br><span class="line">got to this spot, lt is: 3</span><br><span class="line">got to this spot, lt is: 4</span><br><span class="line">got here!</span><br><span class="line">[5, 12, 0, 63, 91]</span><br></pre></td></tr></table></figure><h3 id="correctness-tool-3-integration-testing">Correctness Tool #3: Integration Testing</h3><p>Idea: Tests cover many units at once.</p><ul><li>Not JUnit’s focus, but JUnit can do this.</li></ul><p>Why?</p><ul><li>Unit testing is not enough to ensure modules interact properly or that system works as expected.</li></ul><p>Why not?</p><ul><li>Can be tedious to do manually.</li><li>Can be challenging to automate.</li><li>Testing at highest level of abstraction may miss subtle or rare errors.</li></ul><p><img src="/images/CS61B/1816118" /></p><h2 id="more-on-junit-extra">More On JUnit (Extra)</h2><h3 id="what-is-an-annotation">What is an Annotation?</h3><p>Annotations (like org.junit.Test) don’t do anything on their own.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Runner uses reflections library to iterate through all methods with “Test” annotation. Pseudocode on next slide.</p><h3 id="sample-runner-pseudocode">Sample Runner Pseudocode</h3><p>Runner uses reflections library to iterate through all methods with “Test” annotation.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Method&gt; L = getMethodsWithAnnotation(TestSort.class, org.junit.Test);</span><br><span class="line"><span class="keyword">int</span> numTests = L.size();</span><br><span class="line"><span class="keyword">int</span> numPassed = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (Method m : L) &#123;</span><br><span class="line">    result r = m.execute();</span><br><span class="line">    <span class="keyword">if</span> (r.passed == <span class="keyword">true</span>) &#123; numPassed += <span class="number">1</span>; &#125;</span><br><span class="line">    <span class="keyword">if</span> (r.passed == <span class="keyword">false</span>) &#123; System.out.println(r.message);&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(numPassed + “/” + numTests + “ passed!”);</span><br></pre></td></tr></table></figure><h2 id="overview">Overview</h2><p><strong>Why Test Code?</strong> In the real world, chances are you won’t have an autograder. When your code gets deployed into production, it is important that you know that it will work for simple cases as well as strange edge cases.</p><p><strong>Test-Driven Development</strong> When provided an autograder, it is very easy to go “autograder happy”. Instead of actually understanding the spec and the requirements for a project, a student may write some base implementation, smash their code against the autograder, fix some parts, and repeat until a test is passed. This process tends to be a bit lengthy and really is not the best use of time. We will introduce a new programming method, Test-Driven Development (TDD), where the programmer writes the tests for a function BEFORE the actual function is written. Since unit tests are written before the function is, it becomes much easier to isolate errors in your code. Additionally, writing unit test requires that you have a relatively solid understanding of the task that you are undertaking. A drawback of this method is that it can be fairly slow and it can be easy to forget to test how functions interact with each other.</p><p><strong>JUnit Tests</strong> JUnit is a package that is used to debug programs in Java. An example function that comes from JUnit is <code>assertEquals(expected, actual)</code>. This function asserts that expected and actual have the same value. There are a bunch of other JUnit functions such as <code>assertEquals</code>, <code>assertFalse</code>, and <code>assertNotNull</code>.</p><p>When writing JUnit tests, it is good practice to write ‘<span class="citation" data-cites="Test">@Test</span>’ above the function that is testing. This allows for all your test methods to be run non statically.</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structures </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Recursion</title>
      <link href="2021/03/04/2021-03-04-Recursion/"/>
      <url>2021/03/04/2021-03-04-Recursion/</url>
      
        <content type="html"><![CDATA[<h1 id="recursion">Recursion</h1><h2 id="q1-num-eights">Q1: Num eights</h2><p>Write a recursive function <code>num_eights</code> that takes a positive integer <code>x</code> and returns the number of times the digit 8 appears in <code>x</code>. <em>Use recursion - the tests will fail if you use any assignment statements.</em></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">num_eights</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns the number of times 8 appears as a digit of x.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; num_eights(3)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; num_eights(8)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; num_eights(88888888)</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; num_eights(2638)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; num_eights(86380)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; num_eights(12345)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; from construct_check import check</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # ban all assignment statements</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check(HW_SOURCE_FILE, &#x27;num_eights&#x27;,</span></span><br><span class="line"><span class="string">    ...       [&#x27;Assign&#x27;, &#x27;AugAssign&#x27;])</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br></pre></td></tr></table></figure><p>Watch the <a href="https://www.youtube.com/watch?v=j34yCDO1ASQ&amp;t=1s">hints video</a> for somewhere to start.</p><h2 id="q2-ping-pong">Q2: Ping-pong</h2><p>The ping-pong sequence counts up starting from 1 and is always either counting up or counting down. At element <code>k</code>, the direction switches if <code>k</code> is a multiple of 8 or contains the digit 8. The first 30 elements of the ping-pong sequence are listed below, with direction swaps marked using brackets at the 8th, 16th, 18th, 24th, and 28th elements:</p><table><thead><tr class="header"><th style="text-align: left;">Index</th><th style="text-align: left;">1</th><th style="text-align: left;">2</th><th style="text-align: left;">3</th><th style="text-align: left;">4</th><th style="text-align: left;">5</th><th style="text-align: left;">6</th><th style="text-align: left;">7</th><th style="text-align: left;">[8]</th><th style="text-align: left;">9</th><th style="text-align: left;">10</th><th style="text-align: left;">11</th><th style="text-align: left;">12</th><th style="text-align: left;">13</th><th style="text-align: left;">14</th><th style="text-align: left;">15</th><th style="text-align: left;">[16]</th><th style="text-align: left;">17</th><th style="text-align: left;">[18]</th><th style="text-align: left;">19</th><th style="text-align: left;">20</th><th style="text-align: left;">21</th><th style="text-align: left;">22</th><th style="text-align: left;">23</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">PingPong Value</td><td style="text-align: left;">1</td><td style="text-align: left;">2</td><td style="text-align: left;">3</td><td style="text-align: left;">4</td><td style="text-align: left;">5</td><td style="text-align: left;">6</td><td style="text-align: left;">7</td><td style="text-align: left;">[8]</td><td style="text-align: left;">7</td><td style="text-align: left;">6</td><td style="text-align: left;">5</td><td style="text-align: left;">4</td><td style="text-align: left;">3</td><td style="text-align: left;">2</td><td style="text-align: left;">1</td><td style="text-align: left;">[0]</td><td style="text-align: left;">1</td><td style="text-align: left;">[2]</td><td style="text-align: left;">1</td><td style="text-align: left;">0</td><td style="text-align: left;">-1</td><td style="text-align: left;">-2</td><td style="text-align: left;">-3</td></tr></tbody></table><table><thead><tr class="header"><th style="text-align: left;">Index (cont.)</th><th style="text-align: left;">[24]</th><th style="text-align: left;">25</th><th style="text-align: left;">26</th><th style="text-align: left;">27</th><th style="text-align: left;">[28]</th><th style="text-align: left;">29</th><th style="text-align: left;">30</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">PingPong Value</td><td style="text-align: left;">[-4]</td><td style="text-align: left;">-3</td><td style="text-align: left;">-2</td><td style="text-align: left;">-1</td><td style="text-align: left;">[0]</td><td style="text-align: left;">-1</td><td style="text-align: left;">-2</td></tr></tbody></table><p>mplement a function <code>pingpong</code> that returns the nth element of the ping-pong sequence <em>without using any assignment statements</em>.</p><p>You may use the function <code>num_eights</code>, which you defined in the previous question.</p><p><em>Use recursion - the tests will fail if you use any assignment statements.</em></p><p><em>Hint</em>: If you're stuck, first try implementing <code>pingpong</code> using assignment statements and a <code>while</code> statement. Then, to convert this into a recursive solution, write a helper function that has a parameter for each variable that changes values in the body of the while loop.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pingpong</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the nth element of the ping-pong sequence.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(8)</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(10)</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(15)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(21)</span></span><br><span class="line"><span class="string">    -1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(22)</span></span><br><span class="line"><span class="string">    -2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(30)</span></span><br><span class="line"><span class="string">    -2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(68)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(69)</span></span><br><span class="line"><span class="string">    -1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(80)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(81)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(82)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(100)</span></span><br><span class="line"><span class="string">    -6</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; from construct_check import check</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # ban assignment statements</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check(HW_SOURCE_FILE, &#x27;pingpong&#x27;, [&#x27;Assign&#x27;, &#x27;AugAssign&#x27;])</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br></pre></td></tr></table></figure><p>Watch the <a href="https://www.youtube.com/watch?v=5PAfXcB_EoU">hints video</a> for somewhere to start.</p><h2 id="q3-missing-digits">Q3: Missing Digits</h2><p>Write the recursive function <code>missing_digits</code> that takes a number <code>n</code> that is sorted in increasing order (for example, <code>12289</code> is valid but <code>15362</code> and <code>98764</code> are not). It returns the number of missing digits in <code>n</code>. A missing digit is a number between the first and last digit of <code>n</code> of a that is not in <code>n</code>. <em>Use recursion - the tests will fail if you use while or for loops.</em></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">missing_digits</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Given a number a that is in sorted, increasing order,</span></span><br><span class="line"><span class="string">    return the number of missing digits in n. A missing digit is</span></span><br><span class="line"><span class="string">    a number between the first and last digit of a that is not in n.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; missing_digits(1248) # 3, 5, 6, 7</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; missing_digits(1122) # No missing numbers</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; missing_digits(123456) # No missing numbers</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; missing_digits(3558) # 4, 6, 7</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; missing_digits(35578) # 4, 6</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; missing_digits(12456) # 3</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; missing_digits(16789) # 2, 3, 4, 5</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; missing_digits(19) # 2, 3, 4, 5, 6, 7, 8</span></span><br><span class="line"><span class="string">    7</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; missing_digits(4) # No missing numbers between 4 and 4</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; from construct_check import check</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # ban while or for loops</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check(HW_SOURCE_FILE, &#x27;missing_digits&#x27;, [&#x27;While&#x27;, &#x27;For&#x27;])</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br></pre></td></tr></table></figure><p>Watch the <a href="https://www.youtube.com/watch?v=xcd2jTROLSs">hints video</a> for somewhere to start.</p><h3 id="q4-count-coins">Q4: Count coins</h3><p>Given a positive integer <code>total</code>, a set of coins makes change for <code>total</code> if the sum of the values of the coins is <code>total</code>. Here we will use standard US Coin values: 1, 5, 10, 25 For example, the following sets make change for <code>15</code>:</p><ul><li>15 1-cent coins</li><li>10 1-cent, 1 5-cent coins</li><li>5 1-cent, 2 5-cent coins</li><li>5 1-cent, 1 10-cent coins</li><li>3 5-cent coins</li><li>1 5-cent, 1 10-cent coin</li></ul><p>Thus, there are 6 ways to make change for <code>15</code>. Write a recursive function <code>count_coins</code> that takes a positive integer <code>total</code> and returns the number of ways to make change for <code>total</code> using coins. Use the <code>next_largest_coin</code> function given to you to calculate the next largest coin denomination given your current coin. I.e. <code>next_largest_coin(5)</code> = <code>10</code>.</p><blockquote><p><em>Hint:</em> Refer the <a href="http://composingprograms.com/pages/17-recursive-functions.html#example-partitions">implementation</a> of <code>count_partitions</code> for an example of how to count the ways to sum up to a total with smaller parts. If you need to keep track of more than one value across recursive calls, consider writing a helper function.</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">next_largest_coin</span>(<span class="params">coin</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the next coin. </span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; next_largest_coin(1)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; next_largest_coin(5)</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; next_largest_coin(10)</span></span><br><span class="line"><span class="string">    25</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; next_largest_coin(2) # Other values return None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> coin == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">5</span></span><br><span class="line">    <span class="keyword">elif</span> coin == <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line">    <span class="keyword">elif</span> coin == <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">25</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_coins</span>(<span class="params">total</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the number of ways to make change for total using coins of value of 1, 5, 10, 25.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_coins(15)</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_coins(10)</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_coins(20)</span></span><br><span class="line"><span class="string">    9</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_coins(100) # How many ways to make change for a dollar?</span></span><br><span class="line"><span class="string">    242</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; from construct_check import check</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # ban iteration</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check(HW_SOURCE_FILE, &#x27;count_coins&#x27;, [&#x27;While&#x27;, &#x27;For&#x27;])                                          </span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br></pre></td></tr></table></figure><h1 id="just-for-fun-questions">Just for Fun Questions</h1><blockquote><p>This question demonstrates that it's possible to write recursive functions without assigning them a name in the global frame.</p></blockquote><h2 id="q5-anonymous-factorial">Q5: Anonymous factorial</h2><p>The recursive factorial function can be written as a single expression by using a <a href="http://docs.python.org/py3k/reference/expressions.html#conditional-expressions">conditional expression</a>.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>fact = <span class="keyword">lambda</span> n: <span class="number">1</span> <span class="keyword">if</span> n == <span class="number">1</span> <span class="keyword">else</span> mul(n, fact(sub(n, <span class="number">1</span>)))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fact(<span class="number">5</span>)</span><br><span class="line"><span class="number">120</span></span><br></pre></td></tr></table></figure><p>However, this implementation relies on the fact (no pun intended) that <code>fact</code> has a name, to which we refer in the body of <code>fact</code>. To write a recursive function, we have always given it a name using a <code>def</code> or assignment statement so that we can refer to the function within its own body. In this question, your job is to define fact recursively without giving it a name!</p><p>Write an expression that computes <code>n</code> factorial using only call expressions, conditional expressions, and lambda expressions (no assignment or def statements). <em>Note in particular that you are not allowed to use <code>make_anonymous_factorial</code> in your return expression.</em> The <code>sub</code> and <code>mul</code> functions from the <code>operator</code> module are the only built-in functions required to solve this problem:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> sub, mul</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_anonymous_factorial</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the value of an expression that computes factorial.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; make_anonymous_factorial()(5)</span></span><br><span class="line"><span class="string">    120</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; from construct_check import check</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # ban any assignments or recursion</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check(HW_SOURCE_FILE, &#x27;make_anonymous_factorial&#x27;, [&#x27;Assign&#x27;, &#x27;AugAssign&#x27;, &#x27;FunctionDef&#x27;, &#x27;Recursion&#x27;])</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;YOUR_EXPRESSION_HERE&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Exercises </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Structure and Interpretation of Computer Programs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tree Recursion</title>
      <link href="2021/03/04/2021-03-04-Tree-Recursion/"/>
      <url>2021/03/04/2021-03-04-Tree-Recursion/</url>
      
        <content type="html"><![CDATA[<h1 id="tree-recursion">Tree Recursion</h1><p><a href="https://www.youtube.com/watch?v=VRFqir6dTrg&amp;list=PL6BsET-8jgYU1eWkdF45L1Pce1d4DxJcR">Video</a></p><p><a href="http://composingprograms.com/pages/17-recursive-functions.html">Textbook</a></p><h2 id="recursive-factorial">Recursive Factorial</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">factorial (!)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> <span class="comment"># base case</span></span><br><span class="line">       n! = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> n &gt; <span class="number">0</span> <span class="comment"># recursive casse</span></span><br><span class="line">       n! = n x (n-<span class="number">1</span>)!</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span>(<span class="params">n</span>):</span></span><br><span class="line">    fact = <span class="number">1</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= n:</span><br><span class="line">        fact *= i</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fact</span><br><span class="line"></span><br><span class="line">factorial(<span class="number">5</span>)</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; 1 = 1*1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; 2 = 2*1!</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; 6 = 3*2!</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; 24 = 4*3!</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; 120 = 5*4! (done)</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * factorial(n-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="order-of-recursive-calls"><a href="https://www.youtube.com/watch?v=VYYkJ1OLXBw&amp;list=PL6BsET-8jgYU1eWkdF45L1Pce1d4DxJcR&amp;index=4">Order of Recursive Calls</a></h2><h3 id="the-cascade-function">The Cascade Function</h3><p><img src="/images/CS61A/62754.png" /></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cascade</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">10</span>:</span><br><span class="line">        print(n)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(n)</span><br><span class="line">        cascade(n//<span class="number">10</span>)</span><br><span class="line">        print(n)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cascade</span>(<span class="params">n</span>):</span></span><br><span class="line">    print(n)</span><br><span class="line">    <span class="keyword">if</span> n &gt;= <span class="number">10</span>:</span><br><span class="line">        cascade(n//<span class="number">10</span>)</span><br><span class="line">        print(n)</span><br></pre></td></tr></table></figure><ul><li>If two implementations are equally clear, then shorter is usually better</li><li>In this case, the longer implementation is more clear (at least to me)</li><li>When learning to write recursive functions, put the base cases first</li><li>Both are recursive functions, even though only the first has typical structure</li></ul><h2 id="example-inverse-cascade"><a href="https://www.youtube.com/watch?v=uK3KrG8qxPg&amp;list=PL6BsET-8jgYU1eWkdF45L1Pce1d4DxJcR&amp;index=5">Example: Inverse Cascade</a></h2><p>Write a function that prints an inverse cascade:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inverse_cascade</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print an inverse cascade of prefixes of n.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; inverse_cascade(1234)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    12</span></span><br><span class="line"><span class="string">    123</span></span><br><span class="line"><span class="string">    1234</span></span><br><span class="line"><span class="string">    123</span></span><br><span class="line"><span class="string">    12</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    grow(n)</span><br><span class="line">    print(n)</span><br><span class="line">    shrink(n)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f_then_g</span>(<span class="params">f, g, n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n:</span><br><span class="line">        f(n)</span><br><span class="line">        g(n)</span><br><span class="line"></span><br><span class="line">grow = <span class="keyword">lambda</span> n: f_then_g(grow, <span class="built_in">print</span>, n//<span class="number">10</span>)</span><br><span class="line">shrink = <span class="keyword">lambda</span> n: f_then_g(<span class="built_in">print</span>, shrink, n//<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h2 id="tree-recursion-1">Tree Recursion</h2><p>Tree-shaped processes arise whenever executing the body of a recursive function makes <strong>more than one recursive call</strong></p><p><strong>n</strong>: 0, 1, 2, 3, 4, 5, 6, 7, 8, ... , 35</p><p><strong>fib(n)</strong>: 0, 1, 1, 2, 3, 5, 8, 13, 21, ... , 9,227,465</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fib(n-<span class="number">2</span>) + fib(n-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="a-tree-recursive-process">A Tree-Recursive Process</h3><p>The computational process of fib evolves into a tree structure</p><p><img src="/images/CS61A/6275400.png" /></p><h3 id="repetition-in-tree-recursive-computation">Repetition in Tree-Recursive Computation</h3><p>This process is highly repetitive; fib is called on the same argument multiple times</p><p><img src="/images/CS61A/6275401.png" /></p><p>(We will speed up this computation dramatically in a few weeks by remembering results)</p><h2 id="example-towers-of-hanoi"><a href="https://www.youtube.com/watch?v=Vgp-C3-Bh90&amp;list=PL6BsET-8jgYU1eWkdF45L1Pce1d4DxJcR&amp;index=7">Example: Towers of Hanoi</a></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move_disk</span>(<span class="params">disk_number, from_peg, to_peg</span>):</span></span><br><span class="line">    print(<span class="string">&quot;Move disk &quot;</span> + <span class="built_in">str</span>(disk_number) + <span class="string">&quot; from peg &quot;</span> \</span><br><span class="line">          + <span class="built_in">str</span>(from_peg) + <span class="string">&quot; to peg &quot;</span> + <span class="built_in">str</span>(to_peg) + <span class="string">&quot;.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve_hanoi</span>(<span class="params">n, start_peg, end_peg</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        move_disk(n, start_peg, end_peg)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        spare_peg = <span class="number">6</span> - start_peg - end_peg</span><br><span class="line">        solve_hanoi(n - <span class="number">1</span>, start_peg, spare_peg)</span><br><span class="line">        move_disk(n, start_peg, end_peg)</span><br><span class="line">        solve_hanoi(n - <span class="number">1</span>, spare_peg, end_peg)</span><br></pre></td></tr></table></figure><h2 id="example-counting-partitions"><a href="https://www.youtube.com/watch?v=DvgT4dnSMVM&amp;list=PL6BsET-8jgYU1eWkdF45L1Pce1d4DxJcR&amp;index=8">Example: Counting Partitions</a></h2><p>The number of partitions of a positive integer n, using parts up to size m, is the number of ways in which n can be expressed as the sum of positive integer parts up to m in <strong>increasing</strong> / <strong>nondecreasing</strong> order.</p><figure><img src="/images/CS61A/6275402.png" alt="" /><figcaption>count_partitions(6, 4)</figcaption></figure><p><img src="/images/CS61A/6275403.png" /></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_partitions</span>(<span class="params">n, m</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Count the partitions of n using parts up to size m.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_partitions(6, 4)</span></span><br><span class="line"><span class="string">    9</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_partitions(10, 10)</span></span><br><span class="line"><span class="string">    42</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> n &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> m == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        with_m = count_partitions(n-m, m)</span><br><span class="line">        without_m = count_partitions(n, m-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> with_m + without_m</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Structure and Interpretation of Computer Programs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ALists, Resizing, vs. SLists</title>
      <link href="2021/03/03/2021-03-03-ALists,-Resizing,-vs.-SLists/"/>
      <url>2021/03/03/2021-03-03-ALists,-Resizing,-vs.-SLists/</url>
      
        <content type="html"><![CDATA[<h1 id="alists-resizing-vs.-slists">ALists, Resizing, vs. SLists</h1><p><a href="https://www.youtube.com/playlist?list=PL8FaHk7qbOD4S8NCRyN3yQV2U2TpjWUhy">Video</a></p><h2 id="a-last-look-at-linked-lists"><a href="https://www.youtube.com/watch?v=lrK07ed_Yqo&amp;list=PL8FaHk7qbOD4S8NCRyN3yQV2U2TpjWUhy&amp;index=1">A Last Look at Linked Lists</a></h2><h3 id="doubly-linked-lists">Doubly Linked Lists</h3><p>Behold. The state of the art as we arrived at in last week’s lecture. Through various improvements, we made all of the following operations fast:</p><ul><li>addFirst, addLast</li><li>getFirst, getLast</li><li>removeFirst, removeLast</li></ul><h3 id="arbitrary-retrieval"><strong>Arbitrary Retrieval</strong></h3><p>Suppose we added get(int i), which returns the ith item from the list.</p><p>Why would get be slow for long lists compared to getLast()? For what inputs?</p><ul><li>Have to scan to desired position.</li><li>Slow for any i not near the sentinel node.</li><li>How do we fix this?<ul><li>Will discuss (much later) sophisticated changes that can speed up lists.</li><li>For now: We’ll take a different tack: Using an array instead (no links!).</li></ul></li></ul><p><img src="/images/CS61B/190819.png" /></p><h2 id="naive-array-lists"><a href="https://www.youtube.com/watch?v=2FmIfaHl2G4&amp;list=PL8FaHk7qbOD4S8NCRyN3yQV2U2TpjWUhy&amp;index=2">Naive Array Lists</a></h2><h3 id="random-access-in-arrays">Random Access in Arrays</h3><p>Retrieval from any position of an array is very fast.</p><ul><li>Independent* of array size.</li><li>Ultra fast random access results from the fact that memory boxes are the same size (in bits).</li></ul><h3 id="our-goal-alist.java">Our Goal: AList.java</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//         0 1  2 3 4 5 6 7</span></span><br><span class="line"><span class="comment">// items: [6 9 -1 2 0 0 0 0 ...]</span></span><br><span class="line"><span class="comment">// size: 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Invariants:</span></span><br><span class="line"><span class="comment"> addLast: The next item we want to add, will go into position size</span></span><br><span class="line"><span class="comment"> getLast: The item we want to return is in position size - 1</span></span><br><span class="line"><span class="comment"> size: The number of items in the list should be size.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] items;    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        items = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        items[size] = x;</span><br><span class="line">        size += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items[size - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AList <strong>Invariants</strong>:</p><ul><li>The position of the next item to be inserted is always size.</li><li>size is always the number of items in the AList.</li><li>The last item in the list is always in position size - 1.</li></ul><h3 id="the-abstract-vs.-the-concrete"><a href="https://www.youtube.com/watch?v=WK1Fg-bNoU8&amp;list=PL8FaHk7qbOD4S8NCRyN3yQV2U2TpjWUhy&amp;index=4">The Abstract vs. the Concrete</a></h3><p>When we removeLast(), which memory boxes need to change? To what?-</p><ul><li><strong>size</strong></li><li><del>size and items</del></li><li><del>size and items[i] for some i</del></li><li><del>size, items, and items[i] for some i</del></li><li><del>size, items, and items[i] for many different i</del></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> returnItem = items[size - <span class="number">1</span>];</span><br><span class="line">    items[size - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Setting deleted item to zero is not necessary to preserve invariants, and thus not necessary for correctness.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    size -= <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">return</span> returnItem;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="the-mighty-alist"><a href="https://www.youtube.com/watch?v=IonBhRlyIPk&amp;list=PL8FaHk7qbOD4S8NCRyN3yQV2U2TpjWUhy&amp;index=5">The Mighty AList</a></h3><p>Key Idea: Use some subset of the entries of an array.</p><p>What happens if we insert into the AList above? What should we do about it?</p><h2 id="resizing-arrays">Resizing Arrays</h2><p>When the array gets too full (size==items.length), e.g. addLast(11), just make a new array:</p><ul><li>int[] a = new int[size+1];</li><li>System.arraycopy(...) # we call this process “resizing”</li><li>a[size] = 11;</li><li>items = a; size +=1;</li></ul><h3 id="resizing-array-code"><a href="https://www.youtube.com/watch?v=tLcinQx5VnY&amp;list=PL8FaHk7qbOD4S8NCRyN3yQV2U2TpjWUhy&amp;index=6">Resizing Array Code</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (size == items.length) &#123;</span><br><span class="line">    <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[size + <span class="number">1</span>];</span><br><span class="line">    System.arraycopy(items, <span class="number">0</span>, a, <span class="number">0</span>, size);</span><br><span class="line">    items = a;  </span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    items[size] = x;</span><br><span class="line">    size += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Much Better */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[capacity];</span><br><span class="line">    System.arraycopy(items, <span class="number">0</span>, a, <span class="number">0</span>, size);</span><br><span class="line">    items = a;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (size == items.length) &#123;</span><br><span class="line">resize(size + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    items[size] = x;</span><br><span class="line">    size += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="runtime-and-space-usage-analysis"><a href="https://www.youtube.com/watch?v=oysadh63NxY&amp;list=PL8FaHk7qbOD4S8NCRyN3yQV2U2TpjWUhy&amp;index=7">Runtime and Space Usage Analysis</a></h3><p>Suppose we have a full array of size 100. If we call addLast two times, how many <strong>total</strong> array memory boxes will we need to create and fill (for just these 2 calls)?</p><ul><li><del>0</del></li><li><del>101</del></li><li><strong>203</strong></li><li><del>10302</del></li></ul><p>Bonus question: What is the maximum number of array boxes that Java will track at any given time? Assume that “garbage collection” happens immediately when all references to an object are lost.</p><h3 id="array-resizing">Array Resizing</h3><p>Resizing twice requires us to create and fill 203 total memory boxes.</p><ul><li>Bonus answer: Most boxes at any one time is 203.</li><li>When the second addLast is done, we are left with 102 boxes.</li></ul><p><img src="/images/CS61B/1908191.png" /></p><p>Suppose we have a full array of size 100. If we call addLast until size = 1000, roughly how many total array memory boxes will we need to create and fill?</p><ul><li><del>1,000</del></li><li><strong>500,000</strong></li><li><del>1,000,000</del></li><li><del>500,000,000,000</del></li><li><del>1,000,000,000,000</del></li></ul><p>Total array boxes created/copied: 101 + 102 + … + 1000Since sum of 1 + 2 + 3 + … + N = N(N+1)/2, sum(101, …, 1000) is close to 500,000.</p><p>Bonus question: What is the maximum number of array boxes that Java will track at any given time? Assume that “garbage collection” happens immediately when all references to an object are lost.</p><h3 id="resizing-slowness"><a href="https://www.youtube.com/watch?v=8WtcaXATB-Y&amp;list=PL8FaHk7qbOD4S8NCRyN3yQV2U2TpjWUhy&amp;index=9">Resizing Slowness</a></h3><p>Inserting 100,000 items requires roughly 5,000,000,000 new containers.</p><ul><li>Computers operate at the speed of GHz (due billions of things per second).</li><li>No huge surprise that 100,000 items took seconds.</li></ul><h3 id="fixing-the-resizing-performance-bug">Fixing the Resizing Performance Bug</h3><p>How do we fix this?</p><p>Geometric resizing is much faster: Just how much better will have to wait.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Unusably bad */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (size == items.length) &#123;</span><br><span class="line">        resize(size + RFACTOR);</span><br><span class="line">    &#125;</span><br><span class="line">    items[size] = x;</span><br><span class="line">    size += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Great performance. This is how the Python list is implemented. */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (size == items.length) &#123;</span><br><span class="line">resize(size * RFACTOR);</span><br><span class="line">    &#125;</span><br><span class="line">    items[size] = x;</span><br><span class="line">    size += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="performance-problem-2">Performance Problem #2</h3><p>Suppose we have a very rare situation occur which causes us to:</p><ul><li>Insert 1,000,000,000 items.</li><li>Then remove 990,000,000 items.</li></ul><p>Our data structure will execute these operations acceptably fast, but afterwards there is a problem.</p><ul><li>What is the problem?</li></ul><p>An AList should not only be efficient in time, but also efficient in space.</p><ul><li>Define the “usage ratio” R = size / items.length;</li><li>Typical solution: Half array size when R &lt; 0.25.</li></ul><p><img src="/images/CS61B/1908192.png" /></p><h2 id="generic-alists"><a href="https://www.youtube.com/watch?v=Qcrd80To-TM&amp;list=PL8FaHk7qbOD4S8NCRyN3yQV2U2TpjWUhy&amp;index=10">Generic ALists</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] items;    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        items = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>];  </span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[capacity];</span><br><span class="line">        System.arraycopy(items, <span class="number">0</span>, a, <span class="number">0</span>, size);</span><br><span class="line">        items = a;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items[i];</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AList</span>&lt;<span class="title">Glorp</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Glorp[] items;    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        items = (Glorp []) <span class="keyword">new</span> Object[<span class="number">8</span>];  </span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</span><br><span class="line">        Glorp[] a = (Glorp []) <span class="keyword">new</span> Object[cap];</span><br><span class="line">        System.arraycopy(items, <span class="number">0</span>, a, <span class="number">0</span>, size);</span><br><span class="line">        items = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Glorp <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items[i];</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>When creating an array of references to Glorps:</p><ul><li>(Glorp []) <strong>new</strong> Object[cap];</li><li>Causes a compiler warning, which you should ignore.</li></ul><p>Why not just <strong>new</strong> Glorp[cap];</p><ul><li>Will cause a “generic array creation” error.</li></ul><h3 id="nulling-out-deleted-items">Nulling Out Deleted Items</h3><p>Unlike integer based ALists, we actually want to null out deleted items.</p><ul><li>Java only destroys unwanted objects when the last reference has been lost.</li><li>Keeping references to unneeded objects is sometimes called loitering.</li><li>Save memory. Don’t loiter.</li></ul><p><strong>Loitering Example</strong></p><p>Changing size to 2 yields a correct AList.</p><ul><li>But memory is wasted storing a reference to the red sign image.</li></ul><p>By nulling out items[2], Java is free to destroy the unneeded image from memory, which could be potentially megabytes in size</p><p><img src="/images/CS61B/1908193.png" /></p><h2 id="obscurantism-in-java">Obscurantism in Java</h2><p>We talk of “layers of abstraction” often in computer science.</p><ul><li>Related concept: obscurantism. The user of a class does not and should not know how it works.<ul><li>The Java language allows you to enforce this with ideas like <strong>private</strong>!</li></ul></li><li>A good programmer obscures details from themselves, even within a class.<ul><li>Example: addFirst and resize should be written totally independently. You should not be thinking about the details of one method while writing the other. Simply trust that the other works.</li><li>Breaking programming tasks down into small pieces (especially functions) helps with this greatly!</li><li>Through judicious use of testing, we can build confidence in these small pieces, as we’ll see in the next lecture.</li></ul></li></ul><h2 id="overview">Overview</h2><p><strong>Lists vs. Arrays</strong> Our <code>DLList</code> has a drawback. Getting the i’th item is slow; we have to scan through each item in the list, starting from the beginning or the end, until we reach the i’th item. For an array named <code>A</code>, however, we can quickly access the i’th item using bracket notation, <code>A[i]</code>. Thus, our goal is to implement a list with an array.</p><p><strong>AList</strong> The <code>AList</code> will have the same API as our <code>DLList</code>, meaning it will have the same methods as <code>DLList</code> (<code>addLast()</code>, <code>getLast()</code>, <code>removeLast()</code>, and <code>get(int i)</code>). The <code>AList</code> will also have a <code>size</code> variable that tracks its size.</p><p><strong>AList Invariants</strong> There are a few invariants for our <code>AList</code>.</p><ul><li><code>addLast</code>: The next item we want to add, will go into position <code>size</code>.</li><li><code>getLast</code>: The item we want to return is in position <code>size - 1</code>.</li><li><code>size</code>: The number of items in the list should be <code>size</code>.</li></ul><p><strong>Implementing AList</strong> Each <code>AList</code> has an <code>int[]</code> called <code>items</code>.</p><ul><li>For <code>addLast</code>, we place our item in <code>items[size]</code>.</li><li>For <code>getLast</code>, we simply return <code>items[size - 1]</code>.</li><li>For <code>removeLast</code>, we simply decrement <code>size</code> (we don’t need to change <code>items</code>). Thus, if <code>addLast</code> is called next, it simply overwrites the old value, because size was decremented. <strong>However, it is good practice to null out objects when they are removed, as this will save memory.</strong> Notice how closely these methods were related to the invariants.</li></ul><p><strong>Abstraction</strong> One key idea of this course is that the implementation details can be hidden away from the users. For example, a user may want to use a list, but we, as implementers, can give them any implementation of a list, as long as it meets their specifications. A user should have no knowledge of the inner workings of our list.</p><p><strong>Array Resizing</strong> When the array gets too full, we can resize the array. However, we have learned that array size cannot change. The solution is, instead, to create a new array of a larger size, then copy our old array values to the new array. Now, we have all of our old values, but we have more space to add items.</p><p><strong>Resizing Speed</strong> In the lecture video, we started off resizing the array by one more each time we hit our array size limit. This turns out to be extremely slow, because copying the array over to the new array means we have to perform the copy operation for each item. The worst part is, since we only resized by one extra box, if we choose to add another item, we have to do this again each time we add to the array.</p><p><strong>Improving Resize Performance</strong> Instead of adding by an extra box, we can instead create a new array with <code>size * FACTOR</code> items, where <code>FACTOR</code> could be any number, like 2 for example. We will discuss why this is fast later in the course.</p><p><strong>Downsizing Array Size</strong> What happens if we have a 1 million length array, but we remove 990,000 elements of the array? Well, similarly, we can downsize our array by creating an array of half the size, if we reach 250,000 elements, for example. Again, we will discuss this more rigorously later in the course.</p><p><strong>Aside: Breaking Code Up</strong> Sometimes, we write large methods that do multiple things. A better way is to break our large methods up into many smaller methods. One advantage of this is that we can test our code in parts.</p><p><strong>Generic AList</strong> Last time, we discussed how to make a generic <code>DLList</code>. We can do something similar for <code>AList</code>. But we find that we error out on array creation. Our problem is that generic arrays are not allowed in Java. Instead, we will change the line:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">items = <span class="keyword">new</span> Item[<span class="number">100</span>];</span><br></pre></td></tr></table></figure><p>to:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">items = (Item[]) <span class="keyword">new</span> Object[<span class="number">100</span>];</span><br></pre></td></tr></table></figure><p>This is called a cast, and we will learn about it in the future.</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structures </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Recursion</title>
      <link href="2021/03/03/2021-03-03-Recursionddd/"/>
      <url>2021/03/03/2021-03-03-Recursionddd/</url>
      
        <content type="html"><![CDATA[<h1 id="recursion">Recursion</h1><p>A <em>recursive</em> function is a function that is defined in terms of itself. A good example is the <strong>factorial</strong> function. Although we haven’t finished defining factorial, we are still able to call it since the function body is not evaluated until the function is called. Note that when n is 0 or 1, we just return 1. This is known as the <em>base case</em>, and it prevents the function from infinitely recusing. Now we can compute factorial(2) in terms of factorial(1), and factorial(3) in terms of factorial(2), and factorial(4) – well, you get the idea.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> <span class="keyword">or</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">return</span> n * factorial(n-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>There are three common steps in a recursive definition:</p><ol type="1"><li><strong>Figure out your base case</strong>: The base case is usually the simplest input possible to the function. For example, factorial(0) is 1 by definition. You can also think of a base case as a stopping condition for the recursion. If you can’t figure this out right away, move on to the recursive case and try to figure out the point at which we can’t reduce the problem any further.</li><li><strong>Make a recursive call with a simpler argument</strong>: Simplify your problem, and assume that a recursive call for this new problem will simply work. This is called the “leap of faith”. For factorial, we reduce the problem by calling factorial(n-1).</li><li><strong>Use your recursive call to solve the full problem</strong>: Remember that we are assuming the recursive call works. With the result of the recursive call, how can you solve the original problem you were asked? For factorial, we just multiply (n − 1)! by n.</li></ol><p>Another way to understand recursion is by separating out two things: “internal correctness” and not running forever (known as “halting”)</p><p>A recursive function is internally correct if it is always does the right thing assuming that every recursive call does the right thing. For example, the factorial function reproduced to the right is internally correct, since 2! = 2 and n! = n ∗ (n − 1)! are both true statements.</p><p>The bad factorial function does not halt on all inputs, however, since factorial(1) results in a call to factorial(0), and then to factorial(-1) and so on.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span>(<span class="params">n</span>):</span> <span class="comment"># WRONG!</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">return</span> n * factorial(n-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>A recursive function is correct if and only if it is both internally correct and halts; but you can check each property separately. The “recursive leap of faith” is temporarily placing yourself in a mindset where you only check internal correctness.</p><h2 id="questions"><a href="https://www.youtube.com/watch?t=41m21s&amp;v=VcZPTlE56G8&amp;feature=youtu.be">Questions</a></h2><p>Write a function that takes two numbers m and n and returns their product. Assume m and n are positive integers. Use recursion, not mul or *!</p><p>Hint: 5*3 = 5 + 5*2 = 5 + 5 + 5*1.</p><p>For the base case, what is the simplest possible input for multiply?</p><p><strong>If one of the inputs is one, you simply return the other input.</strong></p><p>For the recursive case, what does calling multiply(m - 1, n) do? What does calling multiply(m, n - 1) do? Do we prefer one over the other?</p><p><strong>The first call will calculate a value that is n less than the total, while the second will calculate a value that is m less. </strong></p><p><strong>Either recursive call will work, but only multiply(m, n - 1) is needed.</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiply</span>(<span class="params">m, n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; multiply(5, 3)</span></span><br><span class="line"><span class="string">    15</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> m</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> m + multiply(m, n - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>Below is the iterative version of is prime, which returns True if positive integer n is a prime number and False otherwise:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_prime</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    k = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> k &lt; n:</span><br><span class="line">        <span class="keyword">if</span> n % k == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>Implement the recursive is prime function. Do not use a while loop, use recursion. As a reminder, an integer is considered prime if it has exactly two unique factors: 1 and itself.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_prime</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_prime(7)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_prime(10)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_prime(1)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prime_helper</span>(<span class="params">index</span>):</span></span><br><span class="line">        <span class="keyword">if</span> index == n:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> n % index == <span class="number">0</span> <span class="keyword">or</span> n == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> prime_helper(index + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> prime_helper(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>Write a procedure merge(n1, n2) which takes numbers with digits in decreasing order and returns a single number with all of the digits of the two, in decreasing order. Any number merged with 0 will be that number (treat 0 as having no digits). Use recursion. Hint: If you can figure out which number has the smallest digit out of both, then we know that the resulting number will have that smallest digit, followed by the merge of the two numbers with the smallest digit removed.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span>(<span class="params">n1, n2</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; Merges two numbers</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; merge(31, 42)</span></span><br><span class="line"><span class="string">    4321</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; merge(21, 0)</span></span><br><span class="line"><span class="string">    21</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; merge (21, 31)</span></span><br><span class="line"><span class="string">    3211</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n1 == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">return</span> n2</span><br><span class="line">    <span class="keyword">elif</span> n2 == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">return</span> n1</span><br><span class="line">    <span class="keyword">elif</span> n1 % <span class="number">10</span> &lt; n2 % <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">return</span> merge(n1 // <span class="number">10</span>, n2) * <span class="number">10</span> + n1 % <span class="number">10</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">return</span> merge(n1, n2 // <span class="number">10</span>) * <span class="number">10</span> + n2 % <span class="number">10</span></span><br></pre></td></tr></table></figure><p>Define a function make fn repeater which takes in a one-argument function f and an integer x. It should return another function which takes in one argument, another integer. This function returns the result of applying f to x this number of times.</p><p>Make sure to use recursion in your solution.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_func_repeater</span>(<span class="params">f, x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; incr_1 = make_func_repeater(lambda x: x + 1, 1)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; incr_1(2) #same as f(f(x))</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; incr_1(5)</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">repeat</span>(<span class="params">i</span>):</span></span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> f(repeat(i - <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> repeat</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Discussions </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Structure and Interpretation of Computer Programs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Recursion</title>
      <link href="2021/03/03/2021-03-03-Recursion/"/>
      <url>2021/03/03/2021-03-03-Recursion/</url>
      
        <content type="html"><![CDATA[<h1 id="recursion">Recursion</h1><p><a href="https://www.youtube.com/watch?v=Om_uZXRgOak&amp;list=PL6BsET-8jgYVWfjkAMzMdoEy_j47rfrVd">Video</a></p><h2 id="recursive-functions"><a href="https://www.youtube.com/watch?v=B2_8t2jyvX0&amp;list=PL6BsET-8jgYVWfjkAMzMdoEy_j47rfrVd&amp;index=2">Recursive Functions</a></h2><p><strong>Definition</strong>: A function is called recursive if the body of that function calls itself, either directly or indirectly</p><p><strong>Implication</strong>: Executing the body of a recursive function may require applying that function</p><h3 id="digit-sums">Digit Sums</h3><p>2+0+1+9 = 12</p><ul><li>If a number a is divisible by 9, then sum_digits(a) is also divisible by 9</li><li>Useful for typo detection!</li></ul><p><img src="/images/CS61A/111855.png" /></p><ul><li>Credit cards actually use the Luhn algorithm, which we'll implement after <strong>sum_digits</strong></li></ul><h3 id="the-problem-within-the-problem">The Problem Within the Problem</h3><p>The sum of the digits of 6 is 6.</p><p>Likewise for any one-digit (non-negative) number (i.e., &lt; 10).</p><p>The sum of the digits of 2019 is</p><p><img src="/images/CS61A/118550.png" /></p><p>That is, we can break the problem of summing the digits of 2019 into a <strong>smaller instance</strong> of the same problem, plus some extra stuff.</p><p>We call this <strong>recursion</strong></p><h3 id="sum-digits-without-a-while-statement">Sum Digits Without a While Statement</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">split</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Split positive n into all but its last digit and its last digit.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> n // <span class="number">10</span>, n % <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_digits</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the sum of the digits of positive integer n.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        all_but_last, last = split(n)</span><br><span class="line">        <span class="keyword">return</span> sum_digits(all_but_last) + last</span><br></pre></td></tr></table></figure><h3 id="the-anatomy-of-a-recursive-function">The Anatomy of a Recursive Function</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_digits</span>(<span class="params">n</span>):</span> </span><br><span class="line">    <span class="comment"># The def statement header is similar to other functions </span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the sum of the digits of positive integer n.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">10</span>:</span><br><span class="line">    <span class="comment"># Conditional statements check for base cases</span></span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="comment"># Base cases are evaluated without recursive calls </span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        all_but_last, last = split(n)</span><br><span class="line">        <span class="keyword">return</span> sum_digits(all_but_last) + last</span><br><span class="line">    <span class="comment"># Recursive cases are evaluated with recursive calls</span></span><br></pre></td></tr></table></figure><h2 id="recursion-in-environment-diagrams"><a href="https://www.youtube.com/watch?v=8G7a8ANMwzQ&amp;list=PL6BsET-8jgYVWfjkAMzMdoEy_j47rfrVd&amp;index=3">Recursion in Environment Diagrams</a></h2><p><img src="/images/CS61A/1118550.png" /></p><h3 id="iteration-vs-recursion">Iteration vs Recursion</h3><p>Iteration is a special case of recursion</p><p><img src="/images/CS61A/1118551.png" /></p><h2 id="verifying-recursive-functions"><a href="https://www.youtube.com/watch?v=gMEQS4kWbL4&amp;list=PL6BsET-8jgYVWfjkAMzMdoEy_j47rfrVd&amp;index=4">Verifying Recursive Functions</a></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * fact(n-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>Is fact implemented correctly?</p><ol type="1"><li>Verify the base case</li><li>Treat fact as a functional abstraction!</li><li>Assume that fact(n-1) is correct</li><li>Verify that fact(n) is correct</li></ol><h2 id="mutual-recursion">Mutual Recursion</h2><h3 id="the-luhn-algorithm"><a href="https://en.wikipedia.org/wiki/Luhn_algorithm">The Luhn Algorithm</a></h3><p>Used to verify credit card numbers</p><ul><li><strong>First</strong>: From the rightmost digit, which is the check digit, moving left, double the value of every second digit; if product of this doubling operation is greater than 9 (e.g., 7 * 2 = 14), then sum the digits of the products (e.g., 10: 1 + 0 = 1, 14: 1 + 4 = 5)</li><li><strong>Second</strong>: Take the sum of all the digits</li></ul><p><img src="/images/CS61A/1118552.png" /></p><p>The Luhn sum of a valid credit card number is a multiple of 10</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Luhn algorithm: mutual recursion</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">luhn_sum</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the digit sum of n computed by the Luhn algorithm.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; luhn_sum(2)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; luhn_sum(12)</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; luhn_sum(42)</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; luhn_sum(138743)</span></span><br><span class="line"><span class="string">    30</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; luhn_sum(5105105105105100) # example Mastercard</span></span><br><span class="line"><span class="string">    20</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; luhn_sum(4012888888881881) # example Visa</span></span><br><span class="line"><span class="string">    90</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; luhn_sum(79927398713) # from Wikipedia</span></span><br><span class="line"><span class="string">    70</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        all_but_last, last = split(n)</span><br><span class="line">        <span class="keyword">return</span> luhn_sum_double(all_but_last) + last</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">luhn_sum_double</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the Luhn sum of n, doubling the last digit.&quot;&quot;&quot;</span></span><br><span class="line">    all_but_last, last = split(n)</span><br><span class="line">    luhn_digit = sum_digits(<span class="number">2</span> * last)</span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> luhn_digit</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> luhn_sum(all_but_last) + luhn_digit</span><br></pre></td></tr></table></figure><h2 id="recursion-and-iteration"><a href="https://www.youtube.com/watch?v=FVp-kv2DTxo&amp;list=PL6BsET-8jgYVWfjkAMzMdoEy_j47rfrVd&amp;index=6">Recursion and Iteration</a></h2><h3 id="converting-recursion-to-iteration">Converting Recursion to Iteration</h3><p>Can be tricky: Iteration is a special case of recursion.</p><p>Idea: Figure out what state must be maintained by the iterative function</p><p><img src="/images/CS61A/1118553.png" /></p><p>More formulaic: Iteration is a special case of recursion.</p><p>Idea: The state of an iteration can be passed as arguments.</p><p><img src="/images/CS61A/1118554.png" /></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Structure and Interpretation of Computer Programs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DLLists, Arrays</title>
      <link href="2021/03/02/2021-03-01-DLLists,-Arrays/"/>
      <url>2021/03/02/2021-03-01-DLLists,-Arrays/</url>
      
        <content type="html"><![CDATA[<h1 id="dllists-arrays">DLLists, Arrays</h1><p><a href="https://www.youtube.com/playlist?list=PL8FaHk7qbOD5Gy1o06RRilCqv0So31lJt">Video</a></p><h2 id="doubly-linked-lists">Doubly Linked Lists</h2><h3 id="summary-of-last-time-from-intlist-to-sllist"><a href="https://www.youtube.com/watch?v=P1grp1MDZQo&amp;list=PL8FaHk7qbOD5Gy1o06RRilCqv0So31lJt&amp;index=1">Summary of Last Time (From IntList to SLList)</a></h3><p><img src="/images/CS61B/185921.png" /></p><h3 id="one-downside-of-sllists">One Downside of SLLists</h3><p>Inserting at the back of an SLList is much slower than the front.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    sentinel.next = <span class="keyword">new</span> IntNode(x, sentinel.next);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    size += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    IntNode p = sentinel;</span><br><span class="line">    <span class="keyword">while</span> (p.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        p = p.next;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    p.next = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Improvement #7: Goal: Fast addLast</strong></p><p>How could we modify our list data structure so that addLast is also fast?</p><p>Suppose we want to support <strong>add</strong>, <strong>get</strong>, and <strong>remove</strong> operations for both ends, will having a last pointer result for fast operations on long lists?</p><ul><li>Yes</li><li><strong>No</strong></li></ul><p>If not, which operations would be slow?</p><ul><li><p>Requires setting 9’s next pointer to null, and point last at the 9 node.</p><p># i.e. slow because we have to find the “9” node.</p></li></ul><p>We added .last. What other changes might we make so that remove is also fast?</p><ul><li>Add backwards links from every node.</li><li>This yields a “<strong>doubly linked list</strong>” or DLList, as opposed to our earlier “<strong>singly linked list</strong>” or SLList.</li></ul><p><em>Note: Arrows point at entire nodes, not fields!</em> <em>Example: last holds the address of the last node, not the item field of the sentinel node</em></p><h3 id="doubly-linked-lists-naive"><strong>Doubly Linked Lists (Naive)</strong></h3><p><strong>Non-obvious fact</strong>: This approach has an annoying special case: last sometimes points at the sentinel, and sometimes points at a ‘real’ node.</p><p><img src="/images/CS61B/185922.png" /></p><h3 id="doubly-linked-lists-double-sentinel"><strong>Doubly Linked Lists (Double Sentinel)</strong></h3><p><strong>One solution</strong>: Have two sentinels.</p><p><img src="/images/CS61B/185923.png" /></p><h3 id="doubly-linked-lists-circular-sentinel"><strong>Doubly Linked Lists (Circular Sentinel)</strong></h3><p><img src="/images/CS61B/185924.png" /></p><p><strong>Improvement #8: Fancier Sentinel Node(s)</strong></p><p>While fast, adding .last and .prev introduces lots of special cases.</p><p>To avoid these, either:</p><ul><li>Add an additional sentBack sentinel at the end of the list.</li><li>Make your linked list circular, with a single sentinel in the middle.</li></ul><h3 id="dllist-summary">DLList Summary</h3><p><img src="/images/CS61B/185925.png" /></p><h2 id="generic-lists"><a href="https://www.youtube.com/watch?v=Xt4dKEUokz4&amp;list=PL8FaHk7qbOD5Gy1o06RRilCqv0So31lJt&amp;index=4">Generic Lists</a></h2><h3 id="integer-only-lists">Integer Only Lists</h3><p>One issue with our list classes: They only supports integers.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SLList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IntNode sentinel;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> item;</span><br><span class="line">        <span class="keyword">public</span> IntNode next;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SLList s1 = <span class="keyword">new</span> SLList(<span class="number">5</span>);</span><br><span class="line">s1.addFirst(<span class="number">10</span>);</span><br><span class="line"><span class="comment">/*Works fine*/</span></span><br><span class="line"></span><br><span class="line">SLList s2 = <span class="keyword">new</span> SLList(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">s2.addFirst(<span class="string">&quot;apple&quot;</span>);</span><br><span class="line"><span class="comment">/*Error*/</span></span><br></pre></td></tr></table></figure><h3 id="slists">SLists</h3><p>Java allows us to defer type selection until declaration.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SLList</span>&lt;<span class="title">BleepBlorp</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IntNode sentinel;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> BleepBlorp item;</span><br><span class="line">        <span class="keyword">public</span> IntNode next;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SLList&lt;Integer&gt; s1 = <span class="keyword">new</span> SLList&lt;&gt;(<span class="number">5</span>);</span><br><span class="line">s1.insertFront(<span class="number">10</span>);</span><br><span class="line"> </span><br><span class="line">SLList&lt;String&gt; s2 = <span class="keyword">new</span> SLList&lt;&gt;(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">s2.insertFront(<span class="string">&quot;apple&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="generics">Generics</h3><ul><li>In the .java file <strong>implementing</strong> your data structure, specify your “generic type” <strong>only once</strong> at the very top of the file.</li><li>In .java files that <strong>use</strong> your data structure, specify desired type <strong>once</strong>:<ul><li>Write out desired type during <strong>declaration</strong>.</li><li>Use the empty diamond operator &lt;&gt; during <strong>instantiation</strong>.</li></ul></li><li>When declaring or instantiating your data structure, use the reference type.<ul><li>int: Integer</li><li>double: Double</li><li>char: Character</li><li>boolean: Boolean</li><li>long: Long</li><li>etc.</li></ul></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DLList&lt;Double&gt; s1 = <span class="keyword">new</span> DLList&lt;&gt;(<span class="number">5.3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> x = <span class="number">9.3</span> + <span class="number">15.2</span>;</span><br><span class="line">s1.insertFront(x);</span><br></pre></td></tr></table></figure><h2 id="arrays"><a href="https://www.youtube.com/watch?v=0EXjvucFV6I&amp;list=PL8FaHk7qbOD5Gy1o06RRilCqv0So31lJt&amp;index=5">Arrays</a></h2><h3 id="getting-memory-boxes">Getting Memory Boxes</h3><p>To store information, we need memory boxes, which we can get in Java by declaring variables or instantiating objects. Examples:</p><ul><li>int x;<ul><li>Gives us a memory box of 32 bits that stores ints.</li></ul></li><li>Walrus w1;<ul><li>Gives us a memory box of 64 bits that stores Walrus references.</li></ul></li><li>Walrus w2 = <strong>new</strong> Walrus(30, 5.6);<ul><li>Gives us a memory box of 64 bits that stores Walrus references, and also gives us 96 bits for storing the int size (32 bits) and double tuskSize (64 bits) of our Walrus.</li></ul></li></ul><p><strong>Arrays</strong> are a special kind of object which consists of a <strong>numbered</strong> sequence of memory boxes.</p><ul><li>To get ith item of array A, use A[i].</li><li>Unlike <strong>class</strong> instances which have have <strong>named</strong> memory boxes.</li></ul><p>Arrays consist of:</p><ul><li>A fixed integer <strong>length</strong> (cannot change!)</li><li>A sequence of N memory boxes where <strong>N=length</strong>, such that:<ul><li>All of the boxes hold the same type of value (and have same # of bits).</li><li>The boxes are numbered 0 through length-1.</li></ul></li></ul><p>Like instances of classes:</p><ul><li>You get one reference when its created.</li><li>If you reassign all variables containing that reference, you can never get the array back.</li></ul><p>Unlike classes, arrays do not have methods.</p><p>Like classes, arrays are (almost always) instantiated with new.</p><p>Three valid notations:</p><ul><li>x = <strong>new</strong> <strong>int</strong>[3];<ul><li>Creates array containing 3 int boxes (32 x 3 = 96 bits total). Each container gets a default value.</li></ul></li><li>y = <strong>new</strong> <strong>int</strong>[]{1, 2, 3, 4, 5};</li><li><strong>int</strong>[] z = {9, 10, 11, 12, 13};<ul><li>Can omit the <strong>new</strong> if you are also declaring a variable.</li></ul></li></ul><p>All three notations create an array, which we saw on the last slide comprises:</p><ul><li>A <strong>length</strong> field.</li><li>A sequence of <strong>N boxes</strong>, where <strong>N</strong> = <strong>length</strong>.</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] z = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">int</span>[] x, y;</span><br><span class="line"> </span><br><span class="line">x = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">y = x;</span><br><span class="line">x = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">99</span>&#125;;</span><br><span class="line">y = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">z = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> xL = x.length;</span><br><span class="line"> </span><br><span class="line">String[] s = <span class="keyword">new</span> String[<span class="number">6</span>];</span><br><span class="line">s[<span class="number">4</span>] = <span class="string">&quot;ketchup&quot;</span>;</span><br><span class="line">s[x[<span class="number">3</span>] - x[<span class="number">1</span>]] = <span class="string">&quot;muffins&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span>[] b = &#123;<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>&#125;;</span><br><span class="line">System.arraycopy(b, <span class="number">0</span>, x, <span class="number">3</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p><img src="/images/CS61B/185926.png" /></p><h3 id="arraycopy">Arraycopy</h3><p>Two ways to copy arrays:</p><ul><li>Item by item using a loop.</li><li>Using arraycopy. Takes 5 parameters:<ul><li>Source array</li><li>Start position in source</li><li>Target array</li><li>Start position in target</li><li>Number to copy</li></ul></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.arraycopy(b, <span class="number">0</span>, x, <span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// (In Python): x[3:5] = b[0:2]</span></span><br></pre></td></tr></table></figure><p>arraycopy is (likely to be) faster, particularly for large arrays. More compact code.</p><ul><li>Code is (arguably) harder to read.</li></ul><h2 id="d-arrays"><a href="https://www.youtube.com/watch?v=VgKAzTxISPc&amp;list=PL8FaHk7qbOD5Gy1o06RRilCqv0So31lJt&amp;index=7">2D Arrays</a></h2><h3 id="arrays-of-array-addresses">Arrays of Array Addresses</h3><p><img src="/images/CS61B/185927.png" /></p><ul><li>Syntax for arrays of arrays can be a bit confounding. You’ll learn through practice (much later).</li></ul><h3 id="array-boxes-can-contain-references-to-arrays">Array Boxes Can Contain References to Arrays!</h3><p><img src="/images/CS61B/185928.png" /></p><ul><li>Syntax for arrays of arrays can be a bit confounding. You’ll learn through practice (much later).</li></ul><h3 id="what-does-this-code-do">What Does This Code Do?</h3><p>What will be the value of x[0][0] and w[0][0] when the code shown completes?</p><ol type="1"><li>x: 1, w: 1</li><li>x: 1, w: -1</li><li>x: -1, w: 1</li><li>x: -1, w: -1</li><li>Other</li></ol><p>arraycopy parameters are:</p><ol type="1"><li>Source array</li><li>Start position in source</li><li>Target array</li><li>Start position in target</li><li>Number to copy</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] x = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;, &#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span>[][] z = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][];</span><br><span class="line">z[<span class="number">0</span>] = x[<span class="number">0</span>];</span><br><span class="line">z[<span class="number">0</span>][<span class="number">0</span>] = -z[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span>[][] w = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line">System.arraycopy(x[<span class="number">0</span>], <span class="number">0</span>, w[<span class="number">0</span>], <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">w[<span class="number">0</span>][<span class="number">0</span>] = -w[<span class="number">0</span>][<span class="number">0</span>];</span><br></pre></td></tr></table></figure><h2 id="arrays-vs.-classes"><a href="https://www.youtube.com/watch?v=WMfYfCfuwNs&amp;list=PL8FaHk7qbOD5Gy1o06RRilCqv0So31lJt&amp;index=8">Arrays vs. Classes</a></h2><p>Arrays and Classes can both be used to organize a bunch of memory boxes.</p><ul><li>Array boxes are accessed using [] notation.</li><li>Class boxes are accessed using dot notation.</li><li>Array boxes must all be of the same type.</li><li>Class boxes may be of different types.</li><li>Both have a fixed number of boxes.</li></ul><p>Array indices can be computed at runtime.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] x = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">100</span>, <span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> indexOfInterest = askUser();</span><br><span class="line"><span class="keyword">int</span> k = x[indexOfInterest];</span><br><span class="line">System.out.println(k);</span><br></pre></td></tr></table></figure><p>Class member variable names CANNOT be computed and used at runtime.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String fieldOfInterest = <span class="string">&quot;mass&quot;</span>;</span><br><span class="line">Planet earth = <span class="keyword">new</span> Planet(<span class="number">6e24</span>, <span class="string">&quot;earth&quot;</span>);</span><br><span class="line"><span class="keyword">double</span> mass = earth[fieldOfInterest];</span><br><span class="line">System.out.println(mass);</span><br></pre></td></tr></table></figure><p>Class member variable names CANNOT be computed and used at runtime.</p><ul><li>Dot notation doesn’t work either.</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String fieldOfInterest = <span class="string">&quot;mass&quot;</span>;</span><br><span class="line">Planet earth = <span class="keyword">new</span> Planet(<span class="number">6e24</span>, <span class="string">&quot;earth&quot;</span>);</span><br><span class="line"><span class="keyword">double</span> mass = earth.fieldOfInterest;</span><br><span class="line">System.out.println(mass);</span><br></pre></td></tr></table></figure><h3 id="another-view">Another view</h3><p>The only (easy) way to access a member of a class is with hard-coded dot notation.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> k = x[indexOfInterest];  <span class="comment">/* no problem */</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">double</span> m = p.fieldOfInterest;  <span class="comment">/* won&#x27;t work */</span></span><br><span class="line"><span class="keyword">double</span> z = p[fieldOfInterest]; <span class="comment">/* won&#x27;t work */</span></span><br><span class="line"><span class="comment">/* No (sane) way to use field of interest */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> w = p.mass;             <span class="comment">/* works fine */</span></span><br></pre></td></tr></table></figure><p>The Java compiler does not treat text on either side of a dot as an expression, and thus it is not evaluated.</p><ul><li>See a compilers or programming languages class for more!</li></ul><h2 id="overview">Overview</h2><p><strong>SLList Drawbacks</strong> <code>addLast()</code> is slow! We can’t add to the middle of our list. In addition, if our list is really large, we have to start at the front, and loop all the way to the back of our list before adding our element.</p><p><strong>A Naive Solution</strong> Recall that we cached the size of our list as an instance variable of <code>SLList</code>. What if we cached the <code>last</code> element in our list as well? All of a sudden, <code>addLast()</code> is fast again; we access the last element immediately, then add our element in. But <code>removeLast()</code> is still slow. In <code>removeLast()</code>, we have to know what our second-to-last element is, so we can point our cached <code>last</code> variable to it. We could then cache a <code>second-to-last</code> variable, but now if I ever want to remove the second-to-last element, I need to know where our third-to-last element is. How to solve this problem?</p><p><strong>DLList</strong> The solution is to give each <code>IntNode</code> a <code>prev</code> pointer, pointing to the previous item. This creates a doubly-linked list, or <code>DLList</code>. With this modification, adding and removing from the front and back of our list becomes fast (although adding/removing from the middle remains slow).</p><p><strong>Incorporating the Sentinel</strong> Recall that we added a sentinel node to our <code>SLList</code>. For <code>DLList</code>, we can either have two sentinels (one for the front, and one for the back), or we can use a circular sentinel. A <code>DLList</code> using a circular sentinel has one sentinel. The sentinel points to the first element of the list with <code>next</code> and the last element of the list with <code>prev</code>. In addition, the last element of the list’s <code>next</code> points to the sentinel and the first element of the list’s <code>prev</code> points to the sentinel. For an empty list, the sentinel points to itself in both directions.</p><p><strong>Generic DLList</strong> How can we modify our <code>DLList</code> so that it can be a list of whatever objects we choose? Recall that our class definition looks like this:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DLList</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure><p>We will change this to</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DLList</span>&lt;<span class="title">T</span>&gt; </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure><p>where <code>T</code> is a placeholder object type. Notice the angle bracket syntax. Also note that we don’t have to use <code>T</code>; any variable name is fine. In our <code>DLList</code>, our item is now of type <code>T</code>, and our methods now take <code>T</code> instances as parameters. We can also rename our <code>IntNode</code> class to <code>TNode</code> for accuracy.</p><p><strong>Using Generic DLList</strong> Recall that to create a <code>DLList</code>, we typed:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DLList list = <span class="keyword">new</span> DLList(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>If we now want to create a <code>DLList</code> holding <code>String</code> objects, then we must say:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DLList&lt;String&gt; list = <span class="keyword">new</span> DLList&lt;&gt;(<span class="string">&quot;bone&quot;</span>);</span><br></pre></td></tr></table></figure><p>On list creation, the compiler replaces all instances of <code>T</code> with <code>String</code>! We will cover generic typing in more detail in later lectures.</p><p><strong>Arrays</strong> Recall that variables are just boxes of bits. For example, <code>int x;</code> gives us a memory box of 32 bits. Arrays are a special object which consists of a numbered sequence of memory boxes! To get the ith item of array <code>A</code>, use <code>A[i]</code>. The length of an array cannot change, and all the elements of the array must be of the same type (this is different from a Python list). The boxes are zero-indexed, meaning that for a list with N elements, the first element is at <code>A[0]</code> and the last element is at <code>A[N - 1]</code>. Unlike regular classes, <strong>arrays do not have methods!</strong> Arrays do have a <code>length</code> variable though.</p><p><strong>Instantiating Arrays</strong> There are three valid notations for creating arrays. The first way specifies the size of the array, and fills the array with default values:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] y = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br></pre></td></tr></table></figure><p>The second and third ways fill up the array with specific values.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] x = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] w = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br></pre></td></tr></table></figure><p>We can set a value in an array by using array indexing. For example, we can say <code>A[3] = 4;</code>. This will access the <strong>fourth</strong> element of array <code>A</code> and sets the value at that box to 4.</p><p><strong>Arraycopy</strong> In order to make a copy of an array, we can use <code>System.arraycopy</code>. It takes 5 parameters; the syntax is hard to memorize, so we suggest using various references online such as <a href="https://www.tutorialspoint.com/java/lang/system_arraycopy.htm">this</a>.</p><p><strong>2D Arrays</strong> We can declare multidimensional arrays. For 2D integer arrays, we use the syntax:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] array = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][];</span><br></pre></td></tr></table></figure><p>This creates an array that holds integer arrays. Note that we have to manually create the inner arrays like follows:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">array[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure><p>Java can also create multidemensional arrays with the inner arrays created automatically. To do this, use the syntax:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] array = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][<span class="number">4</span>];</span><br></pre></td></tr></table></figure><p>We can also use the notation:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] array = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>to get arrays with specific values.</p><p><strong>Arrays vs. Classes</strong></p><ul><li>Both are used to organize a bunch of memory.</li><li>Both have a fixed number of “boxes”.</li><li>Arrays are accessed via square bracket notation. Classes are accessed via dot notation.</li><li>Elements in the array must be all be the same type. Elements in a class may be of different types.</li><li>Array indices are computed at runtime. We cannot compute class member variable names.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structures </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Proving with Predicates</title>
      <link href="2021/03/02/2021-03-02-Proving-with-Predicates/"/>
      <url>2021/03/02/2021-03-02-Proving-with-Predicates/</url>
      
        <content type="html"><![CDATA[<h1 id="proving-with-predicates">Proving with Predicates</h1><h2 id="inference-rules">Inference rules</h2><h3 id="introduction">→ Introduction</h3><ul><li>Cf. propositional rule</li><li>p(x) and q(x) are propositions</li></ul><p><img src="/images/FOCS/1.png" /></p><p>If the only assumption about x is that it is a member of <strong>U</strong>, and if this assumption leads to the truth of q(x), then q must hold for every member of <strong>U</strong></p><p><img src="/images/FOCS/3.png" /></p><p>If at least one element of a set satisfies a predicate, this justifies the introduction of ∃</p><p><img src="/images/FOCS/4.png" /></p><h2 id="elimination">∧ Elimination</h2><ul><li>Also called <strong>instantiation</strong></li><li>Generalises propositional ∧-elimination</li><li>If p is true for all possible arguments, it must be true for a particular one</li></ul><p><img src="/images/FOCS/2.png" /></p><ul><li>a must not be the name of a particular member of <strong>U</strong></li><li>a should not have been mentioned earlier in the proof</li></ul><p><img src="/images/FOCS/5.png" /></p><h2 id="proof-strategies">Proof strategies</h2><h3 id="from-x-u-px">From: ∃X ∈ <strong>U</strong> : P(X)</h3><ul><li>Proof by example<ul><li>Show that p(x) is TRUE for a specific x</li></ul></li><li>Algorithmic Proof<ul><li>Give an algorithm for finding a specific x for which p(x) is TRUE</li><li>Prove that the algorithm cannot fail</li></ul></li><li>∀ Introduction<ul><li>Assume x ∈ <strong>U</strong> and show that p(x) is a consequence</li><li>Important to assume x is an arbitrary element of <strong>U</strong></li></ul></li></ul><h3 id="form-x-u-px">FORM: ¬∀X ∈ <strong>U</strong> : P(X)</h3><ul><li>Proof by counterexample<ul><li>Use a De Morgan law</li><li>(¬∀x ∈ <strong>U</strong> : p(x)) ≡ (∃x ∈ <strong>U</strong> : ¬p(x))</li><li>Proof by example that there exists an x for which ¬p is TRUE</li></ul></li></ul><h3 id="form-x-n-px">FORM: ∀X ∈ <strong>N</strong> : P(X)</h3><ul><li>Proof by mathematical induction</li></ul><h2 id="applying-logic-to-mathematics">Applying logic to mathematics</h2><h3 id="introduction-1">Introduction</h3><p>New application domain:</p><ul><li>New predicates</li><li>New inference rules</li></ul><h3 id="rules">Rules</h3><ul><li>Subset Rule<ul><li>A ⊆ B follows from ∀x ∈ A : (x ∈ B)</li></ul></li><li>Set equality rule<ul><li>A = B follows from A ⊆ B and B ⊆ A</li></ul></li><li>Transitivity of &lt;<ul><li>a &lt; c follows from a &lt; b and b &lt; c</li><li>E.g. =, ⊆ and ≡ are transitive as well</li></ul></li><li>Pigeon hole principle<ul><li>If n + 1 occurrences are assigned to n categories, there must be one category with at least two occurrences</li></ul></li></ul><h3 id="example-proof">Example proof</h3><ul><li><strong>Definition</strong>:<ul><li>∀x ∈ <strong>N</strong> : Odd(x) ↔︎ ∃w ∈ <strong>N</strong> : (x = 2w + 1)</li></ul></li><li><strong>Prove</strong>:<ul><li>“If a and b are odd, then a times b is odd”</li><li>∀a ∈ N : ∀b ∈ *<strong>N</strong> : (Odd(a) ∧ Odd(b) → Odd(ab))</li></ul></li></ul><p><img src="/images/FOCS/6.png" /></p><h3 id="exercise">Exercise</h3><p>Prove that for any n its successor times its predecessor is 1 less than its square. In other words, prove that ∀n ∈ N : P(n), where P(n) is (n + 1)(n - 1) = n<sup>2</sup> - 1. You do not need mathematical induction for this. Use V introduction and arithmetic manipulations involving distributivity and associativity. You may regard other rules of algebra as common knowledge that do not need to be explicitly provided as justifications. Lay out your proof like the rules-of-inference proofs in Chapter 3, justifying each step by stating its rule of inference.</p><h4 id="solution">Solution</h4><p>Prove: ∀n ∈ <strong>N</strong> : (n + 1)(n − 1) = n<sup>2</sup> − 1</p><ol type="1"><li>[n ∈ <strong>N</strong>] Assumption</li><li>(n + 1)(n − 2) = n<sup>2</sup> − n + n − 1 Distributivity</li><li>(n + 1)(n − 2) = n<sup>2</sup> − 1</li><li>∀n ∈ <strong>N</strong> : (n + 1)(n − 2) = n<sup>2</sup> − 1 ∀ introduction</li></ol><h2 id="mathematical-induction">Mathematical induction</h2><h3 id="introduction-2">Introduction</h3><ul><li>Mathematical induction (MI) is used for proving things about <strong>infinite sets</strong> of propositions</li><li>Key idea: when trying to prove P(n), we assume that P(n − 1) has already been established</li><li>This is called the <strong>inductive hypothesis</strong></li></ul><h3 id="base-case-and-inductive-step">Base case and inductive step</h3><ul><li>A proof by MI has two parts:<ul><li><strong>Base case (BC)</strong>: typically P(0)</li><li><strong>Inductive step (IS)</strong>: typically P(n − 1) → P(n)</li></ul></li><li>When we make no assumptions about n except that n ≥ 1 , this is true for any n ≥ 1</li><li>Repeated use of the inductive step with modus ponens gives us: P(0) (from BC) → P(1) → P(2), → ... → P(n)</li></ul><h3 id="rule-of-inference">Rule of inference</h3><p><img src="/images/FOCS/7.png" /></p><h3 id="framework">Framework</h3><p><img src="/images/FOCS/8.png" /></p><h3 id="example">Example</h3><ul><li>Show that, for any non-negative integer n, the sum of the first n integers is n(n + 1)/2</li><li>That is, prove P(n), n ≥ 0, where P(n) represents:</li></ul><p><img src="/images/FOCS/9.png" /></p><h4 id="example-proof-1">Example proof</h4><p><img src="/images/FOCS/10.png" /></p><h4 id="example-proof-algebra">Example proof: algebra</h4><p><img src="/images/FOCS/11.png" /></p><h3 id="strategies--1">Strategies -1</h3><p>If Q(n) is true for all integers ≥ k but false for k − 1</p><ul><li>Base: P(0) = Q(k)</li><li>General: P(n) = Q(n + k)</li></ul><p>Predicate Q is only true for odd integers</p><ul><li>P(n) = Q(2n + 1) or P(n) = Q(2n − 1)</li></ul><p>Predicate Q is only true for powers of 2</p><ul><li>P(n) = Q(n<sup>2</sup>)7</li></ul><h3 id="strategies--2">Strategies -2</h3><p>p(n) → P(n + 1) as the inductive step</p><ul><li>Sometimes eases algebraic manipulations</li><li>Now: n ≥ 0</li></ul><p>When P(n) is an equation L(n) = R(n) and you show that L(n) = L(n − 1) + α = ... = R(n − 1) + β = R(n)</p><ul><li>Showing that α = β, together with the inductive hypothesis L(n − 1) = R(n − 1) concludes the proof</li></ul><h3 id="example-1">Example</h3><p>Prove that ∀n ≥ 5 : 2<sup>n</sup> &gt; n<sup>2</sup></p><p><img src="/images/FOCS/12.png" /></p><h3 id="exercise-1">Exercise</h3><p>Prove by mathematical induction that the sum of the first n odd integers is n<sup>2</sup></p><p><img src="/images/FOCS/13.png" /></p><p><img src="/images/FOCS/14.png" /></p><p>Prove by mathematical induction that for any integer n ≥ 10, 2<sup>n</sup> &gt; n<sup>3</sup></p><p><img src="/images/FOCS/15.png" /></p><p>Prove by mathematical induction: ∀n ∈ <strong>N</strong> : n ≥ 4 : n! ≥ 2<sup>n</sup></p><p><img src="/images/FOCS/16.png" /></p><p>Prove by mathematical induction:</p><p><img src="/images/FOCS/17.png" /></p><p><img src="/images/FOCS/18.png" /></p><p><img src="/images/FOCS/19.png" /></p><h2 id="limits-of-logic">Limits of logic</h2><h3 id="soundness-of-rules">Soundness of rules</h3><ul><li>A rule is <strong>sound</strong> if it is true in all states, i.e. if it is a <strong>tautology</strong></li><li>Soundness can for example be proved using <strong>truth tables</strong></li><li>Propositional logic:<ul><li>Start set: soundness proven by truth tables<ul><li>E.g. modus ponens, modus tollens, ...</li></ul></li><li>Rules proven by inference from this start set<ul><li>E.g. transitivity of the conditional</li><li>These rules are equally sound</li></ul></li></ul></li></ul><h3 id="system-of-logic">System of logic</h3><p>A <strong>system of logic</strong> consists of:</p><ul><li>A set of <strong>axioms</strong></li><li>A set of <strong>inference rules</strong></li></ul><p>A system of logic is <strong>complete</strong> if:</p><ul><li>All true expressions can be proven</li></ul><p>A system of logic is <strong>consistent</strong> if:</p><ul><li>It is impossible to prove any expression to be both true and false</li></ul><h3 id="soundness-completeness-and-consistency">Soundness, completeness and consistency</h3><p>We seek a system:</p><ul><li>with <strong>sound rules</strong></li><li>that is <strong>complete</strong></li><li>that is <strong>consistent</strong></li></ul><p>Such systems <strong>exist for propositional logic</strong></p><p>Such systems <strong>do not exist for predicate logic</strong> (cf. Gödel’s incompleteness theorems)</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fundamentals of Computer Science </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Recap and Exercices</title>
      <link href="2021/03/02/2021-03-02-Recap-and-Exercices-(Chapters-1-5)/"/>
      <url>2021/03/02/2021-03-02-Recap-and-Exercices-(Chapters-1-5)/</url>
      
        <content type="html"><![CDATA[<h1 id="chapters-1-5-recap-and-exercises">Chapters 1-5: Recap and Exercises</h1><h2 id="logic-for-computer-science">Logic for computer science</h2><h3 id="course-overview">Course overview</h3><h4 id="propositional-logic">1. Propositional Logic</h4><ul><li>Proofs using truth tables<ul><li>exhaustive case analysis</li><li>equivalence, tautology, contradiction, satisfiability</li></ul></li><li>Proofs using equivalences<ul><li>Substitution</li></ul></li><li>Proofs using inference rules<ul><li>Assumptions</li></ul></li></ul><h4 id="predicate-logic">2. Predicate Logic</h4><ul><li>Proofs using equivalences<ul><li>Substitution</li></ul></li><li>Proofs using inference rules<ul><li>Generalisations of propositional rules</li><li>Extra rules, e.g. quantifier introduction and elimination</li><li>Mathematical Induction</li></ul></li><li>Application to mathematics, strings and graphs</li></ul><h2 id="algebraic-proof-exercises">Algebraic proof Exercises</h2><h3 id="give-an-equivalence-proof-for-the-following-theorem">1. Give an equivalence proof for the following theorem:</h3><p>((p → q) ∧ ¬q) → ¬p</p><h4 id="solution">Solution:</h4><p>((p → q) ∧ ¬q) → ¬p ≡ ((¬p ∨ q) ∧ ¬q) → ¬p Conditional law</p><p>​ ≡ ¬[(¬p ∨ q) ∧ ¬q)] ∨ ¬p Conditional law</p><p>​ ≡ ¬[[(¬p ∨ q) ∧ ¬q)] ∧ p] De Morgan</p><p>​ ≡ ¬[(¬p ∨ q) ∧ (¬q ∧ p)] Associativity</p><p>​ ≡ ¬[(¬p ∨ q) ∧ ¬(q ∨ ¬p)] De Morgan</p><p>​ ≡ ¬FALSE Contradiction</p><p>​ ≡ TRUE</p><h3 id="prove-each-of-these-equivalences-by-substitution">2. Prove each of these equivalences by substitution:</h3><ol type="1"><li>((p ∨ q) ∧ (¬p ∧ ¬q)) ≡ FALSE</li><li>p ∨ q ∨ r ∨ s ≡ (¬p ∧ ¬q ∧ ¬r) → s</li></ol><h4 id="solution-1">Solution 1:</h4><p>((p ∨ q) ∧ (¬p ∧ ¬q)) ≡ (p ∨ q) ∧ ¬(p ∨ q) De Morgan</p><p>​ ≡ FALSE Contradiction</p><h4 id="solution-2">Solution 2:</h4><p>p ∨ q ∨ r ∨ s ≡ ¬(¬p ∧ ¬q ∧ ¬r) ∨ s De Morgan on three items</p><p>​ ≡ (¬p ∧ ¬q ∧ ¬r) → s Conditional law</p><p>We also need to prove De Morgan on three items</p><p>¬(p ∧ q ∧ r) ≡ ¬((p ∧ q) ∧ r) Associativity</p><p>​ ≡ ¬(p ∧ q) ∨ ¬r De Morgan</p><p>​ ≡ ¬p ∨ ¬q ∨ ¬r De Morgan</p><h2 id="inference-proof">Inference Proof</h2><h3 id="previous-exam-question">Previous exam question</h3><p>Consider the set of statements:</p><p>​ "If the band could not play rock music or the refreshments were not delivered on time, then the New Year's part would have been cancelled and Alicia would have been angry. If the party was cancelled, then refunds would have had to be made. No refunds were made."</p><p>We use these propositional symbols to represent the statements:</p><ul><li>p: the band could play rock music</li><li>q: the refreshments were delivered on time</li><li>r: the New Year/s party was cancelled</li><li>s: Alicia was angry</li><li>t: refunds has to be made</li></ul><p>You should:</p><ol type="a"><li><p>Convert the test statements into propositional statements.</p></li><li><p>Prove using propositional inference that the band could play rock music,.</p></li></ol><p>Note: You can use the "De Morgen" - laws as inference rules.</p><h4 id="solution-3">Solution</h4><ul><li><ol type="i"><li>(¬p ∨ ¬q) → (r ∧ s)</li></ol></li><li><ol start="2" type="i"><li>r → t</li></ol></li><li><ol start="3" type="i"><li>¬t</li></ol></li></ul><ol type="1"><li>¬r Modus tollens with given ii and iii</li><li>¬r ∨ ¬s ∨ introduction with 1</li><li>¬(r ∧ s) De Morgan with 2</li><li>¬(¬p ∨ ¬q) Contrapositive with given i and 3</li><li>¬¬p ∧ ¬¬q De Morgan with 4</li><li>p ∧ q Double negation with 5</li><li>p ∧ elimination with 6</li></ol><h3 id="strings-exercise-1">Strings: exercise 1</h3><p>Let A and B each be sequences of letters, with A = (a<sub>1</sub>, a<sub>2 </sub>,... , a<sub>n</sub>) and B = (b<sub>1</sub>,b<sub>2 </sub>,... , b<sub>n</sub>). Describe each of the following situations formally, using quantifiers with respect to I<sub>n</sub> = {1, 2,..., n}, set notation, and the predicates "=", "≠", and "≺" (precedes alphabetically) as needed.</p><ol type="1"><li>There is no occurrence of "c" in A.</li><li>Some letter appears twice in A.</li><li>No letter appears twice in A.</li><li>A and B are the same list.</li><li>The set of letters appearing in A is a subset of the set of letters appearing in B.</li><li>The set of letters appearing in A is the same as the set of letters appearing in B.</li><li>Each element of A is no later in the alphabet than the corresponding element of B.</li></ol><h4 id="solution-4">Solution</h4><ol type="1"><li>There is no occurrence of "c" in A<ul><li>∀i ∈ <strong>I</strong><sub>n</sub> : a<sub>i</sub> ≠ "c"</li></ul></li><li>Some letter appears twice in A<ul><li>∃i ∈ <strong>I</strong><sub>n</sub> : ∃j ≠ i ∈ <strong>I</strong><sub>n</sub> : a<sub>i</sub> = a<sub>j</sub></li></ul></li><li>No letter appears twice in A<ul><li>∀i ∈ <strong>I</strong><sub>n</sub> : ∀j ≠ i ∈<strong>I</strong><sub>n</sub> : a<sub>i</sub> ≠ a<sub>j</sub></li></ul></li><li>A and B are the same list<ul><li>∀i ∈ <strong>I</strong><sub>n</sub> : a<sub>i</sub> = b<sub>i</sub></li></ul></li><li>The set of letters in A is a subset of the letters in B<ul><li>∀i ∈ <strong>I</strong><sub>n</sub> : ∃j ∈ <strong>I</strong><sub>n</sub> : a<sub>i</sub> = b<sub>j</sub></li></ul></li><li>The set of letters in A is the same as in B<ul><li>Idea: A = B ↔︎ (A ⊆ B) ∧ (B ⊆ A)</li><li>Idea: (∀i ∈ <strong>I</strong><sub>n</sub> : ∃j ∈ <strong>I</strong><sub>n</sub> : a<sub>i</sub> = b<sub>j</sub>) ∧ (∀i ∈ <strong>I</strong><sub>n</sub> : ∃j ∈ <strong>I</strong><sub>n</sub> : a<sub>j</sub> = b<sub>i</sub>)</li></ul></li><li>Each element of A is no later in the alphabet than the corresponding element of B<ul><li>∀i ∈ <strong>I</strong><sub>n</sub> : a<sub>i</sub> ⪯ b<sub>i</sub></li></ul></li></ol><h3 id="strings-exercise-2">Strings: exercise 2</h3><p>Using the notation of Strings Exercise 1, give a formal specification of conditions that are both necessary and sufficient to make A occur earlier in an ordinary dictionary than B. In such a case, we say that A lexicographically precedes B. You may assume that both sequences have the same length, n, and are padded on the right by blanks, which alphabetically precede all the letters. Also note that I<sub>1</sub> = {1} and I<sub>0</sub> = Ø.</p><h4 id="solution-5">Solution</h4><p>A lexicographically precedes B if there exists exactly 1 index for which:</p><ul><li>before this index A and B are equal</li><li>at this index a<sub>i</sub> ≺ b<sub>i</sub></li></ul><p>∃!i ∈ <strong>I</strong><sub>n</sub> : (∀j &lt; i : a<sub>j</sub> = b<sub>j</sub> ) ∧ a<sub>i</sub> ≺ b<sub>i</sub></p><h3 id="graphs-exercise-1">Graphs: Exercise 1</h3><p><img src="/images/FOCS/1545324.png" /></p><ul><li><ol type="a"><li>Express the fact that Edge is symmetric</li></ol><ul><li>Edge(x, y) ↔︎ Edge(y, x)</li></ul></li><li><ol start="2" type="a"><li>Write a formula stating that for every pair of vertices, there is a path of length 2 connecting these two vertices</li></ol><ul><li>∀x ∈ V : ∀y ∈ V : ∃z ∈ V : Edge(x, z) ∧ Edge(z, y)</li></ul></li><li><ol start="3" type="a"><li>Give a recursive definition of Path</li></ol><ul><li>∀x ∈ V : ∀y ∈ V : Path(x, y) ↔︎ x = y ∨ ∃z ∈ V : Edge(x, z) ∧ Path(z, y)</li></ul></li></ul><h3 id="graphs-exercise-2">Graphs: Exercise 2</h3><p><img src="/images/FOCS/1545325.png" /></p><ul><li><ol type="i"><li>∀x ∈ V : ∀y 6= x ∈ V : Edge(x, y)</li></ol><ul><li>The graph is complete</li></ul></li><li><ol start="2" type="i"><li>∀x ∈ V : ∀y ∈ V : Path(x, y)</li></ol><ul><li>The graph is connected</li></ul></li><li><ol start="3" type="i"><li>∀x ∈ V : ∃y ∈ V : Edge(x, y)</li></ol><ul><li>There are no unconnected vertices</li></ul></li><li><ol start="4" type="i"><li>∃x ∈ V : ∀y 6= x ∈ V : Edge(x, y)</li></ol><ul><li>There exists a vertex that is directly connected to all other vertices</li></ul></li></ul><p>Edge(a, b), Edge(b, c), Edge(b, d)</p><p><img src="/images/FOCS/1545326.png" /></p><ul><li>(i): FALSE</li><li>(ii): TRUE</li><li>(iii): TRUE</li><li>(iv): TRUE</li></ul><p>Edge(a, b), Edge(b, c), Edge(c, d)</p><p><img src="/images/FOCS/1545327.png" /></p><ul><li>(i): FALSE</li><li>(ii): TRUE</li><li>(iii): TRUE</li><li>(iv): FALSE</li></ul><h2 id="applying-logic-to-mathematics">Applying logic to mathematics</h2><h3 id="exercise">Exercise</h3><p>Prove that for any n its successor times its predecessor is 1 less than its square. In other words, prove that ∀n ∈ N : P(n), where P(n) is (n + 1)(n - 1) = n<sup>2</sup> - 1. You do not need mathematical induction for this. Use V introduction and arithmetic manipulations involving distributivity and associativity. You may regard other rules of algebra as common knowledge that do not need to be explicitly provided as justifications. Lay out your proof like the rules-of-inference proofs in Chapter 3, justifying each step by stating its rule of inference.</p><h4 id="solution-6">Solution</h4><p>Prove: ∀n ∈ <strong>N</strong> : (n + 1)(n − 1) = n<sup>2</sup> − 1</p><ol type="1"><li>[n ∈ <strong>N</strong>] Assumption</li><li>(n + 1)(n − 2) = n<sup>2</sup> − n + n − 1 Distributivity</li><li>(n + 1)(n − 2) = n<sup>2</sup> − 1</li><li>∀n ∈ <strong>N</strong> : (n + 1)(n − 2) = n<sup>2</sup> − 1 ∀ introduction</li></ol><h2 id="mathematical-induction">Mathematical Induction</h2><h3 id="exercise-1">Exercise</h3><p>Prove by mathematical induction that the sum of the first n odd integers is n<sup>2</sup></p><p><img src="/images/FOCS/13.png" /></p><p><img src="/images/FOCS/14.png" /></p><p>Prove by mathematical induction that for any integer n ≥ 10, 2<sup>n</sup> &gt; n<sup>3</sup></p><p><img src="/images/FOCS/15.png" /></p><p>Prove by mathematical induction: ∀n ∈ <strong>N</strong> : n ≥ 4 : n! ≥ 2<sup>n</sup></p><p><img src="/images/FOCS/16.png" /></p><p>Prove by mathematical induction:</p><p><img src="/images/FOCS/17.png" /></p><p><img src="/images/FOCS/18.png" /></p><p><img src="/images/FOCS/19.png" /></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fundamentals of Computer Science </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Function Examples</title>
      <link href="2021/03/02/2021-03-02-Function-Examples/"/>
      <url>2021/03/02/2021-03-02-Function-Examples/</url>
      
        <content type="html"><![CDATA[<h1 id="function-examples">Function Examples</h1><p><a href="https://inst.eecs.berkeley.edu/~cs61a/fa20/">Website</a></p><p><a href="https://www.youtube.com/watch?v=lo4Xew_uyKQ&amp;list=PL6BsET-8jgYXooA06k6_KVoKq3s5Bh23p">Video</a></p><h2 id="describing-functions"><a href="https://www.youtube.com/watch?v=biSuYXJhmmY&amp;list=PL6BsET-8jgYXooA06k6_KVoKq3s5Bh23p&amp;index=2">Describing Functions</a></h2><h3 id="boolean-favourites">Boolean Favourites</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">likes</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns whether George Boole likes the non-negative</span></span><br><span class="line"><span class="string">    integer n.&quot;&quot;&quot;</span></span><br><span class="line">    ...</span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mystery1</span>(<span class="params">n</span>):</span></span><br><span class="line">    k = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> k &lt; n:</span><br><span class="line">        <span class="keyword">if</span> likes(n):</span><br><span class="line">            print(k)</span><br><span class="line">         k = k + <span class="number">2</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">#likes = is_prime, n = 8</span></span><br></pre></td></tr></table></figure><p>One approach:</p><ol type="1"><li>. Read the code</li><li>Read the description options</li><li>Consider an example</li></ol><p><strong>mystery1</strong> prints <u>all odd numbers</u> less than n <u><strong>but only if</strong> George likes n</u></p><p><del>mystery1 prints all odd numbers less than n that George likes.</del></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">likes</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns whether George Boole likes the non-negative</span></span><br><span class="line"><span class="string">    integer n.&quot;&quot;&quot;</span> </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mystery2</span>(<span class="params">n</span>):</span></span><br><span class="line">    i, j, k = <span class="number">0</span>, <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; n:</span><br><span class="line">        <span class="keyword">if</span> likes(i):</span><br><span class="line">            <span class="keyword">if</span> j != <span class="literal">None</span> <span class="keyword">and</span> (k == <span class="literal">None</span> <span class="keyword">or</span> i - j &lt; k):</span><br><span class="line">                k = i - j</span><br><span class="line">                j = i</span><br><span class="line">                i = i + <span class="number">1</span></span><br><span class="line">                <span class="keyword">return</span> k    </span><br></pre></td></tr></table></figure><p>mystery 2 returns <u>the smallest difference between two positive integers below n that George likes</u> or returns None if <u>There are no two such integers</u> .</p><h2 id="generating-environment-diagram"><a href="https://www.youtube.com/watch?v=yrMTUCqE900&amp;list=PL6BsET-8jgYXooA06k6_KVoKq3s5Bh23p&amp;index=3">Generating Environment Diagram</a></h2><p><img src="/images/CS61A/110924.png" /></p><h2 id="implementing-functions"><a href="https://www.youtube.com/watch?v=XwSN5QceHBc&amp;list=PL6BsET-8jgYXooA06k6_KVoKq3s5Bh23p&amp;index=4">Implementing Functions</a></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span>(<span class="params">n, digit</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return all digits of N that are not DIGIT, for DIGIT less than 10.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; remove(231, 3) </span></span><br><span class="line"><span class="string">    21</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; remove(240132, 2)</span></span><br><span class="line"><span class="string">    4013</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    kept, digits = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n != <span class="number">0</span>:</span><br><span class="line">        n, last = n // <span class="number">10</span>, n % <span class="number">10</span></span><br><span class="line">        <span class="keyword">if</span> last != digit:</span><br><span class="line">            kept = kept / <span class="number">10</span> + last</span><br><span class="line">            digits = digits + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">round</span>(kept * <span class="number">10</span> ** (digits - <span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>Read the description</p><p>Verify the examples &amp; pick a simple one</p><p>Read the template</p><p>Implement without the template, then change your implementation to match the template.</p><p>OR</p><p>If the template is helpful, use it.</p><p>Annotate names with values from your chosen example</p><p>Write code to compute the result</p><p>Did you really return the right thing?</p><p>Check your solution with the other examples</p><h2 id="decorators"><a href="https://www.youtube.com/watch?v=th_SlHfhlBo&amp;list=PL6BsET-8jgYXooA06k6_KVoKq3s5Bh23p&amp;index=5">Decorators</a></h2><h3 id="function-decorators">Function Decorators</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Decorators</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trace1</span>(<span class="params">fn</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a function equivalent to fn that also prints trace output.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    fn -- a function of one argument.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">traced</span>(<span class="params">x</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;Calling&#x27;</span>, fn, <span class="string">&#x27;on argument&#x27;</span>, x)</span><br><span class="line">        <span class="keyword">return</span> fn(x)</span><br><span class="line">    <span class="keyword">return</span> traced</span><br><span class="line"></span><br><span class="line"><span class="meta">@trace1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x*x</span><br><span class="line"></span><br><span class="line"><span class="meta">@trace1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_squares_up_to</span>(<span class="params">n</span>):</span></span><br><span class="line">    total, k = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> k &lt;= n:</span><br><span class="line">        total, k = total + square(k), k + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure><p><img src="/images/CS61A/116924.png" /></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Structure and Interpretation of Computer Programs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Semiconductor Manufacturing &amp; Memory technologies</title>
      <link href="2021/03/01/2021-03-01-Electronics---Semiconductor-Manufacturing-&amp;-Memory-technologies/"/>
      <url>2021/03/01/2021-03-01-Electronics---Semiconductor-Manufacturing-&amp;-Memory-technologies/</url>
      
        <content type="html"><![CDATA[<h1 id="electronics-semiconductor-manufacturing-memory-technologies">Electronics: Semiconductor Manufacturing &amp; Memory technologies</h1><p><a href="https://recordings.reu1.blindsidenetworks.com/vub/431ba48e1329b35f9324196c74211d5dd852ba0c-1614588853821/capture/">Video</a></p><h2 id="outline-127">Outline 1:27</h2><ul><li><p>Semiconductor manufacturing: Silicon → Wafers</p><ul><li>Reduction of quartzite (SiO<sub>2</sub>)</li><li>Purification of silicon</li><li>Si Crystal growing</li><li>Wafer shaping &amp; cutting</li></ul></li><li><p>Semiconductor manufacturing: Wafers → Integrated circuits</p><ul><li>Clean rooms</li><li>Layering: growing and deposition</li><li>Lithography &amp; Etching</li><li>Doping</li><li>Packaging</li></ul></li><li><p>Memory technologies</p><ul><li>Static random-access memory (SRAM)</li><li>Dynamic random-access memory (DRAM)</li><li>Flash memory</li><li>Hard disk drives (magnetic storage)</li></ul></li></ul><h2 id="semiconductor-manufacturing-silicon-wafers-341">Semiconductor Manufacturing: Silicon → Wafers 3:41</h2><h3 id="from-silicon-ore-to-silicon-wafers">From silicon ore to silicon wafers</h3><figure><img src="/images/EP/2124210.png" alt="" /><figcaption>Processing steps</figcaption></figure><h3 id="reduction-of-quartzite-sio2-538">Reduction of quartzite (SiO<sub>2</sub>) 5:38</h3><p><strong>Submerged electrode arc furnace</strong></p><p>Reduction to ~98% pure Si (mostly Al &amp; Fe impurities)</p><p><em>SiC(s) + SiO<sub>2</sub>(s) → Si(l) + SiO(g) + CO(g)</em></p><p><img src="/images/EP/2124211.png" /></p><h3 id="purification-of-silicon-840">Purification of silicon 8:40</h3><p><strong>Metallurgical grade Si → Electronic grade S</strong>i</p><ul><li><p>Fractional distillation process:</p><p><em>Si(s) +3HCl(g) → SiHCl<sub>3</sub>(g) +H<sub>2</sub>(g) +heat</em></p></li><li><p>Fluidized bed reactor <span class="citation" data-cites="300">@300</span>°C:</p><p><em>SiHCl<sub>3</sub>(g) +H<sub>2</sub>(g) → Si(s) +3HCl(g)</em></p></li><li><p>Can be looped to increase purity to less than 1 part per 10<sup>9</sup>.</p></li></ul><p><img src="/images/EP/2124212.png" /></p><h4 id="making-polycrystalline-si-into-a-monocrystalline-si-1144">Making polycrystalline Si into a monocrystalline Si 11:44</h4><p><strong>Starting from a seed crystal</strong></p><p>Main used technique: <strong>Czochralski crystal growth method</strong> (&gt;1412°C)</p><ul><li>Suited for large Si wafers but may have some oxygen inclusion impurities.</li></ul><p><img src="/images/EP/2124213.png" /></p><p><strong>Starting from a seed crystal</strong></p><p>Alternative technique: <strong>Float zone technique</strong></p><ul><li>Very high purity but small wafers. Used for detectors, power devices, expensive high-efficiency solar panels (spacecraft). Also, highly transparent to THz waves.</li></ul><p><img src="/images/EP/2124214.png" /></p><h3 id="wafer-shaping-cutting-1806">Wafer shaping &amp; cutting 18:06</h3><p><strong>Largest wafers used today: 300mm diameter, ~775µm thick</strong></p><ul><li>Remove both ends of ingot</li><li>Surface grinding, edge bevelling</li><li>Wafer cutting with industrial grade diamond.</li></ul><p><img src="/images/EP/2124215.png" /></p><h2 id="semiconductor-manufacturing-wafers-integrated-circuits">Semiconductor manufacturing: Wafers → Integrated circuits</h2><h3 id="clean-rooms-2141">Clean rooms 21:41</h3><p><strong>Design &amp; contamination control</strong></p><ul><li>Modern IC chips have transistors in the 10nm range → sub-µm particles may damage or destroy parts of chips → cleanroom to minimize contaminants</li><li>More contaminants means lower wafer yield, performance (lifetime) and reliability</li><li>ISO cleanroom standards: maximum number of particles/volume bigger than some threshold</li></ul><table><colgroup><col style="width: 14%" /><col style="width: 42%" /><col style="width: 42%" /></colgroup><thead><tr class="header"><th>Contaminant</th><th>Examples</th><th>Source</th></tr></thead><tbody><tr class="odd"><td>Particles</td><td>Dust, hair, flakes (µm range)</td><td>Humans, equipment (friction), chemicals</td></tr><tr class="even"><td>Airborne contaminants</td><td>wide range of gaseous contaminants (sulfate, nitrate, organics, ...) Wafer transfer, chemical delivery system ...</td><td>Wafer transfer, chemical delivery system ...</td></tr><tr class="odd"><td>Bacteria</td><td>All kind</td><td>Humans, improperly disinfected materials and equipment</td></tr><tr class="even"><td>Chemicals</td><td>Chlorine</td><td>Lithography, etching, cleaning products, ...</td></tr><tr class="odd"><td>Metal ions</td><td>Sodium (ppm – ppb range)</td><td>Electrically active impurities in wafers from processed silicon</td></tr></tbody></table><figure><img src="/images/EP/2124216.png" alt="" /><figcaption>Laminar flow cleanroom</figcaption></figure><h3 id="main-categories-of-ic-device-manufacturing-2753">Main categories of IC device manufacturing 27:53</h3><figure><img src="/images/EP/2124217.png" alt="" /><figcaption>Assembly line process</figcaption></figure><h3 id="layering-growing-and-deposition">Layering: growing and deposition</h3><h4 id="layering-growing-techniques-2949">Layering: growing techniques 29:49</h4><p><strong>Consumes underlying silicon for forming new layer</strong></p><p><img src="/images/EP/2124218.png" /></p><p>Oxidation: Si + O<sub>2</sub> → SiO<sub>2</sub></p><p>Nitration: 3Si + 2N<sub>2</sub> → Si<sub>3</sub>N<sub>4</sub></p><ul><li>Electrical isolation (oxide layer is superior)</li><li>Oxide layer acts as the active gate in MOSFET</li><li>Protective layer, passivation (nitride is superior), T resistance</li><li>Used for patterning</li><li>Variants: “wet” and “dry” oxidation</li></ul><h4 id="layering-deposition-techniques-3428">Layering: deposition techniques 34:28</h4><p><strong>Does not consume silicon, new layer is deposited</strong></p><figure><img src="/images/EP/2124219.png" alt="" /><figcaption>Chemical Vapor Deposition (CVD)</figcaption></figure><ul><li>homo/hetero epitaxy</li><li>Silicon films: epitaxy layer, polysilicon</li><li>Dielectric Films: SiO<sub>2</sub>, Nitride, …</li><li>Metals: aluminum, tungsten, TiN, …</li></ul><figure><img src="/images/EP/2124220.png" alt="" /><figcaption>Molecular Beam Epitaxy (MBE)</figcaption></figure><ul><li>Used for Ga &amp; As</li><li>Very precise composition can be obtained</li><li>Can be used for doping too</li><li>Used for quantum nanostructures</li></ul><figure><img src="/images/EP/2124221.png" alt="" /><figcaption>Sputter deposition for metallization</figcaption></figure><p>Depositing of thin metallic layers for</p><ul><li>Contact metals in thin-film transistors</li><li>Hard disk production</li><li>Antireflection coating in optics</li></ul><figure><img src="/images/EP/2124222.png" alt="" /><figcaption>Electroplating (Electrochemical deposition, ECD)</figcaption></figure><ul><li>Inexpensive equipment → relatively cheap</li><li>Relatively uniform and compact deposits, but not as much as CVD or sputtering</li><li>Generally use for layers &gt; 1µm</li></ul><h3 id="lithography-etching">Lithography &amp; Etching</h3><h4 id="patterning-or-lithography-4441">Patterning or Lithography 44:41</h4><p><strong>Selectively mask or expose parts of the wafer</strong></p><ul><li>Determines the critical dimensions of the device (now 10nm &amp; 7nm)</li><li>Highly defect sensitive (pattern creation &amp; alignment)</li><li><strong>Reticle</strong>: hard copy of design → made with laser writing or electron beam</li><li>Developing-expose through mask; first phase is reversible</li><li>Photoresists, positive &amp; negative → solubility</li></ul><figure><img src="/images/EP/2124223.png" alt="" /><figcaption>Photoresists</figcaption></figure><figure><img src="/images/EP/2124224.png" alt="" /><figcaption>Step &amp; scan</figcaption></figure><figure><img src="/images/EP/2124225.png" alt="" /><figcaption>Liftoff</figcaption></figure><figure><img src="/images/EP/2124226.png" alt="" /><figcaption>Immersion Lithography</figcaption></figure><h4 id="etching-removal-of-top-layers-from-the-wafer-5111">Etching: removal of top layers from the wafer 51:11</h4><p><strong>Typically in conjunction with lithography</strong></p><ul><li>Wet etching: wafers are immersed in tank of etchant (e.g. KOH)</li><li>Dry etching: exposure to ion bombardment for dislodging surface material</li></ul><p><img src="/images/EP/2124227.png" /></p><figure><img src="/images/EP/2124228.png" alt="" /><figcaption>Example: plasma etching</figcaption></figure><h3 id="doping-making-extrinsic-semiconductors-5511">Doping: making extrinsic semiconductors 55:11</h3><p><strong>Achieving specific dopant concentration &amp; distribution, creating junctions</strong></p><ul><li>Thermal diffusion (impurity source can be solid, liquid or gaseous)<ul><li>High T: lithography can’t be used → SiO<sub>2</sub> layer</li><li>Lateral spread within the material; solubility limit</li></ul></li><li>Ion implantation<ul><li>Around room T, conventional lithography possible</li><li>Leads to damage of wafer surface → post annealing</li></ul></li></ul><figure><img src="/images/EP/2124229.png" alt="" /><figcaption>Dopant distribution profile</figcaption></figure><figure><img src="/images/EP/2124230.png" alt="" /><figcaption>Thermal diffusion</figcaption></figure><figure><img src="/images/EP/2124231.png" alt="" /><figcaption>Ion implantation</figcaption></figure><h3 id="packaging-10030">Packaging 1:00:30</h3><p><strong>Readying the IC for use</strong></p><p>System on a Chip (SoC): all components integrated into one chip</p><p>System on a Package (SoP): all components integrated into one chip (e.g., In mobile phones)</p><p>Functions of packaging:</p><ol type="1"><li>Lead system</li><li>Physical protection</li><li>Minimizing environmental impact</li><li>Heat dissipation</li></ol><p>Handling interconnects</p><ul><li><p>Wirebond</p><figure><img src="/images/EP/2124232.png" alt="" /><figcaption>Wire bonding</figcaption></figure></li><li><p>Flip-Chip</p><figure><img src="/images/EP/2124233.png" alt="" /><figcaption>Flip-chip</figcaption></figure></li><li><p>Chip-Stack</p><figure><img src="/images/EP/2124234.png" alt="" /><figcaption>3D Chip Stack</figcaption></figure></li></ul><h3 id="example-mosfet-fabrication-steps-10450">Example: MOSFET fabrication steps 1:04:50</h3><p><strong>NMOS</strong></p><ol type="1"><li>Lightly P-doped substrate</li><li>Oxidation (thick field oxide)</li><li>Lithography + oxide etching</li><li>Thin, high-quality oxide layer for FET gate formation</li><li>Polysilicon deposition (gate electrode material + interconnect medium in IC)</li><li>Polysilicon etching</li><li>Oxide etching h) High concentration n-doping</li><li>Insulating oxide layer</li><li>Etching step</li><li>Metallization layer (Al) for interconnects</li></ol><p><img src="/images/EP/2124235.png" /></p><h2 id="memory-technologies">Memory technologies</h2><h3 id="the-memory-hierarchy-in-a-computer-10943">The Memory hierarchy in a computer 1:09:43</h3><p><strong>Optimizing cost and speed</strong></p><p><img src="/images/EP/2124236.png" /></p><h3 id="static-random-access-memory-11345">Static random-access memory 1:13:45</h3><p><strong>Properties</strong>:</p><ul><li>Volatile</li><li>Bits are stored as on/off switches</li><li>No charges to leak</li><li>No refreshing needed when powered</li><li>More complex construction</li><li>Larger per bit</li><li>More expensive</li><li>Faster</li><li>Primarily used for caching</li><li>Digital → uses flip-flops</li></ul><p><img src="/images/EP/2124237.png" /></p><p><strong>Operation</strong></p><p><img src="/images/EP/2124239.png" /></p><h3 id="dynamic-random-access-memory-12420">Dynamic random-access memory 1:24:20</h3><p><strong>Properties</strong>：</p><ul><li>Volatile</li><li>Bits stored as charge in capacitors</li><li>Charges leak → Need to refresh circuits periodically</li><li>Simpler construction</li><li>Smaller per bit</li><li>Less expensive</li><li>Slower</li><li>Main memory (Computer “RAM”)</li><li>Essentially analogue → charge level determines value</li></ul><p><img src="/images/EP/2124238.png" /></p><p><strong>Operation</strong></p><figure><img src="/images/EP/2124240.png" alt="" /><figcaption>Single memory cell</figcaption></figure><figure><img src="/images/EP/2124241.png" alt="" /><figcaption>Memory cell array</figcaption></figure><p><strong>DDR RAM generations</strong></p><p><img src="/images/EP/2124242.png" /></p><h3 id="flash-memory-13352">Flash memory 1:33:52</h3><h4 id="introduction">Introduction</h4><p><strong>Flash memory stores information in an array of memory cells made from floating gate transistors.</strong></p><ul><li>Non-volatile</li><li>Traditional single-level cell (SLC) devices: 1 bit/cell</li><li>Newer multi-level cell (MLC) devices can store multiple bits/cell by choosing between multiple levels of charge.</li></ul><p><img src="/images/EP/2124243.png" /></p><h4 id="reading-of-a-single-cell">Reading of a single cell</h4><p><img src="/images/EP/2124244.png" /></p><h4 id="writing-of-cells-tunnelling">Writing of cells: tunnelling</h4><p><img src="/images/EP/2124245.png" /></p><h4 id="nor-flash-memory">NOR Flash memory</h4><figure><img src="/images/EP/2124246.png" alt="" /><figcaption>Reading process</figcaption></figure><h4 id="nand-flash-memory">NAND Flash memory</h4><figure><img src="/images/EP/2124247.png" alt="" /><figcaption>Reading process</figcaption></figure><h4 id="nor-vs-nand-flash">NOR vs NAND flash</h4><ul><li><p>NOR Flash</p><ul><li><p>Faster to read than NAND</p></li><li><p>Slower to erase &amp; write</p></li><li><p>Larger cells</p></li><li><p>More expensive</p><p>→ Use in mobile devices, tablets, ...</p></li></ul></li><li><p>NAND Flash</p><ul><li><p>Slower to read than NOR</p></li><li><p>Faster to erase &amp; write</p></li><li><p>Much smaller cells</p></li><li><p>Less expensive</p><p>→ High memory density</p><p>→ Good for SD cards, Digital cameras, USB sticks</p></li></ul></li></ul><h3 id="hard-disk-drives-hdd-14955">Hard Disk Drives (HDD) 1:49:55</h3><p><strong>Introduction</strong></p><ul><li>Magnetic storage</li><li>About 90% of data centre storage</li></ul><p><strong>Basic operation</strong></p><ul><li>Reading head floats only a few nm above the ferromagnetic film of the disk platter.</li><li>Current in write head induces magnetic field → alters bits</li><li>Read element will detects voltage changes, induced by motion over the magnetic field.</li><li>Transition to perpendicular recording in ~2005 → more magnetically stable, stronger fields → boost in density</li><li>In modern HDDs take up less than 50 nm/bit</li></ul><figure><img src="/images/EP/2124248.png" alt="" /><figcaption>Longitundal vs. Perpendicular recording</figcaption></figure><figure><img src="/images/EP/2124249.png" alt="" /><figcaption>HDD logical decomposition</figcaption></figure><p><strong>Helium sealed drives</strong></p><ul><li>Drag on rotating platters scales as 𝜌𝑣<sup>3</sup>.</li><li>Helium is ~7 less dense than air + has better thermal conductivity<ul><li>Reduction in power</li><li>Lower turbulence</li><li>Better cooling</li></ul></li><li>More thinner platters possible → more capacity</li><li>Introduced to the market in 2013</li></ul><figure><img src="/images/EP/2124250.png" alt="" /><figcaption>Helium-sealed HDD</figcaption></figure><p><strong>Challenge: the superparamagnetic effect</strong></p><ul><li><p>Individual grains are only ~8nm in diameter</p></li><li><p>Physical limit - <strong>the superparamagnetic effect</strong>: magnetization can randomly flip direction under the influence of temperature.</p></li><li><p>Current materials do not allow to go below ~7nm grains.</p><p><img src="/images/EP/2124251.png" /></p></li><li><p><strong>Coercivity</strong> is a measure of the ability of a ferromagnetic material to withstand an external magnetic field without becoming demagnetized.</p></li><li><p>Higher coercivity means higher stability, but also harder to write to → new writing technologies needed.</p></li></ul><p><img src="/images/EP/2124252.png" /></p><ul><li><p>Microwave-Assisted Magnetic Recording (MAMR) uses 20-40 GHz frequencies to bombard the disk platter with a circular microwave field, lowering its coercivity and enabling the bit value to be written.</p></li><li><p>Heat-Assisted Magnetic Recording (HAMR) uses a tiny 200 mW laser beam to heat up the disk platter to 400 °C and permit the writing operation.</p></li><li><p>Heated-Dot Magnetic Recording (HDMR) extends HAMR, patterning the disk into small “dots”. This allows to better focus the laser energy on individual dots.</p></li><li><p>Expected 10x gains in density over current HDDs on the market → &gt;100 TB HDDs</p></li></ul><p><img src="/images/EP/2124253.png" /></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Technology and Applications of Electronics and Photonics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Higher Order Functions</title>
      <link href="2021/03/01/2021-03-01-Higher-Order-Functions/"/>
      <url>2021/03/01/2021-03-01-Higher-Order-Functions/</url>
      
        <content type="html"><![CDATA[<h1 id="higher-order-functions">Higher Order Functions</h1><p>A <strong>higher order function</strong> (HOF) is a function that manipulates other functions by taking in functions as arguments, returning a function, or both. For example, the function compose1 below takes in two functions as arguments and returns a function that is the composition of the two arguments.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compose1</span>(<span class="params">f, g</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">h</span>(<span class="params">x</span>):</span></span><br><span class="line">        <span class="keyword">return</span> f(g(x))</span><br><span class="line">    <span class="keyword">return</span> h</span><br></pre></td></tr></table></figure><p>HOFs are powerful abstraction tools that allow us to express certain general patterns as named concepts in our programs.</p><h2 id="a-note-on-lambda-expressions">A Note on Lambda Expressions</h2><p>A lambda expression evaluates to a function, called a lambda function.</p><p>For example, <strong>lambda y: x + y</strong> is a lambda expression, and can be read as “a function that takes in one parameter y and returns x + y.”</p><p>A lambda expression by itself evaluates to a function but does not bind it to a name.</p><p>Also note that the return expression of this function is not evaluated until the lambda is called.</p><p>This is similar to how defining a new function using a def statement does not execute the function’s body until it is later called.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>what = <span class="keyword">lambda</span> x : x + <span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>what</span><br><span class="line">&lt;function &lt;<span class="keyword">lambda</span>&gt; at <span class="number">0xf3f490</span>&gt;</span><br></pre></td></tr></table></figure><p>Unlike def statements, lambda expressions can be used as an operator or an operand to a call expression. This is because they are simply one-line expressions that evaluate to functions. In the example below, <strong>(lambda y: y + 5)</strong> is the operator and <strong>4</strong> is the operand.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="keyword">lambda</span> y: y + <span class="number">5</span>)(<span class="number">4</span>)</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="keyword">lambda</span> f, x: f(x))(<span class="keyword">lambda</span> y: y + <span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line"><span class="number">11</span></span><br></pre></td></tr></table></figure><h2 id="currying">Currying</h2><p>One important application of HOFs is converting a function that takes multiple arguments into a chain of functions that each take a single argument. This is known as <strong>currying</strong>.</p><p>For example, the function below converts the pow function into its curried form:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">curried_pow</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">h</span>(<span class="params">y</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pow</span>(x, y)</span><br><span class="line">    <span class="keyword">return</span> h</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>curried_pow(<span class="number">2</span>)(<span class="number">3</span>)</span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure><h2 id="self-reference">Self Reference</h2><p><strong>Self-reference</strong> refers to a particular design of <strong>HOF</strong>, where a function eventually returns itself. In particular, a self-referencing function will not return a function <strong>call</strong>, but rather the function object itself. As an example, take a look at the print all function to the right.</p><p>Self-referencing functions will oftentimes employ helper functions that reference the outer function, such as the example to the right, print sums.</p><p>Note that a call to print sums returns next sum. A call to next sum will return the result of calling print sums which will, in turn, return another function next sum. This type of pattern is common in self-referencing functions.</p><p><strong>. Small Note</strong>: This differs from recursion because typically each new call returns a new function rather than a function call. We have not yet covered recursion so don’t worry too much about what this means!</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_all</span>(<span class="params">x</span>):</span></span><br><span class="line">    print(x)</span><br><span class="line">    <span class="keyword">return</span> print_all</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_sums</span>(<span class="params">n</span>):</span></span><br><span class="line">    print(n)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next_sum</span>(<span class="params">k</span>):</span></span><br><span class="line">        <span class="keyword">return</span> print_sums(n+k)</span><br><span class="line">    <span class="keyword">return</span> next_sum</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Discussions </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Structure and Interpretation of Computer Programs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Design</title>
      <link href="2021/03/01/2021-03-01-Design/"/>
      <url>2021/03/01/2021-03-01-Design/</url>
      
        <content type="html"><![CDATA[<h1 id="design">Design</h1><p><a href="https://inst.eecs.berkeley.edu/~cs61a/fa20/">Website</a></p><p><a href="https://www.youtube.com/watch?v=ft75AwYic-w&amp;list=PL6BsET-8jgYUC2Gl9J9Jo_JNLXWl7RcSs&amp;index=1">Video</a></p><h2 id="abstraction"><a href="https://www.youtube.com/watch?v=bi_2gAetCiI&amp;list=PL6BsET-8jgYUC2Gl9J9Jo_JNLXWl7RcSs&amp;index=2">Abstraction</a></h2><h3 id="functional-abstractions">Functional Abstractions</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> mul(x, x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_squares</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> square(x) + square(y)</span><br></pre></td></tr></table></figure><p>What does sum_squares need to know about square?</p><ul><li>Square takes one argument. <strong>YES</strong></li><li>Square has the <strong>intrinsic</strong> name square. <strong>NO</strong></li><li>Square computes the square of a number. <strong>YES</strong></li><li>Square computes the square by calling mul. <strong>NO</strong></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(x, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> mul(x, x-<span class="number">1</span>) + x</span><br></pre></td></tr></table></figure><p><em>If the name “square” were bound to a built-in function, sum_squares would still work identically.</em></p><h3 id="choosing-names">Choosing Names</h3><p>Names typically don’t matter for correctness, <strong><em>but</em></strong> they matter a lot for composition</p><p>Names should convey the meaning or purpose of the values to which they are bound.</p><p>The type of value bound to the name is best documented in a function's docstring.</p><p>Function names typically convey their effect (<strong>print</strong>), their behaviour (<strong>triple</strong>), or the value returned (<strong>abs</strong>).</p><table><thead><tr class="header"><th>From:</th><th>To:</th></tr></thead><tbody><tr class="odd"><td>true_false</td><td>rolled_a_one</td></tr><tr class="even"><td>d</td><td>dice</td></tr><tr class="odd"><td>play_helper</td><td>take_turn</td></tr><tr class="even"><td>my_int</td><td>num_rolls</td></tr><tr class="odd"><td>l, I, O</td><td>k, i, m</td></tr></tbody></table><h3 id="which-values-deserve-a-name">Which Values Deserve a Name</h3><p><strong>Reasons to add a new name</strong></p><p><em>Repeated compound expressions:</em></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> sqrt(square(a) + square(b)) &gt; <span class="number">1</span>:</span><br><span class="line">    x = x + sqrt(square(a) + square(b))</span><br><span class="line">    </span><br><span class="line">hypotenuse = sqrt(square(a) + square(b))</span><br><span class="line"><span class="keyword">if</span> hypotenuse &gt; <span class="number">1</span>:</span><br><span class="line">    x = x + hypotenuse</span><br></pre></td></tr></table></figure><p><em>Meaningful parts of complex expressions:</em></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x1 = (-b + sqrt(square(b) - <span class="number">4</span> * a * c)) / (<span class="number">2</span> * a)</span><br><span class="line"></span><br><span class="line">discriminant = square(b) - <span class="number">4</span> * a * c</span><br><span class="line">x1 = (-b + sqrt(discriminant)) / (<span class="number">2</span> * a)</span><br></pre></td></tr></table></figure><p><strong>More Naming Tips</strong></p><ul><li><p>Names can be long if they help document your code:</p><p>average_age = average(age, students)</p><p>is preferable to</p><p># Compute average age of students aa = avg(a, st)</p></li><li><p>Names can be short if they represent generic quantities: counts, arbitrary functions, arguments to mathematical operations, etc.</p><ul><li>n, k, i - Usually integers</li><li>x, y, z - Usually real numbers</li><li>f, g, h - Usually functions</li></ul></li></ul><h2 id="function-example-sounds"><a href="https://www.youtube.com/watch?v=TC_JcE42R2s&amp;list=PL6BsET-8jgYUC2Gl9J9Jo_JNLXWl7RcSs&amp;index=3">Function Example: Sounds</a></h2><h3 id="wav-files">WAV Files</h3><p>The Waveform Audio File Format encodes a sampled sound wave</p><p><img src="/images/CS61A/153151.png" /></p><p>A triangle wave is the simple wave form with the most pleasing sound</p><p><img src="/images/CS61A/153152.png" /></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Example: Sound</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> wave <span class="keyword">import</span> <span class="built_in">open</span></span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> Struct</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> floor</span><br><span class="line"></span><br><span class="line">frame_rate = <span class="number">11025</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Encode float x between -1 and 1 as two bytes.</span></span><br><span class="line"><span class="string">    (See https://docs.python.org/3/library/struct.html)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    i = <span class="built_in">int</span>(<span class="number">16384</span> * x)</span><br><span class="line">    <span class="keyword">return</span> Struct(<span class="string">&#x27;h&#x27;</span>).pack(i)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">play</span>(<span class="params">sampler, name=<span class="string">&#x27;song.wav&#x27;</span>, seconds=<span class="number">2</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Write the output of a sampler function as a wav file.</span></span><br><span class="line"><span class="string">    (See https://docs.python.org/3/library/wave.html)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    out = <span class="built_in">open</span>(name, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">    out.setnchannels(<span class="number">1</span>)</span><br><span class="line">    out.setsampwidth(<span class="number">2</span>)</span><br><span class="line">    out.setframerate(frame_rate)</span><br><span class="line">    t = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> t &lt; seconds * frame_rate:</span><br><span class="line">        sample = sampler(t)</span><br><span class="line">        out.writeframes(encode(sample))</span><br><span class="line">        t = t + <span class="number">1</span></span><br><span class="line">    out.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tri</span>(<span class="params">frequency, amplitude=<span class="number">0.3</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;A continuous triangle wave.&quot;&quot;&quot;</span></span><br><span class="line">    period = frame_rate // frequency</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sampler</span>(<span class="params">t</span>):</span></span><br><span class="line">        saw_wave = t / period - floor(t / period + <span class="number">0.5</span>)</span><br><span class="line">        tri_wave = <span class="number">2</span> * <span class="built_in">abs</span>(<span class="number">2</span> * saw_wave) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> amplitude * tri_wave</span><br><span class="line">    <span class="keyword">return</span> sampler</span><br><span class="line"></span><br><span class="line">c_freq, e_freq, g_freq = <span class="number">261.63</span>, <span class="number">329.63</span>, <span class="number">392.00</span></span><br><span class="line"></span><br><span class="line">play(tri(e_freq))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">both</span>(<span class="params">f, g</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> t: f(t) + g(t)</span><br><span class="line"></span><br><span class="line">c = tri(c_freq)</span><br><span class="line">e = tri(e_freq)</span><br><span class="line">g = tri(g_freq)</span><br><span class="line"></span><br><span class="line">play(both(c, e))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">note</span>(<span class="params">f, start, end</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Play f for a fixed duration.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sampler</span>(<span class="params">t</span>):</span></span><br><span class="line">        seconds = t / frame_rate</span><br><span class="line">        <span class="keyword">if</span> seconds &lt; start:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> seconds &gt; end:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> f(t)</span><br><span class="line">    <span class="keyword">return</span> sampler</span><br><span class="line"></span><br><span class="line">play(both(note(c, <span class="number">0</span>, <span class="number">1</span>/<span class="number">4</span>), note(e, <span class="number">1</span>/<span class="number">2</span>, <span class="number">1</span>/<span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">note</span>(<span class="params">f, start, end, fade=<span class="number">.01</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Play f for a fixed duration.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sampler</span>(<span class="params">t</span>):</span></span><br><span class="line">        seconds = t / frame_rate</span><br><span class="line">        <span class="keyword">if</span> seconds &lt; start:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> seconds &gt; end:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> seconds &lt; start + fade:</span><br><span class="line">            <span class="keyword">return</span> (seconds - start) / fade * f(t)</span><br><span class="line">        <span class="keyword">elif</span> seconds &gt; end - fade:</span><br><span class="line">            <span class="keyword">return</span> (end - seconds) / fade * f(t)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> f(t)</span><br><span class="line">    <span class="keyword">return</span> sampler</span><br><span class="line"></span><br><span class="line">play(note(tri(e_freq), <span class="number">1</span>, <span class="number">1.5</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">low_g = tri(g_freq / <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">play(both(note(e, <span class="number">0</span>, <span class="number">1</span>/<span class="number">8</span>), note(low_g, <span class="number">1</span>/<span class="number">8</span>, <span class="number">3</span>/<span class="number">8</span>)))</span><br><span class="line"></span><br><span class="line">play(both(note(c, <span class="number">0</span>, <span class="number">1</span>), both(note(e, <span class="number">0</span>, <span class="number">1</span>), note(g, <span class="number">0</span>, <span class="number">1</span>))))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mario</span>(<span class="params">c, e, g, low_g</span>):</span></span><br><span class="line">    z = <span class="number">0</span></span><br><span class="line">    song = note(e, z, z + <span class="number">1</span>/<span class="number">8</span>)</span><br><span class="line">    z += <span class="number">1</span>/<span class="number">8</span></span><br><span class="line">    song = both(song, note(e, z, z + <span class="number">1</span>/<span class="number">8</span>))</span><br><span class="line">    z += <span class="number">1</span>/<span class="number">4</span></span><br><span class="line">    song = both(song, note(e, z, z + <span class="number">1</span>/<span class="number">8</span>))</span><br><span class="line">    z += <span class="number">1</span>/<span class="number">4</span></span><br><span class="line">    song = both(song, note(c, z, z + <span class="number">1</span>/<span class="number">8</span>))</span><br><span class="line">    z += <span class="number">1</span>/<span class="number">8</span></span><br><span class="line">    song = both(song, note(e, z, z + <span class="number">1</span>/<span class="number">8</span>))</span><br><span class="line">    z += <span class="number">1</span>/<span class="number">4</span></span><br><span class="line">    song = both(song, note(g, z, z + <span class="number">1</span>/<span class="number">4</span>))</span><br><span class="line">    z += <span class="number">1</span>/<span class="number">2</span></span><br><span class="line">    song = both(song, note(low_g, z, z + <span class="number">1</span>/<span class="number">4</span>))</span><br><span class="line">    <span class="keyword">return</span> song</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mario_at</span>(<span class="params">octave</span>):</span></span><br><span class="line">    c = tri(octave * c_freq)</span><br><span class="line">    e = tri(octave * e_freq)</span><br><span class="line">    g = tri(octave * g_freq)</span><br><span class="line">    low_g = tri(octave * g_freq / <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> mario(c, e, g, low_g)</span><br><span class="line"></span><br><span class="line">play(both(mario_at(<span class="number">1</span>), mario_at(<span class="number">1</span>/<span class="number">2</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Structure and Interpretation of Computer Programs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scope, Pass-by-Value, Static</title>
      <link href="2021/02/28/2021-02-28-Scope,-Pass-by-Value,-Static/"/>
      <url>2021/02/28/2021-02-28-Scope,-Pass-by-Value,-Static/</url>
      
        <content type="html"><![CDATA[<h1 id="scope-pass-by-value-static">Scope, Pass-by-Value, Static</h1><h2 id="pass-by-what">Pass-by-What?</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pokemon</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> level;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pokemon</span><span class="params">(String name, <span class="keyword">int</span> level)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.level = level;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Pokemon p = <span class="keyword">new</span> Pokemon(<span class="string">&quot;Pikachu&quot;</span>, <span class="number">17</span>);</span><br><span class="line">        <span class="keyword">int</span> level = <span class="number">100</span>;</span><br><span class="line">        change(p, level);</span><br><span class="line">        System.out.println(<span class="string">&quot;Name: &quot;</span> + p.name + <span class="string">&quot;, Level: &quot;</span> + p.level);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(Pokemon poke, <span class="keyword">int</span> level)</span> </span>&#123;</span><br><span class="line">        poke.level = level;</span><br><span class="line">        level = <span class="number">50</span>;</span><br><span class="line">        poke = <span class="keyword">new</span> Pokemon(<span class="string">&quot;Gengar&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol type="a"><li>Draw the box-and-pointer diagram after Java evaluates the main method. What would Java print?</li></ol><p><img src="/images/CS61B/145940.png" /></p><ol start="2" type="a"><li>On line 19, we set level equal to 50. What level do we mean? An instance variable of the Pokemon class? The local variable containing the parameter to the change method? The local variable in the main method? Something else?</li></ol><ul><li>It is the local variable in the change method and does not have any effect on the other variables of the same name in the Pokemon class or the main method.</li></ul><h2 id="static-methods-and-variables">Static Methods and Variables</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String noise;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">(String name, String noise)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.noise = noise;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(noise + <span class="string">&quot; I&#x27;m &quot;</span> + name + <span class="string">&quot; the cat!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nickname</span><span class="params">(String newName)</span> </span>&#123;</span><br><span class="line">        name = newName;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">anger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        noise = noise.toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">calm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        noise = noise.toLowerCase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol type="a"><li>Write what will happen after each call of play() in the following method.</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Cat a = <span class="keyword">new</span> Cat(<span class="string">&quot;Cream&quot;</span>, <span class="string">&quot;Meow!&quot;</span>);</span><br><span class="line">    Cat b = <span class="keyword">new</span> Cat(<span class="string">&quot;Tubbs&quot;</span>, <span class="string">&quot;Nyan!&quot;</span>);</span><br><span class="line">    a.play();</span><br><span class="line">    b.play();</span><br><span class="line">    Cat.anger();</span><br><span class="line">    a.calm();</span><br><span class="line">    a.play();</span><br><span class="line">    b.play();</span><br><span class="line">    a.nickname(<span class="string">&quot;Kitty&quot;</span>);</span><br><span class="line">    a.play();</span><br><span class="line">    b.play()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Nyan! I'm Cream the cat</li><li>Nyan! I'm Tubbs the cat!</li><li>Nyan! I'm Cream the cat!</li><li>Nyan! I'm Tubbs the cat!</li><li>Nyan! I'm Kitty the cat!</li><li>Nyan! I'm Tubbs the cat!</li></ul><p>Explanation: Notice that the variable noise was declared to be a static variable. What this means is that there is only one noise variable for the entire Cat class. In contrast, every time a Cat object is created, it gets its own name.</p><p>Another common use of static variables is for storing the total number of objects that have been created of a class. There needs to be only one variable per class for storing something like this!</p><p>Since there is only noise variable, it first gets set to Meow! in line 2. Then it changes to Nyan! in line 3 and Meow! is forgotten forever.</p><p>Line 6 changes our noise from Nyan! to NYAN!. Then, Line 7 eventually changes our one and only noise to nyan!.</p><p>Line 10 looks at an instance method of the Cat class. When we call nickname on a, it changes a’s name to Kitty, but b’s name should stay the same.</p><ol start="2" type="a"><li>If we were to add Cat.nickname("KitKat") to the end of our main function, what would happen?</li></ol><p>If we were to add this line to our main function, it would error. In the class, nickname is an instance function. What would it mean to rename Cat as opposed to a specific cat? It doesn’t really make sense. So when we try to run this function on our class, it errors.</p><p>One more thing to note is the functions anger and calm are declared static themselves. Static methods can be called using the name of the class, as in line 7, whereas non-static methods cannot. The golden rule for static methods to know is that <strong>static methods can only modify static variables</strong>.</p><h2 id="practice-with-linked-lists">Practice with Linked Lists</h2><p>Draw the box-and-pointer diagram that results from running the following code. A StringList is similar to an IntList. It has two instance variables, first and rest.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringList L = <span class="keyword">new</span> StringList(<span class="string">&quot;eat&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">L = <span class="keyword">new</span> StringList(<span class="string">&quot;shouldn&#x27;t&quot;</span>, L);</span><br><span class="line">L = <span class="keyword">new</span> StringList(<span class="string">&quot;you&quot;</span>, L);</span><br><span class="line">L = <span class="keyword">new</span> StringList(<span class="string">&quot;sometimes&quot;</span>, L);</span><br><span class="line">StringList M = L.rest;</span><br><span class="line">StringList R = <span class="keyword">new</span> StringList(<span class="string">&quot;many&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">R = <span class="keyword">new</span> StringList(<span class="string">&quot;potatoes&quot;</span>, R);</span><br><span class="line">R.rest.rest = R;</span><br><span class="line">M.rest.rest.rest = R.rest;</span><br><span class="line">L.rest.rest = L.rest.rest.rest;</span><br><span class="line">L = M.rest;</span><br></pre></td></tr></table></figure><p><img src="/images/CS61B/145941.png" /></p><h2 id="squaring-a-list-extra">Squaring a List <em>Extra</em></h2><p>Implement square and squareDestructive which are static methods that both take in an IntList L and return an IntList with its integer values all squared. square does this non-destructively with recursion by creating new IntLists while squareDestructive uses an iterative approach to change the instance variables of the input IntList L.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IntList <span class="title">square</span><span class="params">(IntList L)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> L;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        IntList rest = square(L.rest);</span><br><span class="line">        IntList M = <span class="keyword">new</span> IntList(L.first * L.first, rest);</span><br><span class="line">        <span class="keyword">return</span> M;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>Explanation</em></strong>: This is a recursive function relying on the famous recursive leap of faith. Lines 1-2 take care of the base case. Line 4 takes the recursive leap of faith. It assumes that the square function correctly squares the rest of the linked list. Line 5 then uses the correct result from line 4 to create a new IntList with the first element squared</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IntList <span class="title">squareDestructive</span><span class="params">(IntList L)</span> </span>&#123;</span><br><span class="line">    IntList B = L;</span><br><span class="line">    <span class="keyword">while</span> (B != <span class="keyword">null</span>) &#123;</span><br><span class="line">        B.first *= B.first;</span><br><span class="line">        B = B.rest</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>Explanation</em></strong>: This method walks through the linked list, one part at a time, and squares each element in place. B is used as a position variable to keep track of where we are in the linked list. Once B becomes null, we have hit the end of the linked list</p><p><em>Extra</em>: Now, implement square iteratively, and squareDestructive recursively.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IntList <span class="title">square</span><span class="params">(IntList L)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> L;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    IntList B = L.rest;</span><br><span class="line">    IntList LSquared = <span class="keyword">new</span> IntList(L.first * L.first, <span class="keyword">null</span>);</span><br><span class="line">    IntList C = LSquared;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (B != <span class="keyword">null</span>) &#123;</span><br><span class="line">        C.rest = <span class="keyword">new</span> IntList(B.first * B.first, <span class="keyword">null</span>);</span><br><span class="line">        B = B.rest;</span><br><span class="line">        C = C.rest;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> LSquared;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IntList <span class="title">squareDestructive</span><span class="params">(IntList L)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> L;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        L.first = L.first * L.first;</span><br><span class="line">        squareDestructive(L.rest);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Discussions </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structures </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Introduction to Java</title>
      <link href="2021/02/28/2021-02-28-Introduction-to-Java/"/>
      <url>2021/02/28/2021-02-28-Introduction-to-Java/</url>
      
        <content type="html"><![CDATA[<h1 id="introduction-to-java">Introduction to Java</h1><p><a href="https://www.youtube.com/watch?v=h3d8S4QKGbg&amp;feature=youtu.be">Video</a></p><h2 id="our-first-java-program">Our First Java Program</h2><p>Below is our first Java program of the semester. Next to each line, write out what you think the code will do when run. This exercise is adapted from <em>Head First Java</em>.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> size = <span class="number">27</span>;</span><br><span class="line"><span class="comment">// Declares a variable of type int and assigns it the value In Java, all variables must be declared before they are used</span></span><br><span class="line">String name = <span class="string">&quot;Fido&quot;</span>;</span><br><span class="line"><span class="comment">// Declares a variable of type String and assigns it the variable &quot;Fido&quot;</span></span><br><span class="line">Dog myDog = <span class="keyword">new</span> Dog(name, size);</span><br><span class="line"><span class="comment">// Declares and initializes a new variable of type Dog. Calls the Dog constructor to create a new object of type Dog</span></span><br><span class="line"><span class="keyword">int</span> x = size - <span class="number">5</span>;</span><br><span class="line"><span class="comment">//Declares a new variable of type int and assigns it the value 22</span></span><br><span class="line"><span class="keyword">if</span> (x &lt; <span class="number">15</span>) &#123;</span><br><span class="line">    myDog.bark(<span class="number">8</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// If x is less than 15, calls the bark method on an instance of the Dog class. Since x is 22, myDog.bark is not called</span></span><br><span class="line"><span class="keyword">while</span> (x &gt; <span class="number">3</span>) &#123;</span><br><span class="line"><span class="comment">// Checks if x is greater than 3 and if so calls myDog&#x27;s play method. Subtracts 1, and as long as x is bigger than 3, goes back to the beginning of the loop. Play happens a total of 19 times</span></span><br><span class="line">    x -= <span class="number">1</span>;</span><br><span class="line">    myDog.play();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span>[] numList = &#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>&#125;;</span><br><span class="line"> <span class="comment">// Declares an array of ints and initializes it to &#123;2, 4, 6, 8&#125;</span></span><br><span class="line">System.out.print(<span class="string">&quot;Hello &quot;</span>);</span><br><span class="line"> <span class="comment">// Prints the String &quot;Hello &quot; to the standard output</span></span><br><span class="line">System.out.println(<span class="string">&quot;Dog: &quot;</span> + name);</span><br><span class="line"><span class="comment">// Prints the String &quot;Dog: Fido&quot; to the standard output and then terminates the line</span></span><br><span class="line">System.out.println(numList[<span class="number">1</span>]);</span><br><span class="line"><span class="comment">// Prints the String &quot;4&quot; to the standard output and then terminates the line. In Java, arrays are indexed from 0</span></span><br><span class="line"><span class="keyword">if</span> (numList[<span class="number">3</span>] == <span class="number">8</span>) &#123;</span><br><span class="line"><span class="comment">// numList[3] is equal to 8</span></span><br><span class="line">    System.out.println(<span class="string">&quot;potato&quot;</span>);</span><br><span class="line"><span class="comment">// Prints the String &quot;potato&quot; to the standard output and then terminates the line</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For your convenience, here is the same code in Python:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">size = <span class="number">27</span></span><br><span class="line">name = <span class="string">&quot;Fido&quot;</span></span><br><span class="line">myDog = Dog(name, size)</span><br><span class="line">x = size - <span class="number">5</span>;</span><br><span class="line"><span class="keyword">if</span> x &lt; <span class="number">15</span>:</span><br><span class="line">    myDog.bark(<span class="number">8</span>)</span><br><span class="line"><span class="keyword">while</span> x &gt; <span class="number">3</span>:</span><br><span class="line">    x -= <span class="number">1</span></span><br><span class="line">    myDog.play()</span><br><span class="line">numList = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line">print(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">print(<span class="string">&quot;Dog: &quot;</span> + name)</span><br><span class="line">print(numList[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">if</span> numList[<span class="number">3</span>] == <span class="number">8</span>:</span><br><span class="line">    print(<span class="string">&quot;potato&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="mystery">Mystery</h2><p>This is a function (a.k.a. method). It takes an array of integers and an integer as arguments, and returns an integer.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">mystery</span><span class="params">(<span class="keyword">int</span>[] inputArray, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = inputArray[k];</span><br><span class="line">    <span class="keyword">int</span> answer = k;</span><br><span class="line">    <span class="keyword">int</span> index = k + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (index &lt; inputArray.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (inputArray[index] &lt; x) &#123;</span><br><span class="line">            x = inputArray[index];</span><br><span class="line">            answer = index;</span><br><span class="line">        &#125;</span><br><span class="line">        index = index + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol type="a"><li>What mystery returns if inputArray = [3, 0, 4, 6, 3] and k = 2.</li></ol><ul><li>The method returns 4.</li></ul><ol start="2" type="a"><li>Can you explain in English what does mystery do?</li></ol><ul><li>It returns the index of the smallest element that occurs at or after index k in the array, in this case, 4. If k is greater than or equal to the length of the array or less than 0, an ArrayIndexOutOfBoundsException will be thrown, though this exception is not something you’d know without running the program.</li><li>The variable x keeps track of the smallest element found so far and the variable answer keeps track of the index of this element. The variable index keeps track of the current position in the array. The while loop steps through the elements of the array starting from index k + 1 and if the current element is less than x, x and answer are updated.</li></ul><p><em>Extra: This is another function. It takes an array of integers and returns nothing.</em></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mystery2</span><span class="params">(<span class="keyword">int</span>[] inputArray)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (index &lt; inputArray.length) &#123;</span><br><span class="line">        <span class="keyword">int</span> targetIndex = mystery(inputArray, index);</span><br><span class="line">        <span class="keyword">int</span> temp = inputArray[targetIndex];</span><br><span class="line">        inputArray[targetIndex] = inputArray[index];</span><br><span class="line">        inputArray[index] = temp;</span><br><span class="line">        index = index + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Describe what mystery2 does if inputArray = [3, 0, 4, 6, 3].</p><ul><li>If mystery2 is called on the array 3, 0, 4, 6, 3 then after the method runs, the array will be 0, 3, 3, 4, 6. Given any array, the method mystery2 sorts the elements of the array in increasing order.</li><li>At the beginning of each iteration of the while loop, the first index elements of the array are in sorted order. Then the method mystery is called to find the index of the smallest element of the array occurring at or after index. The element at the index returned by mystery is then swapped with the element at position index so that the first index + 1 elements of the array are in sorted order. This algorithm is called selection sort. We will talk about it more later on in the course.</li></ul><h3 id="writing-your-first-program">Writing Your First Program</h3><p>Implement fib which takes in an integer n and returns the nth Fibonacci number. You may not need to use all the lines.</p><p>The Fibonacci sequence is 0, 1, 1, 2, 3, 5, 8, 13, 21, . . ..</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Extra: Implement fib in 5 lines or fewer. Your answer must be efficient. You don’t have to make use of the parameter k in your solution.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == k) &#123;</span><br><span class="line">        <span class="keyword">return</span> f0;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fib2(n, k + <span class="number">1</span>, f1, f0 + f1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Discussions </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structures </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Game of Hog</title>
      <link href="2021/02/27/2021-02-27-The-Game-of-Hog/"/>
      <url>2021/02/27/2021-02-27-The-Game-of-Hog/</url>
      
        <content type="html"><![CDATA[<h1 id="the-game-of-hog">The Game of Hog</h1><h2 id="introduction">Introduction</h2><p>In this project, you will develop a simulator and multiple strategies for the dice game Hog. You will need to use <em>control statements</em> and <em>higher-order functions</em> together, as described in Sections 1.2 through 1.6 of <a href="http://composingprograms.com/">Composing Programs</a>.</p><h3 id="rules">Rules</h3><p>In Hog, two players alternate turns trying to be the first to end a turn with at least 100 total points. On each turn, the current player chooses some number of dice to roll, up to 10. That player's score for the turn is the sum of the dice outcomes. However, a player who rolls too many dice risks:</p><ul><li><strong>Pig Out</strong>. If any of the dice outcomes is a 1, the current player's score for the turn is 1.<ul><li><em>Example 1</em>: The current player rolls 7 dice, 5 of which are 1's. They score 1 point for the turn.</li><li><em>Example 2</em>: The current player rolls 4 dice, all of which are 3's. Since Pig Out did not occur, they score 12 points for the turn.</li></ul></li></ul><p>In a normal game of Hog, those are all the rules. To spice up the game, we'll include some special rules:</p><ul><li><strong>Free Bacon</strong>. A player who chooses to roll zero dice scores <code>k+3</code> points, where <code>k</code> is the <code>n</code>th digit of pi after the decimal point, and <code>n</code> is the total score of their opponent. As a special case, if the opponent's score is <code>n = 0</code>, then <code>k = 3</code> (the digit of pi before the decimal point).<ul><li><em>Example 1</em>: The opponent has a score of 0, and the current player rolls zero dice. The current player will receive <code>3 + 3 = 6</code> points.</li><li><em>Example 2</em>: The opponent has a score of 1, and the current player rolls zero dice. The current player will receive <code>1 + 3 = 4</code> points.</li><li><em>Example 3</em>: The opponent has a score of 2, and the current player rolls zero dice. The current player will receive <code>4 + 3 = 7</code> points.</li><li><em>Example 4</em>: The opponent has a score of 42, and the current player rolls zero dice. The current player will receive <code>9 + 3 = 12</code> points.</li></ul></li><li><strong>Swine Align</strong>. After points for the turn are added to the current player's score, if both players have a positive score and the Greatest Common Divisor (GCD) of the current player's score and the opponent's score is at least 10, take another turn.<ul><li><em>Example 1</em>: At the end of the first player's turn, the players have scores of 8 and 36. The GCD of the scores is 4, so the first player does not take another turn due to swine align.</li><li><em>Example 2</em>: At the end of the first player's turn, the players have scores of 20 and 30. The GCD of the scores is 10, so the first player takes an extra turn.</li><li><em>Example 3</em>: At the end of the first player's turn, the players have scores of 24 and 36. The GCD of the scores is 12, so the first player takes an extra turn. The first player rolls a 12 and the scores are now 36 and 36. The GCD of the scores is 36, so the first player takes yet another turn.</li><li><em>Example 4</em>: At the end of the first player's turn, the players have scores of 15 and 0. Swine align only applies when both player scores are positive (not zero), so the first player does not take another turn due to swine align.</li></ul></li><li><strong>Pig Pass</strong>. After points for the turn are added to the current player's score, if the current player's score is lower than the opponent's score and the difference between them is less than 3, the current player takes another turn.<ul><li><em>Example 1</em>: At the end of the first player's turn, The opponent has a score of 10 and the current player has a score of 11. Since 11 &gt; 10, the current player does not take another turn due to Pig Pass.</li><li><em>Example 2</em>: At the end of the first player's turn, The opponent has a score of 10 and the current player has a score of 7. Because <code>10 - 7 = 3 &gt;= 3</code>, the current player does not take another turn due to Pig Passn.</li><li><em>Example 3</em>: At the end of the first player's turn, The opponent has a score of 30 and the current player has a score of 28. Because <code>30 - 28 = 2 &lt; 3</code>, the current player takes another turn.</li><li><em>Example 4</em>: At the end of the first player's turn, The opponent has a score of 30 and the current player has a score of 28. Like in Example 3, the current player takes another turn. If the current player then rolls a 1 and now has a score of 29, Pig Pass activates again and the current player takes yet another turn.</li></ul></li></ul><h2 id="section"></h2>]]></content>
      
      
      <categories>
          
          <category> Projects </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Structure and Interpretation of Computer Programs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Discussion 3</title>
      <link href="2021/02/27/2021-02-27-Exercise-3---Relational-Algebra/"/>
      <url>2021/02/27/2021-02-27-Exercise-3---Relational-Algebra/</url>
      
        <content type="html"><![CDATA[<h1 id="discussion-3-relational-algebra">Discussion 3: Relational Algebra</h1><p><a href="https://recordings.reu1.blindsidenetworks.com/vub/0686432381bc0089fa7d5f60ed5b64c9668e7245-1614344367991/capture/">Video</a></p><h2 id="example-employees">Example: Employees</h2><p>Employees(employeeNr:integer, <em>firstName</em>:string, <em>lastName</em>:string)</p><table><thead><tr class="header"><th>employeeNr</th><th>firstName</th><th>lastName</th></tr></thead><tbody><tr class="odd"><td>1</td><td>Mickey</td><td>Mouse</td></tr><tr class="even"><td>2</td><td>Donald</td><td>Duck</td></tr><tr class="odd"><td>3</td><td>Goofy</td><td>Dog</td></tr><tr class="even"><td>4</td><td>Pluto</td><td>Dog</td></tr></tbody></table><h2 id="projection-π">Projection (π)</h2><p>”Select the first names from all employees”</p><ul><li>π<sub>firstName</sub>(<em>Employees</em>)</li></ul><p><em>This will return “Mickey”, “Donald”, “Goofy”, “Pluto”</em></p><h2 id="example-drinks">Example: Drinks</h2><p>Drinks(drinkName:string, <em>amounts</em>:integer)</p><table><thead><tr class="header"><th>drinkName</th><th>amounts</th></tr></thead><tbody><tr class="odd"><td>Coca cola</td><td>4</td></tr><tr class="even"><td>Sprite</td><td>4</td></tr><tr class="odd"><td>Fanta</td><td>6</td></tr><tr class="even"><td>Pepsi</td><td>3</td></tr><tr class="odd"><td>7up</td><td>5</td></tr></tbody></table><h2 id="selection-σ">Selection (σ)</h2><p>“Select the drink amounts that are 3”</p><ul><li>π<sub>drinkName</sub>(σ<sub>amounts=3</sub>(<em>Drinks</em>))</li></ul><p>This will return "Pepsi".</p><h2 id="example-employees-and-students">Example: Employees and Students</h2><p>Employees(employeeNr:integer, <em>firstName</em>:string, <em>lastName</em>:string, <em>empType</em>: string)</p><table><thead><tr class="header"><th>employeeNr</th><th>firstName</th><th>lastName</th><th>empType</th></tr></thead><tbody><tr class="odd"><td>1</td><td>Mickey</td><td>Mouse</td><td>BAAP</td></tr><tr class="even"><td>2</td><td>Donald</td><td>Duck</td><td>BAAP</td></tr><tr class="odd"><td>3</td><td>Goofy</td><td>Dog</td><td>BAAP</td></tr><tr class="even"><td>4</td><td>Pluto</td><td>Dog</td><td>ZAP</td></tr></tbody></table><p>Students(studentNr:integer, <em>firstName</em>:string, <em>lastName</em>:string, <em>empType</em>:string)</p><table><thead><tr class="header"><th>employeeNr</th><th>firstName</th><th>lastName</th></tr></thead><tbody><tr class="odd"><td>1</td><td>Mickey</td><td>Mouse</td></tr><tr class="even"><td>2</td><td>Donald</td><td>Duck</td></tr><tr class="odd"><td>3</td><td>Minnie</td><td>Mouse</td></tr><tr class="even"><td>4</td><td>Daisy</td><td>Duck</td></tr></tbody></table><h2 id="union">Union (∪)</h2><ul><li>“Select the first and last name from all employees and students” π<sub>firstName,lastName</sub>(Employees) ∪ π<sub>firstName,lastName</sub>(Students)</li></ul><p>This will return all first and last names</p><h2 id="disjoint">Disjoint (∩)</h2><p>“Select the first and last name from all employees who are students”</p><ul><li>π<sub>firstName,lastName</sub>(Employees) ∩ π<sub>firstName,lastName</sub>(Students)</li></ul><p>This will return Mickey and Donald</p><h2 id="set-difference">Set Difference (−)</h2><p>“Select the first and last name from all employees who are not students”</p><ul><li>π<sub>firstName,lastName</sub>(Employees) − π<sub>firstName,lastName</sub>(Students)</li></ul><p>This will return Goofy and Pluto</p><h2 id="example-course-enrollments-assistants">Example: Course enrollments, assistants</h2><p>CourseEnrollment(studentNr:integer, courseName:string)</p><table><thead><tr class="header"><th>studentNr</th><th>courseName</th></tr></thead><tbody><tr class="odd"><td>3</td><td>Databases</td></tr><tr class="even"><td>3</td><td>Web Technologies</td></tr><tr class="odd"><td>4</td><td>Databases</td></tr><tr class="even"><td>3</td><td>Advanced Topics In Information Systems</td></tr><tr class="odd"><td>4</td><td>Master Thesis</td></tr></tbody></table><p>CourseAssistants(employeeNr:integer, courseName:string)</p><table><thead><tr class="header"><th>employeeNr</th><th>courseName</th></tr></thead><tbody><tr class="odd"><td>1</td><td>Databases</td></tr><tr class="even"><td>1</td><td>Web Technologies</td></tr><tr class="odd"><td>1</td><td>Advanced Topics In Information Systems</td></tr><tr class="even"><td>2</td><td>Databases</td></tr></tbody></table><h2 id="natural-join">Natural Join (⋈)</h2><p>“Get all courses and their assistants”</p><p>π<sub>courseName,firstName,lastName</sub>(<em>CourseAssistants</em> ⋈ <em>Employees</em>)</p><h2 id="division">Division (÷)</h2><p>“Select the assistants who give all 3 credit courses”</p><p>π<sub>courseName,firstName,lastName</sub>(<em>CourseAssistants</em> ÷ σ<sub>credits=3</sub>(Courses)) ⋈ <em>Employees</em>)</p><h2 id="assignment">Assignment (←)</h2><p>Select the first and last name from all students who are not employees”</p><p>StudentNames ← π<sub>firstName,lastName</sub>(Students)</p><p>EmployeeNames ← π<sub>firstName,lastName</sub>(Employees)</p><p>Result ← StudentNames − EmployeeNames</p><h2 id="delete-x-x-...">Delete (X ← X − ...)</h2><p>"Delete Daisy Duck from the students schema.”</p><p>Students ← Students − σ<sub>firstName=“Daissy”∧lastName=“Duck”</sub>(Students)</p><h2 id="insert-x-x-...">Insert (X ← X ∪ ...)</h2><p>“Add Daisy Duuuck to the students schema.”</p><p>Students ← Students ∪ {(4, “Daisy”, “ Duuuck”)}</p><h2 id="update">Update</h2><p>“Change the name Daisy Duuuck to ‘Daisy Duck’ in the students schema.”</p><p>Students ← π<sub>studentNr,firstName,”Duck”</sub>(σ<sub>studentNr=4</sub>(Students)) ∪ π<sub>studentNr,firstName,lastName</sub>(σstudentNr6=4(Students))</p><p>TIP: We only need to change the last name</p><h2 id="rename-ρ">Rename (ρ)</h2><p>“Rename the schema of Students”</p><p>π<sub>firstName2,lastName2</sub>(ρ<sub>StudentsCopy(studentNr2,firstName2,lastName2)</sub>(Students))</p><h2 id="cartesian-product">Cartesian Product (×)</h2><p>“Give all pairs of course names where the first course has more credits than the second.”</p><p>π<sub>courseName,courseName2</sub>(σ<sub>credits&gt;credits2</sub>(Courses × ρ<sub>Courses2(courseName2,credits2)</sub>(Courses)))</p><h2 id="question-1">Question 1</h2><p>Given relationship <em>R</em> and <em>S</em>, assume a person is only allowed to teach the department <em>Mathematics, minor in Computer Science</em> if he or she holds the following degrees: <em>Highschool</em>, <em>MSc Computer Science</em> and <em>MSc Mathematics</em>. Give a query in relational algebra that returns the names of all persons that are allowed to teach in that department.</p><p><em>R</em> =</p><table><thead><tr class="header"><th>Name</th><th>Degree</th></tr></thead><tbody><tr class="odd"><td>Anne</td><td>MSc Computer Science</td></tr><tr class="even"><td>Anne</td><td>Highschool</td></tr><tr class="odd"><td>Anne</td><td>MSc Mathematics</td></tr><tr class="even"><td>Katja</td><td>MSc Computer Science</td></tr><tr class="odd"><td>Katja</td><td>MSc Mathematics</td></tr><tr class="even"><td>Katja</td><td>Highschool</td></tr><tr class="odd"><td>Katja</td><td>MSc Physics</td></tr><tr class="even"><td>William</td><td>Highschool</td></tr><tr class="odd"><td>William</td><td>MSc Computer Science</td></tr><tr class="even"><td>Christophe</td><td>Highschool</td></tr><tr class="odd"><td>Christophe</td><td>MSc Computer Science</td></tr></tbody></table><p><em>S</em> =</p><table><thead><tr class="header"><th>Degree</th></tr></thead><tbody><tr class="odd"><td>MSc Computer Science</td></tr><tr class="even"><td>Highschool</td></tr><tr class="odd"><td>MSc Mathematics</td></tr><tr class="even"><td>MSc Physics</td></tr></tbody></table><h3 id="solution-1">Solution 1</h3><p>π<sub><em>Name</em>(<em>R</em> ÷ σ<em>Degree</em>≠“<em>MSc Physics</em>”</sub>(S))</p><ol type="1"><li>We start by specifying the attribute that we want to find (π<sub><em>Name</em></sub>).</li><li>Next we need to specify the schema that we are going to use to get this name (<em>R</em>).</li><li>We use <em>R</em>, but we are not interested in all names in that entity but only those who are allowed to teach in the department.</li><li>To do so, we do a division of <em>R</em> with all ”Degrees” that are not MSc Physics (Highschool, MSc Mathematics, MSc Computer Science). A division. This division (slide 33 in lecture 3) will perform a select on the “Degree” column in <em>R</em>, selecting only those names that have Highschool, MSc Mathematics and MSc Computer Science.</li></ol><h3 id="solution-2">Solution 2</h3><p>π<sub><em>Name</em></sub>(σ<sub><em>Degree=</em>“<em>Highschool”</em>(<em>R</em>)</sub>) ∩ π<sub><em>Name</em></sub>(σ<sub><em>Degree=</em>“<em>MSc Mathematics</em>”</sub>(<em>R</em>)) ∩ π<sub><em>Name</em></sub>(σ<sub><em>Degree=</em>“<em>MSc Computer Science</em>”</sub>(<em>R</em>))</p><p>The biggest difference between the two solutions is that with the previous solution, we took the complete set in the relation <em>R</em>, and removed all instances that did not have the required degrees.</p><p>For this solution:</p><ol type="1"><li>Take the complete set of names from everyone with a Highschool degree (in this exercise everyone)</li><li>Next, take the disjunction of that set with everyone with a MSc Mathematics (everyone without this MSc in Mathematics is removed)</li><li>Finally, do the same for the MSc in Computer Science (the only remaining names are Anne and Katja)</li></ol><h2 id="question-2">Question 2</h2><p>Calculate <em>R</em> ÷ <em>S</em> step by step (where <em>Sch</em>(<em>X</em>) returns the schema of a relation <em>X</em>)</p><ul><li><em>T<sub>1</sub></em> ← π<sub><em>Sch</em>(<em>R</em>)−<em>Sch</em>(<em>S</em>)</sub>(<em>R</em>)</li><li><em>T<sub>2'</sub></em> ← (<em>S</em> × <em>T<sub>1</sub></em>) − <em>R</em></li><li><em>T<sub>2</sub></em> ← π<sub><em>Sch</em>(<em>R</em>)−<em>Sch</em>(<em>S</em>)</sub>(<em>T<sub>2'</sub></em>)</li><li><em>Result</em> ← <em>T<sub>1</sub></em> − <em>T<sub>2</sub></em></li></ul><p><em>Note: Check whether the obtained result corresponds to the result of R ÷ S</em></p><h3 id="solution">Solution</h3><ul><li><p><em>T<sub>1</sub></em></p><table><thead><tr class="header"><th>Name</th></tr></thead><tbody><tr class="odd"><td>Anne</td></tr><tr class="even"><td>Katja</td></tr><tr class="odd"><td>William</td></tr><tr class="even"><td>Christophe</td></tr></tbody></table><p><em>R contains names and multiple degrees that name may have. Our projection takes the schema of R minus the schema of S giving us a projection that selects names only. We are left with all names in R without their degrees.</em></p></li><li><p><em>T<sub>2'</sub></em></p><table><thead><tr class="header"><th>Name</th><th>Degree</th></tr></thead><tbody><tr class="odd"><td>Anne</td><td>MSc Physics</td></tr><tr class="even"><td>William</td><td>MSc Physics</td></tr><tr class="odd"><td>William</td><td>MSc Mathematics</td></tr><tr class="even"><td>Christophe</td><td>MSc Physics</td></tr><tr class="odd"><td>Christophe</td><td>MSc Mathematics</td></tr></tbody></table><p><em>Here we multiply S with our previously obtained T<sub>1</sub>. This gives us an intermediate result where each of the 4 names has all degrees. Next, we subtract it with R giving us a result of all names and the degrees that they did not get yet.</em></p></li><li><p><em>T<sub>2</sub></em></p><table><thead><tr class="header"><th>Name</th></tr></thead><tbody><tr class="odd"><td>Anne</td></tr><tr class="even"><td>William</td></tr><tr class="odd"><td>Christophe</td></tr></tbody></table><p><em>Similar to T<sub>1</sub> we only project the names of our column T<sub>2'</sub></em></p></li><li><p><em>Result</em></p><table><thead><tr class="header"><th>Name</th></tr></thead><tbody><tr class="odd"><td>Katja</td></tr></tbody></table><p><em>In this final result we subtract T<sub>2</sub> from T<sub>1</sub> giving us only Katja left.</em></p></li></ul><h2 id="question-3">Question 3</h2><p>Given the following schemas, express the provided queries in relational algebra.</p><ul><li>Suppliers(sid:integer, <em>sname</em>:string, <em>address</em>:string)</li><li>Parts(pid:integer, <em>pname</em>:string, <em>color</em> :string)</li><li>Catalog(sid:integer, pid:integer, <em>cost</em>:real)</li></ul><ol type="1"><li>Give names of all suppliers supplying red parts.</li><li>Give sids of all suppliers supplying a red or green part.</li><li>Give names of all suppliers supplying both red and green parts.</li><li>Give names of all suppliers supplying <em>every</em> part.</li><li>Return pairs of SIDs such that the first supplier in a pair asks more for a part than the second supplier in that pair.</li><li>Look for PIDs of parts that are supplied by different suppliers.</li></ol><h3 id="solution-3">Solution</h3><p>Given the following schemas, express the provided queries in relational algebra.</p><ol type="1"><li><p>Give names of all suppliers supplying red parts.</p><p>π<sub>sname</sub>((σ<sub>color =“<em>red</em>”</sub>(<em>Parts</em>) ⋈ <em>Catalog</em>) ⋈ <em>Suppliers</em>)</p></li><li><p>Give sids of all suppliers supplying a red or green part.</p><p>π<sub>sid</sub>(σ<sub>color=”<em>red</em>” ∨ color=“<em>green</em>”</sub>(<em>Parts</em>) ⋈ <em>Catalog</em>)</p></li><li><p>Give names of all suppliers supplying both red and green parts.</p><p><em>Red</em> ← π<sub>sname</sub>((σ<sub>color=“<em>red</em>”</sub>(<em>Parts</em>) ⋈ <em>Catalog</em>) ⋈ <em>Suppliers</em>)</p><p><em>Green</em> ← π<sub>sname</sub>((σ<sub>color=“<em>green</em>”</sub>(<em>Parts</em>) ⋈ <em>Catalog</em>) ⋈ <em>Suppliers</em>)</p><p><em>Result</em> ← <em>Red</em> ∩ <em>Green</em></p></li><li><p>Give names of all suppliers supplying every part</p><p>π<sub>sname</sub>((π<sub>sid,pid</sub>(<em>Catalog</em>) ÷ π<sub>pid</sub>(<em>Parts</em>) ⋈ <em>Suppliers</em>)</p></li><li><p>Return pairs of SIDs such that the first supplier in a pair asks more for a part than the second supplier in that pair.</p><p>π<sub>sid,sid2</sub>(σ<sub>cost &gt; cost2 ∧ pid=pid2</sub>(<em>Catalog</em> × ρ<sub>C2(sid2,pid2,cost2)</sub>(<em>Catalog</em>)))</p></li><li><p>Look for PIDs of parts that are supplied by different suppliers.</p><p>π<sub>pid</sub>(σ<sub>sid≠sid2</sub>(<em>Catalog</em> ⋈ ρ<sub>C2(sid2,pid,cost2)</sub>(<em>Catalog</em>)))</p><p>Or</p><p>π<sub>pid</sub>(σ<sub>sid≠sid2 ∧ pid=pid2</sub>(<em>Catalog</em> × ρ<sub>C2(sid2,pid2,cost2)</sub>(<em>Catalog</em>)))</p></li></ol><h2 id="question-4-extra">Question 4 (Extra)</h2><p>Given the following schemas, express the provided queries in relational algebra</p><ul><li>Students(sid:integer, <em>sname</em>:string, <em>address</em>:string)</li><li>Courses(cid:integer, <em>cname</em>:string, <em>credits</em>:integer)</li><li>Employees(eid:integer, <em>ename</em>:string, <em>address</em>:string)</li><li>Enrolments(cid:integer, sid:integer, <em>ayear</em> :integer)</li><li>Professors(cid:integer, eid:integer)</li><li>Assistants(cid:integer, eid:integer)</li><li>Faculties(fid:integer, <em>fname</em>:string, <em>abbreviation</em>:string)</li><li>Programs(pid:integer, fid:integer, <em>pname</em>:string)</li><li>ProgramCourses(pid:integer, cid:integer)</li></ul><ol type="1"><li>Give the names of all students following the course named ”Databases”.</li><li>Give the names of all assistants teaching the course named ”Databases”.</li><li>Give the total amount of credits in the program with name (<em>pname)</em> ”MSc CS”.</li><li>Give the abbreviation of all faculties that have programs with the Databases course as part of their program.</li></ol><h3 id="solution-4">Solution</h3><p>Given the following schemas, express the provided queries in relational algebra</p><ol type="1"><li><p>Give names of all students following the course named ”Databases”</p><p>π<sub>sname</sub>((σ<sub>cname=“<em>Databases</em>”</sub>(<em>Courses</em>) ⋈ <em>Enrollments</em>) ⋈ <em>Students</em>)</p></li><li><p>Give the names of all assistants teaching the course named ”Databases”.</p><p>π<sub>sname</sub>((σ<sub>cname=“<em>Databases</em>”</sub>(<em>Courses</em>) ⋈ <em>Assistants</em>) ⋈ <em>Employees</em>)</p></li><li><p>Give the total amount of credits in the program with name (<em>pname</em>) ”MSc CS”.</p><p>π<sub>sum(<em>credits</em>)</sub>((σ<sub>pname=“<em>MSc CS</em>”</sub>(<em>Programs</em>) ⋈ <em>ProgramCourses</em>) ⋈ <em>Courses</em>)</p></li><li><p>Give the abbreviation of all faculties that have programs with the Databases course as part of their program.</p><p>π<sub>abbreviation</sub>(((σ<sub>cname=“<em>Databases</em>”</sub>(<em>Courses</em>) ⋈ <em>ProgramCourses</em>) ⋈ <em>Programs</em>) ⋈ <em>Faculties</em>)</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Discussions </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Databases </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SLLists, Nested Classes, Sentinel Nodes</title>
      <link href="2021/02/26/2021-02-26-SLLists,-Nested-Classes,-Sentinel-Nodes/"/>
      <url>2021/02/26/2021-02-26-SLLists,-Nested-Classes,-Sentinel-Nodes/</url>
      
        <content type="html"><![CDATA[<h1 id="sllists-nested-classes-sentinel-nodes">SLLists, Nested Classes, Sentinel Nodes</h1><p><a href="https://www.youtube.com/watch?v=1Rh3AdTxcik&amp;list=PL8FaHk7qbOD4cp06tWA8i9m20pQLvcgE7&amp;index=1">Video</a></p><h2 id="from-intlist-to-sllist"><a href="https://www.youtube.com/watch?v=1Rh3AdTxcik&amp;list=PL8FaHk7qbOD4cp06tWA8i9m20pQLvcgE7&amp;index=1"><strong>From IntList to SLList</strong></a></h2><p><strong>Recursive Implementation of a List</strong>:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntList</span> </span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">int</span> first;</span><br><span class="line">   <span class="keyword">public</span> IntList rest;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">IntList</span><span class="params">(<span class="keyword">int</span> f, IntList r)</span> </span>&#123;</span><br><span class="line">      first = f;</span><br><span class="line">      rest = r;</span><br><span class="line">   &#125;</span><br><span class="line">   ...</span><br></pre></td></tr></table></figure><p>While functional, “naked” linked lists like the one above are hard to use.</p><p>Users of this class are probably going to need to know <strong>references</strong> very well, and be able to <strong>think recursively</strong>. Let’s make our users’ lives easier</p><p><strong>improvement #1</strong>: <strong>Rebranding and Culling</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntNode</span> </span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">int</span> item;</span><br><span class="line">   <span class="keyword">public</span> IntNode next;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">IntNode</span><span class="params">(<span class="keyword">int</span> i, IntNode n)</span> </span>&#123;</span><br><span class="line">      item = i;</span><br><span class="line">      next = n;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">IntNode is now dumb, has no methods. </span></span><br><span class="line"><span class="comment">We will reintroduce functionality.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Not much of an improvement obviously, but this next weird trick will be more impressive.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><a href="https://www.youtube.com/watch?v=63GyeGDLAbw&amp;list=PL8FaHk7qbOD4cp06tWA8i9m20pQLvcgE7&amp;index=2"><strong>Improvement #2: Bureaucracy</strong></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">An SLList is a list of integers, which hides the terrible truth of the nakedness within.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SLList</span> </span>&#123;</span><br><span class="line">   <span class="keyword">public</span> IntNode first;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">SLList</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">      first = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mian</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       <span class="comment">/* Creates a list of integer, namely 10 */</span></span><br><span class="line">       SLList L = <span class="keyword">new</span> SLList(<span class="number">10</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">IntList X = <span class="keyword">new</span> IntList(<span class="number">10</span>, <span class="keyword">null</span>); </span><br><span class="line"></span><br><span class="line">SLList Y = <span class="keyword">new</span> SLList(<span class="number">10</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">SLList is easier to instantiate (no need to specify null), but we will see more advantages to come.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Next: Let’s add addFirst and getFirst methods to SLList.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><a href="https://www.youtube.com/watch?v=inV6cAEERRI&amp;list=PL8FaHk7qbOD4cp06tWA8i9m20pQLvcgE7&amp;index=3"><strong>The Basic SLList and Helper IntNode Class</strong></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SLList</span> </span>&#123;</span><br><span class="line">   <span class="keyword">public</span> IntNode first;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">SLList</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">      first = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">       first = <span class="keyword">new</span> IntNode(x, first);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> first.item;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntNode</span> </span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">int</span> item;</span><br><span class="line">   <span class="keyword">public</span> IntNode next;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">IntNode</span><span class="params">(<span class="keyword">int</span> i, IntNode n)</span> </span>&#123;</span><br><span class="line">     item = i;</span><br><span class="line">     next = n;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Example usage:</span></span><br><span class="line">SLList L = <span class="keyword">new</span> SLList(<span class="number">15</span>);</span><br><span class="line">L.addFirst(<span class="number">10</span>);</span><br><span class="line">L.addFirst(<span class="number">5</span>); </span><br><span class="line"><span class="keyword">int</span> x = L.getFirst();</span><br></pre></td></tr></table></figure><p><strong>SLLists vs. IntLists</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SLList L = <span class="keyword">new</span> SLList(<span class="number">15</span>);</span><br><span class="line">L.addFirst(<span class="number">10</span>);</span><br><span class="line">L.addFirst(<span class="number">5</span>); </span><br><span class="line"><span class="keyword">int</span> x = L.getFirst();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">IntList L = <span class="keyword">new</span> IntList(<span class="number">15</span>, <span class="keyword">null</span>);</span><br><span class="line">L = <span class="keyword">new</span> IntList(<span class="number">10</span>, L);</span><br><span class="line">L = <span class="keyword">new</span> IntList(<span class="number">5</span>, L);</span><br><span class="line"><span class="keyword">int</span> x = L.firs</span><br></pre></td></tr></table></figure><p>While functional, “naked” linked lists like the IntList class are hard to use.</p><ul><li>Users of IntList are need to know Java references well, and be able to think recursively.</li><li>SLList is much simpler to use. Simply use the provided methods.</li><li>Why not just add an addFirst method to the IntList class? Turns out there is no efficient way to do this.</li></ul><p><img src="/images/FOCS/20.png" /></p><h2 id="public-vs.-private-nested-classes"><a href="https://www.youtube.com/watch?v=SlCnrzn_bfM&amp;list=PL8FaHk7qbOD4cp06tWA8i9m20pQLvcgE7&amp;index=4">Public vs. Private Nested Classes</a></h2><p><strong>A Potential SLList Danger</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SLList L = <span class="keyword">new</span> SLList(<span class="number">15</span>);</span><br><span class="line">L.addFirst(<span class="number">10</span>);</span><br><span class="line">L.first.next.next = L.first.next;</span><br></pre></td></tr></table></figure><p>Users of our class might be tempted to try to manipulate our secret IntNode directly in uncouth ways!</p><p>We can prevent programmers from making such mistakes with the <strong>private</strong> keyword.</p><p><strong>Access Control</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SLList</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> IntNode first;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">SLList</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">      first = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">      first = <span class="keyword">new</span> IntNode(x, first);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Use the private keyword to prevent code in other classes from using members (or constructors) of a class.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>Why Restrict Access?</strong></p><p>Hide implementation details from users of your class.</p><ul><li>Less for user of class to understand.</li><li>Safe for you to change private methods (implementation).</li></ul><p>Car analogy:</p><ul><li><strong>Public</strong>: Pedals, Steering Wheel</li><li><strong>Private</strong>: Fuel line, Rotary valve</li><li>Despite the term ‘access control’:<ul><li>Nothing to do with protection against hackers, spies, and other evil entities.</li></ul></li></ul><p><strong>Improvement #4: Nested Classes</strong></p><p>Can combine two classes into one file pretty simply.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SLList</span> </span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntNode</span> </span>&#123; <span class="comment">// Nested class definition Could have made IntNode a private nested class if we wanted.</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">int</span> item;</span><br><span class="line">      <span class="keyword">public</span> IntNode next;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">IntNode</span><span class="params">(<span class="keyword">int</span> i, IntNode n)</span> </span>&#123;</span><br><span class="line">         item = i;</span><br><span class="line">         next = n;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> IntNode first;  <span class="comment">//Instance variables, constructors, and methods of SLList typically go below nested class definition.</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">SLList</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">      first = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line">   &#125; ...</span><br></pre></td></tr></table></figure><p><strong>Why Nested Classes?</strong></p><p>Nested Classes are useful when a class doesn’t stand on its own and is obviously subordinate to another class.</p><ul><li>Make the nested class private if other classes should never use the nested class.</li></ul><p>In my opinion, probably makes sense to make IntNode a nested private class.</p><ul><li>Hard to imagine other classes having a need to manipulate IntNodes.</li></ul><p><strong>Static Nested Classes</strong></p><p>If the nested class never uses any instance variables or methods of the outer class, declare it static.</p><ul><li>Static classes cannot access outer class’s instance variables or methods.</li><li>Results in a minor savings of memory. See book for more details / exercise.</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SLList</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntNode</span> </span>&#123;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">int</span> item;</span><br><span class="line">      <span class="keyword">public</span> IntNode next;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">IntNode</span><span class="params">(<span class="keyword">int</span> i, IntNode n)</span> </span>&#123;</span><br><span class="line">         item = i;</span><br><span class="line">         next = n;</span><br><span class="line">      &#125;</span><br><span class="line">   ...</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">We can declare IntNode static, since it never uses any of SLList’s instance variables or methods.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Analogy: Static methods had no way to access “my” instance variables. Static classes cannot access “my” outer class’s instance variables. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Unimportant note: For private nested classes, access modifiers are irrelevant.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="addlast-and-size"><a href="https://www.youtube.com/watch?v=Gxq_LSsOPNc&amp;list=PL8FaHk7qbOD4cp06tWA8i9m20pQLvcgE7&amp;index=5">addLast() and size()</a></h2><p><strong>Adding More SLList Functionality</strong></p><p>To motivate our remaining improvements, and to give more functionality to our SLList class, let’s add:</p><ul><li>.addLast(int x)</li><li>.size()</li></ul><p><img src="/images/FOCS/21.png" /></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Adds x to the end of the list. */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"> size = size + <span class="number">1</span>; </span><br><span class="line"></span><br><span class="line"> IntNode p = sentinel;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/* Advance p to the end of the list. */</span></span><br><span class="line"> <span class="keyword">while</span> (p.next != <span class="keyword">null</span>) &#123;</span><br><span class="line"> p = p.next;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> p.next = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/** Returns the size of the list. */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> size;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>Private Recursive Helper Methods</strong></p><p>To implement a recursive method in a class that is not itself recursive (e.g. SLList):</p><ul><li>Create a private recursive helper method.</li><li>Have the public method call the private recursive helper method.</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SLList</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">(IntNode p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + size(p.next);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> size(first);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="https://www.youtube.com/watch?v=ebUw8fhhpKc&amp;list=PL8FaHk7qbOD4cp06tWA8i9m20pQLvcgE7&amp;index=6">Efficiency of Size</a>: http://yellkey.com/design</strong></p><p>How efficient is size?</p><ul><li>Suppose size takes 2 seconds on a list of size 1,000.</li><li>How long will it take on a list of size 1,000,000?</li></ul><ol type="1"><li>0.002 seconds.</li><li>2 seconds.</li><li><strong>2,000 seconds.</strong></li><li>2,000,000 seconds.</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SLList</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">(IntNode p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + size(p.next);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> size(first);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Improvement #5: Fast size()</strong></p><p>Your goal:</p><ul><li>Modify SLList so that the execution time of size() is always fast (i.e. <strong>independent of the size of the list</strong>).</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> IntNode first;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SLList</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">      first = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">      First = <span class="keyword">new</span> IntNode(x, front);</span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">(IntNode p)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (p.next == <span class="keyword">null</span>) </span><br><span class="line">          <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span> + size(p.next);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> size(first);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Solution: Maintain a special size variable that <strong>caches</strong> the size of the list.</p><ul><li>Caching: putting aside data to speed up retrieval.</li></ul><p>TANSTAAFL: There ain't no such thing as a free lunch.</p><ul><li>But spreading the work over each add call is a net win in almost any circumstance.</li></ul><p><strong>Naked Linked Lists (IntList) vs. SLLists</strong></p><p><img src="/images/FOCS/21.png" /></p><p><a href="https://www.youtube.com/watch?v=GaOL52PuYcw&amp;list=PL8FaHk7qbOD4cp06tWA8i9m20pQLvcgE7&amp;index=7">Improvement #6a: Representing the Empty List</a></p><p>Benefits of SLList vs. IntList so far:</p><ul><li>Faster size() method than would have been convenient for IntList.</li><li>User of an SLList never sees the IntList class.<ul><li>Simpler to use.</li><li>More efficient addFirst method (see exercises).</li><li>Avoids errors (or malfeasance):</li></ul></li></ul><p><img src="/images/CS61B/22.png" /></p><p>Another benefit we can gain:</p><ul><li><strong>Easy to represent the empty list.</strong> Represent the empty list by setting first to null. Let’s try!</li></ul><p><strong>How Would You Fix addLast?</strong></p><p>Your goal:</p><ul><li>Fix addLast so that we do not get a null pointer exception when we try to add to the back of an empty SLList:</li></ul><p>One possible solution:</p><ul><li></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  size += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (first == <span class="keyword">null</span>) &#123;</span><br><span class="line">    first = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  IntNode p = first;</span><br><span class="line">  <span class="keyword">while</span> (p.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">    p = p.next;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  p.next = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>But there are other ways...</p><h2 id="sentinel-nodes"><a href="https://www.youtube.com/watch?v=HafzSAm3DPE&amp;list=PL8FaHk7qbOD4cp06tWA8i9m20pQLvcgE7&amp;index=8"><strong>Sentinel Nodes</strong></a></h2><p><strong>addLast’s Fundamental Problem</strong></p><p>The fundamental problem:</p><ul><li>The empty list has a null <strong>first</strong>. Can’t access first.next!</li></ul><p>Our fix is a bit ugly:</p><ul><li>Requires a special case.</li><li>More complex data structures will have many more special cases (gross!!)</li></ul><p>How can we avoid special cases?</p><ul><li>Make all SLLists (even empty) the “same”.</li></ul><p><strong>Improvement #6b: Representing the Empty List Using a Sentinel</strong></p><p>Create a special node that is always there! Let’s call it a “sentinel node”.</p><p><img src="/images/CS61B/23.png" /></p><p><img src="/images/CS61B/24.png" /></p><p><img src="/images/CS61B/25.png" /></p><p><img src="/images/CS61B/26.png" /></p><p>The sentinel node is always there for you.</p><p>Notes:</p><ul><li>I’ve renamed first to be sentinel.</li><li>sentinel is never null, always points to sentinel node.</li><li>Sentinel node’s item needs to be some integer, but doesn’t matter what value we pick.</li><li>Had to fix constructors and methods to be compatible with sentinel nodes.</li></ul><p><strong>addLast (with Sentinel Node)</strong></p><p>Bottom line: Having a sentinel simplifies our addLast method.</p><ul><li>No need for a special case to check if sentinel is null (since it is never null).</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  size += <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">  IntNode p = sentinel;</span><br><span class="line">  <span class="keyword">while</span> (p.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">    p = p.next;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  p.next = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/CS61B/27.png" /></p><p><a href="https://www.youtube.com/watch?v=Y8i0MpxC2yE&amp;list=PL8FaHk7qbOD4cp06tWA8i9m20pQLvcgE7&amp;index=9"><strong>Invariants</strong></a></p><p>An invariant is a condition that is guaranteed to be true during code execution (assuming there are no bugs in your code).</p><p>An SLList with a sentinel node has at least the following invariants:</p><ul><li>The sentinel reference always points to a sentinel node.</li><li>The first node (if it exists), is always at sentinel.next.</li><li>The size variable is always the total number of items that have been added.</li></ul><p>Invariants make it easier to reason about code:</p><ul><li>Can assume they are true to simplify code (e.g. addLast doesn’t need to worry about nulls).</li><li>Must ensure that methods preserve invariants.</li></ul><h2 id="summary"><strong>Summary</strong></h2><p><img src="/images/CS61B/28.png" /></p><h2 id="overview">Overview</h2><p><strong>Naked Data Structures</strong> <code>IntLists</code> are hard to use. In order to use an <code>IntList</code> correctly, the programmer must understand and utilize recursion even for simple list related tasks.</p><p><strong>Adding Clothes</strong> First, we will turn the <code>IntList</code> class into an <code>IntNode</code> class. Then, we will delete any methods in the <code>IntNode</code> class. Next, we will create a new class called <code>SLList</code>, which contains the instance variable <code>first</code>, and this variable should be of type <code>IntNode</code>. In essence, we have “wrapped” our <code>IntNode</code> with an <code>SLList</code>.</p><p><strong>Using SLList</strong> As a user, to create a list, I call the constructor for <code>SLList</code>, and pass in the number I wish to fill my list with. The <code>SLList</code> constructor will then call the <code>IntList</code> constructor with that number, and set <code>first</code> to point to the <code>IntList</code> it just created.</p><p><strong>Improvement</strong> Notice that when creating a list with one value, we wrote <code>SLList list = new SLList(1)</code>. We did not have to worry about passing in a null value like we did with our <code>IntList</code>. Essentially, the SLList class acts as a middleman between the list user and the naked <code>IntList</code>.</p><p><strong>Public vs. Private</strong> We want users to modify our list via <code>SLList</code> methods only, and not by directly modifying <code>first</code>. We can prevent other users from doing so by setting our variable access to <code>private</code>. Writing <code>private IntNode first;</code> prevents code in other classes from accessing and modifying <code>first</code> (while the code inside the class can still do so).</p><p><strong>Nested Classes</strong> We can also move classes into classes to make nested classes! You can also declare the nested classes to be private as well; this way, other classes can never use this nested class.</p><p><strong>Static Nested Classes</strong> If the <code>IntNode</code> class never uses any variable or method of the <code>SLList</code> class, we can turn this class static by adding the “static” keyword.</p><p><strong>Recursive Helper Methods</strong> If we want to write a recursive method in <code>SLList</code>, how would we go about doing that? After all, the <code>SLList</code> is not a naturally recursive data structure like the <code>IntNode</code>. A common idea is to write an outer method that users can call. This method calls a private helper method that takes <code>IntNode</code> as a parameter. This helper method will then perform the recursion, and return the answer back to the outer method.</p><p><strong>Caching</strong> Previously, we calculated the size of our <code>IntList</code> recursively by returning 1 + the size of the rest of our list. This becomes really slow if our list becomes really big, and we repeatedly call our size method. Now that we have an <code>SLList</code>, lets simply cache the size of our list as an instance variable! Note that we could not do this before with out <code>IntList</code>.</p><p><strong>Empty Lists</strong> With an<code>SLList</code>, we can now represent an empty list. We simply set <code>first</code> to <code>null</code> and <code>size</code> to <code>0</code>. However, we have introduced some bugs; namely, because <code>first</code> is now <code>null</code>, any method that tries to access a property of <code>first</code> (like <code>first.item</code>) will return a <code>NullPointerException</code>. Of course, we can fix this bug by writing code that handles this special case. But there may be many special cases. Is there a better solution?</p><p><strong>Sentinel Nodes</strong> Lets make all <code>SLList</code> objects, even empty lists, the same. To do this, lets give each SLList a sentinel node, a node that is always there. Actual elements go after the sentinel node, and all of our methods should respect the idea that sentinel is always the first element in our list.</p><p><strong>Invariants</strong> An invariant is a fact about a data structure that is guaranteed to be true (assuming there are no bugs in your code). This gives us a convenient checklist every time we add a feature to our data structure. Users are also guaranteed certain properties that they trust will be maintained. For example, an <code>SLList</code> with a sentinel node has at least the following invariants:</p><ul><li>The sentinel reference always points to a sentinel node.</li><li>The front item (if it exists), is always at sentinel.next.item.</li><li>The size variable is always the total number of items that have been added.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structures </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Predicate Logic</title>
      <link href="2021/02/26/2021-02-26-Predicate-Logic/"/>
      <url>2021/02/26/2021-02-26-Predicate-Logic/</url>
      
        <content type="html"><![CDATA[<h1 id="predicate-logic">Predicate Logic</h1><h2 id="predicate-logic-vs.-propositional-logic">Predicate logic VS. Propositional logic</h2><ul><li><p><strong>Propositional logic</strong> reflects only whether a sentence is true or false</p></li><li><p><strong>Predicate logic</strong> also looks at the complex conceptual structure within a sentence, e.g. the things, properties, actions and relationships it talks about</p></li><li><p><strong>Predicate logic</strong> has greater representational power than propositional logic</p><ul><li>Basis of logic programming languages, such as Prolog</li></ul></li><li><p>Still: <em>TRUE</em> and <em>FALSE</em> are the only <strong>possible values</strong> of logical sentences</p><ul><li>No vagueness and uncertainty (just like in propositional logic)</li></ul></li></ul><h2 id="predicates-and-functions"><strong>Predicates and functions</strong></h2><h3 id="functions">Functions</h3><ul><li>Proposition: 5 &gt; 3</li><li>Operator : &gt;</li><li>Function: GreaterThan(5, 3)</li><li>Domain: <strong>R</strong> × <strong>R</strong> (set of real numbers)</li><li>Codomain:  (set of boolean constants)</li><li>Summary: GreaterThan : <strong>R</strong> × <strong>R</strong> → <strong>B</strong></li></ul><h3 id="predicates">Predicates</h3><ul><li>A predicate with specific (instantiated) arguments is a proposition</li><li>E.g. <em>GreaterThan</em>(3, 4) and <em>GreaterThan</em>(4, 3) are propositions</li></ul><h3 id="predicate-domain-and-codomain">Predicate domain and codomain</h3><ul><li><p><strong>Codomain</strong> is fixed</p><ul><li>Set of logical constants (<em>TRUE</em>, <em>FALSE</em>)</li></ul></li><li><p><strong>Domain</strong> is can be any set, e.g.</p><ul><li>people</li><li>symbols</li><li>numerical sets (e.g. <strong>R</strong>, <strong>N</strong>, <strong>I</strong>, ...)</li><li>...</li></ul></li></ul><h3 id="predicates-and-propositions">Predicates and propositions</h3><ul><li>Predicate is a shorthand for a <strong>family of propositions</strong>, one for each element in the domain</li><li>E.g. predicate GreaterThanThree : <strong>R</strong> → <strong>B</strong><ul><li>Suppose <em>p</em> represents <em>GreaterThanThree</em></li><li>Then <em>p</em>(−2) and <em>p</em>(7) are propositions</li></ul></li><li>Suppose:<ul><li><em>p</em> represents <em>GreaterThanThree</em></li><li><em>q</em> represents <em>LessThanSeven</em></li><li><em>r</em>(x) = <em>p</em>(x) ∧ <em>q</em>(x)</li></ul></li><li>What does <em>r</em> mean?<ul><li><em>r</em> is the property of being between 3 and 7</li><li><em>r</em>(x) = <em>p</em>(x) ∧ <em>q</em>(x) = (x &gt; 3) ∧ (x &lt; 7)</li><li>E.g. <em>r</em>(6.8) = <em>p</em>(6.8) ∧ <em>q</em>(6.8) = <em>TRUE</em> ∧ <em>TRUE</em> = <em>TRUE</em></li></ul></li></ul><h3 id="exercise">Exercise</h3><ul><li>Determine the value of <em>r</em>(−16.5)</li><li><em>r</em>(x) = <em>p</em>(x) ∧ <em>q</em>(x) = (x &gt; 3) ∧ (x &lt; 7)</li></ul><p>Solution: <strong><em>FALSE</em></strong></p><h3 id="non-numerical-predicates">Non-numerical predicates</h3><ul><li>Predicates with non-numerical arguments</li><li>E.g. <em>Mother</em> : <strong>P</strong> × <strong>P</strong> → <strong>B</strong></li><li><em>Mother</em>(x, y) is <em>TRUE</em> iff x is the mother of y<ul><li>e.g. <em>Mother</em>(<em>Hillary</em>, <em>Chelsea</em>) = <em>TRUE</em></li></ul></li><li>If speaking in general terms with no particular domain (universe) in mind, call it <strong>U</strong></li></ul><h2 id="predicates-english-and-sets">Predicates, English and sets</h2><h3 id="predicates-and-english">Predicates and English</h3><p>In natural language, predicates are expressed in <strong>many ways</strong></p><ul><li><p>E.g. Nouns for family relations as two-argument predicates:</p><ul><li><em>Aunt</em>(x, y), <em>Brother</em>(x, y)</li></ul></li><li><p>E.g. Adjectives of nationality as single-argument or two-argument predicates:</p><ul><li><em>Chinese</em>(Deng), <em>Nationality</em>(Deng, Chinese), <em>Citizenship</em>(Deng, China)</li></ul></li><li><p>E.g. Adjectives of colour as single-argument or two-argument predicates:</p><ul><li><em>Brown</em>(Bear), <em>Colour</em>(Bear, Brown)</li></ul></li><li><p>E.g. Relational adjectives as multi-argument predicates:</p></li><li><p><em>Big</em>(Ant, Insect), <em>Size</em>(Ant, Insect, Big)</p></li><li><p>E.g. Verbs for geographical relations</p><ul><li><em>Borders</em>(India, Pakistan) (= symmetric predicate), <em>RunsThrough</em>(Amazon, Brasil)</li></ul></li></ul><p>The logic provides a <strong>framework</strong>, it is up to us to decide <strong>how to use it</strong></p><p>Certain predicates might be more <strong>convenient</strong> to use than others</p><p>Predicate and variable <strong>names</strong> should be chosen wisely</p><h3 id="truth-sets">Truth sets</h3><p>The <strong>truth set</strong> of a predicate is the set of values that make the predicate <em>TRUE</em></p><p>Definition: <strong>T</strong>(p) = {x|p(x) = <em>TRUE</em>}</p><p>E.g.: Vowel(x)</p><ul><li><em>Vowel</em>('e') = <em>TRUE</em>, <em>Vowel</em>('g') = <em>FALSE</em></li><li><strong>T</strong>(Vowel) = { '<em>a</em>', '<em>e</em>', '<em>i</em>', '<em>o</em>', '<em>u</em>'}</li></ul><p>Truth sets of predicates with more than 1 argument consist of <strong>ordered pairs</strong></p><ul><li>E.g.: (5, 3) ∈ <strong>T</strong>(<em>GreaterThan</em>)</li><li>(RioGrande, <em>Mexico</em>, <em>USA</em>) ∈ <strong>T</strong>(<em>Separates</em>)</li></ul><h3 id="exercise-1">Exercise</h3><ul><li>Express in predicate logic that “Jumbo is small for an elephant but big for a mammal”</li></ul><p><strong>IMPORTANT</strong>:</p><p>Before you can do such an exercise: decide which predicates to use. <strong>Always</strong> be very clear about the informal interpretation!</p><p>E.g. here we use</p><p>Size of arity 3 with the informal interpretation that Size(a, t, s) is true when a is a animal, t is a type of animals (eg Mammal, Elephant) and s is a size.</p><p>Solution; Size(Jumbo, Elephant, Small) ∧ Size(Jumbo, Mammal, Big)</p><h2 id="quantifiers">Quantifiers</h2><h3 id="introduction">Introduction</h3><p>So far, predicates were used to make assertions about one thing at a time</p><p><strong>Quantifiers</strong> allow to make precise, formal assertions about a <strong>whole set</strong> at once</p><ul><li>Cf. loops in programming languages</li></ul><h3 id="universal-quantifier">Universal quantifier</h3><ul><li>Symbol: ∀</li><li>Means: “every”, “for all”</li><li>E.g. ∀x ∈ <strong>U</strong>: p(x)</li><li>For all members x of set <strong>U</strong>, p(x) is <em>TRUE</em></li><li>The set <strong>U</strong> is called the <strong>domain (or universe) of quantification</strong></li><li><strong>U</strong> is an arbitrary set</li></ul><h4 id="example">Example</h4><p>Express: “Every integer has a square that is greater than or equal to 0”</p><ul><li>∀x ∈ <strong>I</strong> : p(x), where p(x) ↔︎ x has a non-negative square</li><li>∀x ∈ <strong>I</strong> : (x<sup>2</sup> ≥ 0)</li></ul><p>∀x ∈ <strong>U</strong>: p(x) ≡ p(x<sup>1</sup>) ∧ p(x<sup>2</sup>) ∧ ...</p><h3 id="existential-quantifier">Existential quantifier</h3><ul><li>Symbol: ∃</li><li>Means: “for some”, “there exists”</li><li>E.g. ∃x ∈ <strong>U</strong> : p(x)<ul><li>There exits a member x of set <strong>U</strong>, for which p(x) is <em>TRUE</em></li><li>The set <strong>U</strong> is called the <strong>domain (or universe) of quantification</strong></li><li><strong>U</strong> is an arbitrary set</li></ul></li></ul><h4 id="example-1">Example</h4><p>Express: “There exists an integer between 3 and 7”</p><ul><li>∃x ∈ <strong>I</strong> : p(x), where p(x) ↔︎ x is between 3 and 7</li><li>∃x ∈ <strong>I</strong> : ((x &gt; 3) ∧ (x &lt; 7))</li></ul><p>∃x ∈ U : p(x) ≡ p(x<sup>1</sup>) ∨ p(x<sup>2</sup>) ∨ ...</p><h3 id="eliminating-quantifiers">Eliminating quantifiers</h3><h4 id="universal-quantifier-1">Universal quantifier</h4><ul><li><p>For <strong>U</strong> = {x<sup>1</sup> , x<sup>2</sup>, ...}:</p><p>∃x ∈ <strong>U</strong> : p(x) ≡ p(x<sup>1</sup>) ∨ p(x<sup>2</sup>) ∨ ...</p></li><li><p>E.g.: For:</p><p>∃x ∈ <strong>I</strong> : ((x &gt; 3) ∧ (x &lt; 7))</p></li><li><p>We have</p><p>(3 &lt; 0 &lt; 7) ∨ (3 &lt; 1 &lt; 7) ∨ (3 &lt; 2 &lt; 7) ∨ ...</p></li></ul><h3 id="negation">Negation</h3><ul><li><p>De Morgan:</p><p>¬(p(x<sub>1</sub>) ∧ p(x<sub>2</sub>)) ≡ ¬p(x<sub>1</sub>) ∨ ¬p(x<sub>2</sub>)</p><p>¬(p(x<sub>1</sub>) ∨ p(x<sub>2</sub>)) ≡ ¬p(x<sub>1</sub>) ∧ ¬p(x<sub>2</sub>)</p></li><li><p>Generalised:</p><p>¬(∀x ∈ <strong>U</strong> : p(x)) ≡ ∃x ∈ <strong>U</strong> : ¬p(x)</p><p>¬(∃x ∈ <strong>U</strong> : p(x)) ≡ ∀x ∈ <strong>U</strong> : ¬p(x)</p></li></ul><h4 id="example-2">Example</h4><ul><li>It is not the case that someone has a car<ul><li>¬∃x ∈ <strong>P</strong> : <em>IsCarOwner</em>(x)</li></ul></li><li>Someone does not have a car<ul><li>∃x ∈ <strong>P</strong> : ¬<em>IsCarOwner</em>(x)</li></ul></li><li>No one is without a car</li><li>¬∃x ∈ <strong>P</strong> : ¬<em>IsCarOwner</em>(x)</li></ul><h3 id="exercise-2">Exercise</h3><p>Express in predicate logic. Use negation, whatever quantifiers you need and the one-argument predicate <em>IsCarOwner</em>. Also, state which of your answers are equivalent to each other.</p><ul><li>It is not the case that everyone has a car<ul><li>¬∀x ∈ <strong>P</strong> : <em>IsCarOwner</em>(x)</li></ul></li><li>Someone does not have a car<ul><li>∃x ∈ <strong>P</strong> : ¬<em>IsCarOwner</em>(x)</li></ul></li><li>It is false that everyone is without a car<ul><li>¬∀x ∈ <strong>P</strong> : ¬<em>IsCarOwner</em>(x)</li></ul></li><li><ol type="a"><li>≡ (c)</li></ol></li></ul><p>With <strong>U</strong> = {a, b, c}, rewrite the following formula without any quantifiers.</p><ul><li>¬(∀x ∈ <strong>U</strong> : p(x)) ≡ ∃x ∈ <strong>U</strong> : ¬p(x)</li></ul><p><strong>Solution</strong>: ¬(p(a) ∧ p(b) ∧ p(c)) ≡ ¬p(a) ∨ ¬p(b) ∨ ¬p(c)</p><h3 id="bound-and-free-variables">Bound and free variables</h3><p>A variable is either</p><ul><li><strong>bound</strong> by quantification</li><li><strong>free</strong></li></ul><p>E.g.: ∃y ∈ <strong>N</strong> : (y = x<sup>2</sup>)</p><p>y is bound, x is free</p><h3 id="empty-sets">Empty sets</h3><p>The following equivalences hold no matter what p is:</p><ul><li>∀x ∈ ∅ : p(x) ≡ <em>TRUE</em></li><li>∃x ∈ ∅ : p(x) ≡ <em>FALSE</em></li></ul><h2 id="multiple-quantifiers">Multiple quantifiers</h2><h3 id="introduction-1">Introduction</h3><p>Just as <strong>one quantifier</strong> can be applied to a <strong>predicate with one variable, two or more quantifiers</strong> can be applied to a <strong>predicate with two or more variables</strong></p><h3 id="examples-with-universal-and-existential-quantifiers">Examples with universal and existential quantifiers</h3><p><strong>Definitions:</strong></p><ul><li>∀x : ∀y : (Parent(x, y) ∧ Female(x) ↔︎ Mother(x, y))</li><li>∀x : ∀y : ∀z : (Mother(y, x) ∧ Father(z, x) ↔︎ Offspring(x, y, z))</li></ul><p><strong>Symmetric properties:</strong></p><ul><li>∀x : ∀y : (Borders(x, y) ↔︎ Borders(y, x))</li></ul><p>Each integer has a square that is also an integer and that is non-negative:</p><ul><li>∀x ∈ I : ∃y ∈ <strong>N</strong> : y = x<sup>2</sup></li></ul><p>Every living person has a mother, living or not.</p><ul><li><strong>P</strong> is the set of all living people, <strong>Q</strong> is the set of all people, living or not</li><li>∀x ∈ <strong>P</strong> : ∃y ∈ <strong>Q</strong> : Mother(y, x)</li></ul><p>But every living person has only a single mother?</p><ul><li>The ∃! quantifier is used to assert that exactly one of something exists:</li><li>∀x ∈ <strong>P</strong> : ∃!y ∈ <strong>Q</strong> : Mother(y, x)</li><li>“Every living person has exactly one mother, living or not”</li></ul><h3 id="binding-a-variable">Binding a variable</h3><p>∃y ∈ <strong>N</strong> : (y = x<sup>2</sup>)</p><ul><li>bound variable y, free variable x</li><li>“Some non-negative number is the square of x”</li></ul><p>∀x ∈ I : ∃y ∈ <strong>N</strong> : (y = x<sup>2</sup>)</p><ul><li>bound variables x and y</li><li>“All integers have a non-negative square number”</li></ul><p>∀x ∈ I : <em>IsPerfectSquare</em>(x) ↔︎ (∃y ∈ <strong>N</strong> : (y = x<sup>2</sup>))</p><ul><li>Definition of the predicate <em>IsPerfectSquare</em></li><li>“If a number meets certain conditions, it is a perfect square”</li></ul><h3 id="scope-of-quantification">Scope of quantification</h3><p>The scope of a quantifier extends to the <strong>end of the formula</strong>, unless otherwise indicated by <strong>parentheses</strong>.</p><ul><li>E.g. ∀x ∈ <strong>I</strong> : <em>IsPerfectSquare</em>(x) ↔︎ (∃y ∈ <strong>N</strong> : (y = x<sup>2</sup>))</li></ul><p><strong>Order</strong> of quantification is important</p><h3 id="order-of-quantification">Order of quantification</h3><p>If all quantifications are of the <strong>same kind</strong> (all universal or all existential), <strong>the order does not matter</strong></p><ul><li>∀x : ∀y : p(x, y) ≡ ∀y : ∀x : p(x, y)</li><li>∃x : ∃y : p(x, y) ≡ ∃y : ∃x : p(x, y)</li></ul><p>If there are <strong>both universal and existential</strong> quantifications, the <strong>order does matter</strong></p><ul><li>∀x ∈ <strong>I</strong> : ∃y ∈ <strong>N</strong> : y = x<sup>2</sup><ul><li>“Every integer has a square that is a natural number”</li></ul></li><li>∃y ∈ <strong>N</strong> : ∀x ∈ <strong>I</strong> : y = x<sup>2</sup><ul><li>“There exists a natural number that is the square of every integer” (= FALSE!)</li></ul></li><li>∀x ∈ P : ∃y ∈ <strong>Q</strong> : Mother(y, x)<ul><li>“Every living person has a mother, living or not”</li></ul></li><li>∃y ∈ <strong>Q</strong> : ∀x ∈ <strong>P</strong> : Mother(y, x)<ul><li>“There exists a person, living or not, that is the mother of each living person ” (= FALSE!)</li></ul></li></ul><h3 id="example-3">Example</h3><p>“There is a natural number that is smaller or equal to all other natural numbers”</p><p>∃y ∈ <strong>N</strong> : ∀x ∈ <strong>N</strong> : (y ≤ x)</p><p><strong>C</strong> is the network of computers</p><p>Direct(x, y) is TRUE if and only if x = y or x is connected directly to y</p><p>“There is at least one computer connected directly to all the others”</p><p>∃y ∈ <strong>N</strong> : ∀x ∈ <strong>N</strong> : Direct(x, y)</p><p>The existential quantifier says that there is at least one of something, but sometimes we have more accurate information than that. Sometimes there must be exactly one of something, as noted in the discussion of Example 4.11. Express the fact that there is exactly one integer between 4 and 6 by using an existential quantifier to state that there is at least one such integer and also that if there were two such integers (say x and y), they would have to be equal to each other.</p><p><strong>Solution:</strong></p><p>∃x ∈ <strong>I</strong> : 4 &lt; x ∧ x &lt; 6 ∧ ∀y ∈ <strong>I</strong> : 4 &lt; y ∧ y &lt; 6 ⇒ x = y</p><p>Or:</p><p>∃x ∈ <strong>I</strong> : 4 &lt; x ∧ x &lt; 6.</p><p>∀x ∈ <strong>I</strong>, ∀y ∈ <strong>I</strong> : 4 &lt; y ∧ y &lt; 6 ∧ 4 &lt; x ∧ x &lt; 6 ⇒ x = y.</p><h4 id="remark">Remark</h4><p>The patterns ∃y ∈ S : φ(y) ∧ ψ(y) and ∀x ∈ S : φ(x) ⇒ ψ(x) are very common. The first one says that there is a φ that is also a ψ; the second one says that all φ’s are ψ’s.</p><p>Note the difference: ∃ is paired with ∧ and ∀ with ⇒!! If you see a wrong pairing in a solution to an exercise, e.g. ∃x ∈ <strong>U</strong> : Dog(x) ⇒ Human(x) or ∀x ∈ U : Man(x) ∧ Human(x), then you sentence is <strong>probably wrong</strong>! (think yourself about what these two nonsense sentences mean)</p><p>Exercise:</p><p>The quantifier ∃! is sometimes used to assert that exactly one of something exists. That is: ∃!x ∈ <strong>I</strong> : p(x) means that there is exactly one integer with property p. Use this quantifier to state that:</p><ul><li>Every living person has exactly one mother, living or not<ul><li>∀x ∈ <strong>P</strong> : ∃!y ∈ <strong>Q</strong> : Mother(y, x)</li></ul></li><li>Every integer has exactly one square<ul><li>∀x ∈ <strong>I</strong> : ∃!y ∈ <strong>N</strong> : y = x<sup>2</sup></li></ul></li></ul><h2 id="formulas-of-predicate-logic">Formulas of predicate logic</h2><h3 id="definition-formulas-of-predicate-logic"><strong>Definition: Formulas of Predicate Logic</strong></h3><ul><li>If pred is an n-argument predicate and each of a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>n</sub> is either an element of the domain or a variable over the elements, then pred(a<sub>1</sub> , a<sub>2</sub>, ..., a<sub>n</sub>) is a formula</li><li>If α and β are formulas, then so are (¬α), (α ∧ β) and (α ∨ β)</li><li>If α is a formula and x is a variable over the elements in the domain, then (∃x : α) and (∀x : α) are formulas</li><li>Nothing else is a formula</li></ul><h3 id="comments-on-definition">Comments on definition</h3><p>The definition is kept simple:</p><ul><li>Parentheses deal with precedence and scope</li><li>Does not distinguish between free and bound variables</li><li>All quantification is over the same universe</li></ul><p>Difference with propositional logic:</p><ul><li>Predicate logic deals with domains, variables and quantifiers</li><li>Elements in a domain may be numbers, people, or whatever is useful</li><li>Variables in predicate logic range over elements in a domain and are therefore much more flexible than variables in propositional logic, which range over truth values only</li></ul><h3 id="truth-tables">Truth Tables</h3><p>The truth value of a predicate formula can be determined if:</p><ul><li>the universe is finite <strong>(this assumption can be dropped but a more mathematical definition is needed then)</strong>, and</li><li>the truth values are known for all atomic formulas without variables <strong>(better: we have a structure that interprets all predicate symbols!</strong>, and</li><li>all occurrences of variables are bound by quantification</li></ul><p>Algorithm:</p><ul><li>Eliminate quantifiers and variables (express them in terms of conjunctions and disjunctions)</li><li>Replace each atomic formula with its truth value</li><li>Evaluate the resulting proposition</li></ul><h2 id="logic-for-data-structures">Logic for data structures</h2><h3 id="sequences">Sequences</h3><p>Sequence:</p><ul><li>Collection of elements</li><li>Order of elements is important (↔︎ set)</li><li>May have repeated elements (↔︎ set)</li><li>Notation: (a, b, a)</li></ul><p>Note:</p><ul><li>(a, b) and (b, a) are different, whereas {a, b} and {b, a} are the same.</li><li>The length of the sequence (a, b, a) is 3, whereas the set of elements that appear in this sequence {a, b} has cardinality 2.</li></ul><h3 id="strings">Strings</h3><p>String:</p><ul><li>Sequence of letters, characters or symbols</li></ul><p>General notation for next examples:</p><ul><li>Sequence of n letters: A = (a<sub>1</sub> , a<sub>2</sub>, ..., a<sub>n</sub>), B = (b<sub>1</sub> , b<sub>2</sub>, ..., b<sub>n</sub>)</li><li>Set of first n integers: <strong>I</strong><sub>n</sub> : {1, 2, ..., n}</li><li>x precedes y alphabetically: x ≺ y</li></ul><h4 id="exercises">Exercises</h4><p><img src="/images/FOCS/1545320.png" /></p><ul><li><ol type="a"><li>There is no occurrence of ‘c’ in A</li></ol><ul><li>∀i ∈ <strong>I</strong><sub>n</sub> : a<sub>i</sub> ≠ "c"</li></ul></li><li><ol start="2" type="a"><li>Some letter appears twice in A</li></ol><ul><li>∃i ∈ <strong>I</strong><sub>n</sub> : ∃j ≠ i ∈ <strong>I</strong><sub>n</sub> : a<sub>i</sub> = a<sub>j</sub></li></ul></li><li><ol start="3" type="a"><li>No letter appears twice in A</li></ol><ul><li>∀i ∈ <strong>I</strong><sub>n</sub> : ∀j ≠ i ∈<strong>I</strong><sub>n</sub> : a<sub>i</sub> ≠ a<sub>j</sub></li></ul></li><li><ol start="4" type="a"><li>A and B are the same list</li></ol><ul><li>∀i ∈ <strong>I</strong><sub>n</sub> : a<sub>i</sub> = b<sub>i</sub></li></ul></li><li><ol start="5" type="a"><li>The set of letters in A is a subset of the letters in B</li></ol><ul><li>∀i ∈ <strong>I</strong><sub>n</sub> : ∃j ∈ <strong>I</strong><sub>n</sub> : a<sub>i</sub> = b<sub>j</sub></li></ul></li><li><ol start="6" type="a"><li>The set of letters in A is the same as in B</li></ol><ul><li>Idea: A = B ↔︎ (A ⊆ B) ∧ (B ⊆ A)</li><li>Idea: (∀i ∈ <strong>I</strong><sub>n</sub> : ∃j ∈ <strong>I</strong><sub>n</sub> : a<sub>i</sub> = b<sub>j</sub>) ∧ (∀i ∈ <strong>I</strong><sub>n</sub> : ∃j ∈ <strong>I</strong><sub>n</sub> : aj = b<sub>i</sub>)</li></ul></li><li><ol start="7" type="a"><li>Each element of A is no later in the alphabet than the corresponding element of B</li></ol><ul><li>∀i ∈ <strong>I</strong><sub>n</sub> : a<sub>i</sub> ⪯ b<sub>i</sub></li></ul></li></ul><p><img src="/images/FOCS/1545321.png" /></p><p><strong>Solution:</strong></p><p>A lexicographically precedes B if there exists exactly 1 index for which:</p><ul><li>before this index A and B are equal</li><li>at this index a<sub>i</sub> ≺ b<sub>i</sub></li></ul><p>∃!i ∈ <strong>I</strong><sub>n</sub> : (∀j &lt; i : a<sub>j</sub> = b<sub>j</sub> ) ∧ a<sub>i</sub> ≺ b<sub>i</sub></p><h3 id="examples">Examples</h3><p>Some letter appears in the same position in A and B:</p><ul><li>∃i ∈ <strong>I</strong><sub>n</sub> : a<sub>i</sub> = b<sub>i</sub></li></ul><p>Within every pair of elements of A, each of the two elements equals the other</p><ul><li>∀i ∈ <strong>I</strong><sub>n</sub> : ∀j ∈ <strong>I</strong><sub>n</sub> : a<sub>i</sub> = a<sub>j</sub></li></ul><p>Every element of A is equal to its first element.</p><ul><li>∃i ∈ <strong>I</strong><sub>n</sub> : a<sub>i</sub> = a<sub>1</sub></li></ul><p>Note: ∀i ∈ <strong>I</strong><sub>n</sub> : ∀j ∈ <strong>I</strong><sub>n</sub> :a<sub>i</sub> = a<sub>j</sub> ≡ ∀i ∈ <strong>I</strong><sub>n</sub> : a<sub>i</sub> = a<sub>1</sub></p><p>A is sorted in strictly alphabetical order</p><ul><li>∀i ∈ <strong>I</strong><sub>n-1</sub> : a<sub>i</sub> ≺ a<sub>i+1</sub></li></ul><p>Note how comparing with a non-existing element after the last element is avoided!</p><h3 id="graphs">Graphs</h3><ul><li>Undirected Graph G = (V, E):<ul><li>V: Set of vertices</li><li>E: Set of edges (unordered pairs of elements of V)</li></ul></li><li>E.g.:<ul><li>V = {a, b, c}</li></ul></li></ul><p><img src="/images/FOCS/1545322.png" /></p><p>Edge(x, y) ↔︎ x and y are connected by an edge (i.e. {x, y} ∈ E)</p><p>E.g.:</p><ul><li>V = {a, b, c, d}</li><li>Edge(a, b), Edge(b, c), Edge(a, d)</li></ul><p><img src="/images/FOCS/1545323.png" /></p><p>∀x ∈ V : ∃y ∈ V : Edge(x, y)</p><ul><li>TRUE: all vertices are connected to an other vertex</li></ul><p>∃x ∈ V : ∀y ∈ V : x = y ∨ Edge(x, y)</p><ul><li>FALSE: there is no vertex directly connected to each other vertex</li></ul><h4 id="exercises-1">Exercises</h4><p><img src="/images/FOCS/1545324.png" /></p><ul><li><ol type="a"><li>Express the fact that Edge is symmetric</li></ol><ul><li>Edge(x, y) ↔︎ Edge(y, x)</li></ul></li><li><ol start="2" type="a"><li>Write a formula stating that for every pair of vertices, there is a path of length 2 connecting these two vertices</li></ol><ul><li>∀x ∈ V : ∀y ∈ V : ∃z ∈ V : Edge(x, z) ∧ Edge(z, y)</li></ul></li><li><ol start="3" type="a"><li>Give a recursive definition of Path</li></ol><ul><li>∀x ∈ V : ∀y ∈ V : Path(x, y) ↔︎ x = y ∨ ∃z ∈ V : Edge(x, z) ∧ Path(z, y)</li></ul></li></ul><p><img src="/images/FOCS/1545325.png" /></p><ul><li><ol type="i"><li>∀x ∈ V : ∀y 6= x ∈ V : Edge(x, y)</li></ol><ul><li>The graph is complete</li></ul></li><li><ol start="2" type="i"><li>∀x ∈ V : ∀y ∈ V : Path(x, y)</li></ol><ul><li>The graph is connected</li></ul></li><li><ol start="3" type="i"><li>∀x ∈ V : ∃y ∈ V : Edge(x, y)</li></ol><ul><li>There are no unconnected vertices</li></ul></li><li><ol start="4" type="i"><li>∃x ∈ V : ∀y 6= x ∈ V : Edge(x, y)</li></ol><ul><li>There exists a vertex that is directly connected to all other vertices</li></ul></li></ul><p>Edge(a, b), Edge(b, c), Edge(b, d)</p><p><img src="/images/FOCS/1545326.png" /></p><ul><li>(i): FALSE</li><li>(ii): TRUE</li><li>(iii): TRUE</li><li>(iv): TRUE</li></ul><p>Edge(a, b), Edge(b, c), Edge(c, d)</p><p><img src="/images/FOCS/1545327.png" /></p><ul><li>(i): FALSE</li><li>(ii): TRUE</li><li>(iii): TRUE</li><li>(iv): FALSE</li></ul>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fundamentals of Computer Science </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Storing and exchanging medical images</title>
      <link href="2021/02/26/2021-02-26-Storing-and-exchanging-medical-images-Ethics-in-Hospital-IT/"/>
      <url>2021/02/26/2021-02-26-Storing-and-exchanging-medical-images-Ethics-in-Hospital-IT/</url>
      
        <content type="html"><![CDATA[<h1 id="storing-and-exchanging-medical-images">Storing and exchanging medical images</h1><h2 id="images-are-super-important">Images are super important</h2><p><strong>Definitions</strong></p><ul><li><p><strong>Medical Imaging Informatics</strong></p><ul><li>“study and application of processes of information and communications technology for the acquisition, manipulation, analysis and distribution of medical image data”</li></ul></li><li><p>Picture Archiving and Communication Systems (PACS)</p><ul><li>“medical imaging technology which provides economical storage of, and convenient access to, images from multiple modalities”</li></ul></li></ul><h3 id="digital-imaging">Digital imaging</h3><ul><li>Started in the 1970s</li><li>First filmless hospital occurred in 1999</li><li>Transitioning to PACS<ul><li>Similar to photography</li><li>Analog to digital transition</li><li>Introduction of computed tomography, ultrasound, and magnetic resonance imaging that all became digital<ul><li>Eliminated need for film processing and storage rooms</li><li>Images could be viewed at a remote location</li></ul></li></ul></li><li>Advantages: cost savings, storage, retrieval</li></ul><h3 id="transitions-to-filmless-radiology">Transitions to filmless radiology</h3><ul><li>Extensive initial costs</li><li>Printing remained for referring physicians</li><li>Use of film scanners for digital viewing<ul><li>Proprietary imaging formats</li><li>Later, DICOM (DICOM = Digital Imaging and Communications in Medicine) standard was created</li></ul></li><li>Upgrade conventional radiology rooms for CT, ultrasound, and MRI for the digital world</li><li>Computer-based image archiving</li></ul><h3 id="picture-archiving-and-communication-systems-pacs">Picture Archiving and Communication Systems (PACS)</h3><h4 id="pacs-key-components">PACS key components</h4><ul><li><strong>Digital acquisition devices</strong>: sources of images, such as digital angiography, fluoroscopy, mammography, CT, MRI , ultrasound scanners</li><li><strong>Network</strong>: ties PACS components together</li><li><strong>Database server</strong>: high speed and robust central computer to process information</li><li><strong>Archival server</strong>: responsible for storing images and enables short term (fast retrieval) and long term (slower retrieval) storage</li><li><strong>Radiology Information system (RIS)</strong>: system that maintains patient demographics, scheduling, billing information and interpretations</li><li><strong>Workstation</strong>: software and hardware to access PACS and replaces standard light box or view box</li><li><strong>Teleradiology</strong>: ability to remotely view images at a location distant from the site of origin</li></ul><h4 id="pacs-workflow">PACS workflow</h4><ul><li>Patient is identified in Hospital Information System (HIS)</li><li>An order is created that is sent to the RIS via an HL7 protocol</li><li>Orders will go to imaging device via the DICOM protocol</li><li>Image is created in DICOM format and sent to the PACS server</li><li>Images are stored on image archive</li><li>Radiologist is notified of a pending study</li><li>Study is then read at a computer workstation using high-resolution monitors and viewing software available from a variety of different vendors</li><li>Comparison can be made to prior studies</li><li>Diagnostic report is generated by the radiologist, often using voice recognition software</li><li>Report is then stored on the PACS server</li></ul><figure><img src="/images/HMS/9191910.png" alt="" /><figcaption>Many transactions are related to imaging</figcaption></figure><h4 id="features">Features</h4><ul><li>Zoom-in feature for close-up detail</li><li>Ability to rotate images in any direction</li><li>Text button to see the report</li><li>Mark-up tool that does the following to the image: Adds text, measures the size and ratios of objects</li><li>Measures angles</li><li>Measures the square area of a mass or region</li><li>Adds an arrow</li><li>Right click on the image and short cut tools appear</li><li>Export an image to any of the following destinations: Teaching file, CD-ROM, hard drive, USB drive, save to clipboard or Create a video</li></ul><h4 id="pacs-advantages">PACS advantages</h4><ul><li>Replaces a standard x-ray film archive</li><li>Allows for remote viewing and reporting</li><li>Expedites the incorporation of medical images into an electronic health record</li><li>Images can be archived and transported on portable media, e.g. USB drive and Apple’s iPhone</li><li>Other specialties that generate images may join PACS such as cardiologists</li><li>PACS can be web-based and use “service oriented architecture”</li><li>Unlike conventional x-rays, digital films have a zoom feature and can be manipulated in innumerable ways</li><li>Improves productivity by allowing multiple clinicians to view the same image from different locations</li><li>Rapid retrieval of digital images for interpretation and comparison with previous studies</li><li>Fewer “lost films”</li><li>Reports are more likely to accompany the digital image</li><li>Radiologists can view an image back and forth like a movie, known as “stack mode”</li><li>Quicker reporting back to the requesting clinician</li><li>Digital imaging allows for computer aided detection (CAD)</li><li>Increased productivity</li></ul><h4 id="issues-and-challenges">Issues and challenges</h4><ul><li>Cost: Open source and “rental PACS” are alternatives</li><li>New legislation cutting reimbursement rates</li><li>Expense and complexity to integrate with hospital and radiology information systems and EHRs</li><li>Lack of interoperability with other PACSs</li><li>Bandwidth limits may require network upgrades</li><li>Different vendors may use different DICOM tags to label films</li><li>Viewing digital images a little slower than routine x-ray films</li><li>Workstations may require upgrades if high resolution monitors are necessary</li></ul><h4 id="web-based-pacs">Web based PACS</h4><ul><li>Reduce need for duplicate studies, and allow more rapid diagnosis and treatment</li><li>DICOM imaging format could be an impediment to use of the World Wide Web<ul><li>Not browser compatible: Usually this entails downloading a small application (thin client) from the PACS vendor that enables the remote viewing station to act like a modified PACS workstation</li><li>Alternate potential solution: "zero-footprint" Web viewer where DICOM images are pre-converted to GIF</li><li>Legacy PACS compared to Web PACS in next slide</li></ul></li></ul><h4 id="pacs-on-web">Pacs on web</h4><p><img src="/images/HMS/9191911.png" /></p><p><img src="/images/HMS/9191912.png" /></p><h4 id="example">Example</h4><h5 id="resolution-md">Resolution MD</h5><p><img src="/images/HMS/9191913.png" /></p><h5 id="mobile-mim">mobile MIM</h5><p><img src="/images/HMS/9191914.png" /></p><h4 id="pacs-in-summary">PACS in summary</h4><ul><li>PACS is the logical progression from x-ray films to digital imaging due to multiple new technologies</li><li>Medical Imaging Informatics will study the impact and significance of all facets of digital imaging</li><li>PACS is very popular among clinicians, patients and hospitals, but cost remains an issue</li><li>Web PACS offers more image interoperability options</li></ul><h3 id="dicom">DICOM</h3><p><strong>“is a standard for communication of medical imaging information”</strong></p><ul><li><p><a href="http://www.dicomstandard.org/">Dicom.nema.org</a></p></li><li><p><a href="http://www.dicomstandard.org/">www.dicomstandard.org</a></p></li><li><p>ISO12052</p></li><li><p>Established in 1993, but actually it is a renaming/update of ACR standard first released in 1985</p></li><li><p>DICOM defines</p></li><li><p>Formats for images, waveforms, derived structured data, …</p><ul><li>with the quality and metadata necessary for <em>clinical use</em></li></ul></li><li><p>Workflow management in the imaging department</p></li><li><p>Media exchange and printing Service-based</p></li><li><p>network protocols over TCP/IP and HTTP</p></li></ul><p><img src="/images/HMS/9191915.png" /></p><h4 id="dicom-stores-in-a-versatile-way">DICOM Stores in a versatile way</h4><p><strong>Images</strong>:</p><ul><li>All kinds of modalities</li><li>Single or multiframe</li><li>Volumes, cine,</li><li>Colour or black and white</li><li>Original or processe</li><li>…</li></ul><p><strong>Metadata</strong>:</p><ul><li>Patient ID, demographics</li><li>Device info</li><li>Workflow context</li><li>…</li></ul><h4 id="other-components">Other components</h4><ul><li>Managing workflow<ul><li>Modality worklists, progress updates, storage commitment, …</li></ul></li><li>Display images<ul><li>Screen calibration, annotations, layouts, key images, …</li></ul></li><li>Distribute images<ul><li>Network push/pull, media transfer, email, web protocols</li></ul></li><li>Store analysis results<ul><li>Registrations, segmentations, implant models, …</li></ul></li><li>Secure<ul><li>Audit trails, de-identification, encryption, …</li></ul></li></ul><h4 id="some-more-technical-details-on-image-exchange">Some more technical details on image exchange</h4><p><strong>Service + Object = Service Object Pair</strong></p><ul><li>Storage + MR Image = MR Image Storage</li></ul><p><img src="/images/HMS/9191916.png" /></p><p>SCU – Service Class User</p><ul><li>the system that uses the service</li></ul><p>SCP – Service Class Provider</p><ul><li>the system that provides the service</li></ul><p>Before two Application Entities (AE) perform a DICOM transaction they first agree on</p><ul><li>who will be the SCU, who will be the SCP</li><li>what SOP Class they will use (e.g. MR Image Storage)</li><li>what the Transfer Syntax will be (e.g. JPEG Lossless)</li></ul><p>This process is called <strong>Association Negotiation</strong></p><p><img src="/images/HMS/9191917.png" /></p><h4 id="dicomweb">DICOMweb</h4><p><img src="/images/HMS/9191918.png" /></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;studies&#x2F;1.2.3&#x2F;series&#x2F;4.5.6&#x2F;instances&#x2F;7.8.9</span><br></pre></td></tr></table></figure><h3 id="anatomy-of-a-transaction">Anatomy of a transaction</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">method SP &#x2F;&#123;+resource&#125;&#123;?parameter*&#125; SP version CRLF</span><br><span class="line">*(header-field CRLF)</span><br><span class="line">CRLF</span><br><span class="line">[ payload ]</span><br></pre></td></tr></table></figure><p><img src="/images/HMS/9191919.png" /></p><h3 id="what-about-waveforms">What about waveforms?</h3><p>Several standards exist for instance for ECG</p><ul><li>Standards for encoding the signal as waveforms (e.g. ISO/WD 11073 90201, ANSI/HL7 V3 Annotated ECG, ENV 12052 Medical Imaging, DICOM Supplement 30, …)</li><li>Standards for encoding the signal as pictures</li><li>Standards for annotating the signal (IEEE 11073-10101 for beats e.g normal, Bundle branch block, …)</li></ul><h2 id="ethics-in-health-information-systems">Ethics in Health information systems</h2><h3 id="ethical-principles-in-health-care">Ethical principles in health care</h3><p><strong>Hippocratic school</strong></p><ul><li><p>•"As to diseases, make a habit of two things—to help, or at least to do no harm."</p></li><li><p>“Primum non nocere”</p></li><li><p>“Given an existing problem, it may be better not to do something, or even to do nothing, than to risk causing more harm than good.”</p></li></ul><h4 id="contemporary-approach-reflects-hippocratic-principles">Contemporary approach reflects Hippocratic principles</h4><p>4 pillars of medical ethics</p><ul><li>Autonomy – respect for the patient's right to self-determination</li><li>Beneficence – the duty to 'do good'</li><li>Non-Maleficence – the duty to 'not do bad'</li><li>Justice – to treat all people equally</li></ul><p><img src="/images/HMS/9191900.png" /></p><h3 id="principles-in-medical-research">Principles in medical research</h3><ul><li><p>The Nuremberg Code (1947)</p><ul><li>Related to the Holocaust (death of 11 million people by the Nazis)</li><li>Medical crimes against humanity were committed</li><li>Code established voluntary consent and right to withdraw from experiment and right to qualified medical experimenter</li></ul></li><li><p>World Medical Associations (WMA) Declaration of Helsinki (1964)</p><ul><li>Added the right to privacy and confidentiality of personal information of research subjects to the Nuremberg Code</li></ul></li></ul><h3 id="ethical-principles-in-human-experimentation">Ethical principles in human experimentation</h3><p><strong>Nuremberg code</strong></p><ul><li>Voluntary Consent is essential</li><li>The results must be for the greater good of society</li><li>Should be based on previous animal experimentation</li><li>Should be conducted by avoiding physical/mental suffering and injury</li><li>No experiments should be conducted if it is believed to cause death/disability</li><li>Risks should never exceed the benefits</li><li>Adequate facilities should be used to protect subjects</li><li>Conducted only by qualified scientists</li><li>Subject should always be at liberty to stop at any time</li><li>Scientist in charge must be prepared to terminate the experiment when injury, disability, or death is likely to occur</li></ul><h3 id="the-issue">The issue</h3><p>Hippocratic Oath etc focus on the medical profession and focus on <strong>Autonomy</strong>, <strong>Beneficence</strong>, <strong>Non-Maleficence</strong> and <strong>Justice</strong> (primum non nocere).</p><p>Nuremberg Code and Helsinki declaration apply such principles on medical research.</p><p>What about healthcare informatics? “Do these principles affect software?”</p><h3 id="translating-to-health-informatics">Translating to health informatics</h3><ul><li>Preserve the right to privacy</li><li>Guard against excessive personal data collection</li><li>Ensure Security of data</li><li>Ensure Integrity of data</li><li>Get Informed consent for patients</li><li>Be aware of existing laws</li><li>Sharing data only when appropriate</li><li>…</li></ul><p><img src="/images/HMS/9191901.png" /></p><h3 id="ethical-principles-also-apply-to-students-in-health-ict">Ethical principles also apply to students in health ICT</h3><p><strong>General for all students</strong></p><ul><li>No plagiarism</li><li>Manipulation of electronic files. Ensure copyright is not violated</li><li>No recording of lectures without consent</li><li>Do not use pirated digital files</li><li>Do not access documents illegally</li></ul><p><strong>And in particular</strong></p><ul><li>Students should be careful about online comments and photographs of themselves, colleagues and patients on social networks</li><li>Always respect patients and their privacy</li><li>Respect confidentiality: Don’t share sensitive data. <strong>Everything that is not completely anonymous is sensitive</strong></li></ul><h3 id="other-concerns">Other concerns</h3><ul><li><p>Pictures might reveal presence of a specific person at a specific department etc.</p></li><li><p>Medical images might reveal much much more</p></li><li><p>Patient records reveal even more</p></li><li><p>Stay out of all information you do not need to access !</p></li></ul><p><img src="/images/HMS/9191902.png" /></p><h3 id="other-issue-ransomware">Other issue: ransomware</h3><ul><li><p>Software encrypts your data</p></li><li><p>A fee is asked to be able to decrypt your data</p></li><li><p>Sources of infection</p><ul><li>Phishing emails</li><li>Virusses<ul><li>OS vulnerabilities</li></ul></li><li>…</li></ul></li></ul><h3 id="extortionware-doxware">Extortionware / doxware</h3><ul><li>The opposite of ransomware: rather than locking data, it threatens you to expose your data</li><li>Similar mechanisms as ransomware</li></ul>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Analytics in Health Care and Connected Care </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Environments</title>
      <link href="2021/02/26/2021-02-26-Environments/"/>
      <url>2021/02/26/2021-02-26-Environments/</url>
      
        <content type="html"><![CDATA[<h1 id="environments">Environments</h1><p><a href="https://inst.eecs.berkeley.edu/~cs61a/fa20/">Website</a></p><p><a href="https://www.youtube.com/watch?v=iC6bdDVxeds&amp;list=PL6BsET-8jgYXhzd5ou1faNsWVoWBRUY8q">Video</a></p><p><a href="http://composingprograms.com/pages/16-higher-order-functions.html">Textbook</a></p><h2 id="environments-for-higher-order-functions"><a href="https://www.youtube.com/watch?v=1P2UgdAWwYg&amp;list=PL6BsET-8jgYXhzd5ou1faNsWVoWBRUY8q&amp;index=2">Environments for Higher-Order Functions</a></h2><p><strong>Functions are first-class</strong>: Functions are values in our programming language</p><p><strong>Higher-order function</strong>: A function that takes a function as an argument value <strong>or</strong> A function that returns a function as a return value</p><p><em>Environment diagrams describe how higher-order functions work!</em></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Functional arguments</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">apply_twice</span>(<span class="params">f, x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return f(f(x))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; apply_twice(square, 2)</span></span><br><span class="line"><span class="string">    16</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; from math import sqrt</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; apply_twice(sqrt, 16)</span></span><br><span class="line"><span class="string">    2.0</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> f(f(x))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"></span><br><span class="line">result = apply_twice(square, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="names-can-be-bound-to-functional-arguments">Names can be Bound to Functional Arguments</h3><p><img src="/images/CS61A/4978520.png" /></p><h2 id="environments-for-nested-definitions"><a href="https://www.youtube.com/watch?v=qLZhkM45Jtc&amp;list=PL6BsET-8jgYXhzd5ou1faNsWVoWBRUY8q&amp;index=4">Environments for Nested Definitions</a></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Functional return values</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_adder</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a function that takes one argument k and returns k + n.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_three = make_adder(3)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_three(4)</span></span><br><span class="line"><span class="string">    7</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">adder</span>(<span class="params">k</span>):</span></span><br><span class="line">        <span class="keyword">return</span> k + n</span><br><span class="line">    <span class="keyword">return</span> adder</span><br></pre></td></tr></table></figure><p><img src="/images/CS61A/4978521.png" /></p><h3 id="how-to-draw-an-environment-diagram">How to Draw an Environment Diagram</h3><p><strong>When a function is defined</strong>:</p><p>Create a function value: func () [parent=]</p><p>Its parent is the current frame.</p><p><img src="/images/CS61A/4978522.png" /></p><p>Bind to the function value in the current frame</p><p><strong>When a function is called:</strong></p><ol type="1"><li>Add a local frame, titled with the of the function being called.</li><li><strong>Copy the parent of the function to the local frame: [parent=]</strong></li><li>Bind the to the arguments in the local frame.</li><li>Execute the body of the function in the environment that starts with the local frame.</li></ol><h2 id="local-names"><a href="https://www.youtube.com/watch?v=1Y4eemG0hzk&amp;list=PL6BsET-8jgYXhzd5ou1faNsWVoWBRUY8q&amp;index=5">Local Names</a></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Lexical scope and returning functions</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> g(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">g</span>(<span class="params">a</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a + y</span><br><span class="line"></span><br><span class="line"><span class="comment"># This expression causes an error because y is not bound in g.</span></span><br><span class="line"><span class="comment"># f(1, 2)</span></span><br></pre></td></tr></table></figure><p>Local Names are not Visible to Other (Non-Nested) Functions</p><p><img src="/images/CS61A/4978523.png" /></p><ul><li>An environment is a sequence of frames.</li><li>The environment created by calling a top-level function (no def within def) consists of one local frame, followed by the global frame.</li></ul><h2 id="function-composition"><a href="https://www.youtube.com/watch?v=NiCV2IhTALw&amp;list=PL6BsET-8jgYXhzd5ou1faNsWVoWBRUY8q&amp;index=6">Function Composition</a></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Composition</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compose1</span>(<span class="params">f, g</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a function that composes f and g.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    f, g -- functions of a single argument</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">h</span>(<span class="params">x</span>):</span></span><br><span class="line">        <span class="keyword">return</span> f(g(x))</span><br><span class="line">    <span class="keyword">return</span> h</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">triple</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span> * x</span><br><span class="line"></span><br><span class="line">squiple = compose1(square, triple)</span><br><span class="line">tripare = compose1(triple, square)</span><br><span class="line">squadder = compose1(square, make_adder(<span class="number">2</span>))</span><br></pre></td></tr></table></figure><figure><img src="/images/CS61A/4978526.png" alt="" /><figcaption>The Environment Diagram for Function Composition</figcaption></figure><h2 id="self-reference"><a href="https://www.youtube.com/watch?v=31EDjrN1x5k&amp;list=PL6BsET-8jgYXhzd5ou1faNsWVoWBRUY8q&amp;index=8">Self-Reference</a></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Self Reference</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_all</span>(<span class="params">k</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print all arguments of repeated calls.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; f = print_all(1)(2)(3)(4)(5)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    print(k)</span><br><span class="line">    <span class="keyword">return</span> print_all</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_sums</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print all sums of arguments of repeated calls.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; f = print_sums(1)(2)(3)(4)(5)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string">    15</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    print(n)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next_sum</span>(<span class="params">k</span>):</span></span><br><span class="line">        <span class="keyword">return</span> print_sums(n+k)</span><br><span class="line">    <span class="keyword">return</span> next_sum</span><br></pre></td></tr></table></figure><p><img src="/images/CS61A/4978527.png" /></p><h2 id="currying">Currying</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Currying</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> add, mul</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">curry2</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Curry a two-argument function.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; m = curry2(add)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_three = m(3)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_three(4)</span></span><br><span class="line"><span class="string">    7</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; m(2)(1)</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">g</span>(<span class="params">x</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">h</span>(<span class="params">y</span>):</span></span><br><span class="line">            <span class="keyword">return</span> f(x, y)</span><br><span class="line">        <span class="keyword">return</span> h</span><br><span class="line">    <span class="keyword">return</span> g</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="function-currying">Function Currying</h3><p><img src="/images/CS61A/4978528.png" /></p><p><strong>Curry</strong>: Transform a multi-argument function into a single-argument, higher-order function</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Structure and Interpretation of Computer Programs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Standards in EMR</title>
      <link href="2021/02/25/2021-02-25-Standards-in-EMR/"/>
      <url>2021/02/25/2021-02-25-Standards-in-EMR/</url>
      
        <content type="html"><![CDATA[<h1 id="standards-in-emr">Standards in EMR</h1><p><a href="https://vub.cloud.panopto.eu/Panopto/Pages/Viewer.aspx?id=6d99285a-09cb-41d5-80fc-acda00a2a0f8">Video</a></p><p>Many of the issues raised <a href="https://yintelligence.tech/2021/02/14/2021-02-14-HMS/">last rime</a> could be solved when info is “encoded according to some standard”. But what does this mean?</p><figure><img src="/images/HMS/1.png" alt="" /><figcaption>5:37</figcaption></figure><figure><img src="/images/HMS/2.png" alt="" /><figcaption>8:55</figcaption></figure><h2 id="the-need-for-standardisation-1300">The need for standardisation 13:00</h2><p><strong>Two aspects</strong>:</p><ul><li>Encoding the information in a uniform way<ul><li>Code 12345 -&gt; heart disease</li></ul></li><li>Standardizing the way we exchange information between centers<ul><li>MSH|^~&amp;||OTHER REG MED … -&gt; A female patient aged X visited me on date Y and ….</li></ul></li></ul><p><img src="/images/HMS/3.png" /></p><h3 id="healthcare-standards-can-improve-patient-care">Healthcare Standards can improve patient care</h3><p><strong>An enabler for interoperability of electronic healthcare information</strong></p><ul><li>Improve quality of care</li><li>Electronics documents provide value to clinicians</li><li>Ensure clinicians have latest knowledge</li><li>Improve patient safety</li><li>Minimize preventable errors</li><li>Lower cost of healthcare delivery</li><li>Eliminate duplicate medical tests</li><li>Support lifetime of HER</li><li>Improve public health reporting</li><li>Empower patients to manage their own health</li><li>…</li></ul><h2 id="interoperability-and-information-exchange">Interoperability and information exchange</h2><figure><img src="/images/HMS/4.png" alt="" /><figcaption>Exchanging information between multiple actors</figcaption></figure><p><strong>Remember</strong>:</p><ul><li>N different devices with bilateral communication: N(N-1) / 2 interfaces to maintain and specify; N(N-1) / 2 connections to maintain</li><li>N different devices in a star: N interfaces, N connections</li></ul><p><img src="/images/HMS/5.png" /></p><h3 id="hl7-for-exchanging-information-1614">HL7: for exchanging information 16:14</h3><p><img src="/images/HMS/6.png" /></p><p><strong>The need:</strong></p><ul><li><p>Obvious need to move data around between applications</p></li><li><p>Apps written by different vendors</p></li><li><p>Vendors create apps “in the vacuum”</p></li><li><p>Data models differ</p></li><li><p>Application uses differ</p></li></ul><p>“HL7 International is one of several <a href="http://www.ansi.org/">American National Standards Institute</a> (ANSI) accredited Standards Developing Organizations (SDOs) operating in the healthcare arena. “</p><p>“HL7 provides <strong>standards for interoperability that improve care delivery</strong>, optimize workflow, reduce ambiguity and enhance knowledge transfer among all of our stakeholders, including healthcare providers, government agencies, the vendor community, fellow SDOs and patients.</p><p>In all of our processes we exhibit timeliness, scientific rigor and technical expertise without compromising transparency, accountability, practicality, or our willingness to put the needs of our stakeholders first.”</p><h3 id="hl7-is-consensus-driven-1808"><strong>HL7 is consensus driven</strong> 18:08</h3><ul><li>Volunteer driven</li><li>So, heterogeneous group, with different interests, commitment and understanding<ul><li>Governments</li><li>Vendors</li><li>Clinicians</li><li>Other (Inter)national standards organisations (ANSI, ISO, …</li></ul></li><li>Meetings 3 times a year</li><li>Slow process</li><li>Consensus driven implies compromises need to be made</li><li>Hence sometimes ambiguous</li></ul><figure><img src="/images/HMS/7.png" alt="" /><figcaption>Timeline reflects slow evolution</figcaption></figure><figure><img src="/images/HMS/8.png" alt="" /><figcaption>Procedure reflects slow process 21:11</figcaption></figure><h3 id="interoperability-2600">Interoperability 26:00</h3><p>“The ability of two or more systems or components to <strong>exchange</strong> information and to <strong>use</strong> the information that has been exchanged” (IEEE Standard Computer Dictionary)</p><p>So, interoperability requires standards for</p><ul><li>Exchanging information: describing syntax</li><li>Using the information: describing semantics</li></ul><p><img src="/images/HMS/9.png" /></p><h3 id="hl7-actually-a-family-of-standards-2839">HL7: actually a family of standards 28:39</h3><p><strong>Sharing and re-use of information within and between hospitals</strong></p><ul><li>Patient Administration and demographics</li><li>Orders and results for: Clinical Lab/Pathology, Imaging (radiology, us),..</li><li>Signs and symptoms, diagnosis and treatments</li><li>Pharmacy prescriptions, dispensing and administration</li><li>Patient care messages, clinical documents</li><li>Claims and reimbursements</li><li>Scheduling and managing healthcare resources</li><li>Clinical research and public health surveillance</li><li>…</li></ul><h3 id="hl7-why-7-2924"><strong>HL7: why 7</strong>? 29:24</h3><figure><img src="/images/HMS/10.png" alt="" /><figcaption>Application Layer in OSI</figcaption></figure><ul><li><p>Open Systems Interconnection (OSI) reference model</p></li><li><p>Technology standard from International Standards Organisation (ISO)</p></li><li><p>1984</p></li><li><p>Abstract model of how network protocols and equipment should interoperate</p></li></ul><h4 id="the-osi-application-level">The OSI Application level</h4><p>“The application level addresses definition of the data to be exchanged, the timing of the interchange, and the communication of certain errors to the application. The seventh level supports such functions as security checks, participant identification, availability checks, exchange mechanism negotiations and, most importantly, data exchange structuring."</p><h3 id="hl7-version-2.x-3212"><strong>HL7 version 2.x</strong> 32:12</h3><p><strong>Aims</strong>:</p><ul><li>To improve the electronic exchange of demographic, and immunization records to State IIS (registries) from eligible providers and hospitals</li><li>To improve the ability of eligible hospital laboratories to send reportable data to public health agencies</li><li>To improve the electronic exchange of relevant syndromic surveillance data between healthcare providers and public health agencies</li></ul><p><strong>Not aiming for</strong>:</p><ul><li>Security/Access Control – HL7 does not provide for the enforcement of a user’s security policies. In addition, HL7 does not specify a specific encryption method.</li><li>Privacy/Confidentiality – HL7 does not address this issue and makes no assumption about how the data will be used at the source or destination of a message.</li><li>Accountability/Audit trails – HL7 does not attempt to define possible transaction processing features needed in a user’s environment.</li></ul><p>Example 33:16</p><p>A non-Hispanic white female, 43 years old, visits the emergency department complaining of a stomach ache which she has had since February 15th. She was diagnosed with appendicitis and is admitted as an inpatient.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MSH|^~\&amp;||OTHER REG MED CTR^1234567890^NPI|||201102171658||ADT^A01^ADT_A01|201102171658076|P|2.3.1&lt;cr&gt;</span><br><span class="line">EVN||201102171658&lt;cr&gt; </span><br><span class="line">PID|1||FL01059711^^^^PI||~^^^^^^U|||F||2106-3^White^CDCREC|^^^FL^33821|||||||||||2186-5^Not Hispanic^CDCREC&lt;cr&gt;</span><br><span class="line">PV1||I||E||||||||||7|||||V20220217-00274^^^^VN|||||||||||||||||09||||||||201102171656&lt;cr&gt; </span><br><span class="line">PV2|||78907^ABDOMINAL PAIN, GENERALIZED^I9CDX&lt;cr&gt;</span><br><span class="line">OBX|1||8661-1^CHIEF COMPLAINT^LN||^^^^^^^^STOMACH ACHE&lt;cr&gt; </span><br><span class="line">OBX|2|NM|21612-7^AGE PATIENT QN REPORTED^LN||43|a^YEAR^UCUM|||||F|||201102171531&lt;cr&gt;</span><br><span class="line">OBX|3|NM|11289-6^BDY TEMP 1ST ENCTR ^LN||99.1|[degF]^FARENHEIT^UCUM||A|||F|||201102171658&lt;cr&gt;</span><br><span class="line">OBX|4|NM|59408-5^SAO2% BLDA PULSEOX^LN||95|%^PERCENT^UCUM||A|||F|||201102171658&lt;cr&gt;</span><br><span class="line">OBX|5|TS|11368-8^ILLNESS&#x2F;INJURY ONSET DATE&#x2F;TIME^LN||20110215||||||F|||201102171658&lt;cr&gt;</span><br><span class="line">DG1|1||78900^ABDMNAL PAIN UNSPCF SITE^I9CDX|||A&lt;cr&gt;</span><br><span class="line">DG1|2||5409^ACUTE APPENDICITIS NOS^I9CDX|||W&lt;cr&gt;</span><br></pre></td></tr></table></figure><h3 id="message-structure-3433">Message structure 34:33</h3><p>Message structure is well defined</p><ul><li>Header first (MSG)</li><li>Followed by one or more segments (can be nested)</li></ul><p>“A segment is a logical grouping of data fields”</p><table><thead><tr class="header"><th>Field Separator</th><th>|</th></tr></thead><tbody><tr class="odd"><td>Component Separator</td><td>^</td></tr><tr class="even"><td>Subcomponent Separator</td><td>&amp;</td></tr><tr class="odd"><td>Repetition Separator</td><td>~</td></tr><tr class="even"><td>Escape Character</td><td>\</td></tr></tbody></table><h4 id="some-message-types">Some message types</h4><table><thead><tr class="header"><th><strong>Type</strong></th><th><strong>Abbreviation</strong></th></tr></thead><tbody><tr class="odd"><td>Admission, Discharge, Transfer</td><td>ADT</td></tr><tr class="even"><td>General Clinical Order Message</td><td>OMG</td></tr><tr class="odd"><td>Imaging Order</td><td>OMI</td></tr><tr class="even"><td>Laboratory Order Message</td><td>OML</td></tr><tr class="odd"><td>Pharmacy/treatment Order Message</td><td>OMP</td></tr><tr class="even"><td>General Order Message</td><td>ORM</td></tr><tr class="odd"><td>Unsolicited Observation/Result</td><td>ORU</td></tr><tr class="even"><td>Unsolicited Vaccination Record Update</td><td>VXU</td></tr><tr class="odd"><td>Coded Element</td><td>CE</td></tr><tr class="even"><td>Composite Quality with units</td><td>CQ</td></tr><tr class="odd"><td>Extended Address</td><td>XAD</td></tr><tr class="even"><td>Extended Person Name</td><td>XPN</td></tr><tr class="odd"><td>Numeric</td><td>NM</td></tr><tr class="even"><td>String Data</td><td>ST</td></tr><tr class="odd"><td>Text Data</td><td>TX</td></tr></tbody></table><p><strong>Example</strong> 36:13</p><figure><img src="/images/HMS/11.png" alt="" /><figcaption>In this case, the segments translate more or less to SOAP</figcaption></figure><figure><img src="/images/HMS/12.png" alt="" /><figcaption>ADT 01 underlying structure</figcaption></figure><h4 id="the-issues-3938">The issues … 39:38</h4><ul><li>It looks like plug and play but is definitely not!</li><li>Different versions</li><li>Ambiguities</li><li>Customers might have needs that HL7 v2 does not handle<ul><li>Proper HL7 message might not exist for application</li><li>Proper HL7 segment might not exist for application</li></ul></li></ul><h3 id="hl7-v2.x-versus-v3.x-4332">HL7 v2.x versus v3.x 43:32</h3><p><strong>What is different between v2 and v3 ???</strong></p><p>The use case is the completion of a serum glucose laboratory result of 182 mg/dL authored by Howard H. Hippocrates. The laboratory test was ordered by Patricia Primary for patient Eve E. Everywoman.</p><h3 id="clinical-document-architecture-cda-4635">Clinical Document Architecture (CDA) 46:35</h3><ul><li><p>International standard from HL7</p></li><li><p>Standardization of clinical documents for storage and exchange</p></li><li><p>XML based</p></li><li><p><strong>Header</strong> is consistent across all clinical documents</p><ul><li>identifies and classifies the document, provides information on patient,provider, encounter, and authentication</li></ul></li><li><p><strong>Body</strong> contains narrative text / multimedia content (level 1),optionally augmented by coded equivalents (levels 2&amp;3)</p></li><li><p>CDA is being seen by many as the primary format for diagnostic reports and medical summaries</p><ul><li>Allows for a smooth transition from free text to coded content</li><li>Can reference external documents such as images, signals, films</li><li>Easy to display (simple style sheet)</li></ul></li><li><p>Only a content format, no definition of services or messages</p><ul><li>many options: HL7 v2, HL7 v3, FTP, E-Mail, HTTP, SOAP, etc.</li><li>but no real integration of document and communication protocol</li></ul></li></ul><h3 id="fhir-4750">FHIR 47:50</h3><ul><li><strong>F</strong>ast (to design and implement)</li><li><strong>H</strong>ealth</li><li><strong>I</strong>nteroperable</li><li><strong>R</strong>esources</li></ul><h4 id="why-fhir-is-better-according-to-fhir-4832">Why fhir is better (according to fhir)? 48:32</h4><p>FHIR offers many improvements over existing standards:</p><ul><li>A strong focus on implementation – fast and easy to implement (multiple developers have had simple interfaces working in a single day)</li><li>Multiple implementation libraries, many examples available to kick-start development</li><li>Specification is free for use with no restrictions</li><li>Interoperability out-of-the-box– base resources can be used as is, but can also be adapted for local requirements</li><li>Evolutionary development path from HL7 Version 2 and CDA – standards can co-exist and leverage each other</li><li>Strong foundation in Web standards– XML, JSON, HTTP, Atom, OAuth, etc.</li><li>Support for RESTful architectures and also seamless exchange of information using messages or documents</li><li>Concise and easily understood specifications</li><li>A Human-readable wire format for ease of use by developers</li><li>Solid ontology-based analysis with a rigorous formal mapping for correctness</li></ul><p><img src="/images/HMS/13.png" /></p><h2 id="encoding-data">Encoding data</h2><h3 id="snomed-ct-5847">SNOMED CT 58:47</h3><p>Systematized Nomenclature of Medicine: Clinical Terms</p><p><img src="/images/HMS/14.png" /></p><p>SNOMED CT is a <strong>reference terminology for clinical terms</strong> and consists of terms used in health and health care that range from abscess to zygote that can code contents belonging to all parts of a clinical record within the Subjective-Objective-Assessment-Plan (SOAP) paradigm.</p><p>A code system that enables machines to “interpret” clinical record contents.</p><p>22298006 means “myocardial infarc5on (MI)”</p><p>399211009 means “past history of MI”</p><ul><li><p>Dates back to 1965, when Systematized Nomenclature of Pathology (SNOP) was published.</p></li><li><p>Is released/updated twice a year</p><ul><li>New drugs, therapies, …</li></ul></li><li><p>SNOMED CT organizes concepts in a hierarchy: from general to specific</p></li><li><p>Each concept contains:</p><ul><li>a unique concept identifier.</li><li>A human readable description</li><li>A fully specified name (FSN)</li></ul></li><li><p>400K concepts, 1.2M descriptions, 2.4M links</p></li></ul><figure><img src="/images/HMS/15.png" alt="" /><figcaption>1:11:45</figcaption></figure><figure><img src="/images/HMS/16.png" alt="" /><figcaption>1:13:23</figcaption></figure><figure><img src="/images/HMS/17.png" alt="" /><figcaption>1:16:43</figcaption></figure><figure><img src="/images/HMS/18.png" alt="" /><figcaption>Practical use: query the hierarchy</figcaption></figure><h4 id="pros-and-cons-12528">Pros and Cons 1:25:28</h4><p>Pros:</p><ul><li>Machine readable concepts, hierarchies, links</li><li>Expressive power for expressing clinical reasoning</li><li>Multi language</li><li>Multiple inheritance</li></ul><p>Cons:</p><ul><li>Some problems have many different concepts, some areas are densely covered, others are not</li><li>Not possible to identify equivalence based on code automatically</li><li>Hard to learn</li><li>So large you cannot even read it properly</li></ul><h3 id="others-13014">Others 1:30:14</h3><ul><li><p>ICD-9 US for diagnosis and procedures</p><ul><li><p>14K codes</p></li><li><p>Codes 3 to 5 digits</p></li><li><p>Again a single hierarchy, under debate</p></li></ul></li><li><p>ICD-10</p><ul><li>69K codes</li><li>Codes up to 7 digits</li><li>Again a single hierarchy, under debate</li></ul></li><li><p>Added laterality</p></li><li><p>Some mappings from SNOMED CT to ICD10</p></li><li><p>ICD11 as a unifier?</p></li></ul><h2 id="recap">Recap</h2><ul><li><p>Snomed CT and ICD9 and beyond as standard terminologies</p></li><li><p>HL7 as a standard for information exchange</p></li><li><p>There are problems with what they specify</p></li><li><p>There are problems with what they do not specify</p></li><li><p>There are problems in making people use the standards in a proper way</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Analytics in Health Care and Connected Care </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>References, Recursion, and Lists</title>
      <link href="2021/02/25/2021-02-25-References,-Recursion,-and-Lists/"/>
      <url>2021/02/25/2021-02-25-References,-Recursion,-and-Lists/</url>
      
        <content type="html"><![CDATA[<h1 id="references-recursion-and-lists">References, Recursion, and Lists</h1><p><a href="http://fa20.datastructur.es/">Website</a></p><p><a href="https://www.youtube.com/playlist?list=PL8FaHk7qbOD7lprwG_xdIMLrwibZDi-Ll">Video</a></p><p><a href="https://github.com/Berkeley-CS61B/lectureCode-fa20/tree/master/lists1">Code</a></p><h2 id="primitive-types"><a href="https://www.youtube.com/watch?v=IRwO_wahcsU&amp;list=PL8FaHk7qbOD7lprwG_xdIMLrwibZDi-Ll&amp;index=1">Primitive Types</a></h2><h3 id="variables-in-java">Variables in Java</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Walrus a = <span class="keyword">new</span> Walrus(<span class="number">1000</span>, <span class="number">8.3</span>);</span><br><span class="line">Walrus b;</span><br><span class="line">b = a;</span><br><span class="line">b.weight = <span class="number">5</span>;</span><br><span class="line">System.out.println(a);</span><br><span class="line">System.out.println(b);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">weight: 5, tusk size: 8.30 </span></span><br><span class="line"><span class="comment">weight: 5, tusk size: 8.30</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>Will the change to b affect a?</p><ul><li><strong>Yes</strong></li><li>No</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line">y = x;</span><br><span class="line">x = <span class="number">2</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;x is: &quot;</span> + x);</span><br><span class="line">System.out.println(<span class="string">&quot;y is: &quot;</span> + y); </span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">x is: 2</span></span><br><span class="line"><span class="comment">y is: 5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>Will the change to x affect y?</p><ul><li>Yes</li><li><strong>No</strong></li></ul><h3 id="bits"><a href="https://www.youtube.com/watch?v=UJlfyXRm1ts&amp;list=PL8FaHk7qbOD7lprwG_xdIMLrwibZDi-Ll&amp;index=2">Bits</a></h3><p>Your computer stores information in “memory”.</p><ul><li>Information is stored in memory as a sequence of ones and zeros.<ul><li>Example: 72 stored as 01001000</li><li>Example: 205.75 stored as … 01000011 01001101 11000000 00000000</li><li>Example: The letter H stored as 01001000 (same as the number 72)</li><li>Example: True stored as 00000001</li></ul></li></ul><p>Each Java type has a different way to interpret the bits:</p><ul><li>8 primitive types in Java: byte, short, <strong>int</strong>, long, float, <strong>double</strong>, boolean, char</li></ul><h3 id="declaring-a-variable-simplified">Declaring a Variable (Simplified)</h3><p>When you declare a variable of a certain type in Java:</p><ul><li>Your computer sets aside exactly enough bits to hold a thing of that type.<ul><li>Example: Declaring an int sets aside a “box” of 32 bits.</li><li>Example: Declaring a double sets aside a box of 64 bits.</li></ul></li><li>Java creates an internal table that maps each variable name to a location.</li><li>Java does NOT write anything into the reserved boxes.<ul><li>For safety, Java will not let access a variable that is uninitialized.</li></ul></li></ul><p><img src="/images/CS61B/5.png" /></p><p><img src="/images/CS61B/6.png" /></p><p><img src="/images/CS61B/7.png" /></p><p><img src="/images/CS61B/8.png" /></p><p>We’ll use simplified box notation from here on out:</p><ul><li>Instead of writing memory box contents in binary, we’ll write them in human readable symbols.</li></ul><p><img src="/images/CS61B/9.png" /></p><h4 id="the-golden-rule-of-equals-groe">The Golden Rule of Equals (GRoE)</h4><p>Given variables y and x:</p><ul><li>y = x <strong>copies</strong> all the bits from x into y.</li></ul><h2 id="reference-types"><a href="https://www.youtube.com/watch?v=-eUMI5o31wY&amp;list=PL8FaHk7qbOD7lprwG_xdIMLrwibZDi-Ll&amp;index=3">Reference Types</a></h2><p>There are 8 primitive types in Java:</p><ul><li>byte, short, <strong>int</strong>, long, float, <strong>double</strong>, boolean, char</li></ul><p>Everything else, including arrays, is a <strong>reference type</strong>.</p><h3 id="class-instantiations">Class Instantiations</h3><p>When we instantiate an Object (e.g. Dog, Walrus, Planet):</p><ul><li>Java first allocates a box of bits for each instance variable of the class and fills them with a default value (e.g. 0, null).</li><li>The constructor then usually fills every such box with some other value</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Walrus</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> weight;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">double</span> tuskSize;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Walrus</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">double</span> ts)</span> </span>&#123;</span><br><span class="line">        weight = w;</span><br><span class="line">        tuskSize = ts;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/CS61B/10.png" /></p><p>Can think of new as returning the address of the newly created object</p><ul><li>Addresses in Java are 64 bits.</li><li>Example (rough picture): If object is created in memory location 2384723423, then new returns 2384723423.</li></ul><p><img src="/images/CS61B/11.png" /></p><h3 id="reference-type-variable-declarations">Reference Type Variable Declarations</h3><p>Java allocates exactly a box of size 64 bits, no matter what type of object.</p><p>These bits can be either set to:</p><ul><li>Null (all zeros).</li><li>The 64 bit “address” of a specific instance of that class (returned by <strong>new</strong>).</li></ul><p><img src="/images/CS61B/12.png" /></p><p>The 64 bit addresses are meaningless to us as humans, so we’ll represent:</p><ul><li>All zero addresses with “null”.</li><li>Non-zero addresses as arrows.</li></ul><p>This is sometimes called “box and pointer” notation.</p><p><img src="/images/CS61B/13.png" /></p><h3 id="reference-types-obey-the-golden-rule-of-equals">Reference Types Obey the Golden Rule of Equals</h3><p>Just as with primitive types, the equals sign copies the bits.</p><ul><li>In terms of our visual metaphor, we “copy” the arrow by making the arrow in the b box point at the same instance as a.</li></ul><p><img src="/images/CS61B/14.png" /></p><p><img src="/images/CS61B/15.png" /></p><p><img src="/images/CS61B/16.png" /></p><p><img src="/images/CS61B/17.png" /></p><h2 id="parameter-passing"><a href="https://www.youtube.com/watch?v=3hiXeB8rNKA&amp;list=PL8FaHk7qbOD7lprwG_xdIMLrwibZDi-Ll&amp;index=4">Parameter Passing</a></h2><h3 id="the-golden-rule-of-equals-and-parameter-passing">The Golden Rule of Equals (and Parameter Passing)</h3><p>Given variables b and a:</p><ul><li>b = a <strong>copies</strong> all the bits from a into b</li></ul><p>Passing parameters obeys the same rule: Simply <strong>copy the bits</strong> (also called pass by value) to the new scope.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">average</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a + b) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> x = <span class="number">5.5</span>;</span><br><span class="line">    <span class="keyword">double</span> y = <span class="number">10.5</span>;</span><br><span class="line">    <span class="keyword">double</span> avg = average(x, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr class="header"><th>average</th><th style="text-align: left;"></th><th style="text-align: left;">main</th><th style="text-align: left;"></th></tr></thead><tbody><tr class="odd"><td>a</td><td style="text-align: left;">5.5</td><td style="text-align: left;">x</td><td style="text-align: left;">5.5</td></tr><tr class="even"><td>b</td><td style="text-align: left;">10.5</td><td style="text-align: left;">y</td><td style="text-align: left;">10.5</td></tr></tbody></table><h3 id="the-golden-rule-summary">The Golden Rule: Summary</h3><p>There are 9 types of variables in Java:</p><ul><li>8 primitive types (byte, short, int, long, float, double, boolean, char).</li><li>The 9th type is references to Objects (an arrow). References may be null.</li></ul><p>In box-and-pointer notation, each variable is drawn as a labelled box and values are shown in the box.</p><ul><li>Addresses are represented by arrows to object instances.</li></ul><p><strong>The golden rule:</strong></p><ul><li>b = a <strong>copies the bits</strong> from a into b.</li><li><strong>Passing parameters</strong> copies the bits.</li></ul><h2 id="test-your-understanding-of-the-groe"><a href="https://www.youtube.com/watch?v=zGdNjPZxIdA&amp;list=PL8FaHk7qbOD7lprwG_xdIMLrwibZDi-Ll&amp;index=5">Test Your Understanding of the GRoE</a></h2><p>Does the call to doStuff(walrus, x) have an affect on walrus and/or main’s x?</p><ol type="1"><li>Neither will change.</li><li><strong>walrus will lose 100 lbs, but main’s x will not change.</strong></li><li>walrus will not change, but main’s x will decrease by 5.</li><li>Both will decrease.</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Walrus walrus = <span class="keyword">new</span> Walrus(<span class="number">3500</span>, <span class="number">10.5</span>);</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">9</span>;</span><br><span class="line">    doStuff(walrus, x);</span><br><span class="line">    System.out.println(walrus);</span><br><span class="line">    System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doStuff</span><span class="params">(Walrus W, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    W.weight = W.weight - <span class="number">100</span>;</span><br><span class="line">    x = x - <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/CS61B/18.png" /></p><h2 id="instantiation-of-arrays"><a href="https://www.youtube.com/watch?v=t57Xi1G__Vc&amp;list=PL8FaHk7qbOD7lprwG_xdIMLrwibZDi-Ll&amp;index=6">Instantiation of Arrays</a></h2><p>Arrays are also Objects. As we’ve seen, objects are (usually) instantiated using the <strong><em>new</em></strong> keyword.</p><ul><li>Planet p = new Planet(0, 0, 0, 0, 0, “blah.png”);</li><li>int[] x = new int[]{0, 1, 2, 95, 4};</li></ul><p>int[] a; <strong>←Declaration</strong></p><ul><li>Declaration creates a 64 bit box intended only for storing a reference to an int array. <strong>No object is instantiated</strong>.</li></ul><p>new int[]{0, 1, 2, 95, 4}; ← <strong>Instantiation (HW0 covers this syntax)</strong></p><ul><li>Instantiates a new Object, in this case an int array.</li><li>Object is anonymous!</li></ul><h3 id="assignment-of-arrays">Assignment of Arrays</h3><p>int[] a = new int[]{0, 1, 2, 95, 4}; ← Declaration, instantiation, and <strong>assignment</strong>.</p><ul><li>Creates a 64 bit box for storing an int array address. (declaration)</li><li>Creates a new Object, in this case an int array. (instantiation)</li><li>Puts the address of this new Object into the 64 bit box named a. (assignment)</li></ul><p>Note: Instantiated objects can be lost!</p><ul><li>If we were to reassign a to something else, we’d <strong>never</strong> be able to get the original Object back!</li></ul><p><img src="/images/CS61B/19.png" /></p><h2 id="intlist-and-linked-data-structures"><a href="https://www.youtube.com/watch?v=TzuAiXTZmYo&amp;list=PL8FaHk7qbOD7lprwG_xdIMLrwibZDi-Ll&amp;index=7">IntList and Linked Data Structures</a></h2><h3 id="intlist">IntList</h3><p>Let’s define an IntList as an object containing two member variables:</p><ul><li>int first;</li><li>IntList rest;</li></ul><p>And define two versions of the same method:</p><ul><li>size()</li><li>iterativeSize()</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntList</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> first;</span><br><span class="line"><span class="keyword">public</span> IntList rest;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">IntList</span><span class="params">(<span class="keyword">int</span> f, IntList r)</span> </span>&#123;</span><br><span class="line">first = f;</span><br><span class="line">rest = r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Return the size of the list using... recursion! */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (rest == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span> + <span class="keyword">this</span>.rest.size();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Return the size of the list using no recursion! */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">iterativeSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">IntList p = <span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">int</span> totalSize = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">totalSize += <span class="number">1</span>;</span><br><span class="line">p = p.rest;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> totalSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">IntList L = <span class="keyword">new</span> IntList(<span class="number">15</span>, <span class="keyword">null</span>);</span><br><span class="line">L = <span class="keyword">new</span> IntList(<span class="number">10</span>, L);</span><br><span class="line">L = <span class="keyword">new</span> IntList(<span class="number">5</span>, L);</span><br><span class="line"></span><br><span class="line">System.out.println(L.get(<span class="number">100</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="challenge">Challenge</h4><p>Write a method int get(int i) that returns the ith item in the list.</p><ul><li>For simplicity, OK to assume the item exists. ● Front item is the 0th item.</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Returns the ith item of this IntList. */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> rest.get(i - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="overview">Overview</h2><p><strong>Bits</strong> The computer stores information as memory, and represents this information using sequences of bits, which are either 0 or 1.</p><p><strong>Primitives</strong> Primitives are representations of information. There are 8 primitive types in Java: byte, short, int, long, float, double, boolean, and char. Each primitive is represented by a certain number of bits. For example, ints are 32 bit primitives, while bytes are 8 bit primitives.</p><p><strong>Declaring Primitives</strong> When we declare a variable to be a primitive (i.e. <code>int x;</code>), we set aside enough memory space to hold the bits (in this case, 32). We can think of this as a box holding the bits. Java then maps the variable name to this box. Say we have a line of code <code>int y = x;</code> where <code>x</code> was defined before. Java will copy the bits inside the <code>x</code> box into the bits in the <code>y</code> box.</p><p><strong>Creating Objects</strong> When we create an instance of a class using the <code>new</code> keyword, Java creates boxes of bits for each field, where the size of each box is defined by the type of each field. For example, if a Walrus object has an <code>int</code> variable and a <code>double</code> variable, then Java will allocate two boxes totaling 96 bits (32 + 64) to hold both variables. These will be set to a default value like 0. The constructor then comes in and fills in these bits to their appropriate values. The return value of the constructor will return the location in memory where the boxes live, usually an address of 64 bits. This address can then be stored in a variable with a “reference type.”</p><p><strong>Reference Types</strong> If a variable is not a primitive type, then it is a reference type. When we declare object variables, we use reference type variables to store the location in memory of where an object is located. Remember this is what the constructor returns. A reference type is always a box of size 64 bits. Note that the variable does not store the entire object itself!</p><p><strong>Golden Rule of Equals</strong> For primitives, the line <code>int y = x</code> copies the bits inside the <code>x</code> box into the <code>y</code> box. For reference types, we do the exact same thing. In the line <code>Walrus newWalrus = oldWalrus;</code>, we copy the 64 bit address in the <code>oldWalrus</code> box into the <code>newWalrus</code> box. So we can think of this golden rule of equals (GroE) as: when we assign a value with equals, we are just copying the bits from one memory box to another!</p><p><strong>Parameter Passing</strong> Say we have a method <code>average(double a, double b)</code>. This method takes two doubles as parameters. Parameter passing also follows the GRoE, i.e. when we call this method and pass in two doubles, we copy the bits from those variables into the parameter variables.</p><p><strong>Array Instantiation.</strong> Arrays are also Objects, and are also instantiated using the <code>new</code> keyword. This means declaring an array variable (i.e. <code>int[] x;</code>) will create a 64-bit reference type variable that will hold the location of this array. Of course, right now, this box contains the value null, as we have not created the array yet. The <code>new</code> keyword for arrays will create the array and return the location of this array in memory. So by saying <code>int[] x = new int[]&#123;0, 1, 2, 3, 4&#125;;</code>, we set the location of this newly created array to the variable x. Note that the size of the array was specified when the array was created, and cannot be changed!</p><p><strong>IntLists.</strong> Using references, we recursively defined the <code>IntList</code> class. <code>IntLists</code> are lists of integers that can change size (unlike arrays), and store an arbitrarily large number of integers. Writing a <code>size</code> helper method can be done with either recursion or iteration.</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structures </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MSA, profiles and motif detection</title>
      <link href="2021/02/25/2021-02-25-MSA,-profiles-and-motif-detection/"/>
      <url>2021/02/25/2021-02-25-MSA,-profiles-and-motif-detection/</url>
      
        <content type="html"><![CDATA[<h1 id="msa-profiles-and-motif-detection">MSA, profiles and motif detection</h1><p><a href="https://vub-my.sharepoint.com/personal/wim_vranken_vub_be/_layouts/15/onedrive.aspx?id=%2Fpersonal%2Fwim%5Fvranken%5Fvub%5Fbe%2FDocuments%2FOpnamen%2FAlgorithms%20in%20bioinfo%5Fcomputational%20biology%2D20210225%5F100412%2DMeeting%20Recording%2Emp4&amp;parent=%2Fpersonal%2Fwim%5Fvranken%5Fvub%5Fbe%2FDocuments%2FOpnamen&amp;originalPath=aHR0cHM6Ly92dWItbXkuc2hhcmVwb2ludC5jb20vOnY6L2cvcGVyc29uYWwvd2ltX3ZyYW5rZW5fdnViX2JlL0VmNHlJT19TaE1GTnJGdDB1VlMxSnNvQlJlOV9heXRYanVKeGZqSGtJQ2UxSHc_cnRpbWU9TnpDSFk1cloyRWc">Video</a></p><h2 id="multiple-sequence-alignment-2542">Multiple sequence alignment? 25:42</h2><p>An alignment of 2 sequences is an hypothesis that is supported or rejected by the score one obtains for the alignment, but…</p><ul><li>the score does not guarantee that there really is a common ancestor</li><li>no guarantee that the elements are correctly aligned, only that the alignment is the one with maximum similarity</li></ul><p><strong>We can reduce this uncertainty by aligning additional sequences</strong></p><p>A <strong>multiple sequence alignment (MSA)</strong> algorithm performs this task and can more clearly show:</p><ul><li>The similarity between positions</li><li>The <strong>conservation</strong> of certain amino acids within a family of homologous proteins</li></ul><h3 id="why-msa-3014">Why MSA? 30:14</h3><ul><li><p>Improve the alignment between two sequences</p><p><img src="/images/ADVMB/1011170.png" /></p></li><li><p>Conserved regions provide information on the similarities in structure and function</p><p><img src="/images/ADVMB/1011171.png" /></p></li><li><p>Yet since the methods can only approximate the optimal solution, there can be differences between methods</p><p><img src="/images/ADVMB/1011172.png" /></p></li></ul><h3 id="many-msa-methods">Many MSA methods</h3><p><img src="/images/ADVMB/1011173.png" /></p><h3 id="the-msa-problem-3552">The MSA problem 35:52</h3><p>Determining the alignment between N sequences is a hard problem = <strong>Combinatorial optimisation problem (COP)</strong></p><p>To solve this COP we need provide two systems:</p><ol type="1"><li><strong>Calculating the score of the alignment</strong></li><li><strong>Algorithm that finds the MSA with the optimal (or close to optimal) score</strong></li></ol><h3 id="the-scoring-system-3628">The scoring system 36:28</h3><p>How can we calculate the score of an MSA?</p><ul><li>The total score: S(m)=∑ S(m<sub>i</sub>)<ul><li>So the assumption is made that the score of one column (i) is independent of the other columns</li><li>Sum-of-pairs or <strong>SP</strong></li></ul></li><li>The score of column i: <strong>S(m<sub>i</sub>)=∑ s(m<sup>k</sup><sub>i</sub>, m<sup>l</sup><sub>i</sub>)</strong><ul><li><strong>m<sup>k</sup><sub>i</sub></strong> is a residue in the sequence k in column i</li><li><strong>s(m<sup>k</sup><sub>i</sub>, m<sup>l</sup><sub>i</sub>)</strong> The score from the substitution matrix</li></ul></li></ul><p>SP and its alternatives (column scores)</p><p><img src="/images/ADVMB/1011174.png" /></p><p>Minimum entropy: <strong>S(m<sub>i</sub>)=∑ <em>f<sup>k</sup><sub>i</sub>ln(f<sup>k</sup><sub>i</sub>)</em></strong></p><p>Maximum likelihood</p><h3 id="methods-3-4020">Methods 3 40:20</h3><p><strong>Well-known methods:</strong></p><ul><li>An optimised version of the standard pairwise <strong>DP algorithms</strong>; limited applicability but exact</li><li><strong>Progressive alignment</strong> (the CLUSTAL system)</li></ul><p><img src="/images/ADVMB/1011175.png" /></p><ul><li><strong>Iterative improvement</strong> methods for multiple sequence alignment (the SAGA system)</li></ul><h4 id="progressive-alignment-problems-4525">Progressive alignment problems 45:25</h4><p>This method suffers from at least 2 problems:</p><ul><li><strong>The local minimum problem</strong><ul><li>New sequences are added on top of existing alignments.</li><li><em>Hence any early errors (misaligned regions) propagate to the complete alignment (due to divergence between sequences)</em></li></ul></li><li><strong>The choice of alignment parameters</strong><ul><li>One scoring matrix, a gap-open and a gap-extension value</li><li><em>This works often for highly related sequences, yet starts to fail seriously as soon as sequences diverge</em></li></ul></li></ul><h4 id="iterative-improvement-4622">Iterative improvement 46:22</h4><p><img src="/images/ADVMB/1011176.png" /></p><h2 id="profiles-5704">Profiles 57:04</h2><p>Using a <strong>profile</strong> we can better detect similarities between distantly related proteins.</p><p>Profiles store general information properties of a MSA :</p><ol type="1"><li>Frequency information concerning the residues in each column of the MSA</li><li>The evolutionary importance of every residue in that position</li></ol><p><strong>Position specific scoring matrix (PSSM)</strong></p><h3 id="how-to-construct-a-pssm-5756">How to construct a PSSM ? 57:56</h3><p><strong>Step 1</strong>: determine the frequencies for each amino acid b in every column u for N<sub>seq</sub> aligned sequences</p><p><img src="/images/ADVMB/1011177.png" /></p><p><img src="/images/ADVMB/1011178.png" /></p><p>A profile stores for <strong>each column</strong> in the MSA, the frequency multiplied by the alignment score with every other AA.</p><p><img src="/images/ADVMB/1011179.png" /></p><p><img src="/images/ADVMB/1011180.png" /></p><p><img src="/images/ADVMB/1011181.png" /></p><p>The score m<sub>u,a</sub> is the score for aligning a residue a with the column u</p><ul><li>We can therefore use the same DP algorithm as before to align a <strong>new</strong> sequence to an <strong>existing</strong> MSA (profile)</li></ul><p>The biggest problem in creating profiles is that the number of sequences can be too small, resulting in q<sub>u,a</sub> of zero, and as a consequence not every amino acids is present in each column</p><ul><li>log 0 =-∞</li></ul><p>As a result the alignment can not be made using the log-formula (see PAM and BLOSUM discussion)</p><ul><li><strong>→PSEUDOCOUNTS</strong></li></ul><p><img src="/images/ADVMB/1011182.png" /></p><figure><img src="/images/ADVMB/1011183.png" alt="" /><figcaption><a href="%5BUniProtKB/Swiss-Prot%20Release%202021_01%20statistics%20(expasy.org)%5D(https://web.expasy.org/docs/relnotes/relstat.html)">Calculating p<sub>a</sub></a></figcaption></figure><p><img src="/images/ADVMB/1011184.png" /></p><p><img src="/images/ADVMB/1011185.png" /></p><p>Once the profile is determined one can also derive a <strong>consensus sequence</strong> which contains for every column the amino acid with the highest score m<sub>u,a</sub></p><p><img src="/images/ADVMB/1011186.png" /></p><p><img src="/images/ADVMB/1011187.png" /></p><figure><img src="/images/ADVMB/1011188.png" alt="" /><figcaption>Profiles, sequence logo 11</figcaption></figure><h3 id="aligning-to-a-profile-13317">Aligning to a profile 1:33:17</h3><p>Simply use either Needleman-Wunsch (L3) or Smith-Waterman (L3) to make the alignment</p><p><img src="/images/ADVMB/1011189.png" /></p><p>But now use the information in the PSSM to calculate the score (<em>linear gap penalty</em>):</p><p><img src="/images/ADVMB/1011190.png" /></p><p>Use in your project the following formula for calculating the values in your PSSM</p><p><img src="/images/ADVMB/1011191.png" /></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computational Biology and Bioinformatics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Exercises for Proofs of Propositional logic</title>
      <link href="2021/02/25/2021-02-25-Exercises-for-Proofs-of-Propositional-logic/"/>
      <url>2021/02/25/2021-02-25-Exercises-for-Proofs-of-Propositional-logic/</url>
      
        <content type="html"><![CDATA[<h1 id="exercises-for-lecture-03-proofs-of-propositional-logic">Exercises for Lecture 03 –Proofs of Propositional logic</h1><h2 id="proofs">Proofs</h2><h3 id="question-1">Question 1</h3><p>Prove each of these equivalences by substitution, one step at a time.</p><ul><li><ol type="a"><li>((p ∨ q) ∧ (¬p ∧ ¬q)) ≡ FALSE</li></ol></li></ul><h4 id="solution">Solution</h4><p><img src="/images/FOCS/6417395.png" /></p><h3 id="question-2">Question 2</h3><p>Using rules of inference with no substitutions, prove that</p><ul><li>(p ∧ (p → q) ∧ (q → r)) → r</li></ul><p>Use the rules-of-inference format. Name the rule of inference that is used at each step.</p><p>Hint: The top-level operator in the formula here is a conditional (the -* symbol). Begin by writing everything to the left of that symbol (within the large parentheses) on the first line of the proof, in brackets and indented, as an assumption. Leave some space and put the entire formula that you are to prove as the last line, not in brackets and not indented. Try to get an indented r on the next-to-last line. Of course, the lines before it must justify putting it there.</p><h4 id="solution-1">Solution</h4><p>First, about the general strategy... The statement we need to prove is of the form</p><ul><li>φ → ψ</li></ul><p>This means our proof will most likely of the form</p><p><img src="/images/FOCS/6417396.png" /></p><p>now let us fill in φ and ψ:</p><p><img src="/images/FOCS/6417397.png" /></p><p>Now... The first rule (1) in our proof is a conjunction (what we assumed). It is always a good idea to break it down in pieces.</p><p><img src="/images/FOCS/6417398.png" /></p><p>Now... from the fact that p holds and p implies q we would like to derive q. Similarly we want to find r. Modus ponens is the rule that does this! This completes our proof:</p><p><img src="/images/FOCS/6417399.png" /></p><h2 id="translation-of-natural-language-to-first-order-logic">Translation of natural language to first-order logic</h2><p>Translate the following sentences into first-order logic (over suitable symbols):</p><ol type="1"><li>John and Peter are both not happy.</li><li>John and Peter are not both happy.</li><li>A necessary condition for John to be happy is that Peter is happy.</li><li>All men like all vegetarians.</li><li>All men except butchers like all vegetarians.</li><li>Some man is a butcher and a vegetarian.</li><li>No man is both a butcher and a vegetarian.</li><li>No man likes a woman who is vegetarian.</li><li>Not all men that are vegetarians are happy.</li><li>Only men like butchers.</li><li>Some butcher likes all vegetarians.</li><li>John likes all vegetarians.</li><li>John does not like any vegetarian.</li><li>All butchers are not vegetarians.</li><li>For every butcher there is a vegetarian who likes him.</li></ol><h3 id="solution-2">Solution:</h3><ol type="1"><li>¬Happy(John) ∧ ¬Happy(Peter)</li><li>¬(Happy(John) ∧ Happy(Peter))</li><li>Happy(John) ⇒ Happy(Peter)</li><li>∀x, y : (Man(x) ∧ V eg(y)) ⇒ Likes(x, y)</li><li>∀x, y : (Man(x) ∧ ¬Butcher(x) ∧ Veg(y)) ⇒ Likes(x, y)</li><li>∃x : Man(x) ∧ Butcher(x) ∧ Veg(x)</li><li>¬∃x : Man(x) ∧ Butcher(x) ∧ Veg(x)</li><li>∀x, y : (Man(x) ∧ Woman(y) ∧ Veg(y)) ⇒ ¬Likes(x, y)</li><li>¬∀x : Men(x) ∧ Veg(x) ⇒ Happy(x)</li><li>∀x : (∃y : Butcher(y) ∧ Likes(x, y)) ⇒ Man(x)</li><li>∃x : Butcher(x) ∧ ∀y : (Veg(y) ⇒ Likes(x, y)</li><li>∀y : Veg(y) ⇒ Likes(John, y)</li><li>∀y : Veg(y) ⇒ ¬Likes(John, y)</li><li>∀x : Butcher(x) ⇒ ¬Veg(x)</li><li>∀x : Butcher(x) ⇒ ∃y : Veg(y) ∧ Likes(y, x)</li></ol>]]></content>
      
      
      <categories>
          
          <category> Exercises </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fundamentals of Computer Science </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Control and Environments</title>
      <link href="2021/02/25/2021-02-25-Control-and-Environments/"/>
      <url>2021/02/25/2021-02-25-Control-and-Environments/</url>
      
        <content type="html"><![CDATA[<h1 id="control-and-environments">Control and Environments</h1><p><a href="https://www.youtube.com/watch?v=IYD_FXvK72E">Video</a></p><h2 id="control">Control</h2><p><strong>Control structures</strong> direct the flow of a program using logical statements. For example, conditionals (if-elif-else) allow a program to skip sections of code, and iteration (while), allows a program to repeat a section.</p><h3 id="if-statements">If statements</h3><p><strong>Conditional statements</strong> let programs execute different lines of code depending on certain conditions. Let’s review the if-elif-else syntax.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> &lt;conditional expression&gt;:</span><br><span class="line">    &lt;suite of statements&gt;</span><br><span class="line"><span class="keyword">elif</span> &lt;conditional expression&gt;:</span><br><span class="line">    &lt;suite of statements&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    &lt;suite of statements&gt;</span><br></pre></td></tr></table></figure><p>Recall the following points:</p><ul><li>The else and elif clauses are optional, and you can have any number of elif clauses.</li><li>A <strong>conditional expression</strong> is an expression that evaluates to either a truthy value (True, a non-zero integer, etc.) or a falsy value (False, 0, None, "", [], etc.).</li><li>Only the <strong>suite</strong> that is indented under the first if/elif whose <strong>conditional expression</strong> evaluates to a true value will be executed.</li><li>If none of the <strong>conditional expressions</strong> evaluate to a true value, then the else suite is executed. There can only be one else clause in a conditional statement</li></ul><h3 id="boolean-operators">Boolean Operators</h3><p>Python also includes the <strong>boolean operators</strong> and, or, and not. These operators are used to combine and manipulate boolean values</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">not</span> <span class="literal">True</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>-<span class="number">1</span> <span class="keyword">and</span> <span class="number">0</span> <span class="keyword">and</span> <span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">False</span> <span class="keyword">or</span> <span class="number">9999</span> <span class="keyword">or</span> <span class="number">1</span>/<span class="number">0</span></span><br><span class="line"><span class="number">9999</span></span><br></pre></td></tr></table></figure><ul><li><code>not</code> returns the opposite truth value of the following expression (so not will always return either True or False).</li><li><code>and</code> evaluates expressions in order and stops evaluating (short-circuits) once it reaches the first false value, and then returns it. If all values evaluate to a true value, the last value is returned.</li><li><code>or</code> short-circuits at the first true value and returns it. If all values evaluate to a false value, the last value is returned.</li></ul><h4 id="questions"><a href="https://www.youtube.com/watch?v=E8VPVCbyfiE&amp;list=PLx38hZJ5RLZfg6jvEBBtjc5fnc5BclyEb&amp;index=2&amp;t=0s">Questions</a></h4><p>Alfonso will only wear a jacket outside if it is below 60 degrees or it is raining.</p><p>Write a function that takes in the current temperature and a boolean value telling if it is raining and returns <em>True</em> if Alfonso will wear a jacket and <em>False</em> otherwise. First, try solving this problem using an if statement.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wears_jacket_with_if</span>(<span class="params">temp, raining</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; wears_jacket_with_if(90, False)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; wears_jacket_with_if(40, False)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; wears_jacket_with_if(100, True)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> temp &lt; <span class="number">60</span> <span class="keyword">or</span> raining:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>Note that we’ll either return True or False based on a single condition, whose truthiness value will also be either True or False. Knowing this, try to write this function using a single line</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wears_jacket</span>(<span class="params">temp, raining</span>):</span></span><br><span class="line">    <span class="keyword">return</span> temp &lt; <span class="number">60</span> <span class="keyword">or</span> raining</span><br></pre></td></tr></table></figure><h3 id="while-loops">While loops</h3><p>To repeat the same statements multiple times in a program, we can use iteration. In Python, one way we can do this is with a <strong>while loop</strong>.</p><p>As long as evaluates to a true value, will continue to be executed. The conditional clause gets evaluated each time the body finishes executing.</p><h4 id="questions-1"><a href="https://www.youtube.com/watch?v=Fiw0f5yuQgo&amp;vq=hd1080&amp;t=39m34s">Questions</a></h4><p>What is the result of evaluating the following code?</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span>(<span class="params">x</span>):</span></span><br><span class="line">print(<span class="string">&quot;here!&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> x * x</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">so_slow</span>(<span class="params">num</span>):</span></span><br><span class="line">x = num</span><br><span class="line"><span class="keyword">while</span> x &gt; <span class="number">0</span>:</span><br><span class="line">x = x + <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> x / <span class="number">0</span></span><br><span class="line">square(so_slow(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><p><strong>Result</strong>: Infinite loop because x will always be greater than 0; the x / 0 is never executed. We also know that here! is never printed since the operand so slow(5) must be evaluated before function square(x) can be called.</p><p><a href="https://www.youtube.com/watch?v=_EsWkCytavI&amp;list=PLx38hZJ5RLZfg6jvEBBtjc5fnc5BclyEb&amp;index=2"><strong>Tutorial</strong></a>: Write a function that returns True if a positive integer n is a prime number and False otherwise.</p><p>A prime number n is a number that is not divisible by any numbers other than 1 and n itself. For example, 13 is prime, since it is only divisible by 1 and 13, but 14 is not, since it is divisible by 1, 2, 7, and 14.</p><p>Hint: use the % operator: x % y returns the remainder of x when divided by y.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_prime</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_prime(10)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_prime(7)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    k = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> k &lt; n:</span><br><span class="line">        <span class="keyword">if</span> n % k == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>Alternatively, the while loop’s conditional expression could ensure that k is less than or equal to the square root of n.</p><h2 id="environment-diagrams">Environment Diagrams</h2><p>An <strong>environment diagram</strong> is a model we use to keep track of all the variables that have been defined and the values they are bound to. We will be using this tool throughout the course to understand complex programs involving several different assignments and function calls</p><p><img src="/images/CS61A/0606070.png" /></p><p>Remember that programs are simply a set of statements, or instructions—so drawing diagrams that represent these programs also involves following sets of instructions! Let’s dive in.</p><h3 id="assignment-statements">Assignment Statements</h3><p><strong>Assignment statements</strong>, such as x = 3, define variables in programs. To execute one in an environment diagram, record the variable name and the value:</p><ol type="1"><li>Evaluate the expression on the right side of the = sign</li><li>Write the variable name and the expression’s value in the current frame</li></ol><h3 id="def-statements">def Statements</h3><p><strong>def statements</strong> create function objects and bind them to a name. To diagram <strong>def</strong> statements, record the function name and bind the function object to the name. It’s also important to write the parent frame of the function, which is where the function is defined.</p><p><strong>Very important note</strong>: Assignments for def statements use pointers to functions, which can have different behaviour than primitive assignments</p><ol type="1"><li>Draw the function object to the right-hand-side of the frames, denoting the intrinsic name of the function, its parameters, and the parent frame (e.g. func square(x) [parent = Global].</li><li>Write the function name in the current frame and draw an arrow from the name to the function object.</li></ol><h3 id="call-expressions">Call Expressions</h3><p><strong>Call expressions</strong>, such as square(2), apply functions to arguments. When executing call expressions, we create a new frame in our diagram to keep track of local variables:</p><ol type="1"><li>Evaluate the operator, which should evaluate to a function.</li><li>Evaluate the operands from left to right.</li><li>Draw a new frame, labelling it with the following:<ul><li>A unique index (f1, f2, f3, ...)</li><li>The intrinsic name of the function, which is the name of the function object itself. For example, if the function object is func square(x) [parent=Global], the intrinsic name is square.</li><li>The parent frame ([parent=Global])</li></ul></li><li>Bind the formal parameters to the argument values obtained in step 2 (e.g. bind x to 3).</li><li>Evaluate the body of the function in this new frame until a return value is obtained. Write down the return value in the frame</li></ol>]]></content>
      
      
      <categories>
          
          <category> Discussions </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Structure and Interpretation of Computer Programs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Higher-Order Functions</title>
      <link href="2021/02/25/2021-02-25-Higher-Order-Functions/"/>
      <url>2021/02/25/2021-02-25-Higher-Order-Functions/</url>
      
        <content type="html"><![CDATA[<h1 id="higher-order-functions">Higher-Order Functions</h1><p><a href="https://inst.eecs.berkeley.edu/~cs61a/fa20/">Website</a></p><p><a href="https://www.youtube.com/watch?v=SsznmbwosLQ&amp;list=PL6BsET-8jgYXeefqDPnwLJ03jyw5-KKTT">Video</a></p><p><a href="http://composingprograms.com/pages/16-higher-order-functions.html">Textbook</a></p><h2 id="iteration-example"><a href="https://www.youtube.com/watch?v=pveIuZT0GJE&amp;list=PL6BsET-8jgYXeefqDPnwLJ03jyw5-KKTT&amp;index=2">Iteration Example</a></h2><h3 id="the-fibonacci-sequence">The Fibonacci Sequence</h3><p><img src="/images/CS61A/0606060.png" /></p><p>"k" is set to keep track the index</p><p>Is this alternative definition of fib the same or different from original fib?</p><figure><img src="/images/CS61A/0606061.png" alt="" /><figcaption>Yes!</figcaption></figure><h2 id="designing-functions"><a href="https://www.youtube.com/watch?v=FzbVzGnVBB4&amp;list=PL6BsET-8jgYXeefqDPnwLJ03jyw5-KKTT&amp;index=3">Designing Functions</a></h2><h3 id="describing-functions">Describing Functions</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return X * X.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Compute the n-th Fibonacci number for N&gt;= 1&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>function's <strong><em>domain</em></strong> is the set of all <strong>inputs</strong> it might possibly take as arguments.</p><ul><li>x is a number</li><li>n is a integer greater than or equal to 1</li></ul><p>A function's <strong><em>range</em></strong> is the set of <strong>output</strong> values it might possibly return.</p><ul><li>square returns a nonnegative real number</li><li>returns a Fibonacci number</li></ul><p>A pure function's <strong><em>behaviour</em></strong> is the <strong>relationship</strong> it creates between input and output.</p><ul><li>square returns the square of x</li><li>return value is the n-th Fibonacci number</li></ul><h3 id="a-guide-to-designing-function">A Guide to Designing Function</h3><ul><li>Give each function exactly one job, but make it apply to many related situations</li></ul><table><thead><tr class="header"><th>&gt;&gt;&gt; round(1.23)</th><th>&gt;&gt;&gt; round(1.23, 1)</th><th>&gt;&gt;&gt; round(1.23, 0)</th><th>&gt;&gt;&gt; round(1.23, 5)</th></tr></thead><tbody><tr class="odd"><td>1</td><td>1.2</td><td>1</td><td>1.23</td></tr></tbody></table><ul><li><p>Don’t repeat yourself (DRY): Implement a process just once, but execute it many times</p></li><li><p>Define functions generally.</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># DRY</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">same_length</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return whether positive integers a and b have the same number of digits.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; same_length(50, 70)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; same_length(50, 100)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; same_length(1000, 100000)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> digits(a) == digits(b)</span><br><span class="line">    <span class="comment"># a_digits = 0</span></span><br><span class="line">    <span class="comment"># while a &gt; 0:</span></span><br><span class="line">    <span class="comment">#     a = a // 10</span></span><br><span class="line">    <span class="comment">#     a_digits = a_digits + 1</span></span><br><span class="line">    <span class="comment"># b_digits = 0</span></span><br><span class="line">    <span class="comment"># while b &gt; 0:</span></span><br><span class="line">    <span class="comment">#     b = b // 10</span></span><br><span class="line">    <span class="comment">#     b_digits = b_digits + 1</span></span><br><span class="line">    <span class="comment"># return a_digits == b_digits</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">digits</span>(<span class="params">a</span>):</span></span><br><span class="line">    a_digits = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> a &gt; <span class="number">0</span>:</span><br><span class="line">        a = a // <span class="number">10</span></span><br><span class="line">        a_digits = a_digits + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> a_digits</span><br></pre></td></tr></table></figure><h2 id="generalization"><a href="https://www.youtube.com/watch?v=UlXvz-34Me0&amp;list=PL6BsET-8jgYXeefqDPnwLJ03jyw5-KKTT&amp;index=4">Generalization</a></h2><h3 id="generalizing-patterns-with-arguments">Generalizing Patterns with Arguments</h3><p>Regular geometric shapes relate length and area.</p><figure><img src="/images/CS61A/0606062.png" alt="" /><figcaption>Finding common structure allows for shared implementation</figcaption></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Generalizing patterns using arguments</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> pi</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area_square</span>(<span class="params">r</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> r &gt; <span class="number">0</span>, <span class="string">&#x27;A length must be positive&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> r * r</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area_circle</span>(<span class="params">r</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> r &gt; <span class="number">0</span>,</span><br><span class="line">    <span class="keyword">return</span> r * r * pi</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area_hexagon</span>(<span class="params">r</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> r &gt; <span class="number">0</span>,</span><br><span class="line">    <span class="keyword">return</span> r * r * <span class="number">3</span> *sqrt(<span class="number">3</span>) / <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;Generalization&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area</span>(<span class="params">r, shape_constant</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> r &gt; <span class="number">0</span>,</span><br><span class="line">    <span class="keyword">return</span> r * r * shape_constant</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area_square</span>(<span class="params">r</span>):</span></span><br><span class="line">    <span class="keyword">return</span> area(r, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area_circle</span>(<span class="params">r</span>):</span></span><br><span class="line">    <span class="keyword">return</span> area(r, pi)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area_hexagon</span>(<span class="params">r</span>):</span></span><br><span class="line">    <span class="keyword">return</span> area(r, <span class="number">3</span> *sqrt(<span class="number">3</span>) / <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="generalizing-over-computational-processes">Generalizing Over Computational Processes</h3><p>The common structure among functions may be a computational process, rather than a number.</p><p><img src="/images/CS61A/0606063.png" /></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Functions as arguments</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_naturals</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Sum the first N natural numbers.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_naturals(5)</span></span><br><span class="line"><span class="string">    15</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    total, k = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> k &lt;= n:</span><br><span class="line">        total, k = total + k, k + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_cubes</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Sum the first N cubes of natural numbers.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_cubes(5)</span></span><br><span class="line"><span class="string">    225</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    total, k = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> k &lt;= n:</span><br><span class="line">        total, k = total + <span class="built_in">pow</span>(k, <span class="number">3</span>), k + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">identity</span>(<span class="params">k</span>):</span></span><br><span class="line">    <span class="keyword">return</span> k</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cube</span>(<span class="params">k</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(k, <span class="number">3</span>) </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">summation</span>(<span class="params">n, term</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Sum the first N terms of a sequence.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; summation(5, cube)</span></span><br><span class="line"><span class="string">    225</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    total, k = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> k &lt;= n:</span><br><span class="line">        total, k = total + term(k), k + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> mul</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pi_term</span>(<span class="params">k</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">8</span> / mul(k * <span class="number">4</span> - <span class="number">3</span>, k * <span class="number">4</span> - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">summation(<span class="number">1000000</span>, pi_term)</span><br></pre></td></tr></table></figure><figure><img src="/images/CS61A/0606064.png" alt="" /><figcaption>Summation Example</figcaption></figure><h2 id="functions-as-return-values"><a href="https://www.youtube.com/watch?v=Q9ztlG4ezVs&amp;list=PL6BsET-8jgYXeefqDPnwLJ03jyw5-KKTT&amp;index=5">Functions as Return Values</a></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local function definitions; returning functions</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_adder</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a function that takes one argument K and returns K + N.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_three = make_adder(3)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_three(4)</span></span><br><span class="line"><span class="string">    7</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">adder</span>(<span class="params">k</span>):</span></span><br><span class="line">        <span class="keyword">return</span> k + n</span><br><span class="line">    <span class="keyword">return</span> adder</span><br><span class="line"></span><br><span class="line">make_adder(<span class="number">2000</span>)(<span class="number">20</span>)</span><br></pre></td></tr></table></figure><p>Functions defined <strong>within other function bodies</strong> are <strong>bound to names in a <em>local</em> frame</strong></p><figure><img src="/images/CS61A/0606065.png" alt="" /><figcaption>Locally Defined Functions</figcaption></figure><figure><img src="/images/CS61A/0606066.png" alt="" /><figcaption>Call Expressions as Operator Expressions</figcaption></figure><h3 id="the-purpose-of-higher-order-functions">The purpose of Higher-Order Functions</h3><p><strong>Functions are first-class</strong>: Functions can be manipulated as values in our programming languages.</p><p><strong>Higher-order functions</strong>: A function that takes a function as an argument value or returns a function as a return value.</p><p>Higher order functions;</p><ul><li>Express general methods of computation</li><li>Remove repetition from programs</li><li>Separate concerns among functions</li></ul><h2 id="lambda-expressions"><a href="https://www.youtube.com/watch?v=vCeNq_P3akI&amp;list=PL6BsET-8jgYXeefqDPnwLJ03jyw5-KKTT&amp;index=6">Lambda Expressions</a></h2><p><img src="/images/CS61A/0606067.png" /></p><p>Lambda expressions are not common in Python, but important in general</p><p>Lambda expressions in Python cannot contain statements at all!</p><h4 id="lambda-expressions-versus-def-statements">Lambda Expressions Versus Def Statements</h4><p><img src="/images/CS61A/0606068.png" /></p><h2 id="return"><a href="https://www.youtube.com/watch?v=QIh6CyrWhvw&amp;list=PL6BsET-8jgYXeefqDPnwLJ03jyw5-KKTT&amp;index=7">Return</a></h2><h3 id="return-statements">Return Statements</h3><p>A return statement completes the evaluation of a call expression and provides its value:</p><p>f(x) for user-defined function f: switch to a new environment;</p><p>execute f's body <strong>return</strong> statement within f: switch back to the previous environment;</p><p>f(x) now has a value Only one return statement is ever executed while executing the body of a function</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Return </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">end</span>(<span class="params">n, d</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print the final digits of N in reverse order until D is found.    </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; end(34567, 5)</span></span><br><span class="line"><span class="string">    7</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        last, n = n % <span class="number">10</span>, n // <span class="number">10</span></span><br><span class="line">        print(last)</span><br><span class="line">        <span class="keyword">if</span> d == last:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the smallest non-negative integer x for which f(x) is a true value.&quot;&quot;&quot;</span></span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> f(x):</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">        x += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_three</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return whether x is three.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; search(is_three)</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x == <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">positive</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;A function that is 0 until square(x)-100 is positive.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; search(positive)</span></span><br><span class="line"><span class="string">    11</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(<span class="number">0</span>, square(x) - <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inverse</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a function g(y) that returns x such that f(x) == y.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sqrt = inverse(square)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sqrt(16)</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> y: search(<span class="keyword">lambda</span> x: f(x) == y)</span><br></pre></td></tr></table></figure><h2 id="control"><a href="https://www.youtube.com/watch?v=iMyeU4QKl8Q&amp;list=PL6BsET-8jgYXeefqDPnwLJ03jyw5-KKTT&amp;index=8">Control</a></h2><h3 id="if-statements-and-call-expressions">If Statements and Call Expressions</h3><p><img src="/images/CS61A/0606069.png" /></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Control</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">if_</span>(<span class="params">c, t, f</span>):</span></span><br><span class="line">    <span class="keyword">if</span> c:</span><br><span class="line">        t</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        f</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">real_sqrt</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the real part of the square root of x.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; real_sqrt(4)</span></span><br><span class="line"><span class="string">    2.0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; real_sqrt(-4)</span></span><br><span class="line"><span class="string">    0.0</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> x &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> sqrt(x)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.0</span></span><br><span class="line">    <span class="comment"># if_(x &gt; 0, sqrt(x), 0.0)</span></span><br></pre></td></tr></table></figure><h2 id="control-expressions"><a href="https://www.youtube.com/watch?v=DDcYvnqUCNA&amp;list=PL6BsET-8jgYXeefqDPnwLJ03jyw5-KKTT&amp;index=9">Control Expressions</a></h2><h3 id="logical-operators">Logical Operators</h3><p>To evaluate the expression <strong>&lt;left&gt;</strong> and <strong>&lt;right&gt;</strong>:</p><ol type="1"><li>Evaluate the subexpression &lt;left&gt;.</li><li>If the result is a false value <strong>v</strong>, then the expression evaluates to <strong>v</strong>.</li><li>Otherwise, the expression evaluates to the value of the subexpression <strong>&lt;right&gt;</strong>.</li></ol><p>To evaluate the expression <strong>&lt;left&gt;</strong> or <strong>&lt;right&gt;</strong> :</p><ol type="1"><li>Evaluate the subexpression <strong>&lt;left&gt;</strong>.</li><li>If the result is a true value <strong>v</strong>, then the expression evaluates to <strong>v</strong>.</li><li>Otherwise, the expression evaluates to the value of the subexpression <strong>&lt;right&gt;</strong>.</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Control Expressions</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">has_big_sqrt</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return whether x has a big square root.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_big_sqrt(1000)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_big_sqrt(100)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_big_sqrt(0)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_big_sqrt(-1000)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x &gt; <span class="number">0</span> <span class="keyword">and</span> sqrt(x) &gt; <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reasonable</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Is N small enough that 1/N can be represented?</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; reasonable(100)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; reasonable(0)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; reasonable(-100)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; reasonable(10 ** 1000)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> n == <span class="number">0</span> <span class="keyword">or</span> <span class="number">1</span>/n != <span class="number">0.0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="conditional-expressions">Conditional Expressions</h3><p>A conditional expression has the form</p><p><strong>&lt;consequent&gt;</strong> if <strong>&lt;predicate&gt;</strong> else <strong>&lt;alternative&gt;</strong></p><p>Evaluation rule:</p><ol type="1"><li>Evaluate the <strong>&lt;predicate&gt;</strong> expression.</li><li>If it's a true value, the value of the whole expression is the value of the <strong>&lt;consequent&gt;</strong>.</li><li>Otherwise, the value of the whole expression is the value of the <strong>&lt;alternative&gt;</strong>.</li></ol>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Structure and Interpretation of Computer Programs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Introduction</title>
      <link href="2021/02/24/2021-02-24-Introduction/"/>
      <url>2021/02/24/2021-02-24-Introduction/</url>
      
        <content type="html"><![CDATA[<h1 id="introduction">Introduction</h1><h2 id="machine-learning">Machine Learning</h2><ul><li>Grew out of work in AI</li><li>New capability for computers</li></ul><p>Examples:</p><ul><li><p>Database mining Large datasets from growth of automation/web.</p><ul><li>E.g., Web click data, medical records, biology, engineering</li></ul></li><li><p>Applications can’t program by hand.</p><ul><li>E.g., Autonomous helicopter, handwriting recognition, most of Natural Language Processing (NLP), Computer Vision.</li></ul></li><li><p>Self-customizing programs</p><ul><li>E.g., Amazon, Netflix product recommendations</li></ul></li><li><p>Understanding human learning (brain, real AI).</p></li></ul><h2 id="what-is-machine-learning">What is machine learning?</h2><ul><li>Term “Machine Learning” coined by Arthur Samuel in 1959.<ul><li>Samuel Checkers-playing Program</li><li><strong><em>Field of study that gives computers the ability to learn without being explicitly programmed.</em></strong></li></ul></li><li>Common definition (by Tom Mitchell):<ul><li><em>"A computer program is said to learn from <strong>experience E</strong> with respect to some <strong>task T</strong> and some <strong>performance measure P</strong>, if its performance on T, as measured by P, improves with experience E. "</em><ul><li>Example: playing checkers.<ul><li>E = the experience of playing many games of checkers</li><li>T = the task of playing checkers.</li><li>P = the probability that the program will win the next game.</li></ul></li></ul></li><li><strong><em>Machine Learning is the study of computer algorithms that improve automatically through experience</em></strong></li></ul></li><li>Subfield of Artificial Intelligence (AI)<ul><li>The hottest subfield - reinvigorated interest in AI due to deep learning!</li></ul></li></ul><p><strong>Question</strong>:</p><p>Suppose your email program watches which emails you do or do not mark as spam, and based on that learns how to better filter spam. What is the task T in this setting?</p><ul><li><strong><em>Classifying emails</em> as spam or not spam.</strong></li><li><del>Watching you <strong>label emails (E)</strong> as spam or not spam.</del></li><li><del>The number (or fraction) of emails <strong>correctly classified as spam/not spam (P)</strong>.</del></li><li><del>None of the above—this is not a machine learning problem</del>.</li></ul><h2 id="taxonomy-of-machine-learning">Taxonomy of machine learning</h2><ul><li>Supervised learning</li><li>Unsupervised learning</li><li>Others: Reinforcement learning, recommender systems.</li></ul><figure><img src="/images/CS229/4.png" alt="" /><figcaption>A simplistic view bases on tasks</figcaption></figure><h2 id="supervised-learning">Supervised learning</h2><h4 id="house-price-prediction">House Price Prediction</h4><p>Suppose we have a dataset giving the living areas and prices of 47 houses from Portland, Oregon:</p><table><thead><tr class="header"><th style="text-align: right;">Living area (feet<sup>2</sup> )</th><th style="text-align: left;">Price (1000$s)</th></tr></thead><tbody><tr class="odd"><td style="text-align: right;">2104</td><td style="text-align: left;">400</td></tr><tr class="even"><td style="text-align: right;">1600</td><td style="text-align: left;">330</td></tr><tr class="odd"><td style="text-align: right;">2400</td><td style="text-align: left;">369</td></tr><tr class="even"><td style="text-align: right;">1416</td><td style="text-align: left;">232</td></tr><tr class="odd"><td style="text-align: right;">3000</td><td style="text-align: left;">540</td></tr><tr class="even"><td style="text-align: right;">...</td><td style="text-align: left;">...</td></tr></tbody></table><p>We can plot this data:</p><p><img src="/images/CS229/1.png" /></p><p>To establish notation for future use, we’ll use <em>x</em><sup>(i)</sup> to denote the “input” variables (living area in this example), also called input <strong>features</strong>, and <em>y</em><sup>(i)</sup> to denote the “output” or <strong>target</strong> variable that we are trying to predict (price). A pair (<em>x</em><sup>(i)</sup> , <em>y</em><sup>(i)</sup> ) is called a <strong>training example</strong>, and the dataset that we’ll be using to learn—a list of n training examples {(<em>x</em><sup>(i)</sup> , <em>y</em><sup>(i)</sup>); i = 1, . . . , n}—is called a <strong>training set</strong>.</p><p><em>Note that the superscript “(i)” in the notation is simply an index into the training set, and has nothing to do with exponentiation.</em></p><ul><li><strong>Given</strong>: a dataset that contains 𝑛 samples</li><li><strong>Task</strong>: if a residence has 𝑥 square feet, predict its price?</li></ul><p><img src="/images/CS229/17.png" /></p><p>Let's say you have a friend who owns a house that is say 750 square feet, and they are hoping to sell the house, and they want to know how much they can get for the house. So, how can the learning algorithm help you?</p><ul><li>One thing a learning algorithm might be want to do is put a straight line through the data, also fit a straight line to the data. Based on that, it looks like maybe their house can be sold for maybe about $150,000.</li><li>But maybe this isn't the only learning algorithm you can use, and there might be a better one. For example, instead of fitting a straight line to the data, we might decide that it's better to fit a quadratic function, or a second-order polynomial to this data. If you do that and make a prediction, maybe they can sell the house for closer to $200,000.</li></ul><p>One of the things we'll talk about later is how to choose, and how to decide, do you want to fit a straight line to the data? Or do you want to fit a quadratic function to the data? There's no fair picking whichever one gives your friend the better house to sell. But each of these would be a fine example of a learning algorithm.</p><p><strong>Supervised Learning</strong>: “right answers” given</p><p><strong>Regression</strong>: Predict continuous valued output (price)</p><h4 id="breast-cancer-malignant-benign">Breast cancer (malignant, benign)</h4><p>Suppose a friend who tragically has a breast tumor, the Machine Learning question is, can you estimate what is the probability, what's the chance that a tumor as malignant versus benign?</p><p>To introduce a bit more terminology, this is an example of a classification problem. The term classification refers to the fact that we're trying to predict a discrete value output zero or one, malignant or benign.</p><p>It turns out that in <strong>classification problems</strong>, sometimes you can have more than two possible values for the output.</p><h3 id="more-features">More features</h3><p>We will also use X denote the space of input values, and Y the space of output values. To describe the supervised learning problem slightly more formally, our goal is, given a training set, to learn a function h : <em>X</em> → <em>Y</em> so that h(x) is a “good” predictor for the corresponding value of y. For historical reasons, this function h is called a <strong>hypothesis</strong>. Seen pictorially, the process is therefore like this:</p><p><img src="/images/CS229/2.png" /></p><ul><li>Suppose we also know the lot size</li><li>Task: find a function that maps</li><li>Dataset: (x<sup>(1) </sup>,y<sup>(1)</sup>), …,(x<sup>(n) </sup>,y<sup>(n)</sup>) where x<sup>(i) </sup>= (x<sub>1</sub><sup>(i)</sup>, x<sub>2</sub><sup>(i)</sup>)</li><li>“Supervision” refers to y<sup>(1)</sup>,…, y<sup>(n)</sup></li></ul><p><img src="/images/CS229/3.png" /></p><h3 id="high-dimensional-features">High-dimensional Features</h3><ul><li>x ∈ <strong>R</strong><sup>d</sup> for large d</li></ul><p><img src="/images/CS229/5.png" /></p><h3 id="regression-vs-classification">Regression vs Classification</h3><ul><li>regression: if y ∈ <strong>R</strong> is a continuous variable<ul><li>e.g., price prediction</li></ul></li><li>classification: the label is a discrete variable<ul><li>e.g., the task of predicting the types of residence</li></ul></li></ul><p><img src="/images/CS229/6.png" /></p><p>Question:</p><p>You’re running a company, and you want to develop learning algorithms to address each of two problems.</p><ul><li>Problem 1: You have a large inventory of identical items. You want to predict how many of these items will sell over the next 3 months.</li><li>Problem 2: You’d like software to examine individual customer accounts, and for each account decide if it has been hacked/compromised.</li></ul><p>Should you treat these as classification or as regression problems?</p><ul><li><del>Treat both as classification problems.</del></li><li><del>Treat problem 1 as a classification problem, problem 2 as a regression problem.</del></li><li><strong>Treat problem 1 as a regression problem, problem 2 as a classification problem.</strong></li><li><del>Treat both as regression problems.</del></li></ul><h3 id="overview">Overview</h3><p>In supervised learning, we are given a data set and already know what our correct output should look like, having the idea that there is a relationship between the input and the output.</p><p>Supervised learning problems are categorized into "regression" and "classification" problems. In a regression problem, we are trying to predict results within a continuous output, meaning that we are trying to map input variables to some continuous function. In a classification problem, we are instead trying to predict results in a discrete output. In other words, we are trying to map input variables into discrete categories.</p><p><strong>Example 1:</strong></p><p>Given data about the size of houses on the real estate market, try to predict their price. Price as a function of size is a continuous output, so this is a regression problem.</p><p>We could turn this example into a classification problem by instead making our output about whether the house "sells for more or less than the asking price." Here we are classifying the houses based on price into two discrete categories.</p><p><strong>Example 2</strong>:</p><ul><li>Regression - Given a picture of a person, we have to predict their age on the basis of the given picture</li><li>Classification - Given a patient with a tumor, we have to predict whether the tumor is malignant or benign.</li></ul><h3 id="applications">Applications</h3><h4 id="supervised-learning-in-computer-vision">Supervised Learning in Computer Vision</h4><ul><li><strong>Image Classification</strong><ul><li>x= raw pixels of the image, y= the main object</li></ul></li></ul><figure><img src="/images/CS229/7.png" alt="" /><figcaption>ImageNet Large Scale Visual Recognition Challenge.</figcaption></figure><ul><li><strong>Object localization and detection</strong><ul><li>x= raw pixels of the image, y= the bounding boxes</li></ul></li></ul><figure><img src="/images/CS229/8.png" alt="" /><figcaption>ImageNet Large Scale Visual Recognition Challenge.</figcaption></figure><h4 id="supervised-learning-in-natural-language-processing">Supervised Learning in Natural Language Processing</h4><ul><li>Machine translation</li></ul><p><img src="/images/CS229/9.png" /></p><h2 id="unsupervised-learning">Unsupervised Learning</h2><ul><li>Dataset contains <strong>no labels</strong>: x<sup>(1)</sup>, …x<sup>(n)</sup></li><li><strong>Goal</strong> (vaguely-posed): to find interesting structures in the data</li></ul><p><img src="/images/CS229/10.png" /></p><p>For each example in Supervised Learning, we were told explicitly what is the so-called right answer, whether it's benign or malignant.</p><p>In Unsupervised Learning, we're given data that looks different than data that looks like this that doesn't have any labels or that all has the same label or really no labels.</p><h3 id="clustering">Clustering</h3><p><img src="/images/CS229/11.png" /></p><p>We're given the data set and we're not told what to do with it and we're not told what each data point is. Can you find some structure in the data?</p><p>Given this data set, an Unsupervised Learning algorithm might decide that the data lives in two different clusters. And so there's one cluster and there's a different cluster.</p><p>And yes, Supervised Learning algorithm may break these data into these two separate clusters. So this is called a clustering algorithm. And this turns out to be used in many places.</p><p>One example where clustering is used is in Google News. What Google News does is everyday it goes and looks at tens of thousands or hundreds of thousands of new stories on the web and it groups them into cohesive news stories.</p><p><img src="/images/CS229/12.png" alt="Clustering Genes" /> Here's an example of DNA microarray data. The idea is put a group of different individuals and for each of them, you measure how much they do or do not have a certain gene.</p><p>Technically you measure how much certain genes are expressed. So these colors, red, green, gray and so on, they show the degree to which different individuals do or do not have a specific gene. And what you can do is then run a clustering algorithm to group individuals into different categories or into different types of people.</p><p>You can automatically find structure in the data from the you automatically cluster the individuals into these types that I don't know in advance. Because we're not giving the algorithm the right answer for the examples in my data set, this is Unsupervised Learning. It's used to organize large computer clusters.</p><p><strong>Example:</strong></p><ul><li>Organize computing clusters</li><li>Social network analysis</li><li>Market segmentation</li><li>Astronomical data analysis</li></ul><h3 id="cocktail-party-problem">Cocktail party problem</h3><p>You can imagine there's a party, room full of people, all sitting around, all talking at the same time and there are all these overlapping voices because everyone is talking at the same time, and it is almost hard to hear the person in front of you.</p><p>So maybe at a cocktail party with two people,two people talking at the same time, and it's a somewhat small cocktail party. And we're going to put two microphones in the room so there are microphones, and because these microphones are at two different distances from the speakers, each microphone records a different combination of these two speaker voices.</p><p><img src="/images/CS229/18.png" /></p><p>Maybe speaker one is a little louder in microphone one and maybe speaker two is a little bit louder on microphone 2 because the 2 microphones are at different positions relative to the 2 speakers, but each microphone would cause an overlapping combination of both speakers' voices.</p><p>So we can do, is take these two microphone recorders and give them to an Unsupervised Learning algorithm called the cocktail party algorithm, and tell the algorithm to find structure in this data for you.</p><p>What the algorithm will do is listen to these audio recordings and separate out these two audio sources that were being added or being summed together to form other recordings.</p><p><strong>Cocktail party Algorithm</strong>: <span class="math display">\[[W,s,v] = svd((repmat(sum(x.^*x,1),size(x,1),1).^*x)^*x&#39;);\]</span></p><h3 id="question">Question</h3><p>Of the following examples, which would you address using an unsupervised learning algorithm?</p><ul><li><del>Given email labeled as spam/not spam, learn a spam filter.</del></li><li><strong>Given a set of news articles found on the web, group them into set of articles about the same story.</strong></li><li><strong>Given a database of customer data, automatically discover market segments and group customers into different market segments</strong>.</li><li><del>Given a dataset of patients diagnosed as either having diabetes or not, learn to classify new patients as having diabetes or not.</del></li></ul><h3 id="latent-semantic-analysis-lsa">Latent Semantic Analysis (LSA)</h3><p><img src="/images/CS229/13.png" /></p><h3 id="word-embeddings">Word Embeddings</h3><p>Represent words by vectors</p><p><img src="/images/CS229/14.png" /></p><h3 id="clustering-words-with-similar-meanings-hierarchically">Clustering Words with Similar Meanings (Hierarchically)</h3><p><img src="/images/CS229/15.png" /></p><h3 id="overview-1">Overview</h3><p>Unsupervised learning allows us to approach problems with little or no idea what our results should look like. We can derive structure from data where we don't necessarily know the effect of the variables.</p><p>We can derive this structure by clustering the data based on relationships among the variables in the data.</p><p>With unsupervised learning there is no feedback based on the prediction results.</p><p><strong>Example:</strong></p><ul><li>Clustering: Take a collection of 1,000,000 different genes, and find a way to automatically group these genes into groups that are somehow similar or related by different variables, such as lifespan, location, roles, and so on.</li><li>Non-clustering: The "Cocktail Party Algorithm", allows you to find structure in a chaotic environment. (i.e. identifying individual voices and music from a mesh of sounds at a <a href="https://en.wikipedia.org/wiki/Cocktail_party_effect">cocktail party</a>).</li></ul><h2 id="reinforcement-learning">Reinforcement Learning</h2><p>The algorithm can collect data interactively</p><ul><li>Data collection<ul><li>Try the strategy and collect feedbacks</li></ul></li><li>Training<ul><li>Improve the strategy based on the feedbacks</li></ul></li></ul><p><img src="/images/CS229/16.png" /></p><h2 id="other-toolstopics-in-this-course">Other Tools/Topics In This Course</h2><ul><li>Deep learning basics</li><li>Introduction to learning theory<ul><li>Bias variance tradeoff</li><li>Feature selection</li><li>ML advice</li></ul></li><li>Broader aspects of ML<ul><li>Robustness/fairness</li></ul></li></ul><h2 id="quiz">Quiz</h2><p>A computer program is said to learn from experience E with respect to some task T and some performance measure P if its performance on T, as measured by P, improves with experience E.</p><p>Suppose we feed a learning algorithm a lot of historical weather data, and have it learn to predict weather. In this setting, what is T?</p><ul><li><del>None of these.</del></li><li><del>The process of the algorithm examining a large amount of historical weather data.</del></li><li><strong>The weather prediction task.</strong></li><li><del>The probability of it correctly predicting a future date's weather.</del></li></ul><p>Suppose you are working on weather prediction, and use a learning algorithm to predict tomorrow's temperature (in degrees Centigrade/Fahrenheit). Would you treat this as a classification or a regression problem?</p><ul><li><del>Classification</del></li><li><strong>Regression</strong></li></ul><p>Suppose you are working on stock market prediction. You would like to predict whether or not a certain company will declare bankruptcy within the next 7 days (by training on data of similar companies that had previously been at risk of bankruptcy). Would you treat this as a classification or a regression problem?</p><ul><li><strong>Classification</strong></li><li><del>Regression</del></li></ul><p>Which of these is a reasonable definition of machine learning?</p><ul><li><strong>Machine learning is the field of study that gives computers the ability to learn without being explicitly programmed.</strong></li><li><del>Machine learning is the field of allowing robots to act intelligently.</del></li><li><del>Machine learning learns from labelled data.</del></li><li><del>Machine learning is the science of programming computers.</del></li></ul><p>Some of the problems below are best addressed using a supervised learning algorithm, and the others with an unsupervised learning algorithm. Which of the following would you apply supervised learning to? (Select all that apply.) In each case, assume some appropriate dataset is available for your algorithm to learn from.</p><ul><li><del>Take a collection of 1000 essays written on the US Economy, and find a way to automatically group these essays into a small number of groups of essays that are somehow "similar" or "related".</del><ul><li>This is an unsupervised learning/clustering problem (similar to the Google News example in the lectures).</li></ul></li><li><del>Given a large dataset of medical records from patients suffering from heart disease, try to learn whether there might be different clusters of such patients for which we might tailor separate treatements.</del><ul><li>This can be addressed using an unsupervised learning, clustering, algorithm, in which we group patients into different clusters.</li></ul></li><li><strong>Given genetic (DNA) data from a person, predict the odds of him/her developing diabetes over the next 10 years.</strong><ul><li>This can be addressed as a supervised learning, classification, problem, where we can learn from a labelled dataset comprising different people's genetic data, and labels telling us if they had developed diabetes.</li></ul></li><li><strong>Given 50 articles written by male authors, and 50 articles written by female authors, learn to predict the gender of a new manuscript's author (when the identity of this author is unknown).</strong><ul><li>This can be addressed as a supervised learning, classification, problem, where we learn from the labelled data to predict gender.</li></ul></li><li><strong>In farming, given data on crop yields over the last 50 years, learn to predict next year's crop yields.</strong><ul><li>This can be addresses as a supervised learning problem, where we learn from historical data (labelled with historical crop yields) to predict future crop yields.</li></ul></li><li><del>Examine a large collection of emails that are known to be spam email, to discover if there are sub-types of spam mail.</del><ul><li>This can addressed using a clustering (unsupervised learning) algorithm, to cluster spam mail into sub-types.</li></ul></li><li><strong>Examine a web page, and classify whether the content on the web page should be considered "child friendly" (e.g., non-pornographic, etc.) or "adult."</strong><ul><li>This can be addressed as a supervised learning, classification, problem, where we can learn from a dataset of web pages that have been labelled as "child friendly" or "adult."</li></ul></li><li><strong>Examine the statistics of two football teams, and predicting which team will win tomorrow's match (given historical data of teams' wins/losses to learn from).</strong><ul><li>This can be addressed using supervised learning, in which we learn from historical records to make win/loss predictions.</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Defining and Using Classes</title>
      <link href="2021/02/24/2021-02-24-Defining-and-Using-Classes/"/>
      <url>2021/02/24/2021-02-24-Defining-and-Using-Classes/</url>
      
        <content type="html"><![CDATA[<h1 id="defining-and-using-classes">Defining and Using Classes</h1><p><a href="http://fa20.datastructur.es/">Website</a></p><p><a href="https://www.youtube.com/playlist?list=PL8FaHk7qbOD6XopUFumnRzFCgYXshKex3">Video</a></p><p><a href="https://github.com/Berkeley-CS61B/lectureCode-fa20/tree/master/intro2">Code</a></p><p><a href="http://fa20.datastructur.es/materials/hw/hw0/hw0">Homework</a></p><h2 id="compilation"><a href="https://www.youtube.com/watch?v=Y2vC_SW00TE&amp;list=PL8FaHk7qbOD6XopUFumnRzFCgYXshKex3&amp;index=1">Compilation</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The standard tools for executing Java programs use a <strong>two step</strong> process:</p><ul><li>This is not the only way to run Java code.</li></ul><p><img src="/images/CS61B/1.png" /></p><p>Why make a class file at all?</p><ul><li>.class file has been type checked. Distributed code is safer.</li><li>.class files are ‘simpler’ for machine to execute. Distributed code is faster.</li><li>Minor benefit: Protects your intellectual property. No need to give out source.</li></ul><p><em>Note: .class files are easily reversible into similar looking Java files.</em></p><h2 id="defining-and-instantiating-classes"><a href="https://www.youtube.com/watch?v=xDPUHRjsgA4&amp;list=PL8FaHk7qbOD6XopUFumnRzFCgYXshKex3&amp;index=2">Defining and Instantiating Classes</a></h2><h3 id="dog">Dog</h3><p>As we saw last time:</p><ul><li>Every method (a.k.a. function) is associated with some class.</li><li>To run a class, we must define a main method.<ul><li>Not all classes have a main method!</li></ul></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">makeNoise</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Bark!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Can’t be run directly, since there is no main method.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DogLauncher</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Dog.makeNoise();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Calls a method from another class. </span></span><br><span class="line"><span class="comment">Can think of this as a class that tests out the Dog class.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="object-instantiation"><a href="https://www.youtube.com/watch?v=Hsor-iZ6-a4&amp;list=PL8FaHk7qbOD6XopUFumnRzFCgYXshKex3&amp;index=3"><strong>Object Instantiation</strong></a></h3><p>Not all dogs are equal!</p><p>We could create a separate class for every single dog out there, but this is going to get redundant in a hurry.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MayaTheDog</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">makeNoise</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;arooooooooooooooo!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YapsterTheDog</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">makeNoise</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;awawawwwawwa awawaw&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Classes can contain not just functions (a.k.a. methods), but also data</p><ul><li>For example, we might add a size variable to each Dog.</li></ul><p>Classes can be instantiated as objects.</p><ul><li>We’ll create a single Dog class, and then create instances<sup>[1]</sup> of this Dog.</li><li>The class provides a blueprint that all Dog objects will follow.</li></ul><p>[1]: These instances are also called ‘objects</p><h3 id="defining-a-typical-class-terminology"><a href="https://www.youtube.com/watch?v=ewMzZBy1RO4&amp;list=PL8FaHk7qbOD6XopUFumnRzFCgYXshKex3&amp;index=4">Defining a Typical Class (Terminology)</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> weightInPounds;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Instance variable. </span></span><br><span class="line"><span class="comment">    Can have as many of these as you want.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String binomen = <span class="string">&quot;Canis familiaris&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** One integer constructor for dogs. */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(<span class="keyword">int</span> startingWeight)</span> </span>&#123;</span><br><span class="line">weightInPounds = startingWeight;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Constructor (similar to a method,but not a method). </span></span><br><span class="line"><span class="comment">    Determines how to instantiate the class.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeNoise</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (weightInPounds &lt; <span class="number">10</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;yip!&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (weightInPounds &lt; <span class="number">30</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;bark.&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;woooof!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Non-static method, a.k.a.Instance Method.</span></span><br><span class="line"><span class="comment">    Idea: If the method is going to be invoked by an instance of the class (as in the next slide), then it should be non-static.</span></span><br><span class="line"><span class="comment">    Roughly speaking: If the method needs to use “my instance variables”, the method must be non-static.  </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Dog <span class="title">maxDog</span><span class="params">(Dog d1, Dog d2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (d1.weightInPounds &gt; d2.weightInPounds) &#123;</span><br><span class="line"><span class="keyword">return</span> d1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> d2;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DogLauncher</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Dog smallDog; <span class="comment">//Declaration of a Dog variable.</span></span><br><span class="line">        <span class="keyword">new</span> Dog(<span class="number">20</span>); <span class="comment">// Instantiation of the Dog class as a Dog Object</span></span><br><span class="line">        smallDog = <span class="keyword">new</span> Dog(<span class="number">5</span>); <span class="comment">//Instantiation and Assignment.</span></span><br><span class="line">        Dog hugeDog = <span class="keyword">new</span> Dog(<span class="number">150</span>); <span class="comment">//Declaration, Instantiation and Assignment.</span></span><br><span class="line">        smallDog.makeNoise();</span><br><span class="line">        hugeDog.makeNoise(); <span class="comment">//Invocation of the 150 lb Dog’s makeNoise method.</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        The dot notation means that we want to use a method or variable belonging to hugeDog, or more succinctly, a member of hugeDog</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="arrays-of-objects"><a href="https://www.youtube.com/watch?v=GgoszMH1ak8&amp;list=PL8FaHk7qbOD6XopUFumnRzFCgYXshKex3&amp;index=5">Arrays of Objects</a></h3><p>To create an array of objects:</p><ul><li>First use the <strong>new</strong> keyword to create the array.</li><li>Then use <strong>new</strong> again for each object that you want to put in the array.</li></ul><p>Example:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Dog[] dogs = <span class="keyword">new</span> Dog[<span class="number">2</span>]; <span class="comment">// Creates an array of Dogs of size 2.</span></span><br><span class="line">dogs[<span class="number">0</span>] = <span class="keyword">new</span> Dog(<span class="number">8</span>);</span><br><span class="line">dogs[<span class="number">1</span>] = <span class="keyword">new</span> Dog(<span class="number">20</span>);</span><br><span class="line">dogs[<span class="number">0</span>].makeNoise(); <span class="comment">// Yipping occurs.</span></span><br></pre></td></tr></table></figure><p>After code runs:</p><p><img src="/images/CS61B/2.png" /></p><h2 id="static-vs.-instance-members"><a href="https://www.youtube.com/watch?v=l8Q6NXbAwNk&amp;list=PL8FaHk7qbOD6XopUFumnRzFCgYXshKex3&amp;index=6">Static vs. Instance Members</a></h2><h3 id="static-vs.-non-static">Static vs. Non-static</h3><p>Key differences between static and non-static (a.k.a. instance) methods:</p><ul><li>Static methods are invoked using the class name, e.g. Dog.makeNoise();</li><li>Instance methods are invoked using an instance name, e.g. maya.makeNoise();</li><li>Static methods can’t access “my” instance variables, because there is no “me”.</li></ul><p><img src="/images/CS61B/3.png" /></p><h3 id="why-static-methods">Why Static Methods?</h3><p>Some classes are never instantiated. For example, Math.</p><ul><li><p>x = Math.round(5.6);</p></li><li><p>Much nicer than:</p><ul><li><p>Math m = new Math();</p><p>x = m.round(x);</p></li></ul></li></ul><p>Sometimes, classes may have a mix of static and non-static methods, e.g.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Dog <span class="title">maxDog</span><span class="params">(Dog d1, Dog d2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (d1.weightInPounds &gt; d2.weightInPounds) &#123;</span><br><span class="line">        <span class="keyword">return</span> d1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="static-vs.-non-static-1">Static vs. Non-static</h3><p>A class may have a mix of static and non-static <strong><em>members</em></strong>.</p><ul><li>A variable or method defined in a class is also called a member of that class.</li><li>Static members are accessed using class name, e.g. Dog.binomen.</li><li>Non-static members <strong>cannot</strong> be invoked using class name: <del>Dog.makeNoise()</del></li><li>Static methods must access instance variables via a specific instance, e.g. d1.</li></ul><p><img src="/images/CS61B/4.png" /></p><h3 id="question"><a href="https://www.youtube.com/watch?v=8Gq-8mVbyFU&amp;list=PL8FaHk7qbOD6XopUFumnRzFCgYXshKex3&amp;index=7">Question</a></h3><p>Will this program compile? If so, what will it print?</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DogLoop</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Dog smallDog = <span class="keyword">new</span> Dog(<span class="number">5</span>);</span><br><span class="line">        Dog mediumDog = <span class="keyword">new</span> Dog(<span class="number">25</span>);</span><br><span class="line">        Dog hugeDog = <span class="keyword">new</span> Dog(<span class="number">150</span>);</span><br><span class="line">        </span><br><span class="line">        Dog[] manyDogs = <span class="keyword">new</span> Dog[<span class="number">4</span>];</span><br><span class="line">        manyDogs[<span class="number">0</span>] = smallDog;</span><br><span class="line">        manyDogs[<span class="number">1</span>] = hugeDog;</span><br><span class="line">        manyDogs[<span class="number">2</span>] = <span class="keyword">new</span> Dog(<span class="number">130</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; manyDogs.length) &#123;</span><br><span class="line">            Dog.maxDog(manyDogs[i], mediumDog).makeNoise();</span><br><span class="line">            i = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.youtube.com/watch?v=Osuy8UEH03M&amp;list=PL8FaHk7qbOD6XopUFumnRzFCgYXshKex3&amp;index=8">Answer</a> : Use the <a href="https://cscircles.cemc.uwaterloo.ca//java_visualize/#">visualizer</a> to see the solution.</p><h2 id="public-static-void-mainstring-args"><a href="https://www.youtube.com/watch?v=1ViQUHlRoyM&amp;list=PL8FaHk7qbOD6XopUFumnRzFCgYXshKex3&amp;index=9">public static void main(String[] args)</a></h2><p>One Special Role for Strings: Command Line Arguments</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArgsDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** Prints out the 0th command line argument. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(args[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="argssum-exercise">ArgsSum Exercise</h3><p>Goal: Create a program ArgsSum that prints out the sum of the command line arguments, assuming they are numbers.</p><ul><li>Search engines are our friend!</li></ul><p><strong>One Special Role for Strings: Command Line Arguments</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArgsSum</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** Prints out the sum of arguments, assuming they are</span></span><br><span class="line"><span class="comment">    * integers.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (index &lt; args.length) &#123;</span><br><span class="line">            sum = sum + Integer.parseInt(args[index]);</span><br><span class="line">            index = index + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="using-libraries-e.g.-stddraw-in"><a href="https://www.youtube.com/watch?v=C6kbrsdNQaQ&amp;feature=emb_title">Using Libraries (e.g. StdDraw, In)</a></h2><p>As a programmer, you’ll want to leverage existing libraries whenever possible.</p><ul><li>Saves you the trouble of writing code.</li><li>Existing widely used libraries are (probably) will probably be less buggy</li><li>… but you’ll have to spend some time getting acquainted with the library</li></ul><p>Best ways to learn how to use an unfamiliar library:</p><ul><li>Find a tutorial (on the web, youtube, etc.) for the library.</li><li>Read the documentation for the library (Java docs often very good).</li><li>Look at example code snippets that use the library.</li></ul><h2 id="overview">Overview</h2><p><strong>Client Programs and Main Methods.</strong> A Java program without a main method cannot be run directly using the <code>java</code> command. However, its methods can still be invoked using the <code>main</code> method of another class.</p><p><strong>Class Declaration.</strong> Java classes can contain methods and/or variables. We say that such methods and variables are “members” of the class. Members can be <em>instance</em> members or <em>static</em> members. Static members are declared with the <code>static</code> keyword. Instance members are any members without the <code>static</code> keyword.</p><p><strong>Class Instantiation.</strong> Instantiating a class is almost always done using the <code>new</code> keyword, e.g. <code>Dog d = new Dog()</code>. An instance of a class in Java is also called an “Object”.</p><p><strong>Dot Notation.</strong> We access members of a class using dot notation, e.g. <code>d.bark()</code>. Class members can be accessed from within the same class or from other classes.</p><p><strong>Constructors.</strong> Constructors tell Java what to do when a program tries to create an instance of a class, e.g. what it should do when it executes <code>Dog d = new Dog()</code>.</p><p><strong>Array Instantiation.</strong> Arrays are also instantiated using the <code>new</code> keyword. For example <code>int[] arr = new int[10]</code> If we have an array of Objects, e.g. <code>Dog[] dogarray</code>, then each element of the array must also be instantiated separately.</p><p><strong>Static vs. Instance methods.</strong> The distinction between static and instance methods is incredibly important. Instance methods are actions that can only be taken by an instance of the class (i.e. a specific object), whereas static methods are taken by the class itself. An instance method is invoked using a reference to a specific instance, e.g. <code>d.bark()</code>, whereas static methods should be invoked using the class name, e.g. <code>Math.sqrt()</code>. Know when to use each.</p><p><strong>Static variables.</strong> Variables can also be static. Static variables should be accessed using the class name, e.g. <code>Dog.binomen</code> as opposed to <code>d.binomen</code>. Technically Java allows you to access using a specific instance, but we strongly encourage you not to do this to avoid confusion.</p><p><strong>void methods.</strong> A method which does not return anything should be given a void return type.</p><p><strong>The <code>this</code> keyword.</strong> Inside a method, we can use the <code>this</code> keyword to refer to the current instance. This is equivalent to <code>self</code> in Python.</p><p><strong>public static void main(String[] args).</strong> We now know what each of these things means:</p><ul><li>public: So far, all of our methods start with this keyword.</li><li>static: It is a static method, not associated with any particular instance.</li><li>void: It has no return type.</li><li>main: This is the name of the method.</li><li>String[] args: This is a parameter that is passed to the main method.</li></ul><p><strong>Command Line Arguments.</strong> Arguments can be provided by the operating system to your program as “command line arguments,” and can be accessed using the <code>args</code> parameter in <code>main</code>. For example if we call our program from the command line like this <code>java ArgsDemo these are command line arguments</code>, then the <code>main</code> method of <code>ArgsDemo</code> will have an array containing the Strings “these”, “are”, “command”, “line”, and “arguments”.</p><p><strong>Using Libraries.</strong> There’s no need in the year 2017 to build everything yourself from scratch. In our course, you are allowed to and highly encouraged to use Java’s built-in libraries, as well as libraries that we provide, e.g. the Princeton standard library. You should not use libraries other than those provided or built into Java because it may render some of the assignments moot, and also our autograder won’t have access to these libraries and your code won’t work.</p><p><strong>Getting Help from the Internet.</strong> You’re welcome to seek help online. However, you should always cite your sources, and you should not seek help on specific homework problems or projects. For example, googling “how convert String Java” or “how read file Java” are fine, but you should not be searching “project 2 61b java berkeley”.</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structures </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Proving Things</title>
      <link href="2021/02/24/2021-02-24-Proving-Things---Why-and-How/"/>
      <url>2021/02/24/2021-02-24-Proving-Things---Why-and-How/</url>
      
        <content type="html"><![CDATA[<h1 id="proving-things-why-and-how">Proving Things: Why and How</h1><h2 id="why">Why?</h2><ul><li><strong>Reasoning</strong> allows us to <strong>expand our knowledge and beliefs</strong></li><li>In order to yield correct results, reasoning should be <strong>sound</strong></li><li><strong>Proofs</strong> are a form of <strong>particularly careful reasoning</strong> in the form of a <strong>sequence of justified steps</strong></li></ul><h2 id="what">What?</h2><ul><li>A proof is a <strong>sequence of assertions</strong> meant to convince the reader of the <strong>truth of a statement</strong></li><li>Proofs convince by:<ul><li>starting from agreed truths: <strong>axioms</strong></li><li>continuing by agreed methods: <strong>inference rules</strong></li></ul></li><li>A proved statement is called a <strong>theorem</strong></li><li>Similar to ordinary reasoning, but <strong>symbols</strong> are used for <strong>precision</strong></li></ul><h2 id="propositional-logic">Propositional logic</h2><p><strong>Propositional logic</strong> (PL) is used for <strong>all aspects</strong> of the proof:</p><ul><li>Axioms and theorems are propositions</li><li>Rules of inference are based on PL</li></ul><h3 id="three-kinds-of-proofs">Three kinds of proofs</h3><p>Proof by <strong>Truth Table</strong></p><ul><li>justified by definitions of operators</li><li>justified by exhaustive case analysis</li></ul><p>Proof by <strong>Substitution</strong></p><ul><li>justified by equivalence</li><li>also called ‘algebraic proof’</li></ul><p>Proof by <strong>Inference Rules</strong></p><ul><li>justified by rules proved within logic</li><li>often mixed with substitution</li></ul><h2 id="rules-of-inference">Rules of inference</h2><p><img src="/images/FOCS/6417380.png" /></p><h3 id="general-idea">General idea</h3><p>Need to proof <em>premises</em> → conclusion</p><p>α<sub>1</sub> ∧ α<sub>2</sub> ∧ ... ∧ α<sub>n</sub> → β</p><p>Recall implication truth table:</p><ul><li>When α → β and α = <em>TRUE</em>, β cannot be <em>FALSE</em></li><li>If α = <em>TRUE</em> when β = <em>FALSE</em>, we do not have α → β</li></ul><p>Importantly, each rule of inference is <strong>equivalent to a PL expression</strong> and can be <strong>evaluated using truth tables</strong>.</p><h3 id="example-contradiction-inference-rule">Example: contradiction inference rule</h3><ul><li>Need to prove: p ∧ ¬p → FALSE</li></ul><table><thead><tr class="header"><th style="text-align: center;">p</th><th style="text-align: center;">¬p</th><th style="text-align: center;">p ∧ ¬p</th><th style="text-align: center;">FALSE</th><th style="text-align: center;">(p ∧ ¬p) → FALSE</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">T</td><td style="text-align: center;">F</td><td style="text-align: center;">F</td><td style="text-align: center;">F</td><td style="text-align: center;"><strong>T</strong></td></tr><tr class="even"><td style="text-align: center;">F</td><td style="text-align: center;">T</td><td style="text-align: center;">F</td><td style="text-align: center;">F</td><td style="text-align: center;"><strong>T</strong></td></tr></tbody></table><ul><li>Need to prove: p → (p ∨ q)</li></ul><table><thead><tr class="header"><th style="text-align: center;">p</th><th style="text-align: center;">Q</th><th style="text-align: center;">p ∨ Q</th><th style="text-align: center;">p → (p ∨ q)</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;"><strong>T</strong></td></tr><tr class="even"><td style="text-align: center;">T</td><td style="text-align: center;">F</td><td style="text-align: center;">F</td><td style="text-align: center;"><strong>T</strong></td></tr><tr class="odd"><td style="text-align: center;">F</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;"><strong>T</strong></td></tr><tr class="even"><td style="text-align: center;">F</td><td style="text-align: center;">F</td><td style="text-align: center;">F</td><td style="text-align: center;"><strong>T</strong></td></tr></tbody></table><ul><li>Need to prove: ((p → q) ∧ ¬q)) → ¬p</li></ul><table><thead><tr class="header"><th style="text-align: center;">p</th><th style="text-align: center;">Q</th><th style="text-align: center;">p → q</th><th style="text-align: center;">¬q</th><th style="text-align: center;">(p → q) ∧ ¬q</th><th style="text-align: center;">¬p</th><th style="text-align: center;">((p → q) ∧ ¬q)) → ¬p</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;">F</td><td style="text-align: center;">F</td><td style="text-align: center;">F</td><td style="text-align: center;"><strong>T</strong></td></tr><tr class="even"><td style="text-align: center;">T</td><td style="text-align: center;">F</td><td style="text-align: center;">F</td><td style="text-align: center;">T</td><td style="text-align: center;">F</td><td style="text-align: center;">F</td><td style="text-align: center;"><strong>T</strong></td></tr><tr class="odd"><td style="text-align: center;">F</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;">F</td><td style="text-align: center;">F</td><td style="text-align: center;">T</td><td style="text-align: center;"><strong>T</strong></td></tr><tr class="even"><td style="text-align: center;">F</td><td style="text-align: center;">F</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;"><strong>T</strong></td></tr></tbody></table><ul><li>Need to prove: ((p ∨ q) ∧ (p → r) ∧ (q → r)) → r</li></ul><table style="width:100%;"><colgroup><col style="width: 4%" /><col style="width: 4%" /><col style="width: 4%" /><col style="width: 5%" /><col style="width: 5%" /><col style="width: 5%" /><col style="width: 31%" /><col style="width: 37%" /></colgroup><thead><tr class="header"><th style="text-align: center;">p</th><th style="text-align: center;">q</th><th style="text-align: center;">r</th><th style="text-align: center;">p ∨ q</th><th style="text-align: center;">p → r</th><th style="text-align: center;">q → r</th><th style="text-align: center;">(p ∨ q) ∧ (p → r) ∧ (q → r)</th><th style="text-align: center;">((p ∨ q) ∧ (p → r) ∧ (q → r)) → r</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;"><strong>T</strong></td></tr><tr class="even"><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;">F</td><td style="text-align: center;">T</td><td style="text-align: center;">F</td><td style="text-align: center;">F</td><td style="text-align: center;">F</td><td style="text-align: center;"><strong>T</strong></td></tr><tr class="odd"><td style="text-align: center;">T</td><td style="text-align: center;">F</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;">F</td><td style="text-align: center;">T</td><td style="text-align: center;"><strong>T</strong></td></tr><tr class="even"><td style="text-align: center;">T</td><td style="text-align: center;">F</td><td style="text-align: center;">F</td><td style="text-align: center;">T</td><td style="text-align: center;">F</td><td style="text-align: center;">F</td><td style="text-align: center;">F</td><td style="text-align: center;"><strong>T</strong></td></tr><tr class="odd"><td style="text-align: center;">F</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;"><strong>T</strong></td></tr><tr class="even"><td style="text-align: center;">F</td><td style="text-align: center;">T</td><td style="text-align: center;">F</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;">F</td><td style="text-align: center;">F</td><td style="text-align: center;"><strong>T</strong></td></tr><tr class="odd"><td style="text-align: center;">F</td><td style="text-align: center;">F</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;">F</td><td style="text-align: center;"><strong>T</strong></td></tr><tr class="even"><td style="text-align: center;">F</td><td style="text-align: center;">F</td><td style="text-align: center;">F</td><td style="text-align: center;">F</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;">F</td><td style="text-align: center;"><strong>T</strong></td></tr></tbody></table><h3 id="without-assumptions">Without assumptions</h3><p>Checking a <strong>proof</strong></p><ul><li>Proof = list of assertions</li><li>Each assertion needs to be checked</li></ul><p>Checking an <strong>assertion</strong></p><ul><li>Find an inference rule that matches the conclusion being considered</li><li>Find earlier assertions that match the premises of the inference rule</li></ul><h4 id="example-1">Example 1</h4><p>Prove that given (p ∨ q) ∧ ¬p is <em>TRUE</em> that q is <em>TRUE</em> as well</p><ol type="1"><li>(p ∨ q) ∧ ¬p given</li><li>p ∨ q ∧ elimination, with line 1</li><li>¬p ∧ elimination, with line</li><li>p → q vacuous proof, with line 3</li><li>q → q tautology</li><li>q case analysis, with lines 2, 4, 5</li></ol><h5 id="alternative-elimination">Alternative elimination</h5><p>We proved the validity of the following inference rule:</p><p>(p ∨ q) ∧ ¬p → q</p><p>Once a theorem has been proved, it can be <strong>used in other proofs</strong></p><h4 id="example-2">Example 2</h4><p>Prove that given p ∧ ¬p is TRUE that q is TRUE as well</p><ol type="1"><li>p ∧ ¬p given</li><li>¬p ∧ elimination, with line 1</li><li>p → q vacuous proof, with line 2</li><li>p ∧ elimination, with line 1</li><li>q modus ponens, with lines 3, 4</li></ol><p>If p ∧ ¬p are taken to be both TRUE, then <strong>any proposition can be proven.</strong></p><p>This outcome would be <strong>bizarre and undesirable</strong></p><h3 id="assumptions">Assumptions</h3><h4 id="principle">Principle</h4><p>In proofs, <strong>assumptions</strong> can be introduced tentatively, to test their consequences</p><p>When introduced, we do not know whether an assumption is TRUE</p><p>Assumptions are written between [ ]</p><h4 id="absurdity-and-implication">Absurdity and implication</h4><ul><li>Reduction to absurdity<ul><li>[p] ∧ FALSE → ¬p</li></ul></li><li>Introduction of implication<ul><li>[p] ∧ q → (p → q)</li></ul></li></ul><h4 id="example-3">Example 3</h4><p><img src="/images/FOCS/6417381.png" /></p><h4 id="exercise">Exercise</h4><p><img src="/images/FOCS/6417382.png" /></p><figure><img src="/images/FOCS/6417383.png" alt="" /><figcaption>Solution</figcaption></figure><h4 id="nested-assumptions">Nested assumptions</h4><p>Prove: ((p → q) ∧ (q → r)) → (p → r)</p><p><img src="/images/FOCS/6417384.png" /></p><h3 id="transitivity-of-implication">Transitivity of implication</h3><ul><li><p>Previous proof establishes a theorem in the form of</p><p>α<sub>1</sub> ∧ α<sub>2</sub> → β</p></li><li><p>New inference rule: <strong>transitivity of implication</strong></p></li></ul><p><img src="/images/FOCS/6417385.png" /></p><h2 id="different-proof-methods">Different proof methods</h2><ul><li>Truth tables</li><li>Substitution</li><li>Inference</li><li>Others, e.g. semantic tableaux</li></ul><h3 id="proving-the-modus-tollens-using-truth-tables">Proving the modus tollens using truth tables</h3><table><thead><tr class="header"><th style="text-align: center;">p</th><th style="text-align: center;">Q</th><th style="text-align: center;">p → q</th><th style="text-align: center;">¬q</th><th style="text-align: center;">(p → q) ∧ ¬q</th><th style="text-align: center;">¬p</th><th style="text-align: center;">((p → q) ∧ ¬q)) → ¬p</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;">F</td><td style="text-align: center;">F</td><td style="text-align: center;">F</td><td style="text-align: center;"><strong>T</strong></td></tr><tr class="even"><td style="text-align: center;">T</td><td style="text-align: center;">F</td><td style="text-align: center;">F</td><td style="text-align: center;">T</td><td style="text-align: center;">F</td><td style="text-align: center;">F</td><td style="text-align: center;"><strong>T</strong></td></tr><tr class="odd"><td style="text-align: center;">F</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;">F</td><td style="text-align: center;">F</td><td style="text-align: center;">T</td><td style="text-align: center;"><strong>T</strong></td></tr><tr class="even"><td style="text-align: center;">F</td><td style="text-align: center;">F</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;"><strong>T</strong></td></tr></tbody></table><p><img src="/images/FOCS/6417386.png" /></p><h3 id="proving-the-modus-tollens-using-inference">Proving the modus tollens using inference</h3><p><img src="/images/FOCS/6417387.png" /></p><h2 id="inference-proof">Inference proof</h2><h3 id="for-theorem-analogous-to-conditional-law">For theorem analogous to conditional law</h3><p>Prove: (p → q) ↔︎ (¬p ∨ q)</p><figure><img src="/images/FOCS/6417388.png" alt="" /><figcaption>First prove: (p → q) ← (¬p ∨ q)</figcaption></figure><figure><img src="/images/FOCS/6417389.png" alt="" /><figcaption>Second prove: (p → q) → (¬p ∨ q)</figcaption></figure><p>We have proven:</p><ul><li>(p → q) ← (¬p ∨ q)</li><li>(p → q) → (¬p ∨ q)</li></ul><p>This implies:</p><ul><li>(p → q) ↔︎ (¬p ∨ q)</li></ul><h2 id="proof-strategies">Proof strategies</h2><h3 id="proving-a-conditional">Proving a conditional</h3><p><strong>p → q</strong></p><ul><li>Direct proof:<ul><li>Assume: p = TRUE</li><li>Show: q = TRUE</li><li>Therefore: p → q (→ introduction)</li></ul></li><li>Indirect proof:<ul><li>Assume: q = FALSE</li><li>Show: p = FALSE</li><li>Therefore: ¬q → ¬p (→ introduction)</li><li>p → q (contrapositive law)</li></ul></li><li>Proof by contradiction:<ul><li>Assume: p → q = FALSE</li><li>Show that this assumption leads to a contradiction</li></ul></li></ul><h3 id="proving-a-biconditional">Proving a biconditional</h3><p><strong>p ↔︎ q</strong></p><ul><li>Two-way proof:<ul><li>Prove: p → q</li><li>Prove: p ← q</li></ul></li><li>Special case of two-way proof:<ul><li>Set equality</li><li>A theorem that states that set A and set B are equal can be written as: x ∈ A ↔︎ x ∈ B</li></ul></li></ul><h3 id="proofs-with-disjunctions">Proofs with disjunctions</h3><p><strong>p ∨ q</strong></p><ul><li>Case analysis I:<ul><li>Given: p ∨ q</li><li>To prove: r</li><li>Prove that r holds in either case: prove p → r and q → r</li></ul></li><li>Case analysis II:<ul><li>Given: p ∨ q</li><li>To prove: r ∨ s</li><li>Prove: p → r and q → s</li></ul></li><li>Excluded middle:<ul><li>For either kind of case analysis, it may be helpful to introduce the tautology u ∨ ¬u</li><li>Prove p → u and q → ¬u</li></ul></li><li>Eliminating an alternative:<ul><li>Given: p ∨ q</li><li>Eliminate: p</li><li>Therefore: q = TRUE</li></ul></li></ul><h2 id="exercise-4">Exercise 4</h2><p><img src="/images/FOCS/6417390.png" /></p><h3 id="solutions">Solutions:</h3><ul><li><ol type="i"><li>(¬p ∨ ¬q) → (r ∧ s)</li></ol></li><li><ol start="2" type="i"><li>r → t</li></ol></li><li><ol start="3" type="i"><li>¬t</li></ol></li></ul><p><img src="/images/FOCS/6417391.png" /></p><h2 id="exercise-5">Exercise 5</h2><p>Give a much shorter equivalence proof of Theorem 3.2 by making use of one of De Morgan’s laws right after the conditional law</p><ul><li>((p → q) ∧ ¬q) → ¬p</li></ul><h3 id="solutions-1">Solutions:</h3><p><img src="/images/FOCS/6417392.png" /></p><h2 id="exercise-6">Exercise 6</h2><p>Prove each of these equivalences by substitution, one step at a time. State which equivalence justifies each step</p><ul><li><ol type="a"><li>((p ∨ q) ∧ (¬p ∧ ¬q)) ≡ FALSE</li></ol></li><li><ol start="2" type="a"><li>p ∨ q ∨ r ∨ s ≡ (¬p ∧ ¬q ∧ ¬r) → s</li></ol></li></ul><h3 id="solution-a">Solution A</h3><p><img src="/images/FOCS/6417393.png" /></p><h3 id="solution-b">Solution B</h3><p><img src="/images/FOCS/6417394.png" /></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fundamentals of Computer Science </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Control</title>
      <link href="2021/02/24/2021-02-24-Control/"/>
      <url>2021/02/24/2021-02-24-Control/</url>
      
        <content type="html"><![CDATA[<h1 id="control">Control</h1><p><a href="https://inst.eecs.berkeley.edu/~cs61a/fa20/">Website</a></p><p><a href="https://www.youtube.com/watch?v=T_nf9Uxai8w&amp;list=PL6BsET-8jgYXytPK09lJ5y9iUqZ445lCX">Video</a></p><p><a href="http://composingprograms.com/pages/13-defining-new-functions.html">Textbook 1.3</a> <a href="http://composingprograms.com/pages/14-designing-functions.html">Textbook 1.4</a> <a href="http://composingprograms.com/pages/15-control.html">Textbook 1.5</a></p><p><a href="https://inst.eecs.berkeley.edu/~cs61a/fa20/lab/lab01/">Lab</a></p><h2 id="multiple-environments"><a href="https://www.youtube.com/watch?v=IPec2A7j2bY&amp;list=PL6BsET-8jgYXytPK09lJ5y9iUqZ445lCX&amp;index=3">Multiple Environments</a></h2><h3 id="life-cycle-of-a-user-defined-function">Life Cycle of a User-Defined Function</h3><p><img src="/images/CS61A/8618410.png" /></p><h3 id="multiple-environments-in-one-diagram">Multiple Environments in One Diagram!</h3><p><img src="/images/CS61A/8618411.png" /></p><p><img src="/images/CS61A/8618412.png" /></p><p><img src="/images/CS61A/8618413.png" /></p><h3 id="names-have-no-meaning-without-environments">Names Have No Meaning Without Environments</h3><p><img src="/images/CS61A/8618414.png" /></p><h2 id="miscellaneous-python-features"><a href="https://www.youtube.com/watch?v=gDsdcF1bpBs&amp;list=PL6BsET-8jgYXytPK09lJ5y9iUqZ445lCX&amp;index=4">Miscellaneous Python Features</a></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Print</span></span><br><span class="line">-<span class="number">2</span></span><br><span class="line">print(-<span class="number">2</span>)</span><br><span class="line">print(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">x = -<span class="number">2</span></span><br><span class="line">x</span><br><span class="line">print(x)</span><br><span class="line">x = print(-<span class="number">2</span>)</span><br><span class="line">x</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="literal">None</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="string">&#x27;hi&#x27;</span></span><br><span class="line"><span class="built_in">abs</span></span><br><span class="line"></span><br><span class="line">print(<span class="literal">None</span>)</span><br><span class="line">print(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">print(<span class="literal">None</span>, <span class="literal">None</span>)</span><br><span class="line">print(print(<span class="number">1</span>), print(<span class="number">2</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Division</span></span><br><span class="line"><span class="number">618</span> / <span class="number">10</span></span><br><span class="line"><span class="number">618</span> // <span class="number">10</span></span><br><span class="line"><span class="number">618</span> % <span class="number">10</span></span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> truediv, floordiv, mod</span><br><span class="line">floordiv(<span class="number">618</span>, <span class="number">10</span>)</span><br><span class="line">truediv(<span class="number">618</span>, <span class="number">10</span>)</span><br><span class="line">mod(<span class="number">618</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Approximation</span></span><br><span class="line"><span class="number">5</span> / <span class="number">3</span></span><br><span class="line"><span class="number">5</span> // <span class="number">3</span></span><br><span class="line"><span class="number">5</span> % <span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Multiple return values</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">divide_exact</span>(<span class="params">n, d</span>):</span></span><br><span class="line">    <span class="keyword">return</span> n // d, n % d</span><br><span class="line">quotient, remainder = divide_exact(<span class="number">618</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Dostrings, doctests, &amp; default arguments</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">divide_exact</span>(<span class="params">n, d=<span class="number">10</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the quotient and remainder of dividing N by D.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; quotient, remainder = divide_exact(618, 10)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; quotient</span></span><br><span class="line"><span class="string">    61</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; remainder</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> floordiv(n, d), mod(n, d)</span><br></pre></td></tr></table></figure><h2 id="conditional-statements"><a href="https://www.youtube.com/watch?v=dijoBZH44kU&amp;list=PL6BsET-8jgYXytPK09lJ5y9iUqZ445lCX&amp;index=5">Conditional Statements</a></h2><h3 id="statements">Statements</h3><p><img src="/images/CS61A/8618415.png" /></p><p><img src="/images/CS61A/8618416.png" /></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Conditional expressions</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">absolute_value</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the absolute value of X.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; absolute_value(-3)</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; absolute_value(0)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; absolute_value(3)</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> -x</span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><p><img src="/images/CS61A/8618417.png" /></p><h3 id="boolean-contexts">Boolean Contexts</h3><p><img src="/images/CS61A/8618418.png" /></p><h2 id="iteration"><a href="https://www.youtube.com/watch?v=x23Rw591l-s&amp;list=PL6BsET-8jgYXytPK09lJ5y9iUqZ445lCX&amp;index=6">Iteration</a></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Summation via while</span></span><br><span class="line">i, total = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">3</span>:</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    total = total + i</span><br><span class="line">print(<span class="string">&#x27;i:&#x27;</span>, i, <span class="string">&#x27;total:&#x27;</span>, total)</span><br></pre></td></tr></table></figure><p><img src="/images/CS61A/8618419.png" /></p><h2 id="example-prime-factorization"><a href="https://www.youtube.com/watch?v=9122neGpcS8&amp;list=PL6BsET-8jgYXytPK09lJ5y9iUqZ445lCX&amp;index=7">Example: Prime Factorization</a></h2><p><img src="/images/CS61A/8618420.png" /></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Prime factorization</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prime_factors</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print the prime factors of positive integer n</span></span><br><span class="line"><span class="string">       in non-decreasing order.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; prime_factors(8)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; prime_factors(9)</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; prime_factors(10)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; prime_factors(11)</span></span><br><span class="line"><span class="string">    11</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; prime_factors(12)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; prime_factors(858)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    11</span></span><br><span class="line"><span class="string">    13</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">1</span>:</span><br><span class="line">        k = smallest_factor(n)</span><br><span class="line">        print(k)</span><br><span class="line">        n = n // k</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">smallest_factor</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the smallest factor of n greater than 1.&quot;&quot;&quot;</span></span><br><span class="line">    k = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> n % k != <span class="number">0</span>:</span><br><span class="line">        k = k + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> k</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Structure and Interpretation of Computer Programs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Variables &amp; Functions, Control</title>
      <link href="2021/02/24/2021-02-24-Variables-&amp;-Functions,-Control/"/>
      <url>2021/02/24/2021-02-24-Variables-&amp;-Functions,-Control/</url>
      
        <content type="html"><![CDATA[<h1 id="exercise-1-variables-functions-control">Exercise 1: Variables &amp; Functions, Control</h1><h2 id="q1-a-plus-abs-b"><a href="https://www.youtube.com/watch?v=o9eUNrWTr3I&amp;feature=youtu.be">Q1: A Plus Abs B</a></h2><p>Fill in the blanks in the following function for adding <code>a</code> to the absolute value of <code>b</code>, without calling <code>abs</code>. You may <strong>not</strong> modify any of the provided code other than the two blanks.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> add, sub</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_plus_abs_b</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a+abs(b), but without calling abs.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a_plus_abs_b(2, 3)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a_plus_abs_b(2, -3)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # a check that you didn&#x27;t change the return statement!</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; import inspect, re</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; re.findall(r&#x27;^\s*(return .*)&#x27;, inspect.getsource(a_plus_abs_b), re.M)</span></span><br><span class="line"><span class="string">    [&#x27;return f(a, b)&#x27;]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> b &lt; <span class="number">0</span>: </span><br><span class="line">        f = sub</span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        f = add <span class="comment"># function NOT function call</span></span><br><span class="line">    <span class="keyword">return</span> f(a, b) <span class="comment"># function call</span></span><br></pre></td></tr></table></figure><h2 id="q2-two-of-three"><a href="https://www.youtube.com/watch?v=oPN3OCGGb4M&amp;feature=youtu.be">Q2: Two of Three</a></h2><p>Write a function that takes three <em>positive</em> numbers as arguments and returns the sum of the squares of the two smallest numbers. <strong>Use only a single line for the body of the function.</strong></p><p><strong>Hint:</strong> Consider using the <code>max</code> or <code>min</code> function:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">min</span>(-<span class="number">1</span>, -<span class="number">2</span>, -<span class="number">3</span>)</span><br><span class="line">-<span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">two_of_three</span>(<span class="params">x, y, z</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a*a + b*b, where a and b are the two smallest members of the</span></span><br><span class="line"><span class="string">    positive numbers x, y, and z.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; two_of_three(1, 2, 3)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; two_of_three(5, 3, 1)</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; two_of_three(10, 2, 8)</span></span><br><span class="line"><span class="string">    68</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; two_of_three(5, 5, 5)</span></span><br><span class="line"><span class="string">    50</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # check that your code consists of nothing but an expression (this docstring)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # a return statement</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; import inspect, ast</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; [type(x).__name__ for x in ast.parse(inspect.getsource(two_of_three)).body[0].body]</span></span><br><span class="line"><span class="string">    [&#x27;Expr&#x27;, &#x27;Return&#x27;]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(x*x+y*y, x*x+z*z, y*y+z*z)</span><br><span class="line">    <span class="comment"># Alternate solution</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">two_of_three_alternate</span>(<span class="params">x, y, z</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x**<span class="number">2</span> + y**<span class="number">2</span> + z**<span class="number">2</span> - <span class="built_in">max</span>(x, y, z)**<span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="q3-largest-factor"><a href="https://www.youtube.com/watch?v=pVgxbeL4DHQ&amp;feature=youtu.be">Q3: Largest Factor</a></h3><p>Write a function that takes an integer <code>n</code> that is <strong>greater than 1</strong> and returns the largest integer that is smaller than <code>n</code> and evenly divides <code>n</code>.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">largest_factor</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the largest factor of n that is smaller than n.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; largest_factor(15) # factors are 1, 3, 5</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; largest_factor(80) # factors are 1, 2, 4, 5, 8, 10, 16, 20, 40</span></span><br><span class="line"><span class="string">    40</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; largest_factor(13) # factor is 1 since 13 is prime</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    factor = n - <span class="number">1</span> <span class="comment"># This will break when 0 &gt; 0</span></span><br><span class="line">    <span class="keyword">while</span> factor &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> n % factor == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> factor</span><br><span class="line">        factor -= <span class="number">1</span></span><br></pre></td></tr></table></figure><p>Iterating from <code>n-1</code> to 1, we return the first integer that evenly divides <code>n</code>. This is guaranteed to be the largest factor of <code>n</code>.</p><h2 id="q4-if-function-vs-statement">Q4: If Function vs Statement</h2><p>Let's try to write a function that does the same thing as an <code>if</code> statement.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">if_function</span>(<span class="params">condition, true_result, false_result</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return true_result if condition is a true value, and</span></span><br><span class="line"><span class="string">    false_result otherwise.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; if_function(True, 2, 3)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; if_function(False, 2, 3)</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; if_function(3==2, &#x27;equal&#x27;, &#x27;not equal&#x27;)</span></span><br><span class="line"><span class="string">    &#x27;not equal&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; if_function(3&gt;2, &#x27;bigger&#x27;, &#x27;smaller&#x27;)</span></span><br><span class="line"><span class="string">    &#x27;bigger&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> condition:</span><br><span class="line">        <span class="keyword">return</span> true_result</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> false_result</span><br></pre></td></tr></table></figure><p>Despite the doctests above, this function actually does <em>not</em> do the same thing as an <code>if</code> statement in all cases. To prove this fact, write functions <code>cond</code>, <code>true_func</code>, and <code>false_func</code> such that <code>with_if_statement</code> prints <code>61A</code>, but <code>with_if_function</code> prints both <code>Welcome to</code> and <code>61A</code> on separate lines.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">with_if_statement</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; result = with_if_statement()</span></span><br><span class="line"><span class="string">    61A</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print(result)</span></span><br><span class="line"><span class="string">    None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> cond():</span><br><span class="line">        <span class="keyword">return</span> true_func()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> false_func()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">with_if_function</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; result = with_if_function()</span></span><br><span class="line"><span class="string">    Welcome to</span></span><br><span class="line"><span class="string">    61A</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print(result)</span></span><br><span class="line"><span class="string">    None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> if_function(cond(), true_func(), false_func())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cond</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">true_func</span>():</span></span><br><span class="line">    print(<span class="string">&quot;Welcome to&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">false_func</span>():</span></span><br><span class="line">    print(<span class="string">&quot;61A&quot;</span>)</span><br></pre></td></tr></table></figure><p>The function <code>with_if_function</code> uses a call expression, which guarantees that all of its operand subexpressions will be evaluated before <code>if_function</code> is applied to the resulting arguments.</p><p>Therefore, even if <code>cond</code> returns <code>False</code>, the function <code>true_func</code> will be called. When we call <code>true_func</code>, we print out <code>Welcome to</code>. Then, when we call <code>false_func</code>, we will also print <code>61A</code>.</p><p>By contrast, <code>with_if_statement</code> will never call <code>true_func</code> if <code>cond</code> returns <code>False</code>. Thus, we will only call <code>false_func</code>, printing <code>61A</code>.</p><h2 id="q5-hailstone">Q5: Hailstone</h2><p>Douglas Hofstadter's Pulitzer-prize-winning book, <em>Gödel, Escher, Bach</em>, poses the following mathematical puzzle.</p><ol type="1"><li>Pick a positive integer <code>n</code> as the start.</li><li>If <code>n</code> is even, divide it by 2.</li><li>If <code>n</code> is odd, multiply it by 3 and add 1.</li><li>Continue this process until <code>n</code> is 1.</li></ol><p>The number <code>n</code> will travel up and down but eventually end at 1 (at least for all numbers that have ever been tried -- nobody has ever proved that the sequence will terminate). Analogously, a hailstone travels up and down in the atmosphere before eventually landing on earth.</p><p>This sequence of values of <code>n</code> is often called a Hailstone sequence. Write a function that takes a single argument with formal parameter name <code>n</code>, prints out the hailstone sequence starting at <code>n</code>, and returns the number of steps in the sequence:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hailstone</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print the hailstone sequence starting at n and return its length.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a = hailstone(10)</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    16</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a</span></span><br><span class="line"><span class="string">    7</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    length = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n != <span class="number">1</span>:</span><br><span class="line">        print(n)</span><br><span class="line">        <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            n = n // <span class="number">2</span>      <span class="comment"># Integer division prevents &quot;1.0&quot; output</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            n = <span class="number">3</span> * n + <span class="number">1</span></span><br><span class="line">        length = length + <span class="number">1</span></span><br><span class="line">    print(n)                <span class="comment"># n is now 1</span></span><br><span class="line">    <span class="keyword">return</span> length</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Exercises </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Structure and Interpretation of Computer Programs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Attacks - Security</title>
      <link href="2021/02/24/2021-02-24-Attacks---Security/"/>
      <url>2021/02/24/2021-02-24-Attacks---Security/</url>
      
        <content type="html"><![CDATA[<h1 id="security---attacks">Security - Attacks</h1><p><a href="https://vub-my.sharepoint.com/personal/bruno_da_silva_vub_be/_layouts/15/onedrive.aspx?originalPath=aHR0cHM6Ly92dWItbXkuc2hhcmVwb2ludC5jb20vOmY6L2cvcGVyc29uYWwvYnJ1bm9fZGFfc2lsdmFfdnViX2JlL0V1ZWdTdWlYa3JCSWhnNXhVMFgzZ2s4QjhSNlFQYkRFbVZLMFNCUmlIQXVTWVE%5FcnRpbWU9LUpaZmJ0dlgyRWc&amp;id=%2Fpersonal%2Fbruno%5Fda%5Fsilva%5Fvub%5Fbe%2FDocuments%2FCOURSES%2FOSSEC%2020%20%2D%2021%20Semester%202%2FRecordings%2F%5BOSSEC%5D%20%2D%20Lecture%203%2Emp4&amp;parent=%2Fpersonal%2Fbruno%5Fda%5Fsilva%5Fvub%5Fbe%2FDocuments%2FCOURSES%2FOSSEC%2020%20%2D%2021%20Semester%202%2FRecordings">Video</a></p><h2 id="exploiting-code-bugs">Exploiting code bugs</h2><p>Example steps to exploit a bug:</p><ul><li>Run port scan to find machines that accept telnet connections.</li><li>Try to log in by guessing login name and password combinations.</li><li>Once in, run the flawed program with input that triggers the bug.</li><li>If the buggy program is SETUID root, create a SETUID root shell.</li><li>Fetch and start a zombie program that listens to an IP port for cmds.</li><li>Arrange that the zombie program is started when the system reboots.</li></ul><h2 id="exploiting-software">Exploiting software</h2><ul><li><p>Buffer overflow attacks</p><ul><li>Control Flow Attacks</li><li>Non-Control Flow Attacks</li></ul></li><li><p>Memory Corruption Attacks</p><ul><li>Format String Attack</li><li>Dangling Pointers Attack</li></ul></li><li><p>Null Pointer Dereference Attacks</p></li><li><p>Integer Overflow attacks</p></li><li><p>Command Injection Attacks</p></li><li><p>Time of Check to Tome of Use Attacks</p></li></ul><h3 id="buffer-overflow-attacks">Buffer overflow attacks</h3><p><img src="/images/OP/740047.png" /></p><ol type="a"><li><p>Situation when the main program is running.</p></li><li><p>After the procedure A has been called.</p></li><li><p>Buffer overflow shown in gray.</p></li></ol><h4 id="defence-stack-canaries">Defence: stack canaries</h4><p>Modern computers use digital ‘canaries’ as an early warning system, detecting possible buffer overflow attack.</p><p>In the code, at places where the program makes a function call, the compiler inserts code to save a random ‘canary’ value on the stack, just below the return address.</p><p>The compiler inserts code at the return to check the canary value.</p><p>If the canary has changed… trouble!</p><h4 id="defence-data-execution-prevention">Defence: data execution prevention</h4><p>Redefine the ‘real’ problem: The fact that the attacker can inject code and have it executed in the heap or stack!</p><p>Defence: prevent the bytes provided by the attacker from being executed as legitimate code.</p><p>Modern CPUs have a feature <strong>NX bit</strong> (No-eXecute bit):</p><ul><li>It distinguishes between data segments and the code segments.</li><li>This ensures data segments are writable, but not executable.</li></ul><h4 id="code-reuse-attacks">Code reuse attacks</h4><p>Attacker constructs the necessary functions out of existing functions and instructions in the existing binaries and libraries</p><p><strong>Return to libc</strong></p><p>Almost all c (C++) programs are linked with a shared library containing the function <em>system</em>.</p><p><em>System</em> takes a string containing a command and passes it to the shell for execution.</p><p>Attack: Place a string containing commands to be executed and divert control the <em>system</em> function via the return address.</p><h5 id="return-oriented-programming-rop">Return-Oriented Programming (ROP)</h5><p>The concept of Return-Oriented Programming is to return to the entry points of library functions.</p><figure><img src="/images/OP/740048.png" alt="" /><figcaption>Return-oriented programming: linking gadgets</figcaption></figure><h4 id="defence-address-space-layout-randomization-aslr">Defence: address space layout randomization (ASLR)</h4><ul><li>Randomize the address of functions and data between every run of the program</li><li>Supported with varying granularity.</li><li>Few apply it to the system kernel</li></ul><h4 id="non-control-flow-attacks">Non-Control Flow Attacks</h4><p>Change the data instead of the return addresses!!</p><p>Possible use: change the security credentials granting more or less protection on objects.</p><p><img src="/images/OP/740049.png" /></p><h3 id="memory-corruption-attacks">Memory Corruption Attacks</h3><h4 id="format-string-attack">Format String Attack</h4><p>In a C functions that perform formatting, (printf), when the application doesn’t properly validate the input, the attacker can causes the submitted data to be compromised.</p><p><img src="/images/OP/740046.png" /></p><p>EX: By using exactly the right number of <strong>%08x</strong>, the attacker can use the first four characters of the format string as an address.</p><p><img src="/images/OP/740045.png" /></p><h4 id="dangling-pointers-attack">Dangling Pointers Attack</h4><ul><li>User frees memory. But later tries to access it with the pointer.</li><li>Attacker places a specific heap object in the memory location the user frees and re-uses</li><li>Techniques like <strong>heap feng shui</strong> help attackers pull this off.</li></ul><h3 id="null-pointer-dereference-attacks">Null Pointer Dereference Attacks</h3><p>In linux, the kernel space is mapped to every process’ address space… and whenever the kernel executes it runs in a process’s address space.</p><p>If a buggy kernel dereferences a NULL pointer, it usually leads to a crash. Or attacker triggers a NULL pointer dereference from the user process.</p><p>Crash occurs because there is no code at page 0.</p><p>Using a tool like mmap (Posix function that maps files into memory) attacker can map bad code at that location.</p><p>Defence: mmap no longer makes it possible to map to page 0.</p><h3 id="integer-overflow-attacks">Integer Overflow attacks</h3><p>Integer errors can happen when mathematical operations, and external input lead to a result that is too large to fit within the range of values that can be stored in variables of a given data type.</p><p>Can be exploited to corrupt applications.</p><p>Integer overflow attacks are possible largely due to incorrectly defining numerical data.</p><h3 id="command-injection-attacks">Command Injection Attacks</h3><p>The execution of arbitrary commands on the host operating system via a vulnerable application.</p><p>Command injection attacks are possible largely <strong>due to insufficient input validation</strong> (a complete part of the Defensive Programming approach).</p><p><img src="/images/OP/740044.png" /></p><p>Suppose user enters for the destination file: ‘file2.txt; rm –rf</p><p>Command excited is then: system(“cp file1 file 2; rm –rf”)</p><p>Command injection attacks are possible largely due to insufficient input validation</p><h3 id="time-of-check-to-tome-of-use-attacks">Time of Check to Tome of Use Attacks</h3><p>Exploits a race condition</p><p>Example:</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> fd;</span><br><span class="line"><span class="keyword">if</span>(access(<span class="string">&quot;./my_document&quot;</span>, W_OK)!=<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">fd = open(<span class="string">&quot;./my_document&quot;</span>, O_WRONGLY)</span><br><span class="line">write(fd, user_input, <span class="keyword">sizeof</span>(user_input))</span><br></pre></td></tr></table></figure><p>Between the statements, attacker creates a symbolic link with the same file name to the password file</p><p>Then user writes password information to attackers file.</p><h4 id="insider-attacks">Insider Attacks</h4><p>Executed by programmers from within the company.</p><p>Attackers have specialized knowledge</p><p>Insider Attacks</p><ul><li>Logic Bomb</li><li>Back Doors</li><li>Login Spoofing</li></ul><h5 id="logic-bomb">Logic Bomb</h5><p>A <strong>logic bomb</strong> is a piece of code inserted into an operating system or software application that implements a malicious function after a certain time limit or specific conditions are met.</p><p>Company programmer writes program:</p><ul><li>potential to do harm</li><li>OK as long as he/she enters password daily</li><li>if programmer fired, no password and bomb explodes</li></ul><h6 id="example">Example</h6><p>Michelangelo (logic bomb)</p><ul><li>discovered on 4 February 1991</li><li>designed to infect DOS systems</li><li>the virus overwrites the first one hundred sectors of the hard disk with nulls.</li><li>each year, the virus remained dormant until March 6, the birthday of Renaissance artist Michelangelo.</li><li>The name was chosen by researchers who noticed the coincidence of the activation date</li></ul><h5 id="back-doors">Back Doors</h5><figure><img src="/images/OP/740043.png" alt="" /><figcaption>Defense: Code reviews</figcaption></figure><ol type="a"><li><p>Normal code.</p></li><li><p>Code with a back door inserted.</p></li></ol><h5 id="login-spoofing">Login Spoofing</h5><p><img src="/images/OP/740042.png" /></p><p>Legitimate user attempting to collect other people’s passwords.</p><p><strong>Defence</strong>: have a login sequence start with a key combination the user programs can’t catch: CTLRALT-DEL in Windows cause the current user to log out and system login program started.</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Operating Systems and Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Exercises for Propositional logic</title>
      <link href="2021/02/23/2021-02-23-Exercises-for-Lecture-02-%E2%80%93-Propositional-logic/"/>
      <url>2021/02/23/2021-02-23-Exercises-for-Lecture-02-%E2%80%93-Propositional-logic/</url>
      
        <content type="html"><![CDATA[<h1 id="exercises-for-propositional-logic">Exercises for Propositional logic</h1><p><a href="https://yintelligence.tech/2021/02/23/2021-02-23-Propositional-Logic/">Background</a></p><p>Note: Some of these exercises refer to the IDP system. You can download it from <a href="https://dtai.%20cs.kuleuven.be/software/idp/try">here</a> or use the web-based version at <a href="http://verne.cs.kuleuven.be/idp/server.html">here</a>. The latter has resource limits and can thus only be used for small problems, but should be sufficient for the current assignment.</p><p>Template files to work with IDP for the different exercises are available on Canvas.</p><h2 id="exercise-1-truth-tables">Exercise 1: Truth Tables</h2><p>A journalist stops three friends (Mr. Rossi, Mr. Bianchi and Mr. Verdi) who just left the voting office. He interviews them separately about their votes in the elections. Mr. Rossi declares: “If Bianchi voted for Berlusconi, then also Verdi did”. Mr. Bianchi declares: “If Rossi did not vote for Berlusconi, then also Verdi did not”. Finally, Verdi declares: “Rossi voted for Berlusconi while Bianchi did not”. Let r, b, v denote “Mr Rossi (resp. Mr. Bianchi, Mr. Verdi) has voted for Berlusconi”.</p><p>Formalize the declarations of the three friends and use a truth table to answer the following questions:</p><ul><li>Are the declarations consistent?</li><li>If all three voted for Berlusconi, who is lying?</li><li>If all three are telling the truth, who has voted for Berlusconi and who has voted against him?</li></ul><p>When you are finished, formalize everything in the IDP system and use it to verify your answers.</p><h3 id="solution">Solution</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">vocabulary V&#123;</span><br><span class="line">RossiVotesBerlusconi</span><br><span class="line">BianchiVotesBerlusconi</span><br><span class="line">VerdiVotesBerlusconi</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vocabulary V_extended&#123;</span><br><span class="line">    extern vocabulary V</span><br><span class="line">    RossiTruth</span><br><span class="line">    BianchiTruth</span><br><span class="line">    VerdiTruth</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">theory point1 :V&#123;</span><br><span class="line"> // Use this theory to solve the question <span class="string">&quot;Are the declarations consistent?&quot;</span></span><br><span class="line">    BianchiVotesBerlusconi =&gt; VerdiVotesBerlusconi.</span><br><span class="line">    ~ RossiVotesBerlusconi =&gt; ~VerdiVotesBerlusconi.</span><br><span class="line">    RossiVotesBerlusconi &amp; ~BianchiVotesBerlusconi. </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">theory point2:V_extended&#123;</span><br><span class="line"> //Use this to solve the second question (hint: maybe you need to extended V <span class="keyword">for</span> this...)</span><br><span class="line">  RossiTruth &lt;=&gt; (BianchiVotesBerlusconi =&gt; VerdiVotesBerlusconi).</span><br><span class="line">  BianchiTruth &lt;=&gt; (  ~ RossiVotesBerlusconi =&gt; ~VerdiVotesBerlusconi).</span><br><span class="line">  VerdiTruth &lt;=&gt; ( RossiVotesBerlusconi &amp; ~BianchiVotesBerlusconi ). </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">structure no_assignments:V&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">structure allThreeVoteB:V&#123;</span><br><span class="line">//If needed you can put (partial) assignments here</span><br><span class="line">RossiVotesBerlusconi = <span class="literal">true</span></span><br><span class="line">BianchiVotesBerlusconi = <span class="literal">true</span></span><br><span class="line">VerdiVotesBerlusconi = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">procedure main()&#123;</span><br><span class="line">    //Check the first <span class="keyword">and</span> third question:</span><br><span class="line">    printmodels(allmodels(point1,no_assignments))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;We see two solutions, from this we conclude the statements are consistent&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;We also see that in both solutions Bianchi did not vote Berslusconi and Rossi did vote Berlusconi. We can however make no conclusion about Verdi&quot;</span>)</span><br><span class="line"></span><br><span class="line">    //Check the last question</span><br><span class="line">    printmodels(allmodels(point2,allThreeVoteB))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;We see that Verdi lies in this case&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>The statements can be formalized in logic as follows:</p><table><thead><tr class="header"><th style="text-align: right;">Rossi says:</th><th>b → v</th></tr></thead><tbody><tr class="odd"><td style="text-align: right;">Bianchi says:</td><td>¬r → ¬¬v</td></tr><tr class="even"><td style="text-align: right;">Verdi says:</td><td>r ∧ ¬b</td></tr></tbody></table><p>When creating the truth table, you should should see that</p><ul><li>There are two lines in which all three statements are true. Hence, the declarations are consistent</li><li>In the line of the truth table in which b, v, and r are true, you can see that Verdi’s statement is false, while the other two are true.</li><li>If all three tell the truth, there are still two possibilities. We do know for sure that rossi voted for Berlusconi and bianchi against, but we do not know how verdi voted.</li></ul><h2 id="exercise-2-cnf-transformation">Exercise 2: CNF transformation</h2><p>A classical constraint satisfaction problem is the Graph Coloring problem. A graph is defined as a tuple G = (V, E) where V = {v<sub>1</sub>, v<sub>2</sub>, . . . , v<sub>n</sub>} is the set of <em>vertices</em> and E = {(v<sub>i</sub>, v<sub>j</sub>), . . . ,(v<sub>k</sub>, v<sub>l</sub>)} the set of edges connecting pairs of vertices. The graph we work with is undirected (i.e. if (v<sub>i</sub> , v<sub>j</sub>) ∈ E then (v<sub>j</sub> , v<sub>i</sub>) ∈ E (reflexivity)). Assume that KB is a theory consisting of the general knowledge about colors and graphs and the constraint the coloring function does not assign the same color to connected vertices. Given a graph, the graph coloring problem is now to assign colors which satisfy KB.</p><p>Given a graph with nodes ‘i’, ‘a’ and ‘h’. Take the following propositional vocabulary:</p><ul><li>e<sub>ia</sub>, e<sub>ah</sub> and e<sub>ih</sub> represent whether there is an edge between the nodes.</li><li>b<sub>i</sub> , b<sub>a</sub> and b<sub>h</sub> represent whether the nodes are colored black (assume there are only two colors, so the negation indicates a node has the opposite color).</li></ul><ol type="1"><li><p>Firstly, write down the propositional theory KB.</p></li><li><p>Transform KB into CNF using DeMorgan’s laws.</p></li></ol><p>Assume that node i represents Italy, a represents Austria and h Hungary and consider the additional knowledge that</p><ul><li>Italy is connected to Austria</li><li>Austria is connected to Hungary</li><li>Italy and Hungary are not connected</li></ul><ol start="3" type="1"><li>Add this knowledge to your KB and CNF (do not eliminate anything!).</li><li>Now... simplify the original KB with the additional knowledge <em>before</em> turning it into CNF. What’s the effect?</li><li>Use the IDP system to find colorings for the given graph. Do this twice, once with your theory before putting it in CNF and once after. Verify that they admit the same colorings.</li></ol><h3 id="solution-1">Solution</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">vocabulary V&#123;</span><br><span class="line">//The possible edges.</span><br><span class="line">e_ia</span><br><span class="line">e_ah</span><br><span class="line">e_ih</span><br><span class="line"></span><br><span class="line">//Whether <span class="keyword">or</span> <span class="keyword">not</span> a country is black:</span><br><span class="line">b_i</span><br><span class="line">b_a</span><br><span class="line">b_h</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">theory notInCNF :V&#123;</span><br><span class="line"> // Put your theory BEFORE transformation to CNF here</span><br><span class="line">e_ia =&gt; (b_i &lt;=&gt; ~b_a).</span><br><span class="line">e_ah =&gt; (b_a &lt;=&gt; ~b_h).</span><br><span class="line">e_ih =&gt; (b_i &lt;=&gt; ~b_h).</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">theory inCNF:V&#123;</span><br><span class="line"> // Put your theory AFTER transformation to CNF here</span><br><span class="line">    ~e_ia  | ~b_i | ~b_a. </span><br><span class="line">    ~e_ia  | b_i | b_a. </span><br><span class="line">    ~e_ah  | ~b_h | ~b_a. </span><br><span class="line">    ~e_ah  | b_h | b_a. </span><br><span class="line">    ~e_ih  | ~b_i | ~b_h. </span><br><span class="line">    ~e_ih  | b_i | b_h. </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">structure S:V&#123;</span><br><span class="line">//You can put (partial) assignments here</span><br><span class="line">    //We interpret the edge:</span><br><span class="line">    e_ia = <span class="literal">true</span></span><br><span class="line">    e_ah = <span class="literal">true</span></span><br><span class="line">    e_ih = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">procedure main()&#123;</span><br><span class="line"> //Generate the models of both of the theories. We see they indeed agree:</span><br><span class="line">    printmodels(allmodels(notInCNF,S))</span><br><span class="line">    printmodels(allmodels(inCNF,S))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Exercises </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fundamentals of Computer Science </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Propositional Logic</title>
      <link href="2021/02/23/2021-02-23-Propositional-Logic/"/>
      <url>2021/02/23/2021-02-23-Propositional-Logic/</url>
      
        <content type="html"><![CDATA[<h1 id="propositional-logic">Propositional Logic</h1><p><a href="https://recordings.reu1.blindsidenetworks.com/vub/9a20138c32d4732609cd1316f590644b25b91580-1600675238359/capture/">Video 32:28 ~ end</a></p><p><a href="https://yintelligence.tech/2021/02/23/2021-02-23-Exercises-for-Lecture-02-%E2%80%93-Propositional-logic/">Exercise</a></p><h2 id="propositions">Propositions</h2><p>A <strong>proposition</strong> = a statement that is either <strong>true</strong> or <strong>false</strong>.</p><p><strong>For example</strong>:</p><table><thead><tr class="header"><th>5 &gt; 3</th><th>true</th></tr></thead><tbody><tr class="odd"><td>FISH ⊂ MAMMALS</td><td>false</td></tr><tr class="even"><td>It is raining</td><td>either true or false</td></tr></tbody></table><h3 id="logical-constraints-and-variables">Logical constraints and variables</h3><p>Set of <strong>logical (boolean) constants</strong>: {<em>TRUE</em>, <em>FALSE</em>}</p><p>A <strong>logical (boolean) variable</strong> is a variable that can take only the value <em>TRUE</em> or <em>FALSE</em>.</p><p><u>We use Σ for the set of Boolean variables</u>.</p><p>E.g.: when <em>p</em> represents the idea that 2 is smaller than 3, we can write: p = TRUE</p><ul><li><em>p</em> = TRUE</li></ul><h4 id="logical-operators">Logical operators</h4><p>A proposition can be</p><ul><li>a logical constant</li><li>a logical variable</li><li>an expression combining logical constants and/or logical variables with <strong>logical operators</strong> (i.e. and - inclusive or - not)</li></ul><h3 id="operator-symbols">Operator symbols</h3><p>In English, the words <em>and</em>, <em>or</em> and <em>not</em> are ambiguous</p><p>In order to avoid these ambiguities, the following symbols are used for logical operators</p><table><thead><tr class="header"><th><em>and</em></th><th>∧</th></tr></thead><tbody><tr class="odd"><td><em>inclusive or</em></td><td>∨</td></tr><tr class="even"><td><em>not</em></td><td>¬</td></tr></tbody></table><h3 id="example-propositions">Example propositions</h3><ul><li>Let p: the proposition that it is raining</li><li>Let q: the proposition that 2 is smaller than 3</li></ul><p>Propositions:</p><table><thead><tr class="header"><th>p</th><th>it is raining</th></tr></thead><tbody><tr class="odd"><td>p ∧ q</td><td>it is raining and 2 is smaller than 3</td></tr><tr class="even"><td>p ∨ q</td><td>it is raining or 2 is smaller than 3</td></tr><tr class="odd"><td>¬p</td><td>it is not raining</td></tr></tbody></table><h3 id="defining-propositions">Defining propositions</h3><p><strong>Definition: Propositions</strong>:</p><ul><li>Each of the two logical constants, <em>TRUE</em> and <em>FALSE</em> is a proposition.</li><li>If p ∈ Σ, then p is a proposition.</li><li>If α and β are propositions, then so are (α ∧ β), (α ∨ β), and (¬α).</li></ul><p>Note:</p><ul><li>The definition is recursive</li><li>Parentheses are used to avoid ambiguity</li><li>This definition defines the <strong>syntax</strong> of propositional logic</li></ul><h2 id="state-operators-and-truth-tables">State, operators and truth tables</h2><h3 id="state">State</h3><h4 id="state-of-a-proposition-e.g.-p">State of a <strong>proposition</strong> (e.g. p)</h4><ul><li>Its value</li><li>2 possible states (<em>TRUE</em> or <em>FALSE</em>)</li></ul><h4 id="state-of-a-collection-of-propositions-e.g.-p-q">State of a <strong>collection of propositions</strong> (e.g. p, q)</h4><ul><li>An ordered list of the states of each proposition in the collection</li><li>2<sup>k</sup> possible states (with k = number of propositions in the collection)</li></ul><p>More commonly called <strong>interpretation</strong>, <strong>assignment</strong>, <strong>structure</strong>, <strong>possible world</strong> and defined as a <strong>function</strong> Σ → {<em>TRUE</em>, <em>FALSE</em>}.</p><table><thead><tr class="header"><th style="text-align: center;"><em>p</em></th><th style="text-align: center;"><em>q</em></th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><em>TRUE</em></td><td style="text-align: center;"><em>TRUE</em></td></tr><tr class="even"><td style="text-align: center;"><em>TRUE</em></td><td style="text-align: center;"><em>FALSE</em></td></tr><tr class="odd"><td style="text-align: center;"><em>FALSE</em></td><td style="text-align: center;"><em>TRUE</em></td></tr><tr class="even"><td style="text-align: center;"><em>FALSE</em></td><td style="text-align: center;"><em>FALSE</em></td></tr></tbody></table><h3 id="conjunction">Conjunction</h3><p>∧ (<em>and</em>, <em>conjunction</em>)</p><ul><li>p ∧ q = <em>TRUE</em> when both p = <em>TRUE</em> and q = <em>TRUE</em></li><li>p ∧ q = <em>FALSE</em> in the other three states</li></ul><table><thead><tr class="header"><th>∧</th><th>q</th><th></th><th></th></tr></thead><tbody><tr class="odd"><td>p</td><td></td><td><em>T</em></td><td><em>F</em></td></tr><tr class="even"><td></td><td><em>T</em></td><td><em>T</em></td><td><em>F</em></td></tr><tr class="odd"><td></td><td><em>F</em></td><td><em>F</em></td><td><em>F</em></td></tr></tbody></table><h3 id="disjunction">Disjunction</h3><p>∨ (<em>or</em>, <em>disjunction</em>)</p><ul><li>p ∨ q = <em>FALSE</em> when both p = <em>FALSE</em> and q = <em>FALSE</em></li><li>p ∨ q = <em>TRUE</em> in the other three states</li></ul><table><thead><tr class="header"><th>∨</th><th>q</th><th></th><th></th></tr></thead><tbody><tr class="odd"><td>p</td><td></td><td><em>T</em></td><td><em>F</em></td></tr><tr class="even"><td></td><td><em>T</em></td><td><em>T</em></td><td><em>T</em></td></tr><tr class="odd"><td></td><td><em>F</em></td><td><em>T</em></td><td><em>F</em></td></tr></tbody></table><h3 id="negation">Negation</h3><p>¬ (<em>not</em>, <em>negation</em>)</p><ul><li>¬p = <em>TRUE</em> when p = <em>FALSE</em></li><li>¬p = <em>FALSE</em> when p = <em>TRUE</em></li></ul><table><thead><tr class="header"><th style="text-align: center;">p</th><th style="text-align: center;"></th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><em>T</em></td><td style="text-align: center;"><em>F</em></td></tr><tr class="even"><td style="text-align: center;"><em>F</em></td><td style="text-align: center;"><em>T</em></td></tr></tbody></table><h3 id="evaluating-propositions">Evaluating Propositions</h3><p>Let <em>I</em> : Σ → {<em>TRUE</em>, <em>FALSE</em>} be an interpretation.</p><ul><li><em>TRUE</em> and <em>FALSE</em> are propositions. The value of each of them in <em>I</em> is itself.</li><li>If p ∈ Σ, then the value of p in <em>I</em> is <em>I</em>(p).</li><li>If α and β are propositions, then<ul><li>(¬α) is <em>FALSE</em> in <em>I</em> if α is <em>TRUE</em> in <em>I</em> and vice-versa.</li><li>(α ∧ β) is <em>TRUE</em> in <em>I</em> if both α and β are <em>TRUE</em> in <em>I</em>, and otherwise is <em>FALSE</em> in <em>I</em>.</li><li>(α ∨ β) is <em>FALSE</em> in <em>I</em> if both α and β are <em>FALSE</em> in <em>I</em>, and otherwise is <em>TRUE</em> in <em>I</em>.</li></ul></li></ul><h3 id="exercise">Exercise</h3><p><strong>Consider the effect of parentheses.</strong></p><p>Give a set of truth values for p, q, and r for which the values of (p ∨ q) ∧ r and p ∨ (q ∧ r) are different.</p><p><a href="https://verne.cs.kuleuven.be/idp/server.html">Be lazy, generate models (interpretations that make a proposition true) using the IDP system!</a></p><p>Terminology:</p><ul><li>Vocabulary: Σ</li><li>Theory: set of propositions</li><li>Structure: Interpretation</li><li>Model expansion: Procedure that searches interpretations that make a theory TRUE.</li></ul><h4 id="solution">Solution</h4><ul><li>{p = TRUE, q = FALSE, r = FALSE}</li><li>{p = TRUE, q = TRUE, r = FALSE}</li></ul><h3 id="proofs-with-truth-tables">Proofs with truth tables</h3><h4 id="equivalence">Equivalence</h4><p>Two propositional expressions that have the same value for each and every state are said to be equivalent</p><p>Proof by exhaustive case analysis:</p><table><thead><tr class="header"><th style="text-align: center;">p</th><th style="text-align: center;">q</th><th style="text-align: center;">p ∧ q</th><th style="text-align: center;">¬(p ∧ q)</th><th style="text-align: center;">¬p</th><th style="text-align: center;">¬q</th><th style="text-align: center;">¬p ∨ ¬q</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;"><strong>F</strong></td><td style="text-align: center;">F</td><td style="text-align: center;">F</td><td style="text-align: center;"><strong>F</strong></td></tr><tr class="even"><td style="text-align: center;">T</td><td style="text-align: center;">F</td><td style="text-align: center;">F</td><td style="text-align: center;"><strong>T</strong></td><td style="text-align: center;">F</td><td style="text-align: center;">T</td><td style="text-align: center;"><strong>T</strong></td></tr><tr class="odd"><td style="text-align: center;">F</td><td style="text-align: center;">T</td><td style="text-align: center;">F</td><td style="text-align: center;"><strong>T</strong></td><td style="text-align: center;">T</td><td style="text-align: center;">F</td><td style="text-align: center;"><strong>T</strong></td></tr><tr class="even"><td style="text-align: center;">F</td><td style="text-align: center;">F</td><td style="text-align: center;">F</td><td style="text-align: center;"><strong>T</strong></td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;"><strong>T</strong></td></tr></tbody></table><p>Equivalence between α and β is notated as α ≡ β, so ¬(p ∧ q) ≡ ¬p ∨ ¬q</p><h4 id="tautology">Tautology</h4><p>A <strong>tautology</strong> is a proposition that is equivalent to <em>TRUE</em></p><p>A tautology is true in every assignment, so its column in the truth table contains only <em>TRUE</em>s</p><p>Proof by <strong>exhaustive case analysis</strong></p><table><thead><tr class="header"><th style="text-align: center;">p</th><th style="text-align: center;">¬p</th><th style="text-align: center;">p ∨ ¬p</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">T</td><td style="text-align: center;">F</td><td style="text-align: center;"><strong>T</strong></td></tr><tr class="even"><td style="text-align: center;">F</td><td style="text-align: center;">T</td><td style="text-align: center;"><strong>T</strong></td></tr></tbody></table><h5 id="validity-satisfiability-unsatisfiability">Validity, satisfiability, unsatisfiability</h5><p>A propositional expression is</p><ul><li><strong>valid</strong> if its truth table column has <strong>all</strong> <em>TRUE</em><strong>s</strong>, in which case it is a <strong>tautology</strong></li><li><strong>satisfiable</strong> if its truth table column has <strong>some</strong> <em>TRUE</em><strong>s</strong> (there exists an assignment that <strong>satisfies</strong> it)</li><li><strong>unsatisfiable</strong> if its truth table column has <strong>all</strong> <em>FALSE</em><strong>s</strong>, in which case it is a <strong>contradiction</strong></li></ul><h5 id="exercise-1">Exercise</h5><p>Prove that each of the following expressions is a tautology</p><ul><li>p ∨ <em>TRUE</em></li><li>¬(p ∧ ¬p)</li></ul><h6 id="solution-1">Solution</h6><ul><li><p>p ∨ <em>TRUE</em> is a tautology as its truth table column contains all <em>TRUE</em>s.</p></li><li><p>Truth table for p ∨ <em>TRUE</em>:</p><table><thead><tr class="header"><th style="text-align: center;">p</th><th style="text-align: center;"><em>TRUE</em></th><th style="text-align: center;">p ∨ <em>TRUE</em></th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;"><strong>T</strong></td></tr><tr class="even"><td style="text-align: center;">F</td><td style="text-align: center;">T</td><td style="text-align: center;"><strong>T</strong></td></tr></tbody></table></li><li><p>¬(p ∧ ¬p) is a tautology as its truth table column contains all <em>TRUE</em>s</p></li><li><p>Truth table for ¬(p ∧ ¬p)</p><table><thead><tr class="header"><th style="text-align: center;">p</th><th style="text-align: center;">¬p</th><th style="text-align: center;">p ∧ ¬p</th><th style="text-align: center;">¬(p ∧ ¬p)</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">T</td><td style="text-align: center;">F</td><td style="text-align: center;">F</td><td style="text-align: center;"><strong>T</strong></td></tr><tr class="even"><td style="text-align: center;">F</td><td style="text-align: center;">T</td><td style="text-align: center;">F</td><td style="text-align: center;"><strong>T</strong></td></tr></tbody></table></li></ul><h2 id="laws-of-propositional-logic">Laws of Propositional Logic</h2><h3 id="equivalences-with-one-variable">Equivalences with one variable</h3><ul><li><p>Law of negation: ¬¬p ≡ p</p></li><li><p>Combining a variable with itself:</p></li></ul><table><thead><tr class="header"><th>p ∨ ¬p ≡ TRUE</th><th>Excluded middle</th></tr></thead><tbody><tr class="odd"><td>p ∧ ¬p ≡ FALSE</td><td>Contradiction</td></tr><tr class="even"><td>p ∨ p ≡ p</td><td>Idempotence of ∨</td></tr><tr class="odd"><td>p ∧ p ≡ p</td><td>Idempotence of ∧</td></tr></tbody></table><ul><li>Properties of constants:</li></ul><table><thead><tr class="header"><th>p ∨ TRUE ≡ TRUE</th></tr></thead><tbody><tr class="odd"><td>p ∨ FALSE ≡ p</td></tr><tr class="even"><td>p ∧ TRUE ≡ p</td></tr><tr class="odd"><td>p ∧ FALSE ≡ FALSE</td></tr></tbody></table><h3 id="equivalences-with-multiple-variables">Equivalences with multiple variables</h3><ul><li>Commutativity:<ul><li>p ∧ q ≡ q ∧ p</li><li>p ∨ q ≡ q ∨ p</li></ul></li><li>Associativity:<ul><li>p ∨ (q ∨ r) ≡ (p ∨ q) ∨ r</li><li>p ∧ (q ∧ r) ≡ (p ∧ q) ∧ r</li></ul></li><li>Distributivity:<ul><li>p ∨ (q ∧ r) ≡ (p ∨ q) ∧ (p ∨ r)</li><li>p ∧ (q ∨ r) ≡ (p ∧ q) ∨ (p ∧ r)</li></ul></li><li>DeMorgan’s laws:<ul><li>¬(p ∧ q) ≡ ¬p ∨ ¬q</li><li>¬(p ∨ q) ≡ ¬p ∧ ¬q</li></ul></li><li>Subsumption:<ul><li>p ∧ (p ∨ q) ≡ p</li></ul></li></ul><h3 id="exercise-2">Exercise</h3><p>Prove the following law by DeMorgan using a truth table</p><ul><li>¬(p ∨ q) ≡ ¬p ∧ ¬q</li></ul><h4 id="solution-2">Solution</h4><p><strong>Truth table</strong>:</p><table><thead><tr class="header"><th style="text-align: center;">p</th><th style="text-align: center;">q</th><th style="text-align: center;">p ∨ q</th><th style="text-align: center;">¬(p ∨ q)</th><th style="text-align: center;">¬p</th><th style="text-align: center;">¬q</th><th style="text-align: center;">¬p ∧ ¬q</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;"><strong>F</strong></td><td style="text-align: center;">F</td><td style="text-align: center;">F</td><td style="text-align: center;"><strong>F</strong></td></tr><tr class="even"><td style="text-align: center;">T</td><td style="text-align: center;">F</td><td style="text-align: center;">T</td><td style="text-align: center;"><strong>F</strong></td><td style="text-align: center;">F</td><td style="text-align: center;">T</td><td style="text-align: center;"><strong>F</strong></td></tr><tr class="odd"><td style="text-align: center;">F</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;"><strong>F</strong></td><td style="text-align: center;">T</td><td style="text-align: center;">F</td><td style="text-align: center;"><strong>F</strong></td></tr><tr class="even"><td style="text-align: center;">F</td><td style="text-align: center;">F</td><td style="text-align: center;">F</td><td style="text-align: center;"><strong>T</strong></td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;"><strong>T</strong></td></tr></tbody></table><ul><li>¬(p ∨ q) ≡ ¬p ∧ ¬q</li></ul><h2 id="two-important-operators">Two important operators</h2><h3 id="implication">Implication</h3><p>→ (<em>if then, implies, conditional operator, implication</em>)</p><ul><li>p → q = <em>FALSE</em> when p is <em>TRUE</em> and q is <em>FALSE</em></li><li>p → q = <em>TRUE</em> in all other states</li></ul><table><thead><tr class="header"><th>→</th><th>q</th><th></th><th></th></tr></thead><tbody><tr class="odd"><td>p</td><td></td><td><em>T</em></td><td><em>F</em></td></tr><tr class="even"><td></td><td><em>T</em></td><td><em>T</em></td><td><strong><em>F</em></strong></td></tr><tr class="odd"><td></td><td><em>F</em></td><td><em>T</em></td><td><em>T</em></td></tr></tbody></table><h3 id="biconditional">Biconditional</h3><p>↔︎ (<em>if and only if, biconditional operator</em>)</p><ul><li>p ↔︎ q = <em>TRUE</em> when p and q have the same value</li><li>p ↔︎ q = <em>FALSE</em> when p and q have a different value</li></ul><table><thead><tr class="header"><th>↔︎</th><th>q</th><th></th><th></th></tr></thead><tbody><tr class="odd"><td>p</td><td></td><td><em>T</em></td><td><em>F</em></td></tr><tr class="even"><td></td><td><em>T</em></td><td><em>T</em></td><td><em>F</em></td></tr><tr class="odd"><td></td><td><em>F</em></td><td><em>F</em></td><td><em>T</em></td></tr></tbody></table><p>Called biconditional operator because of the following equivalence:</p><ul><li>p ↔︎ q ≡ (p → q) ∧ (q → p)</li></ul><h3 id="equivalences-with-the-conditional-and-biconditional">Equivalences with the conditional and biconditional</h3><ul><li>Conditional law: p → q ≡ ¬p ∨ q</li><li>Biconditional law: p ↔︎ q ≡ (p → q) ∧ (q → p)</li><li>Contrapositive law: p → q ≡ ¬q → ¬p</li></ul><h3 id="exercise-3">Exercise</h3><p>Prove the contrapositive law using truth tables</p><ul><li>p → q ≡ ¬q → ¬p</li></ul><h4 id="solution-3">Solution</h4><p>Truth table for contrapositive law:</p><table><thead><tr class="header"><th style="text-align: center;">p</th><th style="text-align: center;">q</th><th style="text-align: center;">p → q</th><th style="text-align: center;">¬p</th><th style="text-align: center;">¬q</th><th style="text-align: center;">¬p → ¬q</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;">F</td><td style="text-align: center;">F</td><td style="text-align: center;"><strong>T</strong></td></tr><tr class="even"><td style="text-align: center;">T</td><td style="text-align: center;">F</td><td style="text-align: center;"><strong>F</strong></td><td style="text-align: center;">T</td><td style="text-align: center;">F</td><td style="text-align: center;"><strong>F</strong></td></tr><tr class="odd"><td style="text-align: center;">F</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;">F</td><td style="text-align: center;">T</td><td style="text-align: center;"><strong>T</strong></td></tr><tr class="even"><td style="text-align: center;">F</td><td style="text-align: center;">F</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;"><strong>T</strong></td></tr></tbody></table><ul><li>p → q ≡ ¬q → ¬p</li></ul><h3 id="exercise-4">Exercise</h3><p>Prove that the following expression is a tautology, using truth tables</p><ul><li>((p → q) ∧ (q → r)) → (p → r)</li></ul><h4 id="solution-4">Solution</h4><p><strong>Truth table</strong>:</p><table><thead><tr class="header"><th style="text-align: center;">p</th><th style="text-align: center;">q</th><th style="text-align: center;">r</th><th style="text-align: center;">p → q</th><th style="text-align: center;">q → r</th><th style="text-align: center;">((p → q) ∧ (q → r))</th><th style="text-align: center;">p → r</th><th style="text-align: center;">((p → q) ∧ (q → r)) → (p → r)</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;"><strong>T</strong></td></tr><tr class="even"><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;">F</td><td style="text-align: center;">T</td><td style="text-align: center;">F</td><td style="text-align: center;">F</td><td style="text-align: center;">F</td><td style="text-align: center;"><strong>T</strong></td></tr><tr class="odd"><td style="text-align: center;">T</td><td style="text-align: center;">F</td><td style="text-align: center;">T</td><td style="text-align: center;">F</td><td style="text-align: center;">T</td><td style="text-align: center;">F</td><td style="text-align: center;">T</td><td style="text-align: center;"><strong>T</strong></td></tr><tr class="even"><td style="text-align: center;">T</td><td style="text-align: center;">F</td><td style="text-align: center;">F</td><td style="text-align: center;">F</td><td style="text-align: center;">T</td><td style="text-align: center;">F</td><td style="text-align: center;">F</td><td style="text-align: center;"><strong>T</strong></td></tr><tr class="odd"><td style="text-align: center;">F</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;"><strong>T</strong></td></tr><tr class="even"><td style="text-align: center;">F</td><td style="text-align: center;">T</td><td style="text-align: center;">F</td><td style="text-align: center;">T</td><td style="text-align: center;">F</td><td style="text-align: center;">F</td><td style="text-align: center;">T</td><td style="text-align: center;"><strong>T</strong></td></tr><tr class="odd"><td style="text-align: center;">F</td><td style="text-align: center;">F</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;"><strong>T</strong></td></tr><tr class="even"><td style="text-align: center;">F</td><td style="text-align: center;">F</td><td style="text-align: center;">F</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;">T</td><td style="text-align: center;"><strong>T</strong></td></tr></tbody></table><ul><li>((p → q) ∧ (q → r)) → (p → r)</li></ul><h3 id="exercise-5">Exercise</h3><p>Prove by substitution that the following expression is a tautology</p><ul><li>p ∨ (¬p ∧ q) ≡ (p ∨ q)</li></ul><h4 id="solution-5">Solution</h4><p>p ∨ (¬p ∧ q) ≡ (p ∨ ¬p) ∧ (p ∨ q) Distributive law</p><p>p ∨ (¬p ∧ q) ≡ TRUE ∧ (p ∨ q) Excluded middle</p><p>p ∨ (¬p ∧ q) ≡ (p ∨ q) Property of constant</p><h2 id="normal-forms">Normal forms</h2><h3 id="conjunctive-normal-form-cnf">Conjunctive normal form (CNF)</h3><p>An expression is said to be in <strong>conjunctive normal form</strong>, if</p><ul><li>it is a conjunction of disjunctions, and</li><li>the negation operator only applies to logic variables</li></ul><p>E.g. convert p ↔︎ q into CNF:</p><p>p ↔︎ q ≡ (p → q) ∧ (q → p) Biconditional law</p><p>p ↔︎ q ≡ (¬p ∨ q) ∧ (¬q ∨ p) Contrapositive law</p><h3 id="disjunctive-normal-form-dnf">Disjunctive normal form (DNF)</h3><p>An expression is said to be in <strong>disjunctive normal form</strong>, if it is a disjunction of conjunctions of logic variables and negated logic variables</p><p>≡ (¬p ∨ q) ∧ (¬q ∨ p)</p><p>≡ (¬p ∧ ¬q) ∨ (¬p ∧ p) ∨ (q ∧ ¬q) ∨ (q ∧ p) Distributive law</p><p>≡ (¬p ∧ ¬q) ∨ <em>FALSE</em> ∨ <em>FALSE</em> ∨ (q ∧ p) Excluded middle</p><p>≡ (¬p ∧ ¬q) ∨ (q ∧ p) Properties of constant</p><h3 id="exercise-6">Exercise</h3><p>The operator ⊕ expresses the idea of exclusive or, that is, a choice between alternatives. Thus p ⊕ q is TRUE when exactly one of p, q is TRUE, but is FALSE when both or neither is TRUE</p><ul><li>Give the shortest possible equivalence for p ⊕ q</li><li>Give an expression equivalent to p ⊕ q containing only ∧, ∨, and ¬ as its operators</li></ul><h4 id="solution-6">Solution</h4><ul><li>¬(p ↔︎ q)</li><li>(p ∧ ¬q) ∨ (¬p ∧ q)</li></ul><h3 id="exercise-7">Exercise</h3><p>Prove distributivity from the right of ∧ over ∨, algebraically. That is, use a sequence of equivalences to show that</p><ul><li>p ∨ q) ∧ r ≡ (p ∧ r) ∨ (q ∧ r)</li></ul><h4 id="solution-7">Solution</h4><p>(p ∨ q) ∧ r ≡ r ∧ (p ∨ q) Commutativity</p><p>(p ∨ q) ∧ r ≡ (r ∧ p) ∨ (r ∧ q) Distributivity</p><p>(p ∨ q) ∧ r ≡ (p ∧ r) ∨ (q ∧ r) Commutativity</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fundamentals of Computer Science </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Intro, Hello World Java</title>
      <link href="2021/02/23/2021-02-23-Intro,-Hello-World-Java/"/>
      <url>2021/02/23/2021-02-23-Intro,-Hello-World-Java/</url>
      
        <content type="html"><![CDATA[<h1 id="intro-hello-world-java">Intro, Hello World Java</h1><p><a href="http://fa20.datastructur.es/">Website</a></p><p><a href="https://www.youtube.com/playlist?list=PL8FaHk7qbOD5k3bSznbTuZERTwr6lg2d_">Video</a></p><p><a href="https://github.com/Berkeley-CS61B/lectureCode-fa20/tree/master/intro1">Code</a></p><p><a href="http://fa20.datastructur.es/materials/hw/hw0/hw0#the-enhanced-for-loop">Homework</a></p><h2 id="java-and-object-orientation">Java and Object Orientation</h2><p>Java is an object oriented language with strict requirements:</p><ul><li>Every Java file must contain a class declaration*.</li><li><strong>All code</strong> lives inside a class*, even helper functions, global constants, etc.</li><li>To run a Java program, you typically define a main method using public static void main(String[] args)</li></ul><p>*: This is not completely true, e.g. we can also declare “interfaces” in .java files that may contain code. We’ll cover these later.</p><h2 id="java-and-static-typing">Java and Static Typing</h2><p>Java is statically typed!</p><ul><li>All variables, parameters, and methods must have a declared type.</li><li>That type can never change.</li><li>Expressions also have a type, e.g. “larger(5, 10) + 3” has type int.</li><li>The compiler checks that all the types in your program are compatible <strong>before the program ever runs</strong>!<ul><li>e.g. String x = larger(5, 10) + 3 will fail to compile.</li><li>This is unlike a language like Python, where type checks are performed DURING execution.</li></ul></li></ul><h2 id="hello-world"><a href="https://www.youtube.com/watch?v=E3noTK6T8AE&amp;list=PL8FaHk7qbOD5k3bSznbTuZERTwr6lg2d_&amp;index=1">Hello World</a></h2><p><strong>Our First Java Program.</strong> Printing Hello World is as easy as:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. All code in Java must be part of a class.</span></span><br><span class="line"><span class="comment">2. We delimit the beginning and end of segments of code</span></span><br><span class="line"><span class="comment">   using &#123; and &#125;.</span></span><br><span class="line"><span class="comment">3. All statements in Java must end in a semi-colon.</span></span><br><span class="line"><span class="comment">4. For code to run we need public static void main(String[] args)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="static-typing"><a href="https://www.youtube.com/watch?v=xX04gYy9en0&amp;list=PL8FaHk7qbOD5k3bSznbTuZERTwr6lg2d_&amp;index=2">Static Typing</a></h2><p>Let us try doing something a little more complicated.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> x &lt; <span class="number">10</span>:</span><br><span class="line">print(x)</span><br><span class="line">x = x + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">x = <span class="string">&quot;horse&quot;</span></span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">print(<span class="number">5</span> + <span class="string">&quot;horse&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloNumbers</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (x &lt; <span class="number">10</span>) &#123;</span><br><span class="line">System.out.println(x);</span><br><span class="line">x = x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">x = <span class="string">&quot;horse&quot;</span>; <span class="comment">//cause error here</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. Before Java variables can be used, they must be declared.</span></span><br><span class="line"><span class="comment">2. Java variables must have a specific type.</span></span><br><span class="line"><span class="comment">3. Java variable types can never change.</span></span><br><span class="line"><span class="comment">4. Types are verified before the code even runs!!!</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="declaring-functions"><a href="https://www.youtube.com/watch?v=ToJrue6Kg9A&amp;list=PL8FaHk7qbOD5k3bSznbTuZERTwr6lg2d_&amp;index=3">Declaring Functions</a></h2><p>Define a function in python:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">larger</span>(<span class="params">x, y</span>):</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;Returns the larger of x and y.&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">if</span> (x &gt; y):</span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line"><span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line">print(larger(-<span class="number">5</span>, <span class="number">10</span>))</span><br></pre></td></tr></table></figure><p>Try to do this in Java:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LargerDemo</span> </span>&#123;</span><br><span class="line"><span class="comment">/** Returns the larger of x and y. */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">larger</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt; y) &#123;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(larger(-<span class="number">5.5</span>, <span class="number">10</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. Functions must be declared as part of a class in Java.</span></span><br><span class="line"><span class="comment">   A function that is part of a class is called a &quot;method&quot;.</span></span><br><span class="line"><span class="comment">   So in Java, all functions are methods.</span></span><br><span class="line"><span class="comment">2. To define a function in Java, we use &quot;public static&quot;.</span></span><br><span class="line"><span class="comment">   We will see alternate ways of defining functions later.</span></span><br><span class="line"><span class="comment">3. All parameters of a function must have a declared type,</span></span><br><span class="line"><span class="comment">   and the return value of the function must have a declared type.</span></span><br><span class="line"><span class="comment">   Functions in Java return only one value!</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="overview">Overview</h2><p><strong>Key Syntax Features</strong>. Our first programs reveal several important syntax features of Java:</p><ul><li><p>All code lives inside a class.</p></li><li><p>The code that is executed is inside a function, a.k.a. method, called <code>main</code>.</p></li><li><p>Curly braces are used to denote the beginning and end of a section of code, e.g. a class or method declaration.</p></li><li><p>Statements end with semi-colons.</p></li><li><p>Variables have declared types, also called their “static type”.</p></li><li><p>Variables must be declared before use.</p></li><li><p>Functions must have a return type. If a function does not return anything, we use void,</p></li><li><p>The compiler ensures type consistency. If types are inconsistent, the program will not compile.</p></li></ul><p><strong>Static Typing.</strong> Static typing is one of the best features of Java. It gives us a number of important advantages over languages without static typing:</p><ul><li>Types are checked before the program is even run, allowing developers to catch type errors with ease.</li><li>If you write a program and distribute the compiled version, it is (mostly) guaranteed to be free of any type errors. This makes your code more reliable.</li><li>Every variable, parameter, and function has a declared type, making it easier for a programmer to understand and reason about code.</li></ul><p><strong>Command line compilation and execution.</strong> <code>javac</code> is used to compile programs. <code>java</code> is used to execute programs. We must always compile before execution.</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structures </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Functions</title>
      <link href="2021/02/23/2021-02-22-Functions/"/>
      <url>2021/02/23/2021-02-22-Functions/</url>
      
        <content type="html"><![CDATA[<h1 id="functions">Functions</h1><p><a href="https://inst.eecs.berkeley.edu/~cs61a/fa20/">Website</a></p><p><a href="https://www.youtube.com/watch?v=0kQKzc2yQQs&amp;list=PL6BsET-8jgYUOR-QB-3KBQBgnQMGfGPb4">Video</a></p><p><a href="http://composingprograms.com/pages/11-getting-started.html">Book 1.1</a> <a href="http://composingprograms.com/pages/12-elements-of-programming.html">Book 1.2</a></p><h2 id="expressions"><a href="https://www.youtube.com/watch?v=0P4kOL7pFFo&amp;list=PL6BsET-8jgYUOR-QB-3KBQBgnQMGfGPb4&amp;index=2">Expressions</a></h2><p>An expression describes a computation and evaluates to a value, all expressions can use function call notation.</p><p><img src="/images/CS61A/784180.png" /></p><h3 id="anatomy-of-a-call-expression">Anatomy of a Call Expression</h3><p><strong>Evaluation procedure for call expressions</strong>:</p><ol type="1"><li>Evaluate the operator and then the operand subexpressions</li><li><strong>Apply</strong> the <strong>function</strong> that is the value of the operator to the <strong>arguments</strong> that are the values of the operands</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Call expressions</span></span><br><span class="line"><span class="built_in">max</span>(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">min</span>(<span class="number">1</span>, -<span class="number">2</span>, <span class="number">3</span>, -<span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">pow</span>(<span class="number">100</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">pow</span>(<span class="number">2</span>, <span class="number">100</span>)</span><br></pre></td></tr></table></figure><h3 id="evaluating-nested-expressions">Evaluating Nested Expressions</h3><p><img src="/images/CS61A/784181.png" /></p><h2 id="names-assignment-and-user-defined-functions"><a href="https://www.youtube.com/watch?v=zYC7tKfKPtM&amp;list=PL6BsET-8jgYUOR-QB-3KBQBgnQMGfGPb4&amp;index=3">Names, Assignment, and User-Defined Functions</a></h2><p>How name works?</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Imports</span></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> pi</span><br><span class="line">pi * <span class="number">71</span> / <span class="number">223</span></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sin</span><br><span class="line">sin(pi/<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>But we can define our own names using an assignment statement.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Assignment</span></span><br><span class="line">radius = <span class="number">10</span></span><br><span class="line"><span class="number">2</span> * radius</span><br><span class="line">area, circ = pi * radius * radius, <span class="number">2</span> * pi * radius</span><br><span class="line">radius = <span class="number">20</span></span><br></pre></td></tr></table></figure><p>Now we have defined the area and the circumference of a circle with radius 10, but they do not actually remember where those values came from. if we change the radius at end, the area is not influenced.</p><p>Assignment statements can also give names to functions:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Function values</span></span><br><span class="line"><span class="built_in">max</span></span><br><span class="line"><span class="built_in">max</span>(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">f = <span class="built_in">max</span></span><br><span class="line">f</span><br><span class="line">f(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">max</span> = <span class="number">7</span></span><br><span class="line">f(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">f(<span class="number">3</span>, <span class="built_in">max</span>)</span><br><span class="line">f = <span class="number">2</span></span><br><span class="line"><span class="comment"># f(3, 4)</span></span><br><span class="line">__builtins__.<span class="built_in">max</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># User-defined functions</span></span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> add, mul</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> mul(x, x)</span><br><span class="line"></span><br><span class="line">square(<span class="number">21</span>)</span><br><span class="line">square(add(<span class="number">2</span>, <span class="number">5</span>))</span><br><span class="line">square(square(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_squares</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> add(square(x), square(y))</span><br><span class="line">sum_squares(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">sum_squares(<span class="number">5</span>, <span class="number">12</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># area function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area</span>():</span></span><br><span class="line">    <span class="keyword">return</span> pi * radius * radius</span><br><span class="line">area()</span><br><span class="line">radius = <span class="number">20</span></span><br><span class="line">area()</span><br><span class="line">radius = <span class="number">10</span></span><br><span class="line">area()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Name conflicts</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span>(<span class="params">square</span>):</span></span><br><span class="line">    <span class="keyword">return</span> mul(square, square)</span><br><span class="line">square(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><h3 id="types-of-expressions">Types of Expressions</h3><p>Primitive expressions:</p><p><img src="/images/CS61A/784182.png" /></p><p>Call expressions:</p><p><img src="/images/CS61A/784183.png" /></p><h3 id="discussion-question-1">Discussion Question 1</h3><p>What is the value of the final expression in this sequence?</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="built_in">min</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="built_in">max</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g, h = <span class="built_in">min</span>, <span class="built_in">max</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span> = g</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>(f(<span class="number">2</span>, g(h(<span class="number">1</span>, <span class="number">5</span>), <span class="number">3</span>)), <span class="number">4</span>) </span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h2 id="environment-diagrams"><a href="https://www.youtube.com/watch?v=gyk0Qutui1s&amp;list=PL6BsET-8jgYUOR-QB-3KBQBgnQMGfGPb4&amp;index=4">Environment Diagrams</a></h2><p>Environment diagrams visualize the interpreter’s process.</p><p><img src="/images/CS61A/784184.png" /></p><p><strong>Code (left):</strong></p><ul><li>Statements and expressions</li><li>Arrows indicate evaluation order</li></ul><p><strong>Frames (right):</strong></p><ul><li>Each name is bound to a value</li><li>Within a frame, a name cannot be repeated</li></ul><h3 id="assignment-statements">Assignment Statements</h3><p><img src="/images/CS61A/784185.png" /></p><p><strong>Execution rule for assignment statements:</strong></p><ol type="1"><li>Evaluate all expressions to the right of = from left to right.</li><li>Bind all names to the left of = to those resulting values in the current frame.</li></ol><h3 id="discussion-question-1-solution">Discussion Question 1 Solution</h3><p><img src="/images/CS61A/784186.png" /></p><h2 id="defining-functions"><a href="https://www.youtube.com/watch?v=j3uTRrPBrKk&amp;list=PL6BsET-8jgYUOR-QB-3KBQBgnQMGfGPb4&amp;index=5">Defining Functions</a></h2><p>Assignment is a simple means of abstraction: binds names to values</p><p>Function definition is a more powerful means of abstraction: binds names to expressions</p><p><img src="/images/CS61A/784187.png" /></p><p><strong>Execution procedure for def statements:</strong></p><ol type="1"><li>Create a function with signature "name"("formal parameters")</li><li>Set the body of that function to be everything indented after the first line</li><li>Bind "name" to that function in the current frame</li></ol><h3 id="calling-user-defined-functions">Calling User-Defined Functions</h3><p><strong>Procedure for calling/applying user-defined functions (version 1):</strong></p><ol type="1"><li>Add a local frame, forming a new environment</li><li>Bind the function's formal parameters to its arguments in that frame</li><li>Execute the body of the function in that new environment</li></ol><p><img src="/images/CS61A/784188.png" /></p><p><img src="/images/CS61A/784189.png" /></p><h3 id="looking-up-names-in-environments">Looking Up Names In Environments</h3><p>Every expression is evaluated in the context of an environment.</p><p>So far, the current environment is either:</p><ul><li>The global frame alone, or</li><li>A local frame, followed by the global frame.</li></ul><p><strong><em>Most important two things</em></strong>:</p><p>An environment is a sequence of frames.</p><p>A name evaluates to the value bound to that name in the earliest frame of the current environment in which that name is found.</p><p>E.g., to look up some name in the body of the square function:</p><ul><li>Look for that name in the local frame.</li><li>If not found, look for it in the global frame. (Built-in names like “max” are in the global frame too, but we don’t draw them in environment diagrams.)</li></ul>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Structure and Interpretation of Computer Programs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Protection - Security</title>
      <link href="2021/02/23/2021-02-23-Security/"/>
      <url>2021/02/23/2021-02-23-Security/</url>
      
        <content type="html"><![CDATA[<h1 id="security---protection">Security - Protection</h1><p><a href="https://vub-my.sharepoint.com/personal/bruno_da_silva_vub_be/_layouts/15/onedrive.aspx?originalPath=aHR0cHM6Ly92dWItbXkuc2hhcmVwb2ludC5jb20vOmY6L2cvcGVyc29uYWwvYnJ1bm9fZGFfc2lsdmFfdnViX2JlL0V1ZWdTdWlYa3JCSWhnNXhVMFgzZ2s4QjhSNlFQYkRFbVZLMFNCUmlIQXVTWVE%5FcnRpbWU9LUpaZmJ0dlgyRWc&amp;id=%2Fpersonal%2Fbruno%5Fda%5Fsilva%5Fvub%5Fbe%2FDocuments%2FCOURSES%2FOSSEC%2020%20%2D%2021%20Semester%202%2FRecordings%2F%5BOSSEC%5D%20%2D%20Lecture%203%2Emp4&amp;parent=%2Fpersonal%2Fbruno%5Fda%5Fsilva%5Fvub%5Fbe%2FDocuments%2FCOURSES%2FOSSEC%2020%20%2D%2021%20Semester%202%2FRecordings">Video</a></p><h2 id="computer-security-triad">Computer security triad</h2><p>Three key objectives are at the heart of computer security</p><p><img src="/images/OP/5943210.png" /></p><h2 id="can-we-build-secure-systems">Can we build secure systems?</h2><p>Two questions concerning security:</p><ol type="1"><li>Is it possible to build a secure computer system?</li><li>If so, why is it not done?</li></ol><h2 id="trusted-computing-base">Trusted computing base</h2><p><strong>Reference monitor</strong></p><p>Accepts all system call security and makes security decisions</p><p><img src="/images/OP/5943211.png" /></p><h2 id="protection-domains">Protection domains</h2><ul><li><p>Domain is a collection of access rights</p></li><li><p>Domain is a set of (object, rights)pairs.</p><ul><li>Each pair specifies an object and some operation that can be preformed on it.</li><li>Right, in this context, means the permission to perform one of the operations.</li></ul></li></ul><p><strong>Example:</strong></p><figure><img src="/images/OP/5943212.png" alt="" /><figcaption>Three protection domains.</figcaption></figure><h2 id="controlling-access-to-resources">Controlling access to resources</h2><h3 id="principle-of-least-authorityprivilege">Principle of least authority/privilege</h3><p>In general, <strong>Security</strong> works best when each domain has the <strong>minimum</strong> objects and privileges to do its work and no more.</p><p>At each abstraction layer, every element should be able to access only the resources necessary to perform its task.</p><figure><img src="/images/OP/5943213.png" alt="" /><figcaption>A protection matrix.</figcaption></figure><h3 id="two-methods-of-implementation">Two methods of implementation</h3><ul><li>Access Control lists</li><li>Capabilities list</li></ul><h4 id="access-control-lists">Access Control lists</h4><p><strong>Access control lists</strong> associate each object with an ordered list containing all the domains that may access the object and how.</p><p><img src="/images/OP/5943214.png" /></p><p>Many systems support the concept of a group of users. Groups have names and can be included in ACLs.</p><h4 id="capabilities-list">Capabilities list</h4><p>When capabilities are used, each process has a capability list.</p><p>Each element of this list is called capability, which grants the owner certain rights on a certain object.</p><p>Capability lists are themselves objects and may be pointed to from other capability lists, thus facilitating sharing of subdomains</p><p><img src="/images/OP/5943251.png" /></p><p>Protect the list from tampering:</p><ul><li>Tagged architecture</li><li>C-list inside the operating system</li><li>A cryptographically protected capability.</li></ul><p>Suited for distributed files</p><h2 id="formal-models-of-secure-systems">Formal models of secure systems</h2><p>Protection matrices are <strong>not static</strong>.</p><ol type="a"><li><p>An authorized state.</p></li><li><p>An unauthorized state.</p></li></ol><p><img src="/images/OP/5943215.png" /></p><h2 id="multilevel-security">Multilevel security</h2><p>Discretionary Access Control</p><ul><li>Operating systems allow individual to determine who may read and write their files</li></ul><p>Mandatory Access Control</p><ul><li>Organizational rules state who can see and modify what.</li></ul><h3 id="bell-lapadula-model">Bell-LaPadula Model</h3><p>Bell-LaPadula Model rules for information flow:</p><ol type="1"><li>The simple security property<ul><li>Process running at security level k can read only objects at its level or lower</li></ul></li><li>The * property<ul><li>Process running at security level k can write only objects at its level or higher</li></ul></li></ol><figure><img src="/images/OP/5943216.png" alt="" /><figcaption>The Bell-LaPadula multilevel security model.</figcaption></figure><p>The Bell-LaPadula multilevel security model was devised to keep secrets, not guarantee the integrity of data.</p><h3 id="biba-model">BIBA model</h3><p>To guarantee the integrity of the data:</p><ol type="1"><li>The simple integrity principle<ul><li>process running at security level k can write only objects at its level or lower (no write up).</li></ul></li><li>The integrity * property<ul><li>process running at security level k can read only objects at its level or higher (no read down).</li></ul></li></ol><p><em>BUT security leaks still can occur</em></p><h2 id="convert-channels">Convert channels</h2><p><strong>Lampson’s model</strong>, showing how information leaks, was originally formulated in terms of a single timesharing system, but the same ideas can be adapted to applications running in the cloud.</p><ol type="a"><li><p>The client, server, and collaborator processes.</p></li><li><p>The encapsulated server can still leak to the collaborator via covert channels.</p></li></ol><p><img src="/images/OP/5943217.png" /></p><figure><img src="/images/OP/5943218.png" alt="" /><figcaption>Figure 9-13. A covert channel using file locking.</figcaption></figure><h2 id="steganography">Steganography</h2><h3 id="example">Example</h3><p>The German Embassy in Washington, DC, sent these messages in telegrams to their headquarters in Berlin during World War I (Kahn 1996).</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PRESIDENT&#39;S EMBARGO RULING SHOULD HAVE IMMEDIATE NOTICE.</span><br><span class="line">GRAVE SITUATION AFFECTING INTERNATIONAL LAW. STATEMENT</span><br><span class="line">FORESHADOWS RUIN OF MANY NEUTRALS. YELLOW JOURNALS</span><br><span class="line">UNIFYING NATIONAL EXCITEMENT IMMENSELY.</span><br></pre></td></tr></table></figure><h3 id="stegtorrent">"Stegtorrent"</h3><p>Bob sends messages through computers which he previously established control over.</p><p>The order of the messages and which computer sends them, hides the secret.</p><ul><li>Bob commands two computers to request a file from Alice</li><li>Alice send message to computer 1 then computer 2</li></ul><p><strong>➩ Binary 1</strong></p><ul><li>Alice sends message to computer 2 then compute 1</li></ul><p><strong>➩ Binary 0</strong></p><h4 id="skyde-skype-hide">Skyde (Skype Hide)</h4><p>Skype packs data into audio packets while Alice is talking</p><p>Skype <em>continues</em> to send audio packets when Alice is silent.</p><ul><li><p>This improves the quality of the call and helps data continue to clear firewalls</p><p>‘Silent’ packets are hijacked contents are replaced with encrypted data</p></li><li><p>Receiver application just assumes the original silent packets were lost 30% of silent packets can be compromised without notice</p></li></ul><h3 id="example-1">Example</h3><ul><li>Pictures appear the same</li><li>Picture on right has text of 5 Shakespeare plays<ul><li>encrypted, inserted into low order bits of color values</li></ul></li></ul><p><img src="/images/OP/5943219.png" /></p><ol type="a"><li><p>Three zebras and a tree.</p></li><li><p>Three zebras, a tree, and the complete text of five plays by William Shakespeare.</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Operating Systems and Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Course Information</title>
      <link href="2021/02/22/2021-02-22-Course-Information/"/>
      <url>2021/02/22/2021-02-22-Course-Information/</url>
      
        <content type="html"><![CDATA[<h1 id="course-information">Course Information</h1><p><a href="https://caliweb.vub.be/?page=course-offer&amp;id=001855&amp;anchor=1&amp;target=pr&amp;year=2021&amp;language=en&amp;output=html">Website</a></p><p><a href="https://recordings.reu1.blindsidenetworks.com/vub/9a20138c32d4732609cd1316f590644b25b91580-1600675238359/capture/">Video ~ 31:54</a></p><h2 id="course-content">Course content</h2><p><strong>Logic</strong> for Computer Science</p><ul><li>Propositional <strong>Logic</strong></li><li>Predicate <strong>Logic</strong></li><li>Proof Strategies (truth tables, substitution, rules of inference, mathematical induction)</li></ul><p><strong>Language Models</strong> for Computer Science</p><ul><li>Finite <strong>Automata</strong> (DFA, NFA)</li><li>Regular <strong>languages</strong> and regular expressions</li><li>Context-free Grammars</li><li>Push-down <strong>automata</strong> and parsing</li><li><strong>Turing machines</strong>, computability and undecidability</li></ul>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fundamentals of Computer Science </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Introduction to data structure</title>
      <link href="2021/02/22/2021-02-22-Introduction-to-data-structure/"/>
      <url>2021/02/22/2021-02-22-Introduction-to-data-structure/</url>
      
        <content type="html"><![CDATA[<h1 id="introduction-to-data-structure">Introduction to data structure</h1><p><a href="http://fa20.datastructur.es/">Website</a></p><p><a href="https://www.youtube.com/watch?v=6PCa4OHCfvM&amp;feature=youtu.be">Video</a></p><h2 id="what-is-61b-about">What is 61B about?</h2><ul><li>Writing code that runs efficiently.<ul><li>Good algorithms.</li><li>Good data structures.</li></ul></li><li>Writing code efficiently.<ul><li>Designing, building, testing, and debugging large programs.</li><li>Use of programming tools.<ul><li>git, IntelliJ, JUnit, and various command line tools.</li></ul></li><li>Java (not the focus of the course!)</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structures </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>An Introduction to Computer Science</title>
      <link href="2021/02/22/2021-02-22-An-Introduction-to-Computer-Science/"/>
      <url>2021/02/22/2021-02-22-An-Introduction-to-Computer-Science/</url>
      
        <content type="html"><![CDATA[<h1 id="an-introduction-to-computer-science">An Introduction to Computer Science</h1><p><a href="https://inst.eecs.berkeley.edu/~cs61a/fa20/">Website</a></p><p><a href="https://www.youtube.com/watch?v=CoHCUimLmdM">Video</a></p><h2 id="what-is-computer-science">What is Computer Science?</h2><p>The study of</p><ul><li>What problems can be solved using computation,</li><li>How to solve those problems,</li><li>and What techniques lead to effective solutions</li></ul><p>Systems</p><p>Artificial Intelligence:</p><ul><li>Decision Making</li><li>Robotics</li><li>Natural Language Processing<ul><li>Answering Questions</li><li>Translation</li><li>...</li></ul></li><li>...</li></ul><p>Graphics</p><p>Security</p><p>Networking</p><p>Programming Languages</p><p>Theory Scientific</p><p>Computing</p><p>...</p><h2 id="what-is-this-course-about">What is This Course About?</h2><p>A course about managing complexity</p><ul><li><p>Mastering abstraction</p></li><li><p>Programming paradigms</p></li></ul><p>An introduction to programming</p><p>Full understanding of Python fundamentals</p><ul><li>Combining multiple ideas in large projects</li><li>How computers interpret programming languages</li><li>Different types of languages: Scheme &amp; SQL</li></ul><p>A challenging course that will demand a lot of you</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Structure and Interpretation of Computer Programs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Diodes &amp; Transistors - Basics</title>
      <link href="2021/02/22/2021-02-22-Electronics---Diodes-&amp;-Transistors---Basics/"/>
      <url>2021/02/22/2021-02-22-Electronics---Diodes-&amp;-Transistors---Basics/</url>
      
        <content type="html"><![CDATA[<h1 id="electronics-diodes-transistors---basics">Electronics: Diodes &amp; Transistors - Basics</h1><p><a href="https://recordings.reu1.blindsidenetworks.com/vub/bfd595392b5cb7edf0e177b1736aa5dfcf4feb22-1613984626800/capture/">Video 8:02 ~ end</a></p><p>The Diode and the transistor:</p><ul><li>(Recap on semiconductors &amp; doping)</li><li>Components that will be covered<ul><li>The Diode</li><li>The Bipolar (Junction) Transistor (BJT)</li><li>The Field Effect Transistor (FET)</li></ul></li><li>For each component, we will see:<ul><li>Basic operation principles</li><li>Basic structure</li><li>V-I Characteristics</li><li>Applications</li></ul></li></ul><h2 id="the-diode-938">The Diode 9:38</h2><h3 id="how-is-a-diode-built">How is a diode built?</h3><figure><img src="/images/EP/361336.png" alt="" /><figcaption>p-n junction</figcaption></figure><h3 id="how-does-a-diode-work-1051---1837"><a href="https://www.sohu.com/a/120667906_505888">How does a diode work?</a> 10:51 - 18:37</h3><figure><img src="/images/EP/361.png" alt="" /><figcaption>Ideal model</figcaption></figure><p><strong>How does the applied voltage affect the current?</strong></p><figure><img src="/images/EP/3613360.png" alt="" /><figcaption>12:45</figcaption></figure><h2 id="characteristics-of-a-diode-1840">Characteristics of a diode 18:40</h2><h3 id="current-voltage-characteristic">Current-Voltage characteristic</h3><figure><img src="/images/EP/3613.png" alt="" /><figcaption>I-V curve</figcaption></figure><h3 id="the-diode-as-a-switch-2146">The diode as a switch 21:46</h3><figure><img src="/images/EP/3612.png" alt="" /><figcaption>Further simplifications, valid for many applications</figcaption></figure><h3 id="small-signal-model-2300">Small signal model 23:00</h3><p><img src="/images/EP/3611.png" /></p><h2 id="diodes-applications-2925">Diodes: Applications 29:25</h2><h4 id="clipping-circuit">Clipping circuit</h4><figure><img src="/images/EP/3613361.png" alt="" /><figcaption>Example application: AC → DC conversion</figcaption></figure><h4 id="remarkable-diodes-3507">Remarkable diodes 35:07</h4><figure><img src="/images/EP/3613362.png" alt="" /><figcaption>Many kinds exist</figcaption></figure><h2 id="the-bipolar-junction-transistor-bjt-3940">The Bipolar Junction Transistor (BJT) 39:40</h2><h3 id="introduction-4016">Introduction 40:16</h3><p>A type of transistor that uses both electrons and holes as charge carriers. A BJT allows a small current injected at one of its terminals to control a much larger current flowing between two other terminals, making the device capable of amplification or switching.</p><p>The first bipolar transistor was invented at Bell Labs by William Shockley, Walter Brattain, and John Bardeen in 1947. They were awarded the Nobel Prize in Physics in 1956 for the transistor.</p><p>Bipolar transistors are mostly used for amplification, power regulation, at small scale.</p><p><img src="/images/EP/3613363.png" /></p><h3 id="basic-structure-symbols-4222">Basic structure &amp; symbols 42:22</h3><figure><img src="/images/EP/3613364.png" alt="" /><figcaption>P-doped region sandwiched between 2 N-doped regions (or vice versa)</figcaption></figure><h3 id="carrier-flow-4514">Carrier flow 45:14</h3><figure><img src="/images/EP/3613365.png" alt="" /><figcaption>Reverse bias → much like diode</figcaption></figure><figure><img src="/images/EP/3613366.png" alt="" /><figcaption>Most electrons flow through collector</figcaption></figure><h4 id="detailed-structure-5005">Detailed structure 50:05</h4><p><strong>NPN transistor structures (not to scale)</strong></p><p>The collector is lightly doped so that the collector-base junction will have a high breakdown voltage.</p><p>The collector also needs to be heavily doped to minimize ohmic losses for high currents. → contradiction → heavy doping at contact only</p><p>The Collector current travels shorter through the player than the Base current → 𝐼<sub>𝐵</sub> ≪ 𝐼<sub>C</sub></p><figure><img src="/images/EP/3613367.png" alt="" /><figcaption>Discrete device</figcaption></figure><figure><img src="/images/EP/3613368.png" alt="" /><figcaption>Integrated Circuit</figcaption></figure><h3 id="current-flow">Current Flow</h3><h4 id="main-components-4758">Main components 47:58</h4><p>Main current = collector current: electrons flowing from emitter to collector. <u>Modulated by bias voltage between base and emitter.</u></p><p>We want to minimize base-emitter current (maximize amplification).</p><ul><li>Recombination of injected electrons with holes in B region</li><li>Recombination at the base-emitter depletion region</li><li>Hole injection from base into emitter</li></ul><p><img src="/images/EP/3613369.png" /></p><h3 id="characteristics-of-a-bjt-5228">Characteristics of a BJT 52:28</h3><h4 id="characteristic-curves">Characteristic curves</h4><figure><img src="/images/EP/3663360.png" alt="" /><figcaption>Current-controlled</figcaption></figure><h4 id="equivalent-diagrams-5615">Equivalent diagrams 56:15</h4><figure><img src="/images/EP/3663361.png" alt="" /><figcaption>Simplified model</figcaption></figure><h4 id="current-gain-parameters-5802">Current gain parameters 58:02</h4><figure><img src="/images/EP/3663362.png" alt="" /><figcaption>Main BJT parameter: amplification</figcaption></figure><ul><li>The values of 𝛽 vary from 𝛽 = 20 (𝛼 ≈ 0.95) for high current power transistors to well over 𝛽 = 1000 (𝛼 ≈ 0.999) for high frequency low power type bipolar transistors.</li><li>In practice, 𝛽 is not constant; it depends on temperature, frequency, 𝐼<sub>𝐶</sub>, 𝑉<sub>CE</sub></li></ul><h4 id="modes-of-operation-10145">Modes of operation 1:01:45</h4><figure><img src="/images/EP/3663363.png" alt="" /><figcaption>Bias modes of BJT</figcaption></figure><h4 id="bias-point-small-signal-models-10554">Bias point &amp; small signal models 1:05:54</h4><p><strong>Using diode’s model of dynamic resistance</strong></p><p>𝑉<sub>BE</sub>(𝑡) = 𝑉<sub>BE</sub> + 𝑣<sub>BE</sub>(𝑡)</p><p>𝐼<sub>B</sub>(𝑡)= 𝐼<sub>B</sub> + 𝑖<sub>B</sub>(𝑡)</p><p>𝑉<sub>CE</sub>(𝑡) = 𝑉<sub>CE</sub> + 𝑣<sub>CE</sub>(𝑡)</p><p>𝐼<sub>C</sub>(𝑡)= 𝐼<sub>C</sub> + 𝑖<sub>C</sub>(𝑡)</p><ul><li>Non-linear equivalent circuit for signals varying around DC bias.</li><li>Can be used as a rudimentary variable amplifier</li></ul><p><img src="/images/EP/3663364.png" /></p><h3 id="bjt-applications-properties-10901">BJT: applications &amp; properties 1:09:01</h3><h4 id="high-frequency-behaviour">High frequency behaviour</h4><p><strong>Use case: microwave (power) transistors</strong></p><ul><li>Current gain drops with frequency. The cut-off frequency 𝑓<sub>𝑇</sub> is the frequency at which the gain or amplification is unity. (variable 𝛽)</li><li>Another feature: maximum oscillation frequency 𝑓<sub>max</sub> , which is related to the frequency at which the device <u>power gain</u> equals unity.</li><li>Amplifying microwaves for communication, radar, astronomy, …</li></ul><p><img src="/images/EP/3663365.png" /></p><h4 id="darlington-pair-11136">Darlington pair 1:11:36</h4><p><strong>Cascading transistors for compound amplification</strong></p><p>𝛽<sub>Darlington</sub> = 𝛽<sub>1</sub> · 𝛽<sub>2</sub> + 𝛽<sub>1</sub> + 𝛽<sub>2</sub> ≈ 𝛽<sub>1</sub> · 𝛽<sub>2</sub></p><p><img src="/images/EP/3663366.png" /></p><h5 id="advantages">Advantages</h5><ul><li>High current gain, typically &gt;1000</li><li>Simple to build</li></ul><h5 id="disadvantages">Disadvantages</h5><ul><li>Approximate doubling of needed 𝑽<sub>BE</sub> (in Si to about 1.3V)</li><li>Increased power dissipation</li><li>Reduced switching speed, higher phase shifts</li></ul><h5 id="applications">Applications</h5><ul><li>Skin contact current can be amplified (touch sensor)</li><li>Audio amplification, motor control, power regulation, ...</li></ul><h2 id="the-field-effect-transistor-fet-11503">The Field Effect Transistor (FET) 1:15:03</h2><h3 id="introduction">Introduction</h3><p>The <strong>FET</strong> is a type of transistor that uses an electric field to control the flow of current. FETs are unipolar devices with three terminals. FETs control the flow of current by the application of a voltage to the gate terminal, thereby altering the conductivity between the drain and source.</p><p>The concept of a field-effect transistor (FET) was first patented by Julius Edgar Lilienfeld in 1925 and by Oskar Heil in 1934, but they were unable to build a working practical semiconducting device. The first FET device to be successfully built was the junction field-effect transistor in 1945.</p><p>The most important applications are integrated circuits (for switching). Thanks to their high input impendence, they are often preferred in complex systems.</p><p><img src="/images/EP/3663367.png" /></p><h3 id="basic-structure-symbols-11819">Basic structure &amp; symbols 1:18:19</h3><p><strong>MOSFET</strong></p><p><img src="/images/EP/3663368.png" /></p><p><img src="/images/EP/3663369.png" /></p><h3 id="characteristics-of-a-fet">Characteristics of a FET</h3><h4 id="input-output-characteristics-12330">Input-output characteristics 1:23:30</h4><figure><img src="/images/EP/3663660.png" alt="" /><figcaption>General behaviour</figcaption></figure><h5 id="linear-region">Linear region</h5><p><img src="/images/EP/3663661.png" /></p><p><img src="/images/EP/3663662.png" /></p><h5 id="saturation-region-pinch-off-13114">Saturation region: pinch-off 1:31:14</h5><p><img src="/images/EP/3663663.png" /></p><p><img src="/images/EP/3663664.png" /></p><h5 id="summary-13425">Summary 1:34:25</h5><p><img src="/images/EP/3663665.png" /></p><h3 id="fet-applications-properties">FET: applications &amp; properties</h3><h4 id="adjustable-resistor-current-source">Adjustable resistor &amp; current source</h4><p><img src="/images/EP/3663666.png" /></p><h4 id="cmos-logic-gates-13916">CMOS logic gates 1:39:16</h4><p><img src="/images/EP/3663667.png" /></p><p><img src="/images/EP/3663668.png" /></p><h2 id="main-differences-between-bjt-and-fet-14300">Main differences between BJT and FET 1:43:00</h2><figure><img src="/images/EP/3663669.png" alt="" /><figcaption>General properties (not without exceptions)</figcaption></figure>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Technology and Applications of Electronics and Photonics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Local Search and Games</title>
      <link href="2021/02/21/2021-02-21-Local-Search-and-Games/"/>
      <url>2021/02/21/2021-02-21-Local-Search-and-Games/</url>
      
        <content type="html"><![CDATA[<h1 id="local-search-and-games">Local Search and Games</h1><h2 id="objectives">Objectives</h2><p>Learn about</p><ul><li>Local search algorithms</li><li>Hill-climbing search</li><li>Simulated annealing search</li><li>Local beam search</li><li>Optimal decisions</li><li>α-β pruning</li><li>Imperfect, real-time decision making</li></ul><h2 id="local-search-algorithms">Local Search Algorithms</h2><p>Good for optimization problems</p><ul><li>no goal test</li><li>the path to the goal is irrelevant</li><li>the goal state itself is the solution<ul><li>integrated circuit design</li><li>factory-floor layout</li><li>automatic programming</li><li>telecommunications network optimization</li></ul></li></ul><p>Find configuration satisfying constraints</p><ul><li>e.g. n-queens (we return to this later)</li></ul><p>State</p><ul><li>keep a single "current" state, try to improve it</li><li>cf. keeping the entire path and trying to optimise that</li></ul><p>Advantages</p><ul><li>Use little memory (usually constant amount)</li><li>Can find reasonable solutions in large or infinite (continuous) problems</li></ul><p><strong>Example: the n-Queens puzzle</strong></p><p>Put n queens on an n×n chess board such that no queen can attack another</p><ul><li>ie. no two queens on the same row, column, or diagonal</li></ul><figure><img src="/images/AI/155720.png" alt="" /><figcaption>Failed solutions to the 4 Queens problem</figcaption></figure><p><strong>State space landscape</strong></p><p>A state has</p><ul><li>Location<ul><li>where it is in the state space</li></ul></li><li>Elevation<ul><li>its heuristic cost or objective value</li></ul></li></ul><p>Solutions (two ways of thinking about it, but equivalent)</p><ul><li>Heuristic cost (find minimum cost) : global minimum.</li><li>Objective function (find best state or maximal cost): global maximum</li></ul><p><img src="/images/AI/1557200.png" /></p><p>“Local” because we don’t care about the path through the search space</p><p>A local search algorithm is</p><ul><li><em>complete</em>: if it always finds a goal if one exists</li><li><em>optimal</em>: if it finds the global minimum/maximum</li></ul><p>Problem: depending on initial state, search can get stuck in local maxima/ minima</p><h2 id="hill-climbing-search">Hill-climbing search</h2><p>Like agenda-based search, but the agenda contains only one item</p><ul><li>so we take the best option at each stage, and throw away all the others</li></ul><p><img src="/images/AI/1557201.png" /></p><p>Local search: use complete states</p><ul><li>always 8 queens on board</li><li>the numbers in the example count attacks if a piece moves vertically</li></ul><p>Heuristic</p><ul><li>h = number of pairs of queens that are attacking each other, either directly or indirectly</li><li>h = 17 for the example</li><li>h = 0 is a solution state (or global minimum)</li></ul><p>Successors?</p><ul><li>The set of states generated by moving one queen</li></ul><p><img src="/images/AI/1557202.png" /></p><h3 id="queens-problem">8-queens problem</h3><ul><li>A local minimum with h = 1</li><li>What is the set of successor states?</li><li>Why is this a local minimum?</li><li>What is the next step of hill-climbing?</li></ul><p><img src="/images/AI/1557203.png" /></p><p>Greedy local search</p><ul><li>grabs best neighbour without “thinking ahead”</li></ul><p>Rapid improvement in heuristic value</p><ul><li>But at a fatal cost</li><li>Local Maxima/Minima will stop search altogether<ul><li>Ridges: a sequence of local maxima that make it difficult to escape.</li><li>Plateaux: heuristic values uninformative</li><li>Foothills: local maxima that are not global maxima</li></ul></li></ul><p><img src="/images/AI/1557204.png" /></p><h3 id="how-bad-is-the-problem">How bad is the problem?</h3><p>Algorithm reaches a point where no progress is made</p><p>To test on the 8-queens example:</p><ul><li>run many searches starting from random configurations of 8-queens<ul><li>too many to do it exhaustively</li></ul></li><li>result<ul><li>86% of starting configurations get stuck</li><li>14% of starting configurations succeed</li></ul></li><li>the algorithms works quickly, usually only evaluating 3-4 steps before either getting stuck or finding a solution</li></ul><h3 id="how-can-we-solve-the-problem">How can we solve the problem?</h3><p>Allow different moves</p><ul><li>e.g., sideways</li><li>must account for local maxima (foothills) otherwise could get stuck in an infinite loop<ul><li>e.g., cap number of sideways moves</li><li>but we risk losing generality with such ad hoc solutions</li></ul></li></ul><p>Result:</p><ul><li>6% stuck</li><li>94% solution</li></ul><p>Works much slower</p><ul><li>evaluating 21-64 steps before either getting stuck or finding a solution</li></ul><h3 id="variants-of-hill-climbing">Variants of hill-climbing</h3><p>Stochastic hill-climbing</p><ul><li>choose randomly between available uphill moves<ul><li>choose from uniform or non-uniform distribution</li></ul></li><li>converges more slowly but sometimes finds better solutions<ul><li>optimality still not guaranteed in all cases</li></ul></li></ul><p>First-choice hill-climbing</p><ul><li>Good for big problems<ul><li>Uses Stochastic hill climbing but randomly generates successors and picks first larger one</li></ul></li></ul><p>Random-restart hill-climbing</p><ul><li>If at first you don't succeed, try again, starting from a different place<ul><li>requires that non-optimality can be recognised</li></ul></li></ul><h2 id="simulated-annealing-search">Simulated Annealing search</h2><p>Hill-climbing</p><ul><li>only improves on the current solution</li><li>not complete<ul><li>may get stuck in local minima/maxima</li></ul></li></ul><p>Random walk</p><ul><li>moves from state to state randomly</li><li>complete (given infinite time) but very inefficient</li></ul><p>Simulated Annealing combines these two to give a compromise between search complexity and completeness</p><p>Escape local maxima by allowing some bad moves</p><p>Gradually decrease frequency of allowed bad moves as search proceeds</p><p>By analogy with a process of hardening in steel production</p><ul><li>want crystal structure of metal to be all lined up</li><li>heat the metal to make the crystals vibrate and “shake out” irregularities</li><li>let it cool slowly so that the more ordered form stays ordered.</li></ul><p>So in the algorithm, we have an imaginary notion of “temperature”, which allows random movement outside the hill-climb</p><ul><li>as the “temperature” drops, less random movement is allowed</li></ul><p><img src="/images/AI/1557205.png" /></p><p>Like getting a ping-pong ball into the deepest crevice of a bumpy surface</p><ul><li>Left alone by itself, ball will roll into a local minimum</li><li>If we shake the surface, we can bounce the ball out of a local minimum</li><li>The trick is to shake hard enough to get it out of local minimum, but not hard enough to dislodge it from global one</li><li>We start by shaking hard and then gradually reduce the intensity of shaking</li></ul><p>If the “temperature” decreases slowly enough, simulated annealing search finds a global optimum with probability approaching 1.0</p><p>Widely used in VLSI layout, airlines scheduling, etc.</p><h2 id="local-beam-search">Local Beam Search</h2><p>Keep track of <em>k</em> states rather than just one</p><p>Start with <em>k</em> randomly generated states</p><p>At each iteration</p><ul><li>generate all successors of all <em>k</em> states<ul><li>NB: not the same as an agenda <em>k</em> long!</li></ul></li><li>if any one is a goal state, stop</li><li>else select the k best successors from the complete list and repeat</li></ul><p>So this is like a kind of selective breadth first search</p><p>Local beam search looks like running k hill-climbing algorithms in parallel, <strong>but it is not</strong></p><ul><li>the results of all k states influence each other</li><li>if one state generates several good successors; they all end up in the next iteration</li><li>states generating bad successors are weeded out</li></ul><p>This is both a strength and a weakness:</p><ul><li>unfruitful searches are quickly abandoned and searches making the most progress are intensified</li><li>can lead to a lack of diversity: concentration in a small region of the search space</li><li>remedy: choose k successors randomly, biasing choice towards good ones</li></ul><h3 id="genetic-algorithms">Genetic Algorithms</h3><p>Genetic Algorithms (GAs) are a variant of local beam search</p><p>A successor state is generated by combining two parent states</p><p>Start with a large number of randomly generated states (a <em>population</em>)</p><p>A state is represented as a binary string</p><p>An evaluation function or <em>fitness</em> function assesses the quality of a state</p><ul><li>higher values for better states.</li></ul><p>Produce the next generation of states by</p><ul><li>selection</li><li>crossover</li><li>mutation</li></ul><p><strong>Problem encoding for GAs</strong></p><p>The way that you choose to encode the problem often has implications for the solution</p><p>Example: 8 queens, 8x8 board</p><ul><li>64 bits, one for each square? (= 8x8 matrix)</li><li>8 octal digits? (one 3-bit number for each column/row)</li></ul><p><img src="/images/AI/1557206.png" /></p><p>21641300 (octal)</p><p>010<strong>001</strong> 110<strong>010</strong>001<strong>011</strong>000<strong>000</strong> (binary)</p><p>Fitness function: number of nonattacking pairs of queens (min = 0, max = 28) ‣</p><ul><li>Fitness here = 6 + 5 + 4 + 3 + 3 + 2 + 0 = 23</li></ul><h3 id="ga-selection">GA Selection</h3><p>After encoding states and calculating fitness, select pairs for reproduction</p><ul><li>many methods can be used</li></ul><p>Simplest: randomly choose pairs of states with non-uniform probability</p><p><img src="/images/AI/1557207.png" /></p><p><strong>Selection for Reproduction</strong></p><p><img src="/images/AI/1557208.png" /></p><p><img src="/images/AI/1557209.png" /></p><p><img src="/images/AI/1557210.png" /></p><p><img src="/images/AI/1557211.png" /></p><h4 id="cross-over">Cross-over</h4><p>Pairs are selected by one of a range of methods:</p><ul><li>Roulette-wheel (as in our example)</li><li>Tournament</li></ul><p>Cross-over point for each pair is randomly selected</p><ul><li>Resulting new chromosomes represent new states</li></ul><p><img src="/images/AI/1557212.png" /></p><p><img src="/images/AI/1557213.png" /></p><p><img src="/images/AI/1557214.png" /></p><p><img src="/images/AI/1557215.png" /></p><h4 id="mutation">Mutation</h4><p>Cross-over is not enough</p><ul><li>if the population does not contain examples that have each bit of the chromosome at both possible values parts of the search space are inaccessible</li></ul><p>So introduce mutation</p><ul><li>low probability of flipping a random bit at each cross-over step</li></ul><p><img src="/images/AI/1557216.png" /></p><h3 id="the-whole-process">The whole process</h3><ul><li>Initial Population<ul><li>Random bit strings – make sure every bit means something</li></ul></li><li>Selection<ul><li>Select according to output of fitness function</li><li>Various methods (look them up!)</li></ul></li><li>Cross-over<ul><li>Random point in chromosome</li><li>Various methods, always involving death of unfit chomosomes</li></ul></li><li>Mutation<ul><li>To introduce possibilities not currently present in the population</li></ul></li><li>Repeat from “selection” until fitness levels are as desired</li></ul><h3 id="adversarial-search-and-games">Adversarial Search and Games</h3><p>We have assumed so far that the world we are searching doesn't change</p><ul><li>This is often not the case</li></ul><p>Consider Games</p><ul><li>Two or more players in competition</li><li>There are many kinds of game, but we will only deal with zero-sum games of perfect information<ul><li>2 players: player one wins → 1</li><li>​ player two loses → -1</li><li>​ TOTAL 0</li></ul></li></ul><h4 id="why-study-games">Why study games?</h4><p>Games are a form of multi-agent environment</p><ul><li>What do other agents do and how do they affect our success?</li><li>Cooperative vs. competitive multi-agent environments</li><li>Competitive multi-agent environments give rise to adversarial search = games</li></ul><p>Why study games?</p><ul><li>Interesting subject of AI study because they are hard for humans</li><li>Easy to represent and agents restricted to small number of actions</li></ul><h4 id="adversarial-vs.-non-adversarial-search">Adversarial vs. non-adversarial search</h4><p>Search – no adversary</p><ul><li>Solution is (heuristic) method for finding goal</li><li>Heuristics and constraint satisfaction techniques can find optimal solution</li><li>Evaluation function: estimate of cost from start to goal through given node</li><li>Examples: path planning, scheduling</li></ul><p>Games – adversary</p><ul><li>Solution is strategy (strategy specifies move for every possible opponent reply)</li><li>Sometimes time limits force an approximate solution</li><li>Evaluation function: evaluate quality of game position</li><li>Examples: chess, checkers, Othello, war games, simulations of competition for limited resources</li></ul><figure><img src="/images/AI/1557217.png" alt="" /><figcaption>Types of Game</figcaption></figure><h3 id="the-minimax-method">The MINIMAX method</h3><p>Game setup</p><ul><li>Two players: MAX and MIN</li><li>MAX moves first and they take turns until the game is over</li><li>Winner gets prize, loser gets penalty</li></ul><p>Games as search:</p><ul><li>Initial state: e.g. board configuration of chess</li><li>Successor function: listof(move,state) pairs specifying legal moves</li><li>Terminal test: Is the game finished?</li><li>Utility function: Gives numerical value of terminal states<ul><li>E.g. win (+1), loose (-1) and draw (0) in noughts and crosses (tic-tac-toe)</li></ul></li><li>Each player uses a search tree to determine next move</li></ul><h3 id="partial-game-tree-for-noughts-and-crosses">Partial game tree for noughts and crosses</h3><ul><li>This example starts well into the game</li><li>X is MAX</li></ul><p><img src="/images/AI/1557218.png" /></p><h2 id="optimal-strategies">Optimal Strategies</h2><p>Find the contingent strategy for MAX assuming an infallible MIN opponent</p><p>Assumption: Both players play optimally</p><p>Given a game tree, the optimal strategy can be determined by using the minimax value of each node, n:</p><ul><li>if n is a terminal node, MINIMAX-VALUE(n) = UTILITY(n)</li><li>if n is a MAX node, MINIMAX-VALUE(n) = max<sub>s∈successors(n)</sub> MINIMAX-VALUE(s)</li><li>if n is a MIN node, MINIMAX-VALUE(n) = min<sub>s∈successors(n)</sub> MINIMAX-VALUE(s)</li></ul><h3 id="partial-game-tree-for-noughts-and-crosses-1">Partial game tree for noughts and crosses</h3><p>do DFS exhaustively to compute topmost MINIMAX value</p><p>Utility fn:</p><ul><li>number of lines with 2 Xs + 10 * number of lines with 3 Xs - number of lines with 2 Os - 10 * number of lines with 3 Os</li></ul><p><img src="/images/AI/1557218.png" /></p><p><img src="/images/AI/1557219.png" /></p><p><img src="/images/AI/1557220.png" /></p><p><img src="/images/AI/1557221.png" /></p><p><img src="/images/AI/1557222.png" /></p><p><img src="/images/AI/1557223.png" /></p><p><img src="/images/AI/1557224.png" /></p><p><img src="/images/AI/1557225.png" /></p><p><img src="/images/AI/1557226.png" /></p><p><img src="/images/AI/1557227.png" /></p><h3 id="general-2-ply-game-tree">General 2-ply Game Tree</h3><p>Imaginary game, made-up values for example here</p><p><img src="/images/AI/1557228.png" /></p><p><img src="/images/AI/1557229.png" /></p><p><img src="/images/AI/1557230.png" /></p><p><img src="/images/AI/1557231.png" /></p><p><img src="/images/AI/1557232.png" /></p><p><img src="/images/AI/1557233.png" /></p><p><em>Algorithm maximises</em> the <em>worst-case outcome</em> for <em>MAX</em></p><p><img src="/images/AI/1557234.png" /></p><h3 id="multiplayer-games">Multiplayer games</h3><p>Replace single zero-sum utility function with a function for each player</p><p>Use a vector of values, one for each player</p><p><img src="/images/AI/1557235.png" /></p><h3 id="minimax-algorithm">MINIMAX algorithm</h3><p><img src="/images/AI/1557236.png" /></p><p>Definition of optimal play for MAX assumes MIN plays optimally</p><ul><li>maximizes worst-case outcome for MAX</li></ul><p>But if MIN plays worse than optimally</p><ul><li>MAX will do even better</li></ul><p>Complexity:</p><ul><li>Time: O(b<sup>m</sup>) - exponential in depth of tree</li><li>Space: O(m) - linear in depth of tree</li></ul><p>Can improve effective complexity by Alpha-Beta (α-β) Pruning</p><h2 id="alpha-beta-α-β-pruning-in-minimax">Alpha-beta (α-β) pruning in MINIMAX</h2><p>Use the same algorithm as before, but consider ranges instead of values</p><ul><li>range is expressed as a pair, [lowest,highest] or [α,β]</li></ul><p><img src="/images/AI/1557228.png" /></p><p><img src="/images/AI/1557237.png" /></p><p><img src="/images/AI/1557238.png" /></p><p><img src="/images/AI/1557239.png" /></p><p><img src="/images/AI/1557240.png" /></p><p><img src="/images/AI/1557241.png" /></p><p><img src="/images/AI/1557242.png" /></p><p><img src="/images/AI/1557243.png" /></p><p><img src="/images/AI/1557244.png" /></p><p><img src="/images/AI/1557245.png" /></p><p><img src="/images/AI/1557246.png" /></p><p><img src="/images/AI/1557247.png" /></p><p><img src="/images/AI/1557248.png" /></p><p><img src="/images/AI/1557249.png" /></p><h3 id="alpha-beta-algorithm">Alpha-Beta Algorithm</h3><p><img src="/images/AI/1557250.png" /></p><h3 id="general-alpha-beta-pruning">General alpha-beta pruning</h3><p>Consider a node n somewhere in the tree</p><p>If player has a better choice at</p><ul><li>Parent node of n</li><li>Or any choice point further up</li></ul><p>n will never be reached in actual play</p><p>Hence when enough is known about n, it can be pruned.</p><p><img src="/images/AI/1557251.png" /></p><h3 id="properties-of-alpha-beta-pruning">Properties of Alpha-Beta pruning</h3><p>Pruning does not affect final results</p><p>Entire subtrees can be pruned</p><p>Good move ordering improves effectiveness of pruning</p><p>With “perfect ordering”, time complexity is O(b<sup>m/2</sup>)=O((b<sup>1/2</sup>)<sup>m</sup>)</p><ul><li>Branching factor of √b</li><li>Best case Alpha-beta pruning can look twice as far ahead as plain MINIMAX in a given amount of time</li></ul><p>Repeated states are again possible</p><ul><li>Store them in memory; make large gain in memory from pruning</li></ul><h2 id="games-of-imperfect-information">Games of imperfect information</h2><p>Minimax and alpha-beta pruning require too much leaf-node evaluations</p><p>May be impractical within a reasonable amount of time</p><p>Shannon (1950):</p><ul><li>Cut off search earlier (replace TERMINAL-TEST by CUTOFF- TEST)</li><li>Apply heuristic evaluation function EVAL (replacing UTILITY function of alpha-beta)</li></ul><h3 id="cutting-off-search">Cutting off search</h3><p>Change the termination condition of MINIMAX:</p><ul><li>if TERMINAL-TEST(state) then return UTILITY(state)</li></ul><p>into</p><ul><li>if CUTOFF-TEST(state,depth) then return EVAL(state)</li></ul><p>Can introduce a fixed or dynamic depth limit</p><ul><li>selected so (e.g.) time will not exceed what the rules of the game allow</li></ul><p>When cutoff occurs, and we are not at a terminal state, heuristic evaluation is performed</p><ul><li>in other words, if you don’t know, then take your best guess</li></ul><h3 id="heuristic-evaluation">Heuristic Evaluation</h3><p>Idea:</p><ul><li>produce an estimate of the expected utility of the game from a given position</li></ul><p>Performance depends on quality of EVAL</p><p>Requirements:</p><ul><li>EVAL should value terminal-nodes in the same order as UTILITY</li><li>Computation may not take too long</li><li>For non-terminal states the EVAL should be strongly correlated with the actual chance of winning</li><li>Only useful for quiescent states (=no wild swings in value in near future)</li></ul><h3 id="games-that-include-chance">Games that include chance</h3><p><img src="/images/AI/1557252.png" /></p><p>In backgammon, you roll 2 dice, and then use both numbers in either order</p><ul><li>so a double, [1,1], has probability 1/36, all other moves have probability 1/18</li></ul><p>In this tree, we calculate the expected value of MINIMAX</p><h3 id="expected-minimax-value">Expected MINIMAX value</h3><p>Given a game tree, the optimal strategy can be determined by using the minimax value of each node, n:</p><ul><li>if n is a terminal node,<ul><li>EXPECTED-MINIMAX-VALUE(n) = UTILITY(n)</li></ul></li><li>if n is a MAX node,<ul><li>EXPECTED-MINIMAX-VALUE(n) = max<sub>s∈successors(n)</sub> EXPECTED-MINIMAX-VALUE(s)</li></ul></li><li>if n is a MIN node,<ul><li>EXPECTED-MINIMAX-VALUE(n) = min<sub>s∈successors(n)</sub> EXPECTED-MINIMAX-VALUE(s)</li></ul></li><li>if n is a CHANCE node,<ul><li>EXPECTED-MINIMAX-VALUE(n) = ∑<sub>s∈successors(n)</sub> P(s)EXPECTED-MINIMAX-VALUE(s)</li></ul></li></ul><h3 id="position-evaluation-with-chance-nodes">Position evaluation with CHANCE nodes</h3><p><img src="/images/AI/1557253.png" /></p><p>On left, A1 wins; on right, A2 wins</p><ul><li><em>outcome of evaluation may change if values are not scaled linearly</em></li></ul><p>If you need to scale values, use a positive linear transformation</p><h2 id="summary">Summary</h2><p>Games are fun, useful and potentially distracting</p><p>They illustrate many important points about AI</p><ul><li>Perfection is unattainable, so approximation is necessary</li><li>We need a good idea of strategy to win<ul><li>and MINIMAX allows us to express that in terms of final states - relatively easy</li></ul></li><li>Uncertainty constrains the assignment of values to states</li></ul><p>Games are to AI as grand prix racing is to car design.</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Techniques of Artificial Intelligence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Relational Database Design</title>
      <link href="2021/02/21/2021-02-21-Relational-Database-Design/"/>
      <url>2021/02/21/2021-02-21-Relational-Database-Design/</url>
      
        <content type="html"><![CDATA[<h1 id="relational-database-design">Relational Database Design</h1><p><a href="https://recordings.reu1.blindsidenetworks.com/vub/63fc6c8b3b2cfb27ca278201c48d1baf5b85c309-1614775485263/capture/">Video</a></p><p>There are two major relational database design approaches</p><p>Top-down design</p><ul><li>develop a conceptual model (e.g. ER model)</li><li><strong><em>reduction</em></strong> (mapping) of the conceptual model to relation schemas</li><li>use <strong><em>normalisation</em></strong> as a validation technique to check the quality of the resulting relation schemas<ul><li>a relational database schema resulting from the mapping of a good ER model (with the correct entity sets) normally requires no further normalisation</li></ul></li></ul><p>Bottom-up design</p><ul><li><strong><em>design by decomposition</em></strong></li><li>use <strong><em>normalisation</em></strong> to iteratively create (decompose) a set of relations starting with a single relation</li></ul><p>A relation schema might contain certain dependencies in which case it should be decomposed (normalised) into multiple smaller relation schemas</p><ul><li>this normalisation process is based on <strong><em>functional dependencies</em></strong> and <strong><em>multivalued dependencies</em></strong></li></ul><p>Sometimes multiple relations resulting from an ER to relation schema reduction might be merged to save some join query operations</p><ul><li>we have to ensure that the resulting larger relation schema does not introduce new <strong><em>undesirable dependencies</em></strong></li></ul><h2 id="reduction-351">Reduction 3:51</h2><p>A conceptual ER model can be <strong><em>reduced</em></strong> to a set of relation schemas (relational database schema)</p><p>The quality of the resulting set of relation schemas depends on the quality of the original ER design (there is no magic)</p><p>In the following we discuss the reduction of the different ER model concepts introduced earlier</p><h3 id="strong-entity-sets-405">Strong Entity Sets 4:05</h3><p>A strong entity set <em>E</em> with only simple attributes <em>a<sub>1</sub></em>,..., <em>a<sub>n</sub></em> is mapped to a relation <em>R</em> with attributes <em>a<sub>1</sub></em>,..., <em>a<sub>n</sub></em></p><ul><li>the primary key of the entity set <em>E</em> becomes the primary key of the relation <em>R</em></li></ul><p><img src="/images/DB/134345.png" /></p><h4 id="composite-attributes-511">Composite Attributes 5:11</h4><p>For each component of a composite attribute, we create an attribute <em>a<sub>i</sub></em> in the relation <em>R</em></p><ul><li>no special attribute is created for the composite attribute itself</li></ul><p><img src="/images/DB/1343450.png" /></p><h4 id="multivalued-attributes-628">Multivalued Attributes 6:28</h4><p>Multivalued attributes are treated separately since a relation should only contain attributes with atomic values</p><ul><li>for each multivalued attribute <em>a<sub>i</sub></em> of an entity set <em>E</em>, we create a new relation <em>S</em> containing the attribute <em>a<sub>i</sub></em> as well as the primary key attributes of the relation <em>R</em> that is created for the entity set <em>E</em><ul><li>define a foreign key constraint to the original relation <em>R</em></li></ul></li></ul><p><img src="/images/DB/1343451.png" /></p><h3 id="weak-entity-sets-831">Weak Entity Sets 8:31</h3><p>A weak entity set <em>E</em> with attributes <em>a<sub>1</sub></em>,..., <em>a<sub>n</sub></em> is mapped to a relation <em>R</em> with attributes <em>a<sub>1</sub></em>,..., <em>a<sub>n</sub></em> combined with the primary key attributes <em>b<sub>1</sub></em>,..., <em>b<sub>m</sub></em> of the identifying entity set <em>F</em></p><ul><li>the primary key of <em>R</em> is defined by the primary key attributes of the <strong><em>identifying entity</em></strong> set <em>F</em> <strong><em>combined</em></strong> with the <strong><em>discriminator</em></strong> of <em>E</em></li><li>a <strong><em>foreign key constraint</em></strong> is defined from the attributes <em>b<sub>1</sub></em>,..., <em>b<sub>m</sub></em> to the primary key of the relation that is created for the identifying entity set <em>F</em></li></ul><p><img src="/images/DB/1343452.png" /></p><h3 id="relationship-sets-1037">Relationship Sets 10:37</h3><p>A relationship set over the entity sets <em>E<sub>1</sub></em>,..., <em>E<sub>n</sub></em> with the optional descriptive attributes <em>b<sub>1</sub></em>,..., <em>b<sub>m</sub></em> is mapped to a relation <em>R</em> with the primary key attributes of <em>E<sub>n</sub></em> combined with <em>b<sub>1</sub></em>,..., <em>b<sub>m</sub></em></p><p>The primary key of relation <em>R</em> is defined as follows</p><ul><li>binary many-to-many relationship<ul><li>union of all primary key attributes of <em>E<sub>1</sub></em> and <em>E<sub>2</sub></em></li></ul></li><li>binary one-to-one relationship<ul><li>choose the primary key of <em>E<sub>1</sub></em> and <em>E<sub>2</sub></em></li></ul></li><li>binary one-to-many or many-to-one relationship<ul><li>choose the primary key of the entity set whose entity instances can only participate once (0..1 or 1..1)</li></ul></li><li>n-ary relationship without cardinality constraints<ul><li>union of all primary key attributes of <em>E<sub>1</sub></em>,..., <em>E<sub>n</sub></em></li></ul></li><li>n-ary relationship with one 0..1 or 1..1 cardinality constraint over the entity set <em>E<sub>j</sub></em><ul><li>union of all primary key attributes of <em>E<sub>1</sub></em>,..., <em>E<sub>n</sub></em> , except the primary key of <em>E<sub>j</sub></em></li><li>note that we allow only one such 0..1 or 1..1 cardinality constraint for n-ary relationships</li></ul></li></ul><p>A <strong><em>foreign key constraint</em></strong> is defined for each set of primary key attributes (provided by the entity set <em>E<sub>i</sub></em> ) to the primary key of the corresponding relation that is defined for <em>E<sub>i</sub></em></p><p><img src="/images/DB/1343453.png" /></p><p><img src="/images/DB/1343454.png" /></p><h3 id="weak-entity-existence-relationship-1646">Weak Entity Existence Relationship 16:46</h3><p>The special relationship set from a weak entity set to its defining entity set is always a many-to-one relationship</p><ul><li>the special weak entity existence relationship does <strong><em>not</em></strong> have to be <strong><em>mapped</em></strong> to a separate relation since it is already covered by the relation that is created for the weak entity set<ul><li>e.g. potential Offers relation schema already covered by Seat relation schema</li></ul></li></ul><p><img src="/images/DB/1343455.png" /></p><h3 id="combination-of-schemas-1839">Combination of Schemas 18:39</h3><p>Relations resulting from the mapping of a relationship set with a <strong><em>total participation</em></strong> constraint can be integrated with the relation over which the constraint is defined</p><ul><li>key of the relation with the constraint (1..1) used as primary key</li></ul><p><img src="/images/DB/1343456.png" /></p><h3 id="specialisation-and-generalisation-2025">Specialisation and Generalisation 20:25</h3><p>Create a new relation <em>R</em> for each entity subset</p><ul><li>combine the attributes of the entity set with the primary key attributes of the superclass</li></ul><p><img src="/images/DB/1343457.png" /></p><p>For a <strong><em>disjoint and total ISA constraint</em></strong> we might omit the separate superclass relation</p><ul><li>saves some join operations but it is no longer possible to define a foreign key constraint on the id attribute (now at two places)</li></ul><p><img src="/images/DB/1343458.png" /></p><h3 id="aggregations-2353">Aggregations 23:53</h3><p>Like the regular relationship set mapping</p><figure><img src="/images/DB/1343459.png" alt="" /><figcaption>note that the name attribute is the one from the Companies entity set</figcaption></figure><h2 id="relational-database-design-2510">Relational Database Design 25:10</h2><p>The goal of relational database design is to create a set of relation schemas that</p><ul><li>can be used to store information <strong><em>without unnecessary redundancy</em></strong></li><li>allow us to <strong><em>easily retrieve information</em></strong></li></ul><p>The quality of the set of schemas resulting from a <strong><em>reduction</em></strong> (top-down design) depends on how good the original ER design was</p><p>In a <strong><em>design by decomposition</em></strong> approach (bottom-up design) we need a way to reduce any redundancy via a decomposition process</p><ul><li>split large relation schemas into multiple smaller relation schemas</li></ul><h3 id="update-anomalies-2752">Update Anomalies 27:52</h3><p><strong><em>Insertion anomaly</em></strong></p><ul><li>redundant information has to be kept consistent<ul><li>e.g. insertion of a new order for an already existing CD</li></ul></li><li>information about a CD can only be inserted if there is an order or we have to populate the customer information (i.e. name and street) with null values</li></ul><p><img src="/images/DB/2843450.png" /></p><p><strong><em>Modification anomaly</em></strong></p><ul><li>if we want to modify information about a particular CD, we have to ensure that the information is updated in all redudant entries<ul><li>e.g. modification of the price of the CD named "Falling into Place"</li></ul></li></ul><p><strong><em>Deletion anomaly</em></strong></p><ul><li>if we delete a customer who is the only buyer of a specific CD, we also lose the information about that specific CD<ul><li>e.g. deletion of the customer "Albert Einstein"</li></ul></li></ul><table><thead><tr class="header"><th style="text-align: left;">id</th><th>name</th><th>street</th><th>cdName</th><th>price</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">1</td><td>Max Frisch</td><td>Bahnhofstrasse 7</td><td>Falling into Place</td><td>17.90</td></tr><tr class="even"><td style="text-align: left;">2</td><td>Eddy Merckx</td><td>Pleinlaan 25</td><td>Falling into Place</td><td>17.90</td></tr><tr class="odd"><td style="text-align: left;">53</td><td>Albert Einstein</td><td>Bergstrasse 18</td><td>Chromatic</td><td>16.50</td></tr><tr class="even"><td style="text-align: left;">5</td><td>Max Frisch</td><td>Bahnhofstrasse 7</td><td>Carcassonne</td><td>15.50</td></tr></tbody></table><h3 id="normalisation-3311">Normalisation 33:11</h3><p>Normalisation is a <strong><em>formal method</em></strong> to analyse relation schemas based on their keys, <strong><em>functional dependencies (FD)</em></strong> as well as <strong><em>multivalued dependencies (MVD)</em></strong></p><ul><li><strong><em>remove redundancy</em></strong></li><li><strong><em>prevent</em></strong> certain <strong><em>update anomalies</em></strong><ul><li>insertion, modification and deletion</li></ul></li></ul><p>There exists a set of rules to check if a relation is in a specific normal form</p><p><img src="/images/DB/2843451.png" /></p><p>A relation that does not conform to a certain degree of normalisation can be decomposed (<strong><em>lossless-join decomposition</em></strong>) into multiple relations that are in the desired normal form</p><ul><li>can be done automatically</li></ul><p>Normalisation is often done in a stepwise manner</p><ul><li>a higher normal form means a more restricted format and less problems with update anomalies</li><li>note that only the <strong><em>first normal form (1NF) is mandatory</em></strong> for the relational model and all the other normal forms are optional</li></ul><h4 id="first-normal-form-1nf-3717">First Normal Form (1NF) 37:17</h4><p>As we have seen earlier, the ER model supports complex attributes</p><ul><li>composite attributes</li><li>multivalued attributes</li></ul><p>In the reduction process, we remove this substructure from attributes to create a relational model with atomic attribute values only</p><p>A relation schema <em>R</em> is in <strong><em>first normal form (1NF)</em></strong> if the domains <em>D<sub>1</sub></em>,..., <em>D<sub>n</sub></em> of all attributes <em>a<sub>1</sub></em>,..., <em>a<sub>n</sub></em> of <em>R</em> are <strong><em>atomic</em></strong></p><ul><li>no composite attributes or attributes with a set of values</li><li>the intersection of each row and column contains <strong><em>one and only one value</em></strong></li></ul><h4 id="functional-dependencies-3816"><strong>Functional Dependencies</strong> 38:16</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TeacherDept (teacherID, teacher, salary, department, building, budget)</span><br></pre></td></tr></table></figure><p>In this example, there are various sets of attributes that <strong><em>uniquely identify</em></strong> a set of other attributes</p><ul><li>teacherID → teacher</li><li>teacherID → salary</li><li>teacherID → {teacher, salary}</li><li>{teacherID, teacher} → {salary}</li><li>department → {building, budget}</li><li>...</li></ul><p>We say that there is a <strong><em>functional dependency</em></strong> (→) between these two sets of attributes</p><ul><li>a functional dependency should always hold on a relation schema and not just on a particular relation instance</li></ul><p>A <strong><em>functional dependency</em></strong> can be used to express constraints (generalisation of keys) over a set of <strong><em>attributes (determinant)</em></strong> that <strong><em>uniquely identify a set of other attributes (dependent attributes)</em></strong></p><p>For a relation schema <em>R</em> with α <strong>⊆</strong> <em>R</em> and β <strong>⊆</strong> <em>R</em> the functional dependency α → β holds on <em>R</em>, if for any <em>r</em>(<em>R</em>)</p><ul><li>∀ <em>t<sub>1</sub></em>,<em>t<sub>2</sub></em> ∈ <em>r</em>(<em>R</em>) with <em>t<sub>1</sub></em>[α] = <em>t<sub>2</sub></em>[α] → <em>t<sub>1</sub></em>[β] = <em>t<sub>2</sub></em>[β]</li></ul><p>Note that any <em>K</em> <strong>⊆</strong> <em>R</em> is a superkey if <em>K</em> → <em>R</em></p><ul><li>we can use functional dependencies to check whether <em>K</em> is a superkey</li></ul><p>The relation <em>r</em>(<em>R</em>) contains the following set <em>F</em> of functional dependencies</p><ul><li><em>A → B</em></li><li><em>C → E</em></li><li>...</li></ul><p><img src="/images/DB/2843452.png" /></p><p>A functional dependency α → β is <strong><em>trivial</em></strong> if β <strong>⊆</strong> <em>R</em></p><ul><li>trivial dependencies are satisfied by all relations</li></ul><p>A <strong><em>full functional dependency</em></strong> has a minimal determinant</p><ul><li>if the determinant is not minimal, we talk about a <strong><em>partial functional dependency</em></strong> (e.g. <em>AD → B</em> in the example)</li></ul><p>For a relation <em>r</em>(<em>R</em>) with α → β and β → γ we say that γ is <strong><em>transitively dependent</em></strong> on α via β</p><h4 id="closure-of-attributes-4751">Closure of Attributes 47:51</h4><p>For a given relation schema <em>R</em>, a number of functional dependencies and a set of attributes α <strong>⊆</strong> <em>R</em>, the <strong><em>closure</em></strong> a<sup>+</sup> is defined by all attributes <em>B<sub>i</sub></em> such that α → <em>B<sub>i</sub></em></p><p>Computing the closure</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Initialise the set s with the attributes of α</span><br><span class="line">Repeat until the set s does not grow anymore &#123;</span><br><span class="line"> if there is a functional dependency β → γ and β is in s, then</span><br><span class="line"> add γ to the set s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If the closure a<sup>+</sup> contains all attributes of the relation schema <em>R</em>, then the attributes α form a superkey of <em>R</em></p><h4 id="computation-of-superkeys">Computation of Superkeys</h4><p>We can test whether α is a superkey for a given relation schema <em>R</em> by checking whether the closure a<sup>+</sup> contains all attributes of <em>R</em></p><p>We can further use this approach to <strong><em>find all the superkeys</em></strong> for a relation schema <em>R</em> and a given set of functional dependencies</p><ul><li>check for each set α <strong>⊆</strong> <em>R</em> of attributes whether the closure a<sup>+</sup> contains all attributes</li><li>the search process can be slightly optimised by starting with the smallest possible subsets</li></ul><h4 id="functional-dependency-inference-5248">Functional Dependency Inference 52:48</h4><p>For a given set <em>F</em> of functional dependencies we can derive new functional dependencies based on a set of <strong><em>axioms</em></strong> to compute the <strong>closure <em>F<sup>+</sup></em></strong> of <em>F</em></p><ul><li>the closure <em>F<sup>+</sup></em> includes all functional dependencies that are logically implied by <em>F</em></li></ul><p>Three rules (<strong><em>Armstrong's axioms</em></strong>) can be used to compute <em>F<sup>+</sup></em></p><ul><li>reflexivity<ul><li>for a given set of attributes α and β <strong>⊆</strong> α, α → β holds (see trivial dependency)</li></ul></li><li>augmentation<ul><li>for given a set of attributes γ; if α → β then γα → γβ holds</li></ul></li><li>transitivity<ul><li>if α → β and β → γ, then α → γ holds</li></ul></li></ul><p>Armstrong's axioms are <strong><em>sound</em></strong> (produce only elements of <em>F<sup>+</sup></em>) and <strong><em>complete</em></strong> (produce all elements in <em>F<sup>+</sup></em>)</p><ul><li>since it may take a lot of time to compute <em>F<sup>+</sup></em> with Armstrong's axioms only, there exist some additional rules</li></ul><p>Decomposition</p><ul><li>if α → βγ, then α → β and α → γ hold</li></ul><p>Union</p><ul><li>if α → β and α → γ, then α → βγ holds</li></ul><p>Trivial dependency rules</p><ul><li>if α → β, then α → α ∪ β holds</li><li>if α → β, then α → α ∪ β holds</li></ul><h4 id="second-normal-form-2nf-5810">Second Normal Form (2NF) 58:10</h4><p>A relation schema R is in <strong><em>second normal form (2NF)</em></strong> if it is in 1NF and if <strong><em>there</em></strong> exists <strong><em>no non-prime attribute that is functionally dependent on a <u>part</u> of a candidate key</em></strong></p><ul><li><strong><em>every non-prime attribute has to be fully functionally dependent on a candidate key</em></strong></li><li>a <strong><em>non-prime attribute</em></strong> is an attribute that is not part of any candidate key</li><li>the Lecturer relation schema shown in the example is <strong><em>not in 2NF</em></strong> since the office attribute functionally depends on the teacher attribute</li></ul><p><img src="/images/DB/2843453.png" /></p><p><strong><em>2NF normalisation process</em></strong></p><ul><li><strong><em>remove</em></strong> any <strong><em>partially dependent attributes</em></strong> from the relation and put them in a new relation together with their determinant</li></ul><p>The original Lecturer relation can be losslessly decomposed into two relations which are both in 2NF</p><ul><li>relations with single attribute keys are automatically in 2NF</li></ul><p><img src="/images/DB/2843454.png" /></p><h4 id="lossless-decomposition-10711">Lossless Decomposition 1:07:11</h4><p>Given a relation schema <em>R</em> and the two decompositions <em>R<sub>1</sub></em> and <em>R<sub>2</sub></em> of R, we say that <em>R<sub>1</sub></em> and <em>R<sub>2</sub></em> form a <strong><em>lossless decomposition</em></strong> if <em>π<sub>R1</sub></em> (r) ⋈ <em>π<sub>R2</sub></em> (r) = r</p><p>Let <em>F</em> be a set of functional dependencies on <em>R</em></p><ul><li><em>R<sub>1</sub></em> and <em>R<sub>2</sub></em> form a lossless decomposition of <em>R</em> if either <em>R<sub>1</sub></em> ∩ <em>R<sub>2</sub></em> → <em>R<sub>1</sub></em> or <em>R<sub>1</sub></em> ∩ <em>R<sub>2</sub></em> → <em>R<sub>1</sub></em> are in <em>F<sup>+</sup></em><ul><li>this means that <em>R<sub>1</sub></em> ∩ <em>R<sub>2</sub></em> is a superkey of <em>R<sub>1</sub></em> or <em>R<sub>2</sub></em></li></ul></li></ul><h4 id="third-normal-form-3nf-10800">Third Normal Form (3NF) 1:08:00</h4><p>A relation schema <em>R</em> is in <strong><em>third normal form</em></strong> <strong><em>(3NF)</em></strong> if it is in 2NF and <strong><em>no non-prime attribute is transitively dependent on a candidate key</em></strong>, i.e. for all functional dependencies α → β in <em>F<sup>+</sup></em> one of the following has to hold</p><ul><li>α → β is a trivial functional dependency (i.e. β <strong>⊆</strong> α)</li><li>α is a superkey of <em>R</em></li><li>each attribute <em>A<sub>i</sub></em> in β — α is contained in a candidate key of <em>R</em><ul><li>note that each <em>A<sub>i</sub></em> can be in different candidate keys</li></ul></li></ul><p>Each non-key attribute "<strong><em>must provide a fact about the key, the whole key, and nothing but the key</em></strong>" [Bill Kent]</p><p>The Prize relation example schema is in 2NF</p><p>The Prize relation schema is not in 3NF since birthdate is functionally dependent on winner and none of the three conditions holds for this functional dependency</p><ul><li>birthdate is transitively dependent on the key (award, year)</li></ul><p><img src="/images/DB/2843455.png" /></p><p><strong><em>3NF normalisation process</em></strong></p><ul><li><strong><em>remove</em></strong> any <strong><em>transitively dependent attributes</em></strong> from the relation and place them in a new relation together with their determinant</li></ul><p>Decomposition of the Prize relation schema into two 3NF relation schemas</p><p><img src="/images/DB/2843456.png" /></p><h4 id="boyce-codd-normal-form-bcnf-11630">Boyce-Codd Normal Form (BCNF) 1:16:30</h4><p>The Boyce-Codd normal form is a stronger form of 3NF</p><p>A relation schema <em>R</em> is in Boyce-Codd Normal Form (BCNF) if it is in 3NF and if <strong><em>every determinant is a candidate key</em></strong>, i.e. for all functional dependencies α → β in <em>F<sup>+</sup></em> one of the following holds</p><ul><li>α → β is a trivial functional dependency (i.e. β <strong>⊆</strong> α)</li><li>α is a superkey of <em>R</em></li></ul><p>Any <strong><em>relation</em></strong> that is <strong><em>in BCNF is also in 3NF</em></strong> since the BCNF conditions are equivalent to the first two 3NF conditions</p><h5 id="bcnf-decomposition">BCNF Decomposition</h5><p>If a relation <em>R</em> is not in BCNF, then there exists a least one nontrivial functional dependency α → β where α is <strong><em>not a superkey</em></strong> of <em>R</em></p><ul><li>the relation <em>R</em> can then be <strong><em>decomposed</em></strong> into the two relation schemas <em>R<sub>1</sub></em> (α ∪ β) and <em>R<sub>2</sub></em> (<em>R</em> - (β - α))</li></ul><p>We can for example apply the BCNF decomposition to the previous Prize relation schema example with the functional dependency <em>winner</em> → <em>birthdate</em></p><ul><li>α ∪ β = (winner, birthdate)</li><li>(<em>R</em> - (β - α)) = (award, year, winner)</li></ul><p>Further details about the algorithms for BCNF and 3NF decomposition can be found in the course book</p><h5 id="multivalued-dependencies">Multivalued Dependencies</h5><p>Some relation schemas that are in BCNF may still contain redundant information</p><p>The fourth normal form (4NF) deals with some of these problems based on multivalued dependencies</p><ul><li>for a given relation schema <em>R</em> with α <strong>⊆</strong> <em>R</em> and β <strong>⊆</strong> <em>R</em> the multivalued dependency α ↠ β holds if for all pairs of tuples <em>t<sub>1</sub></em> and <em>t<sub>2</sub></em> in <em>r</em>(<em>R</em>) (with <em>t<sub>1</sub></em>[α] = <em>t<sub>2</sub></em>[α]) there exist tuples <em>t<sub>3</sub></em> and <em>t<sub>4</sub></em> in <em>r</em>(<em>R</em>) such that<ul><li><em>t<sub>1</sub></em>[α] = <em>t<sub>2</sub></em>[α] = <em>t<sub>3</sub></em>[α] = <em>t<sub>4</sub></em>[α]</li><li><em>t<sub>3</sub></em>[β] = <em>t<sub>1</sub></em>[β]</li><li><em>t<sub>3</sub></em>[<em>R</em> - β] = <em>t<sub>2</sub></em>[<em>R</em> - β]</li><li><em>t<sub>4</sub></em>[β] = <em>t<sub>2</sub></em>[β]]</li><li><em>t<sub>4</sub></em>[<em>R</em> - β] = <em>t<sub>1</sub></em>[<em>R</em> - β]</li></ul></li></ul><p><img src="/images/DB/2843457.png" /></p><p>Every functional dependency is also a multivalued dependency, e.g. if α → β then α ↠ β</p><h4 id="fourth-normal-form-4nf-12116">Fourth Normal Form (4NF) 1:21:16</h4><p>A relation schema <em>R</em> is in <strong><em>fourth normal form (4NF)</em></strong> if it is in BCNF and if <strong><em>any non-trivial multivalued dependency is a dependency on a candidate key</em></strong>, i.e. for all multivalued dependencies a ↠ b in D<sup>+</sup> one of the following has to hold</p><ul><li>α ↠ β is a trivial functional dependency (i.e. β <strong>⊆</strong> α or β ∪ α = R)</li><li>α is a superkey of <em>R</em></li></ul><p>Note that the fourth normal form is very similar to BCNF except that we use multivalued dependencies</p><p><strong><em>4NF normalisation process</em></strong></p><ul><li><strong><em>remove</em></strong> any <strong><em>multivalued attributes</em></strong> from the relation and place them in a new relation together with their determinant</li></ul><h4 id="fifth-normal-form-5nf-12232">Fifth Normal Form (5NF) 1:22:32</h4><p>There are some forms of constraints called join dependencies that generalise multivalued dependencies</p><ul><li>leads to the <strong><em>project-join normal form</em></strong> or <strong><em>fifth normal form (5NF)</em></strong></li><li>not discussed in detail in this course</li></ul><h3 id="normalisation-summary-12341">Normalisation Summary 1:23:41</h3><p>Relations in higher normal forms are less vulnerable to update anomalies</p><ul><li>generally it is recommended that relations are at least in 3NF</li></ul><p><img src="/images/DB/2843458.png" /></p><h3 id="denormalization-12509">Denormalization 1:25:09</h3><p>Sometimes a database designer decides to store information in a redundant way to save join operations and improve the performance</p><ul><li>may result in additional work for insert, update and delete operations</li></ul><p>An alternative is to keep the normalised schema and introduce additional <strong><em>materialised views</em></strong></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Databases </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Problem Solving and Search</title>
      <link href="2021/02/21/2021-02-21-Problem-Solving-and-Search/"/>
      <url>2021/02/21/2021-02-21-Problem-Solving-and-Search/</url>
      
        <content type="html"><![CDATA[<h1 id="problem-solving-and-search">Problem Solving and Search</h1><p><a href="https://vub.cloud.panopto.eu/Panopto/Pages/Viewer.aspx?id=ad1fa799-7a58-45af-b2b0-ab8100fcc929#">Video</a></p><h2 id="what-is-problem-solving">What is problem solving?</h2><p>An agent can act by</p><ul><li>establishing <em>goals</em> that result in solving a <em>problem</em></li><li>considering <em>sequences</em> of actions that might achieve those goals</li></ul><p>To automate this, we need to <em>formulate the problem</em></p><p>The process of considering action sequences within a problem formulation is called <em>search</em></p><p>This part of the module is about</p><ul><li>problem-solving agents</li><li>problem types</li><li>problem formulation</li><li>example problems</li><li>search strategies</li></ul><h2 id="an-agent-on-holiday">An Agent on Holiday</h2><p>Example</p><ul><li><em>An agent is in Arad, Romania, at the end of a touring holiday. It has a ticket to fly out of Bucharest the following day. The ticket is non-refundable, the agent’s visa is about to expire and there are no seats available on flights for six weeks.</em></li></ul><p>The agent’s performance measure includes</p><ul><li>cost of ticket</li><li>avoidance of arrest and/or deportation</li><li>improvement of suntan</li><li>seeing more sights</li></ul><p>Lots of actions are possible to score highly on the performance measure, but the seriousness of the agent’s situation means that the agent should adopt the goal of getting to Bucharest</p><ul><li>Agent can reject any actions that fail to meet this goal</li></ul><h3 id="a-problem-solving-agent">A problem-solving agent</h3><p>Goals help to organise behaviour</p><ul><li><em>goal formulation</em> is the first step to <em>problem solving</em></li><li>a goal is a desired state of (part of) the world<ul><li>though it does not usually specify the state of the whole world</li><li>alternatively, a goal can be thought of as the set of world states in which it is satisfied</li></ul></li></ul><p>Actions cause transitions between <em>world states</em></p><ul><li>The agent has to work out which action(s) will get it to the goal state</li></ul><p><em>Problem formulation</em> is exhaustive analysis of possible actions and states</p><p>The agent needs to consider possible actions and the resulting states</p><ul><li>put left foot forward 18 inches??</li><li>get cab to next town??</li></ul><p>Our holiday agent has adopted the goal of driving to Bucharest</p><p>There are three roads out of Arad: to Sibiu,Timisoara and Zerind</p><ul><li>None of these reaches the goal. Which road should the agent follow?</li></ul><p>Without additional knowledge about Romania, the agent cannot choose the best road to take: it can only make a random choice</p><p>However, if the agent has a map of Romania, it knows which states it can get to and which actions it can perform</p><figure><img src="/images/AI/103913.png" alt="" /><figcaption>Exercise: route planning on a map</figcaption></figure><p>Find a route from Arad to Bucharest.</p><ul><li>Is this the optimal route?</li><li>How did you go about finding the route?</li></ul><p>The agent can use the map information</p><ul><li>consider <em>subsequent stages</em> of a hypothetical journey through each of the 3 nearest towns, to try to find a route that eventually leads to Bucharest</li></ul><p>Once it has found a path on the map from Arad to Bucharest, it can achieve its goal locally by driving to each town on the route</p><p>More generally, with several immediate options of unknown value, the agent can decide what to do by <em>searching</em></p><ul><li>assessing different possible sequences of actions that lead to states of known <em>utility</em> (goal states)</li><li>choosing the best one</li></ul><p>The agent can use the map information</p><ul><li>consider <em>subsequent stages of a hypothetical journey through</em> each of the 3 nearest towns, to try to find a route that eventually leads to Bucharest</li></ul><p>Once it has found a path on the map from Arad to Bucharest, it can achieve its goal locally by driving to each town on the route</p><p>More generally, with several immediate options of unknown value, the agent can decide what to do by <em>searching</em></p><ul><li>assessing different possible sequences of actions that lead to states of known <em>utility</em> (goal states)</li><li>choosing the best one</li></ul><h2 id="design-process">Design Process</h2><p>To design a problem-solving program</p><ul><li>FORMULATE: Formulate problem, goal and starting conditions</li><li>SEARCH: Use search algorithm to find action sequence that realises goal from starting conditions</li><li>EXECUTE: Use solution to guide actions</li></ul><p>To design a problem-solving agent</p><ul><li>Do the above in the context of a changing world</li></ul><p><strong>THE ART OF AI PROBLEM SOLVING IS DECIDING WHAT GOES INTO THE DESCRIPTION OF THE OPERATORS AND STATES, AND WHAT IS LEFT OUT</strong></p><h2 id="search-algorithms">Search Algorithms</h2><p>A search algorithm takes a <em>problem</em> as input, <em>formulated</em> as</p><ul><li>a set of <em>goals</em> to be achieved</li><li>a set of possible <em>actions</em> to be applied</li></ul><p>It returns a solution in the form of an <em>action sequence</em> or <em>plan</em></p><p>Once a solution is found, the chosen actions can be carried out</p><ul><li><em>the execution phase</em></li></ul><p>In the agent context, this becomes complicated because of interaction between agents and other dynamic things in the world</p><ul><li>so we consider the search on its own first</li></ul><h2 id="well-defined-problems">Well-defined problems</h2><p>Basic problem elements are states and actions</p><p>Formally, we need</p><ul><li><em>initial state</em>: the world the agent starts in</li><li><em>operators</em>: describe actions in terms of states reached by applying them</li><li><em>goal state</em>: the world that the agent is trying to be in</li></ul><p>The initial state and operators define the <em>state space</em> of the problem</p><ul><li>the set of all states reachable from the initial state and any sequence of actions</li></ul><p>To determine when the goal state is reached, we need</p><ul><li><em>goal test</em>: a boolean function over states, true if input is the goal state</li></ul><h2 id="searching-for-solutions">Searching for solutions</h2><p>A solution is a sequence of operators leading from start to goal state</p><p>Given a problem formulation, we have to map out the state space</p><ul><li>while we are searching the state space it’s sometimes called the <em>search space</em></li></ul><p>Generate action sequences, using an <em>agenda</em>:</p><ul><li>start at initial state</li><li>check whether in goal state<ul><li>if yes, we’re done</li></ul></li><li>otherwise, consider other states by applying the operators to the present state to generate a new set of states<ul><li>This is called <em>expanding</em> the state</li></ul></li></ul><h3 id="search-trees">Search Trees</h3><p>It’s helpful to think of the state space as structured into a <em>tree</em></p><ul><li>actions correspond with <em>arcs</em></li><li>states correspond with <em>nodes</em></li></ul><p><img src="/images/AI/1039130.png" /></p><p>Searching this way takes us to Bucharest in 3 steps</p><ul><li>but only because of the order we picked the cities in</li></ul><p><img src="/images/AI/1039131.png" /></p><h2 id="clear-thinking-state-node">Clear thinking: state ≠ node!</h2><p>States of the world and nodes in the search tree are not the same thing</p><ul><li>A state is a (representation of) a problem configuration</li><li>A node is a data structure used by a search algorithm<ul><li>constitutes part of a search tree</li><li>includes parent, action, children, depth (for IDS), path cost (for UCS)</li></ul></li><li>States do not formally have parents, actions, children, depth, or path cost!</li></ul><p>The Expand function creates new nodes, filling in the various fields and using the operators of the problem formulation to approximate the corresponding <em>states</em></p><h2 id="search-algorithm-framework">Search Algorithm Framework</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function AgendaSearch( start-state, actions, goal-test )</span><br><span class="line">                                        returns action-sequence or failure</span><br><span class="line">    static: seq, an action sequence, initially empty</span><br><span class="line">    agenda, a state sequence, initially contains start-state</span><br><span class="line">loop do</span><br><span class="line">       if Empty(agenda) then return failure</span><br><span class="line">       if goal-test(First(agenda)) then return seq</span><br><span class="line">       agenda ← Queuing-Fn(Rest(agenda),Expand(First(agenda), actions))</span><br><span class="line">       seq ← Append( seq, Action(First(agenda)))</span><br><span class="line">end loop</span><br></pre></td></tr></table></figure><p>Alternatively, in Prolog:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">agendaSearch( [First|_], [First] ) :-</span><br><span class="line">    goalTest( First ).</span><br><span class="line">agendaSearch( [First|Rest], [First|Answer] ) :-</span><br><span class="line">    expand( First, MidAgenda ),</span><br><span class="line">    queuingFn( Rest, MidAgenda, Agenda ),</span><br><span class="line">    agendaSearch( Agenda, Answer ).</span><br></pre></td></tr></table></figure><p>The Queuing-Fn function determines what kind of search we are doing</p><p>The Expand function produces a set of states achieved by applying all possible actions to the given state</p><p>This is generally called Agenda-based search</p><h3 id="search-the-queuing-fn">Search &amp; the Queuing-Fn</h3><p>Searching this way takes us to Bucharest in 3 steps</p><ul><li>but only because of the order we picked the cities in</li></ul><p><img src="/images/AI/1039132.png" /></p><p>This is an example of Depth-First Search (DFS)</p><ul><li>we construct the search tree by going <em>down</em> it, only going <em>across</em> it when going down fails</li><li>depth-first search can fail when the tree is infinitely deep<ul><li>the space contains cycles or is generated from continuous values</li></ul></li><li>depth-first search depends (crucially) on the order in which operators are applied/nodes are expanded<ul><li>it may not find things that are present</li><li>it may find long action sequences before short ones (usually, that’s unhelpful)</li></ul></li></ul><p>In terms of agendas, we implement DFS with a Queuing-Fn that</p><ul><li>removes the current node from the agenda</li><li>appends its children to the <em>front</em> of the agenda</li><li>note that the agenda is <em>rotating</em> all the time, always dealing with its <em>first</em> item</li></ul><p>An alternative is Breadth-First Search (BFS)</p><ul><li>we construct the search tree by going <em>across</em> it,repeatedly,replacing each node with its children</li><li>breadth-first search guarantees to find the solution if there is one</li><li>breadth-first search guarantees to find the shortest action sequence</li><li>but it causes a combinatorial explosion of nodes in the agenda, and so is unsuitable for very large search spaces<ul><li>most real AI problems have very large search spaces</li></ul></li></ul><p>In terms of agendas, we implement BFS with a Queuing-Fn that</p><ul><li>removes the current node from the agenda</li><li>appends its children to the <em>back</em> of the agenda</li><li>note that the agenda is <em>rotating</em> all the time, always dealing with its <em>first</em> item</li></ul><h4 id="breadth-first-search-in-romania">Breadth-first search in Romania</h4><p>Here the different depths are given different colours</p><ul><li>we can see the different layers of the tree as the search proceeds</li><li>and it’s clear that the shortest solution, if there is one, will be found</li></ul><p><img src="/images/AI/1039133.png" /></p><h4 id="measuring-search-effectiveness">Measuring search effectiveness</h4><p>To determine the utility of a particular path, we need</p><ul><li>cost: a function that assigns a cost to a path (to differentiate between solutions)</li></ul><p>To evaluate a search strategy or algorithm, need to ask</p><ul><li>does it find a solution?</li><li>is it a good solution (one with a low path cost)?</li><li>is it the best solution (optimal)?</li><li>how much time and memory are required to find a solution</li></ul><p>Effectiveness of search depends on the objectives. Compare</p><ul><li>searching for a route to Bucharest (many routes may be satisfactory)</li><li>searching for the next prime number (must be a true prime, and there’s only 1)</li></ul><p>Now consider the efficiency of the planned route</p><ul><li>going via Sibiu and Fagaras has the fewest towns</li><li>but going via Sibiu and Pitesti is shorter</li></ul><p><img src="/images/AI/1039150.png" /></p><p>We can compute the utility of a route by a function which implements the performance measure, in terms of the problem formulation</p><p>here, we might use distance for each road</p><p><img src="/images/AI/1039134.png" /></p><p>We can implement this using Uniform-Cost Search (UCS)</p><p>Also called Best-First Search</p><ul><li>we construct the search tree by picking the <em>best</em> node in the agenda after each expansion, according to the utility function, expanding it, and so on</li><li>best-first search guarantees to find the solution if there is one</li><li>best-first search guarantees to find the best action sequence in terms of <em>utility</em></li><li>but it cannot guarantee to use less memory than BFS<ul><li>most real AI problems have very large search spaces</li></ul></li></ul><p>In terms of agendas, implement UCS/BestFS with a Queuing-Fn that</p><ul><li>removes the current node from the agenda</li><li>appends its children to the agenda and then sorts the <em>whole</em> <em>agenda</em> by the utility function<ul><li>and stores the cost-so-far at each node in the agenda, to avoid recalculation</li></ul></li><li>note that the agenda is <em>rotating</em> all the time, always dealing with its <em>first</em> item</li></ul><h4 id="best-first-search-ucs-in-romania">Best-first search (UCS) in Romania</h4><p>Using UCS to consider real distances</p><ul><li>Here BFS would get us a <em>wrong answer</em></li><li>UCS is correct, but spends time searching routes which are “obviously” wrong</li></ul><p><img src="/images/AI/1039135.png" /></p><p><img src="/images/AI/1039136.png" /></p><p><img src="/images/AI/1039137.png" /></p><p><img src="/images/AI/1039138.png" /></p><p><img src="/images/AI/1039139.png" /></p><p><img src="/images/AI/1039140.png" /></p><p><img src="/images/AI/1039141.png" /></p><p><img src="/images/AI/1039142.png" /></p><p><img src="/images/AI/1039143.png" /></p><p><img src="/images/AI/1039144.png" /></p><p><img src="/images/AI/1039145.png" /></p><p><img src="/images/AI/1039146.png" /></p><p><img src="/images/AI/1039147.png" /></p><p><img src="/images/AI/1039148.png" /></p><h2 id="formulating-the-problem">Formulating the problem</h2><p>Now let’s look at the full specification of this problem</p><ul><li>Initial state: in Arad</li><li>Operator: drive between two cities</li><li>State space: cities (20)</li><li>Goal test: in Bucharest?</li></ul><p>Path cost: one of</p><ul><li>total milage</li><li>total expected travel time</li><li>step count in search</li></ul><p>Many details are left out</p><ul><li>abstraction</li></ul><h2 id="analysing-search-spaces">Analysing search spaces</h2><p>A strategy is defined by its order of node expansion</p><p><em>Uninformed</em> strategies use <em>only information</em> in the <em>problem formulation</em></p><ul><li>Sometimes called <em>blind</em> search or <em>brute-force</em> search<ul><li>Breadth-first search</li><li>Depth-first search</li><li>Best-first search/Uniform-cost search (this “feels” informed, but isn’t, by this definition)</li></ul></li></ul><p><em>Informed</em> or <em>heuristic</em> search strategies a quality measure not strictly in the problem formulation to guide the order in which nodes are expanded</p><ul><li>e.g., An informed agent might notice that the goal state, Bucharest, is southeast of Arad, and that only Sibiu is in that direction,so it is likely to be the best choice<ul><li>Algorithm A and Algorithm A*</li></ul></li></ul><h3 id="analysing-search-spaces-for-cost">Analysing search spaces for cost</h3><p>A strategy is evaluated along the following dimensions</p><ul><li><em>completeness</em>: does it always find a solution if one exists?</li><li><em>time complexity</em>: number of nodes generated</li><li><em>space complexity</em>: maximum number of nodes in memory at once</li><li><em>optimality</em>: does it always find a least-cost solution?</li></ul><p>Time and space complexity are measured in terms of the search tree</p><ul><li><em>b</em> maximum branching factor of the search tree (“bushiness” of tree)</li><li><em>d</em> depth of the least-cost solution</li><li><em>m</em> maximum depth of the state space (may be ∞)</li></ul><p>Even the best strategies need to avoid repeated nodes</p><ul><li>trade-off between time and space (see Russell and Norvig)</li></ul><p>So far, we’ve looked at Depth first, Breadth first, and Uniform Cost search in practice</p><ul><li>now, the theory</li></ul><p>Depth first search (DFS)</p><ul><li>Complete? No, DFS fails in infinite depth search spaces and spaces with loops</li><li>Time? O(b<sup>m</sup>): terrible if m is much larger than d, but if search tree is “bushy ” , may be much faster than breadth first</li><li>Space? O(bm), i.e.,space linear in length of action sequence! Need only store a single path from the root to the leaf node, along with remaining unexpanded sibling nodes for each node on path</li><li>Optimal? No</li><li>Pros: For problems with many solutions, DFS may be faster than BFS because it has a good chance of finding a solution after exploring only a small portion of the whole space</li><li>Cons: can get stuck down wrong search path</li></ul><p>Breadth first search</p><ul><li>Complete? Yes, all nodes are examined if b is finite</li><li>Time? 1 + b + b<sup>2</sup> + b<sup>3</sup> + . . . + b<sup>d</sup> = O(b<sup>d</sup>), i.e., exponential in b</li><li>Space? O(b<sup>d</sup>) – keeps every node in memory</li><li>Optimal? Only if cost = 1 per step, not in general<ul><li>If there are several solutions it will find the <em>shallowest</em> goal first</li></ul></li><li>Drawbacks: Memory requirement to store nodes is a big problem<ul><li>Assuming b = 10, expansion of 1000 nodes/sec, and 100 bytes/node:</li></ul></li></ul><table><thead><tr class="header"><th style="text-align: center;">Depth</th><th style="text-align: center;">Nodes</th><th style="text-align: center;">Time</th><th style="text-align: center;">Memory</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">0</td><td style="text-align: center;">1</td><td style="text-align: center;">1 millisecond</td><td style="text-align: center;">100 bytes</td></tr><tr class="even"><td style="text-align: center;">2</td><td style="text-align: center;">111</td><td style="text-align: center;">0.1 seconds</td><td style="text-align: center;">11 kilobytes</td></tr><tr class="odd"><td style="text-align: center;">4</td><td style="text-align: center;">11111</td><td style="text-align: center;">11 seconds</td><td style="text-align: center;">1 megabytes</td></tr><tr class="even"><td style="text-align: center;">6</td><td style="text-align: center;">10<sup>6</sup></td><td style="text-align: center;">18 minutes</td><td style="text-align: center;">111 megabytes</td></tr><tr class="odd"><td style="text-align: center;">8</td><td style="text-align: center;">10<sup>8</sup></td><td style="text-align: center;">31 hours</td><td style="text-align: center;">11 gigabytes</td></tr><tr class="even"><td style="text-align: center;">10</td><td style="text-align: center;">10<sup>10</sup></td><td style="text-align: center;">128 days</td><td style="text-align: center;">1 terabyte</td></tr><tr class="odd"><td style="text-align: center;">12</td><td style="text-align: center;">10<sup>12</sup></td><td style="text-align: center;">35 years</td><td style="text-align: center;">111 terabytes</td></tr><tr class="even"><td style="text-align: center;">12</td><td style="text-align: center;">10<sup>14</sup></td><td style="text-align: center;">3500 years</td><td style="text-align: center;">11111 terabytes</td></tr></tbody></table><p>Uniform-cost (Best first) search</p><ul><li>Shares dynamic properties of DFS and BFS</li><li>Requires step cost information in problem formation and path cost in agenda</li><li>Time? Number of nodes with path cost less than optimal solution</li><li>Space? Number of nodes with path cost less than optimal solution</li><li>Optimal? Yes – finds the cheapest solution as long as step cost &gt; 0</li><li>First solution reported (but not necessarily encountered) is always the cheapest<ul><li>does not explore the whole tree and avoids looping</li><li>but can explore the same path multiple times if there is more than one route through a node</li></ul></li></ul><p><strong>Exercise: IDS on holiday</strong></p><p>Execute IDS for the Romanian holiday problem, on paper</p><p><img src="/images/AI/1039150.png" /></p><p>Iterative Deepening Search</p><ul><li>Complete? Yes</li><li>Time? (d+1)b<sup>0</sup> +db<sup>1</sup> +(d−1)b<sup>2</sup> +...+ b<sup>d</sup> = O(b<sup>d</sup>)</li><li>Space? O(b<sup>d</sup>) ‣ Optimal? Yes, if step cost = 1</li><li>Pros: combines the benefits of BFS and DFS<ul><li>optimal and complete (like BFS)</li><li>modest memory requirements (like DFS)</li><li>can be modified to explore uniform-cost tree</li></ul></li><li>Cons: some (perhaps many) states are expanded multiple times<ul><li>Although this appears wasteful, the overhead is actually quite small for most cases</li></ul></li></ul><h2 id="informed-search">Informed Search</h2><p><em>Informed</em> <em>search methods</em> use problem specific information about the state space to generate solutions more effectively</p><ul><li>Sometimes called Best First Search</li></ul><p>Extra knowledge is provided by a <em>heuristic</em> which returns a number describing the desirability of expanding a given node</p><ul><li>an approximation since we usually don’t know best node to expand</li><li>nodes expanded in order of desirability (like UCS)</li><li>most desirable processed first</li></ul><p>The aim is to find <em>low</em> cost solutions</p><ul><li>typically evaluate estimated cost of solution and try to minimise it</li><li>measure incorporates estimate of cost from a state to the closest goal state<ul><li>try to expand the node closest to the goal</li><li>try to expand the node on the least cost solution path</li></ul></li></ul><h2 id="greedy-or-hill-climbing-search">Greedy, or hill-climbing, search</h2><p>The simplest kind of informed search estimates the cost from the current node to the solution and uses that to sort its agenda</p><ul><li>note the difference with UCS, where we use the actual cost so far</li></ul><p><img src="/images/AI/1039151.png" /></p><p>Most greedy search has an agenda of length 1</p><ul><li>all but the best node is thrown away, at every cycle</li><li>but it can be implemented with an agenda of any length</li><li>the shorter the agenda, the more likely the search is to get caught in local minima, where there is a temporary dip in the solution quality<ul><li>throwing away solutions means you can’t recover if you go astray</li></ul></li></ul><p>In the route-finding problem, a good heuristic is the straight-line distance to the goal</p><ul><li>“as the crow flies”</li><li>this idea, that a geometrical distance estimates a distance along a graph, is the basis of many heuristics</li></ul><p>But because it doesn’t account for cost so far, it can lead us astray</p><h2 id="algorithm-a">Algorithm A</h2><p>Algorithm A combines the best of UCS and Greedy search</p><ul><li>UCS had “cost so far”</li><li>Greedy had “estimated cost remaining” or heuristic</li></ul><p>Algorithm A has “cost so far” + “estimated cost remaining ”</p><p>This is usually notated as f(n) = g(n) + h(n)</p><ul><li><em>f</em> is the overall cost/evaluation/utility function</li><li><em>g</em> is the cost-so-far function</li><li><em>h</em> is the heuristic</li></ul><p>Algorithm A</p><ul><li>is complete</li><li>but can be sub-optimal in node expansion</li></ul><h2 id="algorithm-a-1">Algorithm A*</h2><p>Algorithm A* uses a heuristic which is admissible</p><ul><li>this means that it never over-estimates the distance to the closest solution</li><li>in any graph representation of space, geometric distance has this property</li></ul><p>A* is optimal</p><ul><li>in the sense that we are guaranteed a solution if there is one</li><li>in the sense that the fewest possible nodes will be expanded, given this problem formulation<ul><li>NB re-formulating may produce better search</li></ul></li></ul><p>Exercise</p><ul><li>Using the data on the earlier slide, apply A* to the Arad-Bucharest route problem<ul><li>in what order are the nodes expanded?</li></ul></li></ul><h3 id="analysing-search-algorithms-for-cost">Analysing search algorithms for cost</h3><p>Proving optimality of A*</p><ul><li>Suppose there is a suboptimal goal G<sub>2</sub> in the agenda<ul><li>Let n be an unexpanded node on a shortest path to an optimal goal G</li></ul></li><li>f(G<sub>2</sub>) = g(G<sub>2</sub>)+ h(G<sub>2</sub>)<ul><li>but h(G<sub>2</sub>) = 0, as it’s a goal</li></ul></li><li>g(G<sub>2</sub>) &gt; g(G)<ul><li>because G2 is sub-optimal</li></ul></li><li>g(G) ≥ f(n)<ul><li>because h is admissible</li></ul></li><li>Because f(G<sub>2</sub>) ≥ f(n),A* will never select G<sub>2</sub> for expansion</li></ul><p>The more accurate h is, the fewer unnecessary nodes will be expanded</p><p><img src="/images/AI/1039152.png" /></p><p>One way to characterise the quality of a heuristic is the effective branching factor (b*)</p><ul><li>if<ul><li>the total number of nodes expanded by A* for a particular problem is N</li><li>the solution depth is d</li></ul></li><li>then<ul><li>b* is the branching factor that a uniform tree of depth d would have to have in order to contain N nodes</li></ul></li><li>N =1+b+(b)<sup>2</sup> +...+(b*)<sup>d</sup></li><li><em>e.g., if A</em> finds a goal at depth 5 using 52 nodes, the effective branching factor is 1.91</li></ul><p>Usually the effective branching factor exhibited by a given heuristic is fairly constant over a large range of problems</p><ul><li>This can be used for empirical evaluation of a heuristic’s usefulness</li></ul><h3 id="exercise-the-8s-puzzle">Exercise: The 8s-Puzzle</h3><p>Choosing a heuristic function for a more abstract problem</p><ul><li>the 8s-puzzle<ul><li>typical solution ≈ 20 steps</li><li>branching factor ≈ 3 (2 if space in corner, 4 in middle, 3 otherwise)</li><li>exhaustive search to depth 20 examines 320 ≈ 3.5 × 109 nodes</li></ul></li><li>A* Heuristic must never over-estimate number of steps to goal<ul><li>h<sub>1</sub> = number of tiles in wrong position</li><li>h<sub>2</sub> = sum of Manhattan/city-block distances of tiles from their goals</li></ul></li></ul><figure><img src="/images/AI/1039153.png" alt="" /><figcaption>Table comparing the search costs and elective branching factors for IDS and A* using h1 and h2. Data are averaged over 100 instances of the 8-puzzle, for various solution lengths.</figcaption></figure><ul><li>h<sub>2</sub> is better than h<sub>1</sub> which is better than uninformed search</li><li>Always use a heuristic with higher values,so long as it doesn’t overestimate</li></ul><h2 id="further-reading">Further Reading</h2><p>In Chapters 3 &amp; 4 of the textbook you can read more about search including</p><ul><li>Bidirectional search</li><li>Searching with partial information</li><li>Hill-climbing search and simulated annealing</li><li>Genetic algorithms</li><li>Online search agents</li></ul>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Techniques of Artificial Intelligence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Discussion 2</title>
      <link href="2021/02/20/2021-02-20-Exercise-2---Extended-Entity-Relationship-Model/"/>
      <url>2021/02/20/2021-02-20-Exercise-2---Extended-Entity-Relationship-Model/</url>
      
        <content type="html"><![CDATA[<h1 id="discussion-2-extended-entity-relationship-model">Discussion 2: Extended Entity-Relationship Model</h1><p><a href="https://yintelligence.tech/2021/02/17/2021-02-17-Extended-ER-Model-and-other-Modelling-Languages/">Background</a></p><p><a href="https://recordings.reu1.blindsidenetworks.com/vub/f4dd7d55b835defa06856c02ea7b5a0f8f67349d-1613739467851/capture/">Video</a></p><p><a href="https://yintelligence.tech/2021/02/17/2021-02-17-Exercise-1-Entity-Relationship-Model/">Exercise 1</a></p><h2 id="recap-extended-er-model">Recap: Extended ER Model</h2><ul><li><p>ISA relationships</p><p><em>Inheritance of entities</em></p></li><li><p>Aggregations</p><p><em>Replace n-ary relations with a higher level entity</em></p></li><li><p>Part-Of Hierarchies</p><p><em>Convention for indicating parts (already possible in ER but no formal syntax)</em></p></li></ul><figure><img src="/images/DB/210547.png" alt="" /><figcaption>Example: Basic ER</figcaption></figure><figure><img src="/images/DB/2105470.png" alt="" /><figcaption>Example: EER using ISA</figcaption></figure><h2 id="twitter-description-1717">Twitter: Description 17:17</h2><p>Twitter is a platform where <strong>users</strong> can register with a <u>unique username</u> (their Twitter handle). When logged in, they can <em>post messages</em> called ’ <strong>Tweets</strong> ’ that are max 120 characters long and optionally can contain an image, video or poll. However, a tweet can only <em>contain</em> one <strong>interactive component</strong> (either an image, video or poll). These tweets are <u>uniquely identified by a number</u> and can be <em>liked</em> by other users. Any user can <em>reply</em> to tweets and even ’ <em>retweet</em> ’/repost the tweet on their own homepage. Users can choose to <em>follow</em> other users to get notified on their activity.</p><h3 id="how-do-we-make-sure-only-one-interactive-component-media-can-be-used">How do we make sure only one interactive component (Media) can be used?</h3><figure><img src="/images/DB/2105471.png" alt="" /><figcaption>Twitter: (E)ER</figcaption></figure><p>Note: This is a bit hard to read ... Split the drawing in parts</p><p><img src="/images/DB/2105472.png" /></p><p><img src="/images/DB/2105473.png" /></p><p>The common attribute is name, Create a <em>Person</em> entity link to <em>Student</em> and <em>Employee</em>.</p><h3 id="how-do-we-retweet-a-tweet-3031">How do we retweet a tweet? 30:31</h3><ol type="1"><li>Add it as a media component similar to image, video and poll?</li><li>Add an ISA relation to tweet for both a ’Regular’ and ’Retweeted’ tweet?</li><li>Create an optional relation from Tweet to Tweet called ’retweet’, similar to a reply?</li><li>Since retweets can not be replies as well, we can use the replyTo relation with some additional ’retweet’ flag?</li></ol><p><img src="/images/DB/2105474.png" /></p><h2 id="eer-diagram">EER Diagram</h2><p>In the following exercises, you will receive a description of a database or application. Using this description, create an EER diagram that covers the requirements. You can make the EER diagrams on paper or use an online drawing tool such as https://draw.io.</p><h3 id="medical-database-5000">Medical Database 50:00</h3><p>Patients are identified by their social security number (SSN). They have a name, address (which consists of a street name, house number, postal code, city and country), telephone number, age and email address. They all have their preferred doctor. Doctors are also identified by their SSN. For each doctor a name, age, telephone number, address and specialities are stored.</p><p>Pharmaceutical companies will also be stored in the database. They are identified by their company name. Furthermore, their telephone number and address are stored along with a contact person. This contact person is identified by his SSN and has an age, address, telephone number and email address.</p><p>For each medicine, the name (unique) and formula is stored. Each medicine is made in a pharmaceutical company. Some medicines are made by only one pharmaceutical company, while others are made by several companies. Pharmacies sell medicines. Each pharmacy has its own prices for the medicines they sell.</p><p>Pharmacists (i.e., managers of pharmacies) are identified by their SSN. Similar to other persons they have an age, address and telephone number. Be aware that doctors can not be pharmacists as well. The pharmacies have a unique address and telephone number (this number is the same as the telephone number of the pharmacist).</p><p>Doctors prescribe medicines to patients. Of course, a patient can receive prescriptions from multiple doctors. Each prescription has a date, the medicines that were prescribed and their dose.</p><p>Pharmaceutical companies have long term contracts with certain pharmacies. Pharmacies may have such contracts with several pharmaceutical companies. For each contract, the start-and end date is specified and a list of medicines for which an agreement was reached. The full text of the contract is also stored.</p><h3 id="solution">Solution</h3><p>Please note that the following EER-Models are one possible solution. The exercises can be interpreted in different ways but should be able to contain the data explained in the description. We use the original ER-cardinality style for these solutions.</p><p>For ease of readability we divided the solution in the ISA relations and the actual EER-model.</p><p><img src="/images/DB/220.png" /></p><p><img src="/images/DB/221.png" /></p>]]></content>
      
      
      <categories>
          
          <category> Discussions </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Databases </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Intelligent Agents</title>
      <link href="2021/02/20/2021-02-20-Intelligent-Agents/"/>
      <url>2021/02/20/2021-02-20-Intelligent-Agents/</url>
      
        <content type="html"><![CDATA[<h1 id="intelligent-agents">Intelligent Agents</h1><p><a href="https://www.dropbox.com/s/ih107cwyrgjp9o4/Techniques%20of%20Artificial%20Intelligence%202021%20Topic%203.mov?dl=0">Video</a></p><h2 id="what-is-an-agent-213">What is an agent? 2:13</h2><p>An <em>agent</em> is anything that <strong><em>perceives</em></strong> its <em>environment</em> through <em>sensors</em> and <em>acts</em> upon that environment through <em>actuators</em>.</p><p>This module aims to introduce the design of agents that can do a good job of acting on their environment, i.e., to build rational agents</p><p>For any given class of environments and tasks, we seek the agent (or class of agents) with the best performance</p><p>Examples 5:15: robots,softbots, people, thermostats</p><p><img src="/images/AI/202147.png" /></p><h2 id="rational-agents-837">Rational Agents 8:37</h2><p>A <em>rational agent</em> is one that does the <em>right thing</em> in <em>context</em></p><ul><li>but what does this really mean?</li></ul><p>The right action should cause the agent to be most successful</p><ul><li>but how and when should the agent’s success be evaluated?</li></ul><p>Success needs to be evaluated with respect to an objective <em>performance</em> <em>measure</em>, which depends on what the agent is designed to achieve</p><p><em>When</em> to look at performance is also important and depends on what the agent has been designed to achieve</p><p><strong>Very important</strong> 10:11</p><table><thead><tr class="header"><th style="text-align: center;">Agent</th><th style="text-align: center;">Performance Measure</th><th style="text-align: center;">When to measure performance</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">Vacuum cleaner</td><td style="text-align: center;">?</td><td style="text-align: center;">?</td></tr><tr class="even"><td style="text-align: center;">Call Router</td><td style="text-align: center;">?</td><td style="text-align: center;">?</td></tr></tbody></table><h3 id="performance-measures-1927">Performance measures 19:27</h3><p>Performance measure must be realistic</p><ul><li>An omniscient agent knows the actual outcome of its actions and can act accordingly; but this is impossible in reality.</li></ul><p>Example</p><ul><li><em>An agent walking along the Boulevard Franklin Roosevelt/Franklin Rooseveltlaan sees an old friend on the other side of the road. It looks both ways, sees that no traffic is coming and starts to cross the road. Meanwhile, at 33,000 feet, a cargo door falls off a plane passing overhead which crashes to the ground flattening the agent. Was the agent behaving rationally?</em></li></ul><p>Need to consider expected success given what has been perceived.</p><p>What is rational at any given time depends on</p><ul><li>the performance measure defining degree of success</li><li>the agent’s percept sequence</li><li>what the agent knows about the environment</li><li>the actions available to the agent</li></ul><h3 id="an-ideal-rational-agent-2302">An Ideal Rational Agent 23:02</h3><p>For each possible percept sequence, an ideal rational agent should do whatever is expected to maximise its performance measure, on the basis of the evidence provided by the percept sequence and whatever built-in knowledge the agent has</p><p>NB: The best action may sometimes be to gather more information</p><h2 id="from-percept-sequence-to-action-2348">From Percept Sequence to Action 23:48</h2><p>Agent’s behaviour depends only on its percept sequence to date, interpreted in context of its rules of the world</p><p>So we define behaviour as a simple mapping from every possible percept sequence to an action</p><ul><li>but for any realistic agent that will probably be an infinite list</li><li>and anyway, the agent would only be able to do what it was explicitly told</li></ul><p>Specifying the best action an agent ought to take in response to any given percept sequence is a good design for an ideal agent</p><p>Example:</p><ul><li>A square root agent<ul><li>given a percept, x, display the positive number, z,such that z<sup>2</sup> = x</li></ul></li><li>Ideal mapping could be a lookup table or a function:</li></ul><p><img src="/images/AI/2021470.png" /></p><h2 id="autonomy-30121">Autonomy 30:121</h2><p>The agent’s behaviour is based on its own experience and its built-in knowledge</p><p>An agent is <em>autonomous</em> to the extent that its behaviour is determined by its own experience</p><p>Complete autonomy from the start is too difficult</p><ul><li>the agent’s designer must give guidance in terms of some initial knowledge and the ability to learn and/or reason as it operates in its environment</li><li>Without the ability to learn or adapt, the agent’s behaviour may <em>appear</em> intelligent but is actually <em>inflexible</em></li></ul><h3 id="when-an-agent-is-not-autonomous-3347">When an Agent is not Autonomous 33:47</h3><p>Example:</p><ul><li>After a dung beetle digs its nest and lays its eggs, it fetches a ball of dung from a nearby heap to plug the entrance</li><li>but if the ball of dung is removed on route, the beetle carries on and mimes plugging the nest with the nonexistent dung ball, never noticing that it is missing</li></ul><p>A truly autonomous intelligent agent should be able to operate successfully in a wide variety of environments, given sufficient time to adapt.</p><h2 id="structure-of-an-intelligent-agent-3642">Structure of an Intelligent Agent 36:42</h2><p>What’s inside an agent?</p><p>The agent program is a function that implements the agent mapping</p><p>The program runs on a computing device, the architecture, which</p><ul><li>makes percepts from the sensors available to the program</li><li>runs the program</li><li>feeds the program’s actions to the actuators</li></ul><p><span class="math display">\[AGENT = ARCHITECTURE + PROGRAM\]</span></p><h3 id="an-agent-description-schema-peas-3812">An Agent Description Schema: PEAS 38:12</h3><p>Designing an agent program requires a good understanding of its:</p><ul><li><strong>P</strong>erformance Measure(s)</li><li><strong>E</strong>nvironment(s)</li><li><strong>A</strong>ctuators</li><li><strong>S</strong>ensors</li></ul><table><colgroup><col style="width: 5%" /><col style="width: 22%" /><col style="width: 16%" /><col style="width: 28%" /><col style="width: 28%" /></colgroup><thead><tr class="header"><th style="text-align: center;">Agent</th><th style="text-align: center;">Performance measure</th><th style="text-align: center;">Environment</th><th style="text-align: center;">Actuators</th><th style="text-align: center;">Sensors</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">Taxi driver</td><td style="text-align: center;">Safe, fast, legal, comfortable, maximise profit</td><td style="text-align: center;">Roads, other road users, customers</td><td style="text-align: center;">Steering, accelerator, brake, signals, horn</td><td style="text-align: center;">Cameras, sonar, GPS, speedometer, fuel guage, odometer, etc.</td></tr><tr class="even"><td style="text-align: center;">Doctor</td><td style="text-align: center;">Healthy patient, minimise costs, avoid lawsuits</td><td style="text-align: center;">Patient, hospital, hospital staff</td><td style="text-align: center;">Ask questions, apply tests, apply treatments, refer patients</td><td style="text-align: center;">Ears, eyes, test equipment</td></tr></tbody></table><h4 id="peas-analysis-4222">PEAS Analysis 42:22</h4><table><thead><tr class="header"><th style="text-align: center;">Agent</th><th style="text-align: center;">Performance measure</th><th style="text-align: center;">Environment</th><th style="text-align: center;">Actuators</th><th style="text-align: center;">Sensors</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">Oil refinery controller</td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Interactive English tutor</td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">Call-routing agent</td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Internet shopping agent</td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td></tr></tbody></table><h2 id="agent-programs-5252">Agent Programs 52:52</h2><p>All agent programs have the same skeleton structure</p><ul><li>Take just one percept at a time</li><li>Generate an action</li><li>Agent must build up its percept sequence in memory (if necessary and feasible)</li></ul><p>The goal and performance measure are not part of the skeleton</p><ul><li>Agent may not need to know explicitly how it is being judged</li><li>Performance measure may be contained in its Choose-Best-Action function</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Skeleton-Agent( percept ) returns action</span><br><span class="line">    static: memory, the agent’s memory of the world</span><br><span class="line">    </span><br><span class="line">    memory ← Update-Memory( memory, percept )</span><br><span class="line">    action ← Choose-Best-Action( memory )</span><br><span class="line">    memory ← Update-Memory( memory, action )</span><br><span class="line">    return action </span><br></pre></td></tr></table></figure><h3 id="why-not-just-look-up-the-answers-5921">Why not just look up the answers? 59:21</h3><p>Keep the entire sequence in memory</p><ul><li>use it as an index into a table</li><li>simply look up actions</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Lookup-Agent( percept ) returns action</span><br><span class="line">    static: percepts, a sequence, initially empty</span><br><span class="line">            table, full, indexed by percept sequence</span><br><span class="line">    </span><br><span class="line">    percepts ← Append( percepts, percept )</span><br><span class="line">    action ← Lookup( percepts, table ) </span><br><span class="line">    return action </span><br></pre></td></tr></table></figure><p>This approach will fail because</p><ul><li>The look-up table for will be too large (for chess, 35100 entries)</li><li>Designer has to build whole of table in advance</li><li>No autonomy,so no flexibility</li><li>Even a learning agent would take forever to learn a real-world table</li></ul><h2 id="different-types-of-agent-10131">Different types of agent 1:01:31</h2><p>Different types of agent are useful in different circumstances</p><ul><li>it’s useful to know which because it’s best to use the simplest possible in context</li></ul><p>Types of agent</p><ul><li>simple reflex</li><li>agents with state</li><li>goal-based agents</li><li>utility-based agents</li></ul><h2 id="simple-reflex-agents-10620">Simple Reflex Agents 1:06:20</h2><p><img src="/images/AI/2021471.png" /></p><p>Some drivers’ actions are more or less automatic</p><ul><li>e.g., braking if car in front is breaking</li></ul><p>Such reflex rules are sometimes called</p><ul><li>condition-action rules</li><li>production rules</li><li>if-then rules</li></ul><p>Some processing needed to test conditions</p><p>Efficient, but narrow</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Simple-Reflex-Agent( percept ) returns action</span><br><span class="line">    static: rules, a set of productions</span><br><span class="line">    </span><br><span class="line">    state ← Interpret-Input( percept )</span><br><span class="line">    rule ← Rule-Match( state, rules )</span><br><span class="line">    action ← Rule-Action( rule )</span><br><span class="line">    return action</span><br></pre></td></tr></table></figure><h3 id="reflex-agents-with-state-10934">Reflex Agents with State 1:09:34</h3><p>Sometimes an agent needs more than just its current percept and must maintain an internal state</p><ul><li>This helps to distinguish between world states that generate the same perceptual input but nonetheless are significantly different in terms of the actions it must take</li></ul><p>Example</p><ul><li>A taxi-driver agent wants to overtake but cannot tell if there are cars nearby</li><li>By recording its last look in the rear-view mirror in its internal state, it can judge whether it is safe to pull</li></ul><p><img src="/images/AI/2021472.png" /></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Reflex-Agent-State( percept ) returns action</span><br><span class="line">    static: rules, a set of productions</span><br><span class="line">            state, a description of the current world</span><br><span class="line">    state ← Update-State( state, percept )</span><br><span class="line">    rule ← Rule-Match( state, rules )</span><br><span class="line">    action ← Rule-Action( rule )</span><br><span class="line">    state ← Update-State( state, action )</span><br><span class="line">    return action</span><br></pre></td></tr></table></figure><p>Maintaining and updating an internal state requires</p><ul><li>information about how the external world evolves<ul><li>e.g., a car that was overtaking is likely to be closer than it was a moment ago</li></ul></li><li>information about how its own actions affect the world<ul><li>e.g., when the agent overtakes, it leaves a gap in the lane it has left</li></ul></li></ul><p>The Update-State function must</p><ul><li>create a new internal state description</li><li>interpret new percept in light of existing knowledge about state</li><li>use information about how the world evolves to keep track of unseen parts</li><li>know about what the agent’s actions do to the state of the world</li></ul><h2 id="goal-based-agents-11431">Goal-based Agents 1:14:31</h2><p>Knowing the state of the environment is not always enough</p><ul><li>The correct action may depend on the goals of the agent</li></ul><p>An agent program combines goal information with information about the results of possible actions to choose actions that achieve the goal</p><ul><li>sometimes simple<ul><li>when goal is satisfied by a single action</li></ul></li><li>sometimes complex<ul><li>when goal requires a sequence of actions</li></ul></li><li>Search and planning are sub-fields of AI devoted to finding action sequences that achieve the agent’s goals</li></ul><p>Decision making is more complex with goals</p><ul><li>it requires consideration of the future<ul><li>What will happen if I do X?</li><li>Will that make me happy?</li></ul></li></ul><p>Although they may be less efficient, goal-based agents are more flexible</p><ul><li>Taxi-driver agent may have its destination as a goal causing it to behave in different ways for each possible percept sequence</li></ul><p>Goals alone may not be sufficient to generate high-quality behaviour</p><ul><li>many action sequences may achieve the goal, but some are better than others</li></ul><h2 id="utility-based-agents-11900">Utility-based Agents 1:19:00</h2><p>Goal satisfaction provides a crude distinction between good states and bad states, whereas a more general performance measure would allow a comparison between states, or sequences of states, according to exactly how desirable they are.</p><p>This measure of preference over world states is known as utility</p><p>Utility (usually) maps state onto real numbers so they are comparable</p><p>Utility is needed when</p><ul><li>there are conflicting goals, e.g.,speed versus safety</li><li>there are several means of reaching a goal</li><li>several goals exist but cannot be reached with certainty<ul><li>utility provides a way in which the likelihood of success can be weighed against the importance of the goals</li></ul></li></ul><h2 id="environments-12111">Environments 1:21:11</h2><p>Environments have different properties, which determine what kinds of agents can work in them</p><table><thead><tr class="header"><th style="text-align: center;">Fully Observable</th><th style="text-align: center;">Partially Observable</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">Deterministic</td><td style="text-align: center;">Stochastic</td></tr><tr class="even"><td style="text-align: center;">Episodic</td><td style="text-align: center;">Sequential</td></tr><tr class="odd"><td style="text-align: center;">Static</td><td style="text-align: center;">Dynamic</td></tr><tr class="even"><td style="text-align: center;">Discrete</td><td style="text-align: center;">Continuous</td></tr><tr class="odd"><td style="text-align: center;">Single Agent</td><td style="text-align: center;">Multiple Agent</td></tr></tbody></table><h3 id="classifying-environments-12219">Classifying environments 1:22:19</h3><p>Fully observable (vs partially observable)</p><ul><li>sensors give complete state of the environment</li><li>agent needn’t keep track of the world state</li><li><em>effectively observable</em> means that sensors can detect all <em>relevant aspects</em></li><li>Most AI environments are only partially observable</li></ul><p>Deterministic (vs stochastic)</p><ul><li>next state completely determined by current state and agent action</li><li>in stochastic environments next state is uncertain (though a probabilistic model may be available)</li><li>if environment is deterministic except for actions of other agents, it is called <em>strategic</em></li></ul><p>Episodic (vs sequential)</p><ul><li>agent’s experiences divided into episodes: agent perceives then acts</li><li>quality of action depends only on the episode itself</li><li>subsequent episodes are independent of previous ones<ul><li>e.g., one game of chess in a tournament vs. each move in one game</li></ul></li><li>agents do not have to think ahead</li></ul><p>Dynamic (vs static)</p><ul><li>environment may change while agent is deliberating</li><li>semi-dynamic: agent’s <em>utility</em> scores changes with passage of time though the environment is static</li><li>in a static environment an agent does not need to look at the world while deciding on an action, nor does it need to worry about the passage of time</li></ul><p>Discrete (vs continuous)</p><ul><li>limited number of distinct, clearly defined percepts and actions<ul><li>playing chess is discrete: there is a limited number of moves</li><li>driving a taxi is continuous: speed and location vary infinitessimally</li></ul></li></ul><p>Multi-agent (vs single-agent)</p><ul><li>competitive: maximising agent A’s performance measure implies minimising agent B’s</li><li>cooperative: maximising performance measures of both agents A and B</li></ul><p>The real world is</p><ul><li>inaccessible,stochastic,sequential, dynamic, and continuous</li></ul><h3 id="exercise-13218">Exercise 1:32:18</h3><table><thead><tr class="header"><th style="text-align: center;">Task</th><th style="text-align: center;">Observable?</th><th>Multi-agent?</th><th style="text-align: center;">Deterministic?</th><th>Discrete?</th><th style="text-align: center;">Episodic?</th><th>Static?</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">Refinery controller</td><td style="text-align: center;"></td><td></td><td style="text-align: center;"></td><td></td><td style="text-align: center;"></td><td></td></tr><tr class="even"><td style="text-align: center;">Taxi driver</td><td style="text-align: center;"></td><td></td><td style="text-align: center;"></td><td></td><td style="text-align: center;"></td><td></td></tr><tr class="odd"><td style="text-align: center;">Poker player</td><td style="text-align: center;"></td><td></td><td style="text-align: center;"></td><td></td><td style="text-align: center;"></td><td></td></tr><tr class="even"><td style="text-align: center;">Chess player (for a timed game)</td><td style="text-align: center;"></td><td></td><td style="text-align: center;"></td><td></td><td style="text-align: center;"></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Techniques of Artificial Intelligence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Aligning sequences</title>
      <link href="2021/02/20/2021-02-20-Aligning-sequences/"/>
      <url>2021/02/20/2021-02-20-Aligning-sequences/</url>
      
        <content type="html"><![CDATA[<h1 id="aligning-sequences">Aligning sequences</h1><p><a href="https://vub-my.sharepoint.com/personal/wim_vranken_vub_be/_layouts/15/onedrive.aspx?id=%2Fpersonal%2Fwim%5Fvranken%5Fvub%5Fbe%2FDocuments%2FOpnamen%2FAlgorithms%20in%20bioinfo%5Fcomputational%20biology%2D20210218%5F100244%2DMeeting%20Recording%2Emp4&amp;parent=%2Fpersonal%2Fwim%5Fvranken%5Fvub%5Fbe%2FDocuments%2FOpnamen&amp;originalPath=aHR0cHM6Ly92dWItbXkuc2hhcmVwb2ludC5jb20vOnY6L2cvcGVyc29uYWwvd2ltX3ZyYW5rZW5fdnViX2JlL0Vkazl3OWRfbXR4UGljMlk1MkJMbnRNQjNZZzZabEdhWlNldnRaNjlTNjE2MEE_cnRpbWU9WDV1eVYwTFkyRWc">Video 7:07 ~ end</a></p><h2 id="why-alignment-2830">Why alignment? 28:30</h2><p><img src="/images/ADVMB/191435.png" /></p><h2 id="the-problem-3002">The problem 30:02</h2><p>Comparison may be difficult due to</p><p><img src="/images/ADVMB/1914350.png" /></p><p><strong>Look for the alignment that produces the <u>maximum similarity</u></strong></p><h2 id="some-definitions-3140">Some definitions 31:40</h2><p><strong>Identity</strong></p><p>The level of identity is the fraction of residues which are identical between two sequences</p><ul><li>The identity between two randomly generated sequences is never 0%</li></ul><p><strong>Similarity</strong></p><p>Two residues are similar when their substitution has no effect on the functionality of the protein. The level of similarity is the fraction of residues that are similar</p><p><img src="/images/ADVMB/1914351.png" /></p><p><strong>Homology</strong></p><p>Two sequences are homologous when the similarity between them is derived from a common ancestor</p><ul><li>Homology is a binary relationship</li></ul><h2 id="why-the-maximum-similarity-3444">Why the maximum similarity? 34:44</h2><p>If we have two genes or proteins that come from the same common ancestor, we want the <strong>amino acids, which are part of this common ancestor, to align properly</strong></p><figure><img src="/images/ADVMB/1914352.png" alt="" /><figcaption>The best way to find this mapping is to look for the maximum similarity between sequences</figcaption></figure><h2 id="attention-3819">Attention !!! 38:19</h2><p>Homology implies a common ancestor <strong>and at the same time it may mean that both sequences have a similar structure or function</strong></p><p>But this is not always the case:</p><p><em>Mutation may result in sequences with different functions or some protein sequences may be completely different, but still perform the same function or two sequences may be similar but have no common ancestor</em></p><p>One always has to be careful and look for additional information to make sure the claim sticks</p><figure><img src="/images/ADVMB/1914353.png" alt="" /><figcaption>Convergent evolution</figcaption></figure><p>Since the common ancestor is often not known, <strong>an alignment is just an hypothesis about a relationship between two sequences</strong></p><p><strong><u>A quantitative method is required that takes into account the changes accepted by evolution</u></strong></p><h2 id="a-quantitative-score-4612">A quantitative score 46:12</h2><p>The idea is that a quantitative method provides a higher score to the alignment of sequences that are indeed derived from a common ancestor than between sequences that are related by chance</p><p>The best score is for the exact alignment = <strong>Optimal alignment</strong></p><p>There is currently no quantitative method that uses a complete and exact model of evolution</p><p>The best score is therefore not necessarily the correct alignment (in terms of a common ancestor)</p><ul><li>These methods are used to look for similar (MAX) or different (MIN) sequences</li></ul><h2 id="example-4729">Example 47:29</h2><p><img src="/images/ADVMB/1914354.png" /></p><h2 id="basic-idea-4923">Basic idea 49:23</h2><p>There are two models that can explain the similarities and differences between two sequences</p><ul><li>a <strong>random model</strong></li><li>a <strong>non-random model</strong> (<strong>evolutionary</strong>)</li></ul><p>When the <strong>probability of a match</strong> between the sequences is determined, one can decide which of the two models is more likely</p><h3 id="random-model-5009">Random model 50:09</h3><p>In this model there are <strong>no constraints on the sequence composition</strong></p><p>Meaning that the choice of each residue is independent from the other residues in the sequence</p><ul><li>The probability depends on the <strong>frequency</strong> of every amino acid in the population (= all characters in the sequences)</li><li>When the frequency of the amino acids a is p<sub>a</sub>, the probability of having a at that position is also p<sub>a</sub></li></ul><p>When two residues a and b are aligned, the <strong>probability of the match is p<sub>a</sub> p<sub>b</sub></strong></p><h3 id="non-random-or-evolutionary-mode-5150">Non-random (or evolutionary) mode 51:50</h3><p>This model proposes that the sequences <strong>are related because of common descent</strong></p><ul><li>This implies that there are constraints on the composition of the sequence</li></ul><p>The probability of a match depends on the residue at the same position in the common ancestor</p><ul><li>This probability is q<sub>a,b</sub><ul><li>The actual value of q<sub>a,b</sub> depends on the evolutionary mechanism</li></ul></li></ul><p>When two residues a and b are aligned, the <strong>probability of a match</strong> is <strong>q<sub>a,b</sub></strong> since the residues are correlated</p><h2 id="basic-idea-5312">Basic idea 53:12</h2><p>The <strong>odds ratio</strong> q<sub>a,b</sub>/p<sub>a</sub>p<sub>b</sub> shows which model is more likely</p><ul><li>When q<sub>a,b</sub>/p<sub>a</sub>p<sub>b</sub> &gt;1 the evolutionary model explains better the alignment</li></ul><p>The model has to explain the complete alignment</p><ul><li>All odds ratio’s need to be combined</li></ul><p><img src="/images/ADVMB/1914355.png" /></p><p>It is often easier to use sums instead of products</p><p><img src="/images/ADVMB/1914356.png" /></p><p>The <strong>log-odds ratio</strong> is the value that is written in a substitution matrix</p><p><img src="/images/ADVMB/1914357.png" /></p><h2 id="substitution-matrices-10313">Substitution matrices 1:03:13</h2><p>Two methods have been used to determine the values of all S<sub>a,b</sub></p><ul><li>All PAM matrices were derived from one manually constructed matrix (PAM1)<ul><li>71 groups of manually aligned protein sequences (no gaps) were used and in each group there was an identity of at least 85% between each sequence</li></ul></li></ul><p><img src="/images/ADVMB/1914358.png" /></p><ul><li>Every BLOSUM matrix was constructed from a clustered set of highly conserved blocks of amino acids<ul><li>The clustering was also based on identity, meaning that each sequence in each cluster has at least x% identity</li><li>In case of BLOSUM62, this is 62% identity</li></ul></li></ul><p><img src="/images/ADVMB/1914359.png" /></p><h3 id="pam-matrices-10523">PAM matrices 1:05:23</h3><p><img src="/images/ADVMB/1924350.png" /></p><p>The idea was to create a <strong>similarity distance measure</strong></p><p><strong><u>Which requires the definition of a unit of distance</u></strong></p><ul><li><p>PAM1 = 1 mutation accepted for 100 amino acids</p></li><li><p>PAM120 = 120 mutations accepted for 100 amino acids</p><p>(multiple mutations at same position possible!)</p></li></ul><h4 id="substitution-matrices">Substitution matrices</h4><p>The PAM matrices, build by Margaret Dayhoff, provide a similarity score between amino acids</p><p><img src="/images/ADVMB/1924351.png" /></p><p>When two sequence have an identity of 40%, which matrix should we use ?</p><p><img src="/images/ADVMB/1924352.png" /></p><p>BLOSUM matrices were created by using blocks of conserved amino acids in clusters of sequences</p><figure><img src="/images/ADVMB/1924353.png" alt="" /><figcaption>The 62 is the percentage of identity between the sequences used that were used to determine the substitutions values</figcaption></figure><h3 id="analysis-of-blosum62-11222">Analysis of BLOSUM62 1:12:22</h3><figure><img src="/images/ADVMB/1924354.png" alt="" /><figcaption>The substitutions within families of amino acids are often favourable</figcaption></figure><p><img src="/images/ADVMB/1924355.png" /></p><p><img src="/images/ADVMB/1924356.png" /></p><p><img src="/images/ADVMB/1924357.png" /></p><h4 id="substitution-matrices-1">Substitution matrices</h4><p>Which matrix should be used ????</p><p><img src="/images/ADVMB/1924358.png" /></p><p>To evaluate similar sequences one needs matrices that give high values voor identical matches : e.g. BLOSUM 80 or PAM50</p><p>If one is not sure it’s good to start with BLOSUM62 and PAM120</p><p><strong>The matrix choice is biased by the percentage of conservation the biologist expects to find between the sequences</strong></p><h3 id="which-pam-or-blosum-11728">Which PAM or BLOSUM? 1:17:28</h3><p>Using relative entropy (H) one can verify whether the matrix is still capable of making the distinction between the evolutionary and the random model</p><p><img src="/images/ADVMB/1924359.png" /></p><h2 id="the-gaps-11804">The gaps 1:18:04</h2><p>Homologous sequences often have a different length</p><p><img src="/images/ADVMB/1984350.png" /></p><p>If one wants to align these to sequences in an optimal manner, gaps need to be introduced</p><p>One often makes the difference between the start of a gap (penalty of -10 and -15) or the extension of existing gaps (penalty of -0.5 or -2)</p><h2 id="different-kinds-of-alignment-11925">Different kinds of alignment 1:19:25</h2><p>There are two big classes of alignment methods</p><ul><li><strong>Global alignment</strong> : The alignment between the complete sequences<ul><li>Interesting to compare two related sequences</li></ul></li><li><strong>Local alignment</strong> : aligning of conserved regions in two different proteins<ul><li>To detect for instance identical domains or motives</li></ul></li></ul><h2 id="global-alignment-12021">Global alignment 1:20:21</h2><p>Dynamic programming to align two sequences by Saul Needleman and Christian Wunsch in 1970</p><p><img src="/images/ADVMB/1984351.png" /></p><p><img src="/images/ADVMB/1984352.png" /></p><p>The semiglobal alignment</p><p>Make the penalties on <em>S(i,0)</em> en <em>S(0,j)</em> equal to <em>0</em>. in this way we remove the obligation that the sequences have to align at the start and the end of the sequences</p><figure><img src="/images/ADVMB/1984353.png" alt="" /><figcaption>The backtracking starts at the position in the last row that has the highest score</figcaption></figure><p>All the previous methods used a linear penalty for the gaps in the alignment</p><p><em>g(n<sub>gap</sub>) = -n<sub>gap</sub>E</em> linear gap penalty</p><p>As mentioned earlier, we an differentiate between starting a gap and extending one</p><p><em>g(n<sub>gap</sub>) = -I-(n<sub>gap</sub>-1) E</em> Affine gap penalty</p><p><strong>How does the DP algorithm change?</strong></p><p>Do we open or extend a gap?</p><p><img src="/images/ADVMB/1984354.png" /></p><p>The algorithm can be adapted so that we obtain a solution in O(mn)</p><p><img src="/images/ADVMB/1984355.png" /></p><h2 id="an-example-14225">An example 1:42:25</h2><p><img src="/images/ADVMB/1984356.png" /></p><p><img src="/images/ADVMB/1984358.png" /></p><p><img src="/images/ADVMB/1984359.png" /></p><h2 id="local-alignment-14611">Local alignment 1:46:11</h2><p><img src="/images/ADVMB/1984550.png" /></p><p><img src="/images/ADVMB/1984551.png" /></p><p><img src="/images/ADVMB/1984552.png" /></p><p>Sub-optimal alignments provide information concerning other repetitions common between the two sequences(for instance in case of multiple similar domains)</p><p><img src="/images/ADVMB/1984553.png" /></p><figure><img src="/images/ADVMB/1984554.png" alt="" /><figcaption>Example using LALIGN</figcaption></figure>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computational Biology and Bioinformatics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Proof by Resolution</title>
      <link href="2021/02/20/2021-02-20-Proof-by-Resolution/"/>
      <url>2021/02/20/2021-02-20-Proof-by-Resolution/</url>
      
        <content type="html"><![CDATA[<h1 id="proof-by-resolution">Proof by Resolution</h1><h2 id="objectives">Objectives</h2><p>Learn about general-purpose theorem proving in predicate calculus</p><h2 id="the-problem">The Problem</h2><p>Given</p><ul><li>a knowledge base, KB (a set of sentences, S, and an interpretation, I)</li></ul><p>Prove</p><ul><li>a sentence, α (under the same interpretation, I)</li></ul><p>Formally</p><ul><li>Show that KB ⊧ α ๏ KB entails α ๏ α follows from KB</li></ul><h2 id="the-toolbox">The Toolbox</h2><p>Modus ponens</p><ul><li>Given { p → q, p } ⊂ KB, is q true?</li><li>Yes: { p → q, p } ⊧ { q }</li></ul><p>Modus Tollens</p><ul><li>Given { p → q, ¬q } ⊂ KB, is p true?</li><li>No: { p → q, ¬q } ⊧ { ¬p }</li></ul><p>We can form arbitrarily long “chains” of inference to prove a sentence</p><p>We can reason</p><ul><li>forwards from what we know to what we want to prove</li><li>backwards from what we want to prove to what we know<ul><li>backwards is generally more efficient: no search branches leading off-topic</li></ul></li></ul><h2 id="theorem-proving">Theorem Proving</h2><p>A theorem proving process involves choosing and applying such rules until the desired sentence is shown to be entailed</p><p>It’s called a proof because the rules used are known, a priori, to be sound (i.e., correct)</p><p>However, choice of rule is hard, because you can’t know that a particular rule chosen from a range will turn out to be the right one, in a long proof</p><ul><li>e.g., Modus Ponens is incomplete</li><li>therefore, each time we use it, we also have to consider other possibilities</li><li>therefore, each time we use it, we create a set of alternative choices</li></ul><h3 id="modus-ponens-is-incomplete">Modus Ponens is incomplete</h3><p>Consider these rules:</p><ul><li>If it is raining (R), I will carry an umbrella (U)</li><li>If it is not raining (¬R), I will carry an umbrella (U)</li></ul><p>It is easy to conclude (as a human) that I always carry an umbrella</p><ul><li>{ R → U, ¬R → U } ⊧ { U }</li><li>but this isn’t provable using modus ponens alone<ul><li>we’d need the law of excluded middle: R ∨ ¬R</li></ul></li></ul><p>However, there is a more general rule, that is complete</p><h2 id="resolution">Resolution</h2><p>Unit resolution</p><ul><li>{ P ∨ Q, ¬Q } ⊧ { P }</li></ul><p><img src="/images/AI/182827.png" /></p><p>Generalised resolution</p><ul><li>{ P ∨ Q, R ∨ ¬Q } ⊧ { P ∨ R }</li></ul><p><img src="/images/AI/1828270.png" /></p><p>Example: Umbrella again</p><p><img src="/images/AI/1828271.png" /></p><h3 id="resolution-refutation">Resolution refutation</h3><p>This simple rule can be used as follows</p><ul><li>add the negation of the sentence, S, to be proven to the KB</li><li>see if this leads to a contradiction</li></ul><p>This idea applies the law of the excluded middle</p><ul><li>if ¬S is inconsistent with KB, then KB ⊧ S</li></ul><p>This is called <em>resolution refutation</em></p><ul><li>this is the basis of the “Logic Programming” language, Prolog</li></ul><p>Notation</p><ul><li>note that the premises are brought in when needed, not all at the top</li></ul><p><img src="/images/AI/1828272.png" /></p><h3 id="clausal-form">Clausal Form</h3><p>Resolution is a single, simple, sound, complete rule</p><ul><li>But we had to do some manipulation first, to get the sentences into a form on which we could use it</li></ul><p>This is <em>clausal normal form</em> (<em>CNF</em>)</p><ul><li>Note that CNF also stands for Conjunctive Normal Form</li></ul><p>Putting FOPC sentences into clausal form is a mechanical procedure that can be done without search</p><h4 id="clausal-normal-form-in-fopc">Clausal Normal Form in FOPC</h4><ol type="1"><li><p>Rewrite →: a → b ⇒ ¬a ∨ b</p></li><li><p>Minimise the scope of negations using logical definitions given before</p><ul><li>¬∃x.A(x) ⇒ ∀x. ¬A(x)</li><li>¬∀x.A(x) ⇒ ∃x.¬A(x)</li><li>¬(A ∨ B) ⇒ ¬A ∧ ¬B</li><li>¬(A ∧ B) ⇒ ¬A ∨ ¬B</li><li>etc.</li></ul><p>Note that in this case, these definitions are <em>unidirectional</em>, so they are <em>confluent</em></p><ul><li>no need for searching through alternatives</li></ul></li><li><p>Rewrite remaining double negations: ¬¬A ⇒ A</p></li><li><p>Standardise variables apart</p><ul><li>rename all quantified variables so that each quantifier is associated with a different name, regardless of its scope</li></ul></li><li><p><em>Skolemise</em> all existential quantifiers</p><p>A Skolem constant is a made-up name for an object that must exist (even though we don’t know what it is)</p><ul><li>∃x.P(x) ⇒ P(A) where A is an arbitrary object in the allowable substitutions of x</li><li>Use a different arbitrary object for each quantifier</li></ul></li><li><p>Drop all universal quantifiers</p><ul><li>At this point, all variables are universally quantified, because we Skolemised the existentials, so we no longer need to say so explicitly</li></ul></li><li><p>Convert the sentence into <em>conjunctive normal form</em></p><ul><li>a sentence in CNF is a conjunction of disjunctions of atomic sentences<ul><li>recall that the resolution rule works on disjunctions</li></ul></li><li>do this by rewriting under logical rules<ul><li>de Morgan’s laws</li><li>distributivity of ∧ and ∨</li></ul></li></ul></li><li><p>Split the top-level conjunction up, to make a set of disjunctions</p></li><li><p>Standardise the variables apart again, w.r.t. clauses</p><ul><li>so that x in a given clause is not the same as x in another clause</li></ul></li></ol><p>Use the resulting set of clauses as KB in a resolution proof</p><h3 id="first-order-term-unification">First Order Term Unification</h3><p>As a result of Skolemizing and removing universal quantifiers, we can introduce a new procedure for assigning values to variables</p><p>This is related to ∀ instantiation in the standard FOPC</p><ul><li>effectively, we use the relevant Skolem constants to instantiate the variables</li></ul><p>There is a deterministic algorithm for unification</p><p>The idea is to use literals of a given predicate which contain information about the values of variables (i.e., Skolem constants or functions) to deduce the values of variables in other literals of the same predicate</p><ul><li>e.g. Father( x, y ) and Father( John, Jim ) are unified to Father( John, Jim )</li><li>with a unifier (or substitution set) of { John/x, Jim/y }<ul><li>notation: a/x means “a replaces x”</li></ul></li></ul><p>To unify two terms (or literals):</p><ol type="1"><li>if either is a variable, let it be identical to the other, and add the resulting pair to the unifier; otherwise...</li><li>compare their functors; if they do not match, then fail; otherwise...</li><li>for each pair of respective arguments, unify the two arguments using this procedure.</li></ol><h4 id="unification-examples">Unification examples</h4><ul><li>P( x, y ) unified with P( A, B ) gives F( A, B ) unifier { A/x, B/y }</li><li>P( x, y ) unified with Q( A, B ) gives no unifier ( P ≠ Q )</li><li>P( F(x) ) unified with P( F( A ) ) gives P( F( A )) unifier { A/x }</li><li>P( F(x), x, u, u ) unified with P( F(y), z, z, A ) gives P( F( A ), A, A, A ) unifier { A/x, x/y, x/z, x/u }<ul><li>note that we don’t need to write down all the different permutations<ul><li>this is enough to say that they’re all the same</li></ul></li></ul></li></ul><h3 id="resolution-example">Resolution example</h3><p>Some rules</p><ul><li>All people who are graduating are happy. All happy people smile. Jane is graduating</li></ul><p>and a question</p><ul><li>Is Jane smiling?</li></ul><p>First convert to predicate logic</p><ul><li>Premise<ul><li>∀x.(Graduating(x) → Happy(x)) ∧ ∀x.(Happy(x) → Smiling(x)) ∧ Graduating( Jane )</li></ul></li><li>Goal<ul><li>Smiling( Jane )</li></ul></li></ul><p>Convert to CNF</p><ul><li>Premise<ul><li>∀x.Graduating(x) → Happy(x) ∧ ∀x.Happy(x) → Smiling(x) ∧ Graduating( Jane )</li></ul></li></ul><ol type="1"><li>Rewrite →<ul><li>∀x.(<strong>¬Graduating(x) ∨ Happy(x)</strong>) ∧ ∀x.(<strong>¬Happy(x) ∨ Smiling(x)</strong>) ∧ Graduating( Jane )</li></ul></li><li>Reduce scope of negations: all minimal, so nothing to do</li><li>Rewrite double negations: no double negations so nothing to do</li><li>Standardise variables apart<ul><li>∀x.(¬Graduating(x) ∨ Happy(x)) ∧ ∀<strong>y</strong>.(¬Happy(<strong>y</strong>) ∨ Smiling(<strong>y</strong>)) ∧ Graduating( Jane )</li></ul></li><li>Skolemise existentials<ul><li>no existentials, so nothing to do</li></ul></li><li>Drop all universal quantifiers<ul><li>▮▮▮▮ (¬Graduating(x) ∨ Happy(x)) ∧ (¬Happy(y) ∨ Smiling(y)) ∧ Graduating( Jane )</li></ul></li><li>Convert to CNF<ul><li>already in CNF</li></ul></li><li>Separate into disjunctive clauses<ul><li>¬Graduating(x) ∨ Happy(x)</li><li>¬Happy(y) ∨ Smiling(y)</li><li>Graduating( Jane )</li></ul></li><li>Standardise variables apart between clauses<ul><li>no change: they’re already named apart</li></ul></li></ol><h4 id="resolution-example-with-unification">Resolution example with unification</h4><p>Now, the only rules we need are</p><ul><li>unification</li><li>resolution</li></ul><p>Note that, in this proof, only the literals used are shown</p><ul><li>but they’re all there, all the time</li></ul><p><img src="/images/AI/1828273.png" /></p><h4 id="example-with-existential-quantification">Example with existential quantification</h4><p>Some rules</p><ul><li>All people who are graduating are happy. All happy people smile. Someone is graduating.</li></ul><p>and a question</p><ul><li>Is anyone smiling?</li></ul><p>First convert to predicate logic</p><ul><li>Premise<ul><li>∀x.(Graduating(x) → Happy(x)) ∧ ∀x.(Happy(x) → Smiling(x)) ∧ ∃x.Graduating(x)</li></ul></li><li>Goal<ul><li>∃x.Smiling( x )</li></ul></li></ul><p>Conversion to CNF</p><p>This time I’ve added the negated goal to the premises, instead of later</p><ul><li>∀x.(Graduating(x) <strong>→</strong> Happy(x)) ∧ ∀x.(Happy(x) <strong>→</strong> Smiling(x)) ∧ ∃x.Graduating(x) ∧ ¬∃x.Smiling(x)</li><li>∀x.(<strong>¬</strong>Graduating(x) ∨ Happy(x)) ∧ ∀x.(<strong>¬</strong>Happy(x) ∨ Smiling(x)) ∧ ∃x.Graduating(x) ∧ <strong>¬</strong>∃x.Smiling(x)</li><li><strong>∀x</strong>.(¬Graduating(<strong>x</strong>) ∨ Happy(<strong>x</strong>)) ∧ ∀<strong>x</strong>.(¬Happy(<strong>x</strong>) ∨ Smiling(<strong>x</strong>)) ∧ <strong>∃x</strong>.Graduating(<strong>x</strong>) ∧ ∀<strong>x</strong>.¬Smiling(<strong>x</strong>)</li><li>∀x.(¬Graduating(x) ∨ Happy(x)) ∧ ∀y.(¬Happy(y) ∨ Smiling(y)) ∧ <strong>∃z</strong>.Graduating(<strong>z</strong>) ∧ ∀u.¬Smiling(u)</li><li><strong>∀x</strong>.(¬Graduating(x) ∨ Happy(x)) ∧ <strong>∀y</strong>.(¬Happy(y) ∨ Smiling(y)) ∧ Graduating( Someone ) ∧ <strong>∀u</strong>.¬Smiling(u)</li><li>(¬Graduating(x) ∨ Happy(x)) ∧ (¬Happy(y) ∨ Smiling(y)) ∧ Graduating( Someone ) ∧ ¬Smiling(u)</li><li>{ ¬Graduating(x) ∨ Happy(x), ¬Happy(y) ∨ Smiling(y), Graduating( Someone ), ¬Smiling(u) }</li></ul><p>Note that the proof is exactly the same as with the constant “Jane”</p><ul><li>the only difference is that the variable u gets passed around instead</li></ul><p><img src="/images/AI/1828274.png" /></p><h4 id="example-with-universal-quantification">Example with universal quantification</h4><p>Some rules</p><ul><li>All people who are graduating are happy. All happy people smile. Everyone is graduating.</li></ul><p>and a question</p><ul><li>Is everyone smiling？</li></ul><p>First convert to predicate logic</p><ul><li>Premise<ul><li>∀x.(Graduating(x) → Happy(x)) ∧ ∀x.(Happy(x) → Smiling(x)) ∧ ∀x.Graduating(x)</li></ul></li><li>Goal<ul><li>∀x.Smiling(x)</li></ul></li></ul><p>Conversion to CNF</p><ul><li>∀x.(Graduating(x) <strong>→</strong> Happy(x)) ∧ ∀x.(Happy(x) <strong>→</strong> Smiling(x)) ∧ ∀x.Graduating(x) ∧ ¬∀x.Smiling(x)</li><li>∀x.(<strong>¬</strong>Graduating(x) ∨ Happy(x)) ∧ ∀x.(<strong>¬</strong>Happy(x) ∨ Smiling(x)) ∧ ∀x.Graduating(x) ∧ <strong>¬</strong>∀x.Smiling(x)</li><li><strong>∀x</strong>.(¬Graduating(<strong>x</strong>) ∨ Happy(<strong>x</strong>)) ∧ ∀<strong>x</strong>.(¬Happy(<strong>x</strong>) ∨ Smiling(<strong>x</strong>)) ∧ <strong>∀x</strong>.Graduating(<strong>x</strong>) ∧ ∃<strong>x</strong>.¬Smiling(<strong>x</strong>)</li><li>∀x.(¬Graduating(x) ∨ Happy(x)) ∧ ∀y.(¬Happy(y) ∨ Smiling(y)) ∧ ∀z.Graduating(z) ∧ <strong>∃u</strong>.¬Smiling(<strong>u</strong>)</li><li><strong>∀x</strong>.(¬Graduating(x) ∨ Happy(x)) ∧ <strong>∀y</strong>.(¬Happy(y) ∨ Smiling(y)) ∧ <strong>∀z</strong>. Graduating(<strong>z</strong>) ∧ ¬Smiling( Someone )</li><li>(¬Graduating(x) ∨ Happy(x)) <strong>∧</strong> (¬Happy(y) ∨ Smiling(y)) <strong>∧</strong> Graduating(z) ∧ ¬Smiling( Someone )</li><li>{ ¬Graduating(x) ∨ Happy(x), ¬Happy(y) ∨ Smiling(y), Graduating(z), ¬Smiling( Someone ) }</li></ul><p>Note that the proof is exactly the same as with the constant Jane</p><ul><li>the difference is that the Skolem constant Someone gets passed around instead</li></ul><p><img src="/images/AI/1828275.png" /></p><h2 id="alternative-proof">Alternative proof</h2><p>Here, we use general resolution first – but the effect is the same</p><p><img src="/images/AI/1828276.png" /></p><h2 id="a-slightly-more-realistic-example">A (slightly) more realistic example</h2><p>In this example, not all of the quantifiers match neatly up</p><p>Some rules and a question</p><ul><li>All people who are graduating are happy. All happy people smile. <strong>Someone</strong> is graduating.</li><li>Is <strong>everyone</strong> smiling?</li></ul><p>First convert to predicate logic</p><ul><li>∀x.(Graduating(x) → Happy(x)) ∧ ∀x.(Happy(x) → Smiling(x)) ∧ ∃x.Graduating(x)</li><li>∀x.Smiling(x)</li></ul><p>Resolution-ready form</p><ul><li>¬Graduating(x) ∨ Happy(x), ¬Happy(y) ∨ Smiling(y) ∧ <strong><u>Graduating( Z ) ∧ ¬Smiling( U )</u></strong> （Skolem constants）</li></ul><p>We can’t infer that everyone is smiling from the knowledge that one person is graduating</p><p><img src="/images/AI/1828277.png" /></p><h2 id="the-other-way-round">The other way round</h2><p>In this example, not all of the quantifiers match neatly up</p><p>Some rules and a question</p><ul><li>All people who are graduating are happy. All happy people smile. <strong>Everyone</strong> is graduating.</li><li>Is <strong>anyone</strong> smiling?</li></ul><p>First convert to predicate logic</p><ul><li>∀x.(Graduating(x) → Happy(x)) ∧ ∀x.(Happy(x) → Smiling(x)) ∧ ∀x.Graduating(x)</li><li>∃x.Smiling( x )</li></ul><p>Resolution-ready form</p><ul><li>¬Graduating(x) ∨ Happy(x), ¬Happy(y) ∨ Smiling(y) ∧ Graduating(z) ∧ ¬Smiling(u)</li></ul><p>We can infer that one is person is smiling from the knowledge that everyone is graduating</p><p><img src="/images/AI/1828278.png" /></p><h2 id="something-to-try">Something to try</h2><p>Express the following sentences in FOPC</p><ul><li>Every man who owns a donkey beats it.</li><li>John looked at Jane in the park with the telescope.</li><li>All lecturers except Geraint are boring.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Techniques of Artificial Intelligence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Real-time Operating Systems</title>
      <link href="2021/02/20/2021-02-20-Real-time-Operating-Systems---OS-basis/"/>
      <url>2021/02/20/2021-02-20-Real-time-Operating-Systems---OS-basis/</url>
      
        <content type="html"><![CDATA[<h1 id="real-time-operating-systems">Real-time Operating Systems</h1><p><a href="https://vub-my.sharepoint.com/personal/bruno_da_silva_vub_be/_layouts/15/onedrive.aspx?originalPath=aHR0cHM6Ly92dWItbXkuc2hhcmVwb2ludC5jb20vOmY6L2cvcGVyc29uYWwvYnJ1bm9fZGFfc2lsdmFfdnViX2JlL0V1ZWdTdWlYa3JCSWhnNXhVMFgzZ2s4QjhSNlFQYkRFbVZLMFNCUmlIQXVTWVE%5FcnRpbWU9aFliRXdZM1MyRWc&amp;id=%2Fpersonal%2Fbruno%5Fda%5Fsilva%5Fvub%5Fbe%2FDocuments%2FCOURSES%2FOSSEC%2020%20%2D%2021%20Semester%202%2FRecordings%2F%5BOSSEC%5D%20%2D%20operating%20systems%20and%20security%20%2D%20lecture%202%2Emp4&amp;parent=%2Fpersonal%2Fbruno%5Fda%5Fsilva%5Fvub%5Fbe%2FDocuments%2FCOURSES%2FOSSEC%2020%20%2D%2021%20Semester%202%2FRecordings">Video 2:07:06 ~ 2:30:40</a></p><h2 id="embedded-and-real-time-operating-systems-concepts">Embedded and Real-Time operating systems Concepts</h2><ol type="1"><li>Embedded Systems</li><li>Real-Time Systems</li><li>Real-Time Operating Systems</li></ol><h2 id="what-is-an-embedded-system-20843">What is an embedded system? 2:08:43</h2><p>An embedded system can be defined as:</p><p><strong><em>“A system whose principal function is not computational, but which is controlled by a computer embedded within it.”</em></strong></p><ul><li>Computing systems embedded within electronic devices</li><li>Billions of units produced yearly, versus millions of desktop units</li><li>Perhaps 50 per household and per automobile</li><li>Largely used in healthcare devices</li></ul><p><img src="/images/OP/103832.png" /></p><figure><img src="/images/OP/1038320.png" alt="" /><figcaption>Portables and wearables</figcaption></figure><figure><img src="/images/OP/1038321.png" alt="" /><figcaption>Electronic pregnancy test</figcaption></figure><h3 id="application-example-coffee-machine-20930">Application example: coffee machine 2:09:30</h3><p>PSoC Enables:</p><ul><li>Liquid-tolerant capacitive touch interface for buttons and sliders</li><li>Proximity detection</li><li>LED control</li><li>Door lock control</li></ul><p><img src="/images/OP/1038322.png" /></p><h3 id="some-common-characteristics-of-embedded-systems">Some common characteristics of embedded systems</h3><p>Single-functioned</p><ul><li>Executes a single program, repeatedly</li></ul><p>Tightly-constrained</p><ul><li>Low cost, low power, small, fast, etc.</li></ul><p>Reactive and real-time</p><ul><li>Continually reacts to changes in the system’s environment</li><li>Must compute certain results in real-time without delay</li></ul><h3 id="software-vs.-hardware-trade-offs-20959">Software VS. hardware trade-offs 2:09:59</h3><p><img src="/images/OP/1038323.png" /></p><h3 id="key-points---comparation-21046">Key points - Comparation 2:10:46</h3><p><img src="/images/OP/1038324.png" /></p><h3 id="embedded-design-perspective-21111">Embedded design perspective 2:11:11</h3><p>Program and data memory space</p><ul><li>Embedded processors often very limited<ul><li>e.g., 64 Kbytes program, 256 bytes of RAM (expandable)</li></ul></li><li>Registers: How many are there?<ul><li>Only a direct concern for assembly-level programmers</li></ul></li><li>I/O, Interrupts<ul><li>How communicate with external signals?</li></ul></li></ul><h3 id="embedded-operating-systems-21136">Embedded operating systems 2:11:36</h3><p>On embedded systems, an O.S. is an <strong>optional</strong> software layer providing low-level services to a program (application).</p><ul><li>Platform-specific hardware abstraction layers</li><li>File management, disk access</li><li>Keyboard/display interfacing</li><li>Integrated power-management systems</li><li>Device drivers for common peripherals</li><li><strong>Scheduling multiple programs for execution</strong><ul><li>Or even just multiple threads from one program</li></ul></li><li>Program makes system calls to the OS</li></ul><p><img src="/images/OP/1038325.png" /></p><h4 id="types-skipped-in-video">Types (Skipped in video)</h4><p>The main types of embedded OS are as follows:</p><ul><li><strong>Single System Control Loop</strong>: Such a operating system is designed to run the only single task.</li><li><strong>Multi-Tasking Operating System</strong>: As the name suggests that this operating system can perform multiple tasks.</li><li><strong>Rate Monotonic Operating System</strong>: It is a type of operating system that ensures that task runs in a system can run for a specific interval of time and for a specific period of time.</li><li><strong>Preemptive Operating System</strong>: A preemptive operating system is a type of multitasking operating system that interprets the preemptive predominance for tasks. A higher priority is task is always defined and run before a lower priority task.</li><li><strong>Real Time Operating System</strong>: A real-time operating system is the one which serves real time applications.</li></ul><h4 id="categories-of-embedded-devices-21301">Categories of embedded devices 2:13:01</h4><figure><img src="/images/OP/1038326.png" alt="" /><figcaption>Three classes</figcaption></figure><p><strong>Class 0</strong>: These devices are the most constrained. They are typically sensor nodes(or motes) in a sensor network.</p><p><strong>Class 1</strong>: These devices are able to talk to each other but via constrained protocols.</p><p><strong>Class 2</strong>: These devices are the less constrained and can use the same stacks of protocols used in personal computers and servers.</p><figure><img src="/images/OP/1038327.png" alt="" /><figcaption>Summary</figcaption></figure><h4 id="popular-21522">Popular 2:15:22</h4><p><strong>Low-power IoT systems</strong>: open source real-time operating system designed for lowpower</p><ul><li><strong>Contiki OS</strong><ul><li>Focused on providing a simple platform to develop IoT applications</li><li>Oriented to 6LoWPAN and 802.15.4 wireless technologies.</li></ul></li><li><strong>TinyOS</strong><ul><li>component-based OS written in NesC</li><li>used for networked wireless sensors</li><li>provides interrupt management and FIFO scheduling in a few hundred bytes of code</li></ul></li><li><strong>Riot OS, Android Things, Windows IoT,…</strong></li></ul><p><strong>Real-time Operating Systems</strong>: provide short reaction times for real-time tasks</p><ul><li><strong>FreeRTOS</strong><ul><li>FreeRTOS provides methods for multiple threads or tasks, mutexes, semaphores and software timers.</li><li>Low-power management is limited to sleep mode, and no deep-sleep mechanism is implemented by default.</li></ul></li><li><strong>ChibiOS/RT</strong><ul><li>Designed for context-switch performance</li><li>The concept behind the scheduler is a fixed priority preemption, with priority inheritance mechanisms for priority inversion avoidance.</li></ul></li></ul><p>And many more...</p><figure><img src="/images/OP/1038328.png" alt="" /><figcaption>RTOS or not</figcaption></figure><h2 id="what-is-a-real-time-system-21654">What is a Real-Time System? 2:16:54</h2><p><strong><em>“Real-time programs or systems must guarantee response with a specified time constraint (aka deadlines) imposed by environment”</em></strong></p><p>A system is said to be <strong>Real Time</strong> if it is required to complete it’s work &amp; deliver it’s services <strong>on time</strong>.</p><p>Result in severe consequences if logical and timing correctness are not met</p><p>Example – Flight Control System</p><ul><li>All tasks in that system must execute on time.</li></ul><p>Non Example – PC system</p><h3 id="embedded-vs.-real-time-systems-21744">Embedded VS. Real-Time Systems 2:17:44</h3><p><strong>Embedded system</strong>: is a computer system that performs a limited set of specific functions. It often interacts with its environment.</p><p><strong>RTS</strong>: Correctness of the system depends not only on the logical results, but also on the time in which the results are produced.</p><p><img src="/images/OP/1038329.png" /></p><h3 id="examples-21823">Examples 2:18:23</h3><p>Real Time Embedded:</p><ul><li>Nuclear reactor control</li><li>Flight control</li><li>Basically any safety critical system</li><li>GPS</li><li>Defibrillator</li></ul><p>Real Time, but not Embedded:</p><ul><li>Stock trading system</li><li>Skype</li><li>Pandora</li><li>Radar control systems</li></ul><p>Embedded, but not Real Time:</p><ul><li>Home temperature control</li><li>Sprinkler system</li><li>Washing machine, refrigerator, etc.</li><li>Blood pressure meter</li></ul><h3 id="control-systems">Control systems</h3><h4 id="example-1-21932">Example 1 2:19:32</h4><p>A simple one-sensor, one-actuator control system</p><p><img src="/images/OP/1038220.png" /></p><p><strong>Pseudo-code for this system</strong>:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set timer to interrupt periodically with period T;</span><br><span class="line">at each timer interrupt do</span><br><span class="line">    do analog-to-digital conversion to get y;</span><br><span class="line">    compute control output u;</span><br><span class="line">    output u and do digital-to-analog conversion;</span><br><span class="line">end do</span><br></pre></td></tr></table></figure><p>T is called the <strong><u>sampling period</u></strong>. T is a key design choice.</p><p>Typical range for T: seconds to milliseconds.</p><h4 id="example-2-22121">Example 2 2:21:21</h4><p><strong>Multimedia</strong>:</p><ul><li>Want to process audio and video frames at steady rates.<ul><li>TV video rate is 30 frames/sec. HDTV is 60 frames/sec.</li><li>Telephone audio is 16 Kbits/sec. CD audio is 128 Kbits/sec.</li></ul></li><li>Other requirements: Lip synchronization, low jitter, low end-to-end response times (if interactive).</li><li>General examples:<ul><li>Video capture.</li><li>Digital filtering.</li><li>Video and voice compression/decompression.</li><li>Radar signal processing.</li></ul></li><li>Response times range from a few milliseconds to a few seconds.</li><li>Typically simpler than control systems</li></ul><h4 id="example-3-22222">Example 3 2:22:22</h4><p><strong>Real-time databases</strong>:</p><ul><li>Examples: stock market, airline reservations, etc.</li><li>Transactions must complete by deadlines.</li><li>Main dilemma: Transaction scheduling algorithms and real-time scheduling algorithms often have conflicting goals.</li><li>Data is subject temporal consistency requirements.</li></ul><h3 id="the-window-of-scarcity-22318">The "Window of scarcity" 2:23:18</h3><p>Resources may be categorized as:</p><ul><li><strong>Abundant</strong>: Virtually any system design methodology can be used to realize the timing requirements of the application.</li><li><strong>Insufficient</strong>: The application is ahead of the technology curve; no design methodology can be used to realize the timing requirements of the application.</li><li><strong>Sufficient but scarce</strong>: It is possible to realize the timing requirements of the application, but careful resource allocation is required.</li></ul><figure><img src="/images/OP/1038221.png" alt="" /><figcaption>Example: Interactive/multimedia applications</figcaption></figure><h3 id="recipe-for-real-time-22438">Recipe for Real-Time 2:24:38</h3><p>Main ingredients:</p><ul><li>Multitasking</li><li>Priority</li><li>Preemption</li></ul><p><img src="/images/OP/1038222.png" /></p><p>Task Response Latency (TRL):</p><ul><li>Time elapsed between interrupt and task runs</li></ul><p><img src="/images/OP/1038223.png" /></p><p>Jitter</p><ul><li>Δ = (max - min)<sub>samples</sub>TRL</li></ul><p><img src="/images/OP/1038224.png" /></p><h3 id="characteristics-22558">Characteristics 2:25:58</h3><ul><li>Systems composed of 2 or more cooperating, concurrent processes with stringent execution time constraints</li><li>Communication and synchronization between processes for these systems is critical</li><li>Expected deterministic response</li><li>Deterministic ≠ necessarily fast</li><li>Concurrency</li><li>Error tolerance</li><li>A correct, but late, response is an error. Consequences?<ul><li>It depends on the type of real-time system</li></ul></li></ul><h3 id="real-time-system">Real-Time System</h3><h4 id="types">Types</h4><h5 id="soft-real-time-systems-22740">Soft real-time systems 2:27:40</h5><ul><li>Tasks are performed as fast as possible</li><li>Late completion of jobs (with some acceptably low probability) is undesirable but not fatal.</li><li>System performance degrades as more &amp; more jobs miss deadlines</li><li>Also known as “best effort” systems</li><li>Example:<ul><li>web sites and services</li><li>computer games</li></ul></li></ul><h5 id="firm-real-time-systems-22823">Firm real-time systems 2:28:23</h5><ul><li>Tasks are performed as fast as possible</li><li>Late completion of jobs is undesirable but not fatal.</li><li>Results discarded after deadline.</li></ul><h5 id="hard-real-time-systems-22916">Hard real-time systems 2:29:16</h5><ul><li>Tasks have to be performed on time</li><li>Failure to meet deadlines is fatal</li><li>Example:<ul><li>Flight Control System</li><li>Vehicle subsystems control</li></ul></li></ul><h5 id="operational-definition-23000">Operational definition 2:30:00</h5><p>Hard Real Time System</p><ul><li>Validation by probably correct procedures or extensive simulation that the system always meets the timings constraints</li></ul><p>Soft/Firm Real Time System</p><ul><li>Demonstration of jobs meeting some <strong>statistical</strong> constraints suffices.</li><li>Example – Multimedia System<ul><li>25 frames per second on an average</li></ul></li></ul><h4 id="terms">Terms</h4><p><strong>State</strong>: A unique operating condition of the system.</p><p><strong>Task</strong>: A single thread of execution through a group of related states.</p><p><strong>Task Manager</strong> –</p><ul><li>Responsible for maintaining the current state of each task.</li><li>Responsible for providing each task with execution time.</li></ul><p><strong>Application</strong>: Set of multiple small tasks.</p><p><strong>Processors</strong>: They are also known as active resources. They are important for the execution of a job.</p><figure><img src="/images/OP/1038225.png" alt="" /><figcaption>Tasks</figcaption></figure><h4 id="definitions">Definitions</h4><h5 id="worst-case-execution-time">Worst case execution time</h5><p>Definition: The Worst Case Execution Time (WCET) is an upper bound on the execution time of a task.</p><ul><li>Computing such a bound is undecidable<ul><li>Possible for programs without recursion and finite loops<ul><li><strong>Pipeline hazards, interrupts, caches -&gt; serious overestimates</strong></li></ul></li></ul></li></ul><p>Approaches:</p><ul><li>for hardware: typically requires hardware synthesis</li><li>for software: requires availability of machine programs; complex analysis</li></ul><h5 id="average-execution-time">Average execution time</h5><p>Estimated cost and performance values</p><ul><li>Difficult to generate sufficiently precise estimates; Balance between run-time and precision</li></ul><p>Accurate cost and performance values</p><ul><li>Can be done with normal tools (such as compilers). As precise as the input data is.</li></ul><h4 id="task-periodicity">Task periodicity</h4><h5 id="period-and-deadline">Period and deadline</h5><p>Period of a task (if periodic)</p><ul><li>Repeating time interval the task must complete one execution within<ul><li>E.g., period = 100 ms</li><li>Task must execute once every 100 ms</li></ul></li><li>Usually determined by the description of the system<ul><li>E.g., refresh rate of display is 27 times/sec</li><li>Period = 37 ms</li></ul></li></ul><p>Execution deadline</p><ul><li>Amount of time task must be completed by after it has started<ul><li>E.g., execution time = 5 ms, deadline = 20 ms, period = 100 ms</li><li>Task must complete execution within 20 ms after it has begun regardless of its period</li><li>Task begins at start of period, runs for 4 ms then is preempted</li><li>Task suspended for 14 ms, then runs for the remaining 1 ms</li><li>Completed within 4 + 14 + 1 = 19 ms which meets deadline of 20 ms</li><li>Without deadline process could be suspended for much longer</li></ul></li></ul><h4 id="types-1">Types</h4><ul><li>Periodic Tasks</li><li>Sporadic Tasks</li><li>Aperiodic Tasks</li></ul><figure><img src="/images/OP/1038226.png" alt="" /><figcaption>Tasks</figcaption></figure><h5 id="periodic-tasks">Periodic Tasks</h5><p>Periodic Task repeats itself regularly after a certain fixed time interval.</p><p>Periodic tasks are sometimes referred to as clock-driven tasks</p><p>The fixed time interval after which a task repeates is called the period of the task.</p><p>If 𝑇<sub>𝑖</sub> is a periodic task, then the time from till the occurrence of the first instance of 𝑇<sub>𝑖</sub> is denoted by ϕ<sub>𝑖</sub> and it is called the phase of the task.</p><p>𝑇<sub>𝑖</sub> = (ϕ<sub>𝑖</sub> 𝑒<sub>𝑖</sub> , 𝑝<sub>𝑖</sub> , ⅆ<sub>𝑖</sub>)</p><ul><li>ϕ<sub>𝑖</sub> : the phase</li><li>𝑒<sub>𝑖</sub> : the worst case execution time</li><li>𝑝<sub>𝑖</sub> : the periodicity</li><li>ⅆ<sub>𝑖</sub> : the deadline</li></ul><p>A vast majority of the tasks present in a typical real-time system are periodic</p><h5 id="sporadic-tasks">Sporadic Tasks</h5><p>A sporadic task is one that recurs at random instants</p><p>A sporadic task 𝑇<sub>𝑖</sub> can is represented by three tuples:</p><p>𝑇<sub>𝑖</sub> = (𝑒<sub>𝑖</sub> , 𝑔<sub>𝑖</sub> , ⅆ<sub>𝑖</sub>)</p><p>Where 𝑒<sub>𝑖</sub> is the wost case execution time of an instance of the task and 𝑑<sub>𝑖</sub> is the relative deadline.</p><p>The minimum separation 𝑔<sub>𝑖</sub> indicates that once an instance of sporadic task occurs, the next instance cannot occur before 𝑔<sub>𝑖</sub> time unit have elapsed.</p><p>The criticality level may vary.</p><h5 id="aperiodic-tasks">Aperiodic Tasks</h5><p>An aperiodic task can arise at random instants.</p><p>Two or more instances of an aperiodic task might occur at the same time instant because minimum separation 𝑔<sub>𝑖</sub> can be zero.</p><p>Aperiodic task can recur in quick succession.</p><p>Soft real-time systems can tolerate a few deadline misses, so aperiodic tasks are generally soft real time tasks.</p><h4 id="task-scheduling">Task scheduling</h4><h5 id="scheduler">Scheduler</h5><p>Real-time systems must meet timing requirements when multiple concurrent processes implemented on single general-purpose processor</p><ul><li>Not true multitasking</li></ul><p>Scheduler is a special process that decides when and for how long each process is executed</p><p>The main role of task scheduling refers to identifying the order in which tasks should execute in a system.</p><p>A schedule for a given set of tasks is thus an assignment of time-frames and resources to individual tasks.</p><p>There exist multiple scheduling algorithms.</p><ul><li>The time instants at which scheduling decisions are taken are called <strong><em>scheduling points</em></strong>.</li><li>Their quality is identified by a term called <strong><em>processor utilization</em></strong>.</li></ul><p>A good scheduling algorithm should lead to 100% processor utilization.</p><h5 id="classification">Classification</h5><p>Based up to <strong><em>scheduling points</em></strong>, scheduling algorithms can be classified into the following categories:</p><ul><li><strong>Clock driven scheduling</strong>: the scheduling points are the interrupts received from a periodic clock<ul><li>Table driven</li><li>Cyclic</li></ul></li><li><strong>Event driven scheduling</strong>: the scheduling points correspond to different events in the system such as when an instance of a task finishes execution.<ul><li>Simply priority scheduling</li><li>Rate monotonic scheduling (RMS)</li><li>Earliest deadline first (EDF) scheduling</li></ul></li></ul><h5 id="clock-driven-scheduling">Clock driven scheduling</h5><p>This type of schedulers are called <strong>static</strong> <strong>schedulers</strong>.</p><p>Clock driven scheduler works in synchronism with clock or timer signal, which periodically generates interrupts.</p><p>Simplified scheduled due to knowing in advance:</p><ul><li>The set of tasks</li><li>Their periodicity values</li><li>Execution times required</li><li>Deadlines</li></ul><p><strong>Drawback</strong>: this type of schedulers is their inability to handle aperiodic and sporadic tasks</p><p>Types:</p><ul><li>Table driven</li><li>Cyclic</li></ul><h6 id="table-driven-scheduling">Table driven scheduling</h6><p>Table driven schedulers use a precomputed table that stores the tasks to be run at different clock intervals.</p><p>Top table provides an example of a set of 3 tasks, their periodicity and their execution time.</p><p>A possible schedule for this set of tasks is shown in the bottom table.</p><figure><img src="/images/OP/1038227.png" alt="" /><figcaption>Tasks</figcaption></figure><h6 id="cyclic-scheduling">Cyclic scheduling</h6><p>A major problem with table-driven scheduling is the size of the schedule table.</p><p>In cyclic scheduling, the major cycle (equal to the least common multiple of periodicity tasks) is divided into a number of equal sized <strong>minor cycles</strong> or <strong>frames</strong>.</p><p>One or more frames are allocated to individual tasks.</p><p>The schedule table stores the tasks to be run for different frames, so the size of the tables is reduced to be equal to the number of frames.</p><p>The selection of the frame size becomes an issue:</p><ul><li>A large frame size implies lesser number of frames in a major cycle.</li><li>It may lead to wastage of CPU time as for most of the tasks, execution time may be much smaller than the frame size.</li></ul><p>The constraints behind selection of a frame size are the following:</p><ul><li>Minimize context switching</li><li>Schedule table minimization</li><li>Satisfaction of task deadlines</li></ul><h6 id="limitations">Limitations</h6><p>Problems of clock driven scheduling strategies:</p><ul><li>their inability to handle a large number of tasks.</li><li>determining the proper frame size</li><li>sporadic and aperiodic tasks cannot be handled efficiently</li></ul><h5 id="priorities">Priorities</h5><p>Tasks with highest priority always selected first by scheduler</p><ul><li>Typically determined statically during creation or dynamically during execution</li></ul><p>Priority queue</p><ul><li>Runnable tasks again added as created or become runnable</li><li>Task with highest priority chosen when new task needed</li><li>If multiple tasks with same highest priority value then selects from them using first-come first-served</li></ul><h5 id="event-driven-scheduling">Event driven scheduling</h5><p>The scheduling of sporadic and aperiodic tasks have led to the design of event driven schedulers</p><p>Priorities are assigned to tasks.</p><p>There are three important schedulers in this category:</p><ol type="1"><li>Foreground-background scheduling</li><li>Rate Monotonic scheduling (RMS)</li><li>Earliest Deadline First (EDF) scheduling</li></ol><h6 id="foreground-background-scheduling">Foreground-background scheduling</h6><p>Small systems of low complexity</p><p>These systems are also called “superloops”</p><p>An application consists of an infinite loop of desired operations (<strong>background</strong>)</p><p>Interrupt service routines (ISRs) handle asynchronous events (<strong>foreground</strong>)</p><p>Critical operations must be performed by the ISRs to ensure the timing correctness</p><p>Thus, ISRs tend to take longer than they should</p><p><img src="/images/OP/1038228.png" /></p><h6 id="rate-monotonic-scheduling">Rate Monotonic scheduling</h6><p>Rate Monotonic Scheduling is a static-priority-based event driven scheduling algorithm for periodic tasks.</p><p>The priorities are assigned to the tasks based on their periodicity values.</p><p>Rate monotonic scheduling</p><ul><li>Processes with shorter periods have higher priority</li><li>Typically used when execution deadline = period</li></ul><p>The theory underlying Rate Monotonic Scheduling is the Rate Monotonic Analysis, that uses simple model of the system stated as follows:</p><ol type="1"><li>All Processes run on a single CPU, thus there is no task parallelism</li><li>Context switching time ignored</li><li>Execution time for different invocations of a task are same and constant</li><li>Tasks are totally independent of each other</li><li>The deadline of an instance of a task occurs at the end of its period</li></ol><p><img src="/images/OP/1038229.png" /></p><p><strong>Advantages</strong>:</p><ul><li>The major advantage of Rate Monotonic Scheduling is its simplicity.</li><li>Since the priorities are static, a simple array of tasks can be used as the data structure.</li><li>Another good feature is its ability to handle transient overloads efficiently. It cannot lead to higher priority tasks missing deadlines.</li><li>Almost all the commercial real-time operating systems support Rate Monotonic Scheduling policy</li></ul><p><strong>Disadvantages</strong>:</p><ul><li>It is difficult to handle aperiodic and sporadic tasks.</li><li>Rate Monotonic Scheduling does not produce optimal results if deadlines differ from periodicity of tasks.</li><li>In Deadline Monotonic Algorithm priorities are assigned to the tasks based on their deadlines<ul><li>Processes with shorter deadlines have higher priority</li><li>Typically used when execution deadline &lt; period</li><li>If deadlines are different from periodicity, there may be cases in which Rate Monotonic Scheduling fails but Deadline Monotonic Scheduling produce valid schedules.</li><li>On the contrary, wherever Deadline Monotonic Scheduling fails, Rate Monotonic Scheduling also fails</li></ul></li></ul><h6 id="deadline-monotonic-scheduling">Deadline Monotonic scheduling</h6><p>Deadline Monotonic Scheduling is a static-priority-based event driven scheduling <u>algorithm for periodic tasks that assigns priorities to the tasks based on their deadlines values</u>.</p><p>Deadline monotonic scheduling</p><ul><li>Processes with shorter deadlines have higher priority</li><li>Typically used when execution deadline &lt; period</li></ul><p><img src="/images/OP/1018220.png" /></p><h6 id="earliest-deadline-monotonic-scheduling">Earliest Deadline Monotonic scheduling</h6><p><strong>Earliest Deadline First</strong> Scheduling is a dynamic priority algorithms in which priority of an instance of a task depends on its deadline.</p><p>Unlike Rate Monotonic scheduling, the priority of a task is not fixed for all instances.</p><p>The priority changes dynamically during the lifetime of the system.</p><figure><img src="/images/OP/1018221.png" alt="" /><figcaption>Example</figcaption></figure><p><strong>Disadvantages</strong>:</p><ul><li>Earliest Deadline First Scheduling is less predictable.</li><li>Earliest Deadline First Scheduling is less controllable in the sense that we cannot control the response time of a task</li><li>Implementation overhead is higher than fixed priority approaches.</li><li>Transient overload problem</li><li>Domino effect</li></ul><h3 id="role-of-an-os-in-real-time-systems">Role of an OS in Real-Time Systems</h3><p>RTOS provide mechanisms, primitives, and guidelines for building real-time systems</p><p>Standalone Applications</p><ul><li>Often no OS involved(bare metal)</li><li>Micro-controller based Embedded Systems</li></ul><p>But many Real Time Applications are huge &amp; complex</p><ul><li>Multiple threads</li><li>Complicated Synchronization Requirements</li><li>File system / Network / Windowing support</li><li>OS primitives reduce the software design time</li></ul><p>Real-time operating systems are specialised operating systems which manage the processes in the RTS.</p><p>Responsible not only for process management and resource (processor and memory) allocation.</p><p>Do not normally include facilities such as file management.</p><h3 id="why-use-an-rtos">Why use an RTOS?</h3><p>Here are important reasons for using RTOS:</p><ul><li>It offers <strong>priority-based scheduling</strong>, which allows you to separate analytical processing from non-critical processing.</li><li>The Real time OS provides <strong>API functions</strong> that allow cleaner and smaller application code.</li><li><strong>Abstracting timing dependencies and the task-based design</strong> results in fewer interdependencies between modules.</li><li>RTOS offers <strong>modular task-based development</strong>, which allows modular task-based testing.</li><li><strong>The task-based API encourages modular development</strong> as a task, will typically have a clearly defined role. It allows designers/teams to work independently on their parts of the project.</li><li><strong>An RTOS is event-driven</strong> with no time wastage on processing time for the event which is not occur</li></ul><h3 id="features-of-rtos">Features of RTOS</h3><p>RTOS provide:</p><ul><li>Task management</li><li>Timers<ul><li>Periodic</li><li>Aperiodic/Watchdogs</li></ul></li><li>Task priorities</li><li>Reduced context switching time</li><li>Interrupt latency</li><li>Non-virtual Memory</li></ul><h4 id="for-embedded">For embedded</h4><ul><li>• Occupy very less memory</li><li>Consume fewer resources</li><li>Response times are highly predictable</li><li>Unpredictable environment</li></ul><table><thead><tr class="header"><th>Processors</th><th>MIPS</th></tr></thead><tbody><tr class="odd"><td>Microcontrollers</td><td>~20</td></tr><tr class="even"><td>ARM7</td><td>100-133</td></tr><tr class="odd"><td>ARM9</td><td>180-250</td></tr><tr class="even"><td>Strong ARM</td><td>206</td></tr><tr class="odd"><td>Intel Xscale</td><td>400</td></tr><tr class="even"><td>Mips4Kcore</td><td>400</td></tr><tr class="odd"><td>x86</td><td></td></tr></tbody></table><figure><img src="/images/OP/1018222.png" alt="" /><figcaption>Difference between in GPOS and RTOS</figcaption></figure><h3 id="advantages-of-rtos">Advantages of RTOS</h3><ul><li><strong>Maximum consumption</strong>: Maximum utilization of devices and system. Thus more output from all the resources.</li><li><strong>Task Shifting</strong>: Time assigned for shifting tasks in these systems are very low.</li><li><strong>Focus On Application</strong>: Focus on running applications and less importance to applications which are in queue.</li><li><strong>Real Time Operating System In Embedded System</strong>: Since size of programs are small, RTOS can also be embedded systems like in transport and others.</li><li><strong>Error Free</strong>: These types of systems are error free.</li><li><strong>Memory Allocation</strong>: Memory allocation is best managed in these type of systems</li></ul><h3 id="responsibility-of-an-rtos">Responsibility of an RTOS</h3><ul><li>Process (task) management<ul><li><strong>Scheduler</strong></li><li>Synchronization mechanism<ul><li>Inter-Process Communication (IPC)</li><li>Semaphores</li></ul></li></ul></li><li>Memory management</li><li>Interrupt service mechanism</li><li>I/O management</li><li>Development Environments</li><li>Communication subsystems (Option)</li><li>Board Support Packages (BSP)</li></ul><h3 id="components-of-rtos">Components of RTOS</h3><ul><li>The Scheduler</li><li>Symmetric Multiprocessing (SMP)</li><li>Function Library</li><li>Memory Management</li><li>Fast dispatch latency</li><li>User-defined data objects and classes</li></ul><h3 id="popular-real-time-operating-systems">Popular Real-Time Operating Systems</h3><ul><li>FreeRTOS<ul><li>Scalable real time kernel designed specifically for small embedded systems.</li><li>RTOS Scheduler - preemptive, cooperative and hybrid configuration options, with optional time slicing.</li><li>Round robin with time slicing, mutexes with priority inheritance and recursive mutexes.</li><li>6K to 12K ROM footprint</li></ul></li><li>Neutrino/QNX<ul><li>Real-time microkernel surrounded by optional processes (resource managers) that provide POSIX and UNIX compatibility</li><li>Microkernels typically support only the most basic services</li><li>Optional resource managers allow scalability from small ROM-based systems to huge multiprocessor systems connected by various networking and communication technologies</li><li>Preemptive process scheduling using FIFO, round-robin, adaptive, or priority-driven scheduling</li><li>32 priority levels per process</li><li>Microkernel &lt; 10 Kbytes and complies with POSIX real-time standard</li></ul></li></ul><h3 id="factors-for-selecting-an-rtos">Factors for selecting an RTOS</h3><p><strong>Performance</strong>: Performance is the most important factor required to be considered while selecting for a RTOS.</p><p><strong>Middleware</strong>: if there is no middleware support in Real time operating system, then the issue of time-taken integration of processes occurs.</p><p><strong>Error-free</strong>: RTOS systems are error-free. Therefore, there is no chance of getting an error while performing the task.</p><p><strong>Embedded system usage</strong>: Programs of RTOS are of small size. So we widely use RTOS for embedded systems.</p><p><strong>Maximum Consumption</strong>: we can achieve maximum consumption with the help of RTOS.</p><p><strong>Task shifting</strong>: Shifting time of the tasks is very less.</p><p><strong>Unique features</strong>: A good RTS should be capable, and it has some extra features like how it operates to execute a command, efficient protection of the memory of the system, etc.</p><h3 id="whats-important-in-real-time">What's important in Real-Time</h3><p>Metrics for real-time systems differ from that for time-sharing systems</p><p><img src="/images/OP/1018223.png" /></p><ul><li><strong>Schedulability</strong> is the ability of tasks to meet all hard deadlines</li><li><strong>Latency</strong> is the worst-case system response time to event</li><li><strong>Stability</strong> in overload means the system meets critical deadlines even if all deadlines cannot be met</li></ul><h3 id="disadvantages-of-rtos">Disadvantages of RTOS</h3><p><strong>Limited tasks</strong>: RTOS system can run minimal tasks together, and it concentrates only on those applications which contain an error so that it can avoid them.</p><p><strong>Poor multi-tasking</strong>: RTOS is the system that concentrates on a few tasks. Therefore, it is really hard for these systems to do multi-tasking.</p><p><strong>Limited switching</strong>: Minimum switching of tasks is done in Real time operating systems.</p><p><strong>Device Driver And Interrupt signals</strong>: Specific drivers are required for the RTOS so that it can offer fast response time to interrupt signals, which helps to maintain its speed.</p><p><strong>Use Heavy System Resources</strong>: Plenty of resources are used by RTOS, which makes this system expensive.</p><p><strong>Thread Priority</strong>: The tasks which have a low priority need to wait for a long time as the RTOS maintains the accuracy of the program, which are under execution.</p><p><strong>Complex Algorithm</strong>: The algorithms are very complex and difficult for the designer</p><h2 id="summary">Summary</h2><ul><li>RTOS is an operating system intended to serve real time application that process data as it comes in, mostly without buffer delay.</li><li>It offers priority-based scheduling, which allows you to separate analytical processing from noncritical processing.</li><li>Important components of RTOS system are:<ol type="1"><li>The Scheduler</li><li>Symmetric Multiprocessing</li><li>Function Library</li><li>Memory Management</li><li>Fast dispatch latency</li><li>User-defined data objects and classes</li></ol></li><li>Three types of RTOS:<ol type="1"><li>Hard time</li><li>Soft time</li><li>Firm time</li></ol></li><li>RTOS system occupy very less memory and consume fewer resources</li><li>Performance is the most important factor required to be considered while selecting for a RTOS.</li><li>General-Purpose Operating System (GPOS) is used for desktop PC and laptop while Real-Time Operating System (RTOS) only applied to the embedded application.</li><li>Real-time systems are used in Airlines reservation system, Air traffic control system, etc.</li><li>A major drawback of RTOS is that the system only concentrates on a few tasks.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Operating Systems and Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Relational Model and Relational Algebra</title>
      <link href="2021/02/19/2021-02-19-Relational-Model-and-Relational-Algebra/"/>
      <url>2021/02/19/2021-02-19-Relational-Model-and-Relational-Algebra/</url>
      
        <content type="html"><![CDATA[<h1 id="relational-model-and-relational-algebra">Relational Model and Relational Algebra</h1><p><a href="https://recordings.reu1.blindsidenetworks.com/vub/3b0c2525ba56071f1d017b50298d66d1d59e3b10-1613565889329/capture/">Video Part 1 42:57 ~ end</a></p><h2 id="relational-model">Relational Model</h2><p>Theory for data management developed by Edgar F. Codd while working at IBM:</p><ul><li><strong><em>data independence</em></strong><ul><li>between logical and physical level</li></ul></li><li>set-based <strong><em>query language</em></strong><ul><li>relational query language</li></ul></li><li><strong><em>normalisation</em></strong><ul><li>avoid redundancy</li></ul></li></ul><p>IBM first did not implement the relational model in order to "protect" their IMS/DB revenues</p><p><strong><em>IBM's System R</em></strong> (1974) was a DBMS prototype implementing Codd's relational model</p><ul><li>first implementation of the <u>Structured English Query Language</u> (<strong><em>SEQUEL</em></strong>)<ul><li>later renamed to Structured Query Language (SQL)</li></ul></li></ul><p>The System R prototype finally led to the development of different commercial DBMSs including IBM's <strong><em>DB2</em></strong>, <strong><em>Oracle</em></strong> or <strong><em>Microsoft SQL Server</em></strong></p><h2 id="relational-database-4740">Relational Database 47:40</h2><p>A relational database consists of a number of <strong><em>tables</em></strong></p><ul><li>each table row defines a <strong><em>relationship</em></strong> between a set of values</li></ul><p>There is an analogy between the concept of a table (collection of relationships) and the mathematical concept of a <strong><em>relation</em></strong></p><ul><li>in the following we therefore talk about relations instead of tables</li><li>-&gt; a <strong><em>relational database</em></strong> consists of a <strong><em>collection of relations</em></strong></li></ul><p><img src="/images/DB/042429.png" /></p><p>Information is normally partitioned into different relations since the storage in a single relation would lead to</p><ul><li>a replication of information (redundancy)</li><li>a large number of necessary null values</li></ul><p>While tables are used at the logical level, different storage structures can be used at the physical level</p><ul><li>data independence</li></ul><h2 id="relation-5223">Relation 52:23</h2><p>The column headers of a table are called <strong><em>attributes</em></strong> and for each attribute <em>a<sub>i</sub></em> there is a set of permitted values called the <strong><em>domain D<sub>i</sub></em></strong> of <em>a<sub>i</sub></em></p><p>Given the domains <em>D<sub>1</sub></em>, <em>D<sub>2</sub></em>, ..., <em>D<sub>n</sub></em>, a <strong><em>relation r</em></strong> is defined as a subset of the cartesian product <em>D<sub>1</sub></em> × <em>D<sub>2</sub></em> × ... × <em>D<sub>n</sub></em></p><p><img src="/images/DB/0424290.png" /></p><p>A relation r is a <strong><em>set of n-ary tuples</em></strong> <em>t<sub>i</sub></em> = (<em>a<sub>1</sub></em>, <em>a<sub>2</sub></em>,..., <em>a<sub>n</sub></em>) where each <em>a<sub>i</sub></em> ∈ <em>D<sub>i</sub></em></p><ul><li>the number of attributes is called a relation's <strong><em>degree</em></strong></li><li>the number of tuples is called a relation's <strong><em>cardinality</em></strong></li></ul><p>Since a relation is a set of tuples, the <strong><em>order</em></strong> of the tuples is <strong><em>irrelevant</em></strong></p><ul><li>each tuple is distinctive (no duplicate tuples)</li></ul><p>The <strong><em>order of attributes</em></strong> is <strong><em>irrelevant</em></strong></p><p>The domain of each attribute has to be <strong><em>atomic</em></strong></p><ul><li>all members of the domain have to be indivisible units</li><li>a relation with only atomic values is <strong><em>normalised (first normal form)</em></strong></li></ul><p>Multiple attributes can have the same domain <em>D<sub>i</sub></em></p><ul><li>we will see later how the domain types can be defined (in SQL)</li></ul><p>A <strong><em>tuple variable</em></strong> is a variable that stands for a tuple</p><ul><li>its domain is defined by the set of all tuples</li></ul><p>The special <strong><em>null</em></strong> value is part of any domain <em>D<sub>i</sub></em></p><ul><li>used to represent an <strong><em><u>unknown or non-existing value</u></em></strong></li><li>null values are not easy to handle (not the same as empty string)<ul><li>avoid null values whenever possible</li></ul></li></ul><h3 id="example-of-a-relation-10106">Example of a Relation 1:01:06</h3><p>Let us assume that we have the following attributes with their domains</p><ul><li><strong>name</strong> = {Merckx, Frisch, Botta, ...}</li><li><strong>street</strong> = {Bahnhofstrasse, Pleinlaan, Via Nassa, ...}</li><li><strong>city</strong> = {Zurich, Brussels, Lugano, Paris, ...}</li></ul><p>Then</p><p><strong><em>r</em></strong> = {(Merckx, Pleinlaan, Brussels),</p><p>​ (Frisch, Bahnhofstrasse, Zurich),</p><p>​ (Botta, Via Nassa, Lugano),</p><p>​ (Botta, Bahnhofstrasse, Lugano)}</p><p>forms a relation over <strong>name</strong> × <strong>street</strong> × <strong>city</strong></p><h2 id="relational-database-example-10221">Relational Database Example 1:02:21</h2><p><img src="/images/DB/0924291.png" /></p><p><img src="/images/DB/0924292.png" /></p><table><thead><tr class="header"><th style="text-align: left;">relational database schema</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">Customer (<strong><u>customerID</u></strong>, name, street, postcode, city)</td></tr><tr class="even"><td style="text-align: left;">CD (<strong><u>cdID</u></strong>, name, duration, price, year)</td></tr><tr class="odd"><td style="text-align: left;">Order (<strong><u>orderId</u></strong>, customerID<u>, cdID, date, amount, status</u>)</td></tr><tr class="even"><td style="text-align: left;">Supplier (<strong><u>supplierID</u></strong>, name, city)</td></tr></tbody></table><h2 id="database-schema-10428">Database Schema 1:04:28</h2><p>The logical design of a database is defined by the <strong><em>database schema</em></strong></p><p>A <strong><em>database</em></strong> <strong><em>instance</em></strong> is a snapshot of the data stored in a database at a given time</p><p>A <strong><em>relation schema</em></strong> <em>R</em> = (<em>A<sub>1</sub></em>, <em>A<sub>2</sub></em>,..., <em>A<sub>n</sub></em>) is defined by a list of attributes</p><ul><li>by convention, the name of a relation schema starts with an uppercase letter (in contrast to relations)<ul><li>e.g. Customer (<u>customerID</u>, name, street, postcode, city)</li></ul></li><li>a <strong><em>relation</em></strong> can be defined based on the relation schema<ul><li>e.g. customer = (Customer)</li></ul></li><li>a <strong><em>relation instance</em></strong> contains the relation's actual values (tuples)</li></ul><h2 id="keys-10652">Keys 1:06:52</h2><p>For the keys we use the same terminology as introduced earlier for the ER model</p><p><em>K</em> <strong>⊆</strong> <em>R</em> is a <strong><em>superkey</em></strong> of <em>R</em> if the values of <em>K</em> uniquely identify any tuple of possible relation instances <em>r(R)</em></p><ul><li><em>t<sub>1</sub></em> and <em>t<sub>2</sub></em> ∈ <em>r</em> and <em>t<sub>1</sub></em> ≠ <em>t<sub>2</sub></em> -&gt; <em>t<sub>1</sub>[K]</em> ≠ <em>t<sub>2</sub>[K]</em></li><li>e.g. {cdID} and {cdID, name} are both superkeys of CD</li></ul><p><em>K</em> is a <strong><em>candidate key</em></strong> if <em>K</em> is minimal</p><ul><li>e.g. {cdID} is a candidate key of CD</li></ul><p>The DB designer has to choose one of the candidate keys for each relation schema as <strong><em>primary key</em></strong></p><ul><li>if possible, the value of a primary key should not change or only in very rare cases</li></ul><h3 id="foreign-keys-11103">Foreign Keys 1:11:03</h3><p>A relation schema may have one or multiple attributes that correspond to the primary key of another relation schema and are called <strong><em>foreign keys</em></strong></p><ul><li>e.g. customerID is a foreign key of the order relation schema</li><li>note that a foreign key of the <strong><em>referencing relation</em></strong> can only contain values that occur in the primary key of the <strong><em>referenced relation</em></strong> or it must be null -&gt; <strong><em>referential integrity</em></strong></li></ul><figure><img src="/images/DB/0424293.png" alt="" /><figcaption>schema diagram</figcaption></figure><p><a href="https://recordings.reu1.blindsidenetworks.com/vub/e25659750cd61f375da707d5d150e0617afd636a-1614171325262/capture/">Video Part 2</a></p><h2 id="query-language">Query Language</h2><p>A query language is a language that is used to <strong><em>access</em></strong> (<strong><em>r</em></strong>ead) information stored in a database as well as to <strong><em>c</em></strong>reate, <strong><em>u</em></strong>pdate and <strong><em>d</em></strong>elete information (CRUD)</p><p>There are different types of query languages:</p><ul><li>procedural<ul><li>e.g. relational algebra</li></ul></li><li>declarative<ul><li>e.g. Structured Query Language (SQL)</li></ul></li></ul><p>The relational algebra as well as the tuple and domain relational calculus form the basis for "higher level" query languages (e.g. SQL)</p><h2 id="relational-algebra-537">Relational Algebra 5:37</h2><p>The relational algebra consists of <strong><em>six fundamental operations</em></strong></p><p>unary operations:</p><ul><li><em>selection: σ</em></li><li><em>projection: π</em></li><li><em>rename: ρ</em></li></ul><p>binary operations:</p><ul><li><em>union:</em> ⋃</li><li><em>set difference: —</em></li><li>cartesian product: ×</li></ul><p>An operator takes one (unary) or two (binary) relations as input and returns a new <strong><em>single relation as output</em></strong></p><p>Based on the six fundamental operations, we can define <strong><em>additional relational operations</em></strong> (add no additional power)</p><ul><li><em>set intersection:</em> ⋂</li><li><em>natural join: ⋈</em></li><li><em>theta join: θ</em></li><li><em>equijoin: θ</em></li><li><em>semijoin: ⋉</em></li><li><em>division: ÷</em></li><li><em>assignment: ←</em></li></ul><p><strong><em>Extended operations</em></strong> with additional expressiveness</p><ul><li><em>generalised projection</em></li><li><em>aggregate function</em></li><li><em>outer join</em></li></ul><h3 id="selection-σ-900">Selection (σ) 9:00</h3><p>Goal: <strong><em>Select specific tuples (rows) from a relation (table)</em></strong></p><p><strong>σ<sub>p</sub>(<em>r</em>) = {<em>t</em> | <em>t</em> ∈ <em>r</em> and <em>p</em>(<em>t</em>)}</strong></p><ul><li><em>p</em> is a <strong>selection predicate</strong><ul><li>consists of terms <em>p<sub>i</sub></em> connected by an <strong>and (∧)</strong>, <strong>or (∨)</strong> or <strong>not (¬)</strong></li></ul></li><li>a term <em>p<sub>i</sub></em> has the form <em>attribute<sub>m</sub></em> <strong><em>operator</em></strong> <em>attribute<sub>n</sub></em> or <em>constant</em><ul><li>the available operators are: =, ≠, &gt;, &lt;, ≥, ≤</li></ul></li></ul><h4 id="examples">Examples</h4><p><em>"Find all tuples in the customer relation that are in the city of Zurich and have a postcode greater than 8010."</em></p><p>σ<sub>city = "Zurich" ∧ postcode &gt; 8010</sub> (<em>customer</em>)</p><p><img src="/images/DB/0424294.png" /></p><h4 id="examples-1">Examples</h4><p>A selection predicate may contain a comparison between two attributes</p><p><em>"Find all tuples in the cd relation with a value for the duration attribute that is equal to the year of release."</em></p><p>σ<sub>duration = year</sub> (<em>cd</em>)</p><p><img src="/images/DB/0424295.png" /></p><h4 id="attention"><strong>Attention</strong></h4><p>The selection operation in relational algebra has a different meaning than the SELECT statement used in SQL</p><ul><li>SELECT in SQL corresponds to a projection in relational algebra</li></ul><h3 id="projection-π-1151">Projection (π) 11:51</h3><p>Goal: <strong><em>Select specific attributes (columns) from a relation</em></strong></p><p>π<sub>A1,</sub> <sub>A2,...,</sub> <sub>Am</sub>(<em>r</em>)</p><ul><li>returns a relation instance that only contains the columns for which an attribute <em>A<sub>i</sub></em> has been listed</li><li><strong><em>duplicate tuples</em></strong> are <strong><em>removed</em></strong> from the resulting relation (set)</li></ul><h4 id="example">Example</h4><p><em>"Return the name and city of all tuples in the customer relation."</em></p><p>π<sub>name,city</sub>(<em>customer</em>)</p><p><img src="/images/DB/0424296.png" /></p><h3 id="composition-of-relational-operations-1453">Composition of Relational Operations 14:53</h3><p>Since the result of a relational operation is a new single relation instance, multiple <strong><em>operations can be combined</em></strong></p><h4 id="example-1">Example</h4><p><em>"Find the names of all customers who live in Zurich."</em></p><p>π<sub>name</sub> (σ<sub>city</sub> <sub>=</sub> <sub>"Zurich"</sub> (<em>customer</em>))</p><p><img src="/images/DB/0424291.png" /></p><h3 id="union-1604">Union: ⋃ 16:04</h3><p>Goal: <strong><em>Unify tuples from two relations</em></strong></p><p><em>r</em> ⋃ <em>s</em> = {<em>t</em> | <em>t</em> ∈ <em>r</em> or <em>t</em> ∈ <em>s</em>}</p><ul><li><em>r</em> and <em>s</em> must have the <strong><em>same degree</em></strong> (same number of attributes)</li><li>the corresponding attribute domains must have a <strong><em>compatible type</em></strong></li></ul><h4 id="example-2">Example</h4><p><em>"Find the names of persons who are either customers or suppliers."</em></p><p>π<sub>name</sub> (<em>customer</em>) ⋃ π<sub>name</sub> (<em>supplier</em>)</p><p><img src="/images/DB/0424292.png" /></p><h3 id="set-difference-1839">Set Difference (—) 18:39</h3><p>Goal: <strong><em>Find tuples that are in one relation but not in another relation</em></strong></p><p><em>r</em> - <em>s</em> = {<em>t</em> | <em>t</em> ∈ <em>r</em> and <em>t</em> ∉ <em>s</em>}</p><ul><li><em>r</em> and <em>s</em> must have the <strong><em>same degree</em></strong></li><li>the corresponding attribute domains must have a <strong><em>compatible type</em></strong></li><li>finds tuples that are in a relation <em>r</em> but not in another relation <em>s</em></li></ul><h4 id="example-3">Example</h4><p><em>"Find the names of suppliers who are no customers."</em></p><p>π<sub>name</sub> (<em>customer</em>) — π<sub>name</sub> (<em>supplier</em>)</p><p><img src="/images/DB/0424297.png" /></p><h3 id="cartesian-product-1936">Cartesian product (×) 19:36</h3><p>Goal: <strong><em>Combine information from any two relations</em></strong></p><p><em>r</em> × <em>s</em> = {<em>tu</em> | <em>t</em> ∈ <em>r</em> and <em>u</em> ∈ <em>s</em>}</p><ul><li>the attribute names of <em>r</em>(<em>R</em>) and <em>s</em>(<em>S</em>) have to be distinct<ul><li>attributes with the same name have to be renamed via the rename operator ρ</li></ul></li></ul><h4 id="example-4">Example</h4><p>π<sub>name</sub> (<em>customer</em>) × π<sub>city</sub> (<em>customer</em>)</p><p><img src="/images/DB/0424298.png" /></p><h4 id="example-5">Example</h4><p><em>"List the names of all customers with at least one order."</em></p><p>π<sub>name</sub>(σ<sub>customer.customerID = order.customerID</sub> (<em>customer</em> × <em>order</em>) )</p><p><img src="/images/DB/0924293.png" /></p><p><em>Note that we will later see another operator (<strong>natural join</strong>) for the <strong>combination</strong> of two tables based on common attributes</em></p><h3 id="rename-ρ-2430">Rename (ρ) 24:30</h3><p>Goal: <strong><em>Rename a relation or an attribute</em></strong></p><p>ρ<sub>x</sub>(<em>E</em>)</p><ul><li>renames the result of expression <em>E</em> to <em>x</em></li></ul><p>ρ<sub>x(A1,A2,...,An)</sub>(<em>E</em>)</p><ul><li>renames the result of expression <em>E</em> to <em>x</em> and renames the attributes to <em>A<sub>1</sub></em>, <em>A<sub>2</sub></em>,..., <em>A<sub>n</sub></em></li></ul><h4 id="example-6">Example</h4><p>ρ<sub>person(name,location)</sub>(π<sub>name,city</sub> (<em>customer</em>))</p><p><img src="/images/DB/0924294.png" /></p><h4 id="example-7">Example</h4><p><em>"Find the price of the most expensive CD in the cd relation."</em></p><p>π<sub>price</sub>(<em>cd</em>) - π<sub>cd.price</sub>(σ<sub>cd.price &lt; d.price</sub> (<em>cd</em> × ρ<em><sub>d</sub></em> (<em>cd</em>)))</p><p><img src="/images/DB/0924295.png" /></p><h3 id="formal-definition-2911">Formal Definition 29:11</h3><p>A <strong><em>basic relational algebra expression</em></strong> is either a <strong><em>relation from the database</em></strong> or a <strong><em>constant relation</em></strong></p><p>The set of all relational algebra expressions is defined by：</p><ul><li><em>E<sub>1</sub></em> ⋃ <em>E<sub>2</sub></em></li><li><em>E<sub>1</sub></em> — <em>E<sub>2</sub></em></li><li><em>E<sub>1</sub></em> × <em>E<sub>2</sub></em></li><li>σ<sub>p</sub>(<em>E<sub>1</sub></em>)</li><li>π<sub>A1,A2,...,Am</sub>(<em>E<sub>1</sub></em>)</li><li>ρ<sub>x(A1,A2,...,An)</sub>(E<sub>1</sub>)</li></ul><h3 id="set-intersection-3411">Set Intersection 34:11</h3><p><em>r</em> ∩ <em>s</em> = {<em>t</em> | <em>t</em> ∈ <em>r</em> or <em>t</em> ∈ <em>s</em>}</p><ul><li><em>r</em> and <em>s</em> must have the <strong><em>same degree</em></strong></li><li>the corresponding attribute domains must have a <strong><em>compatible type</em></strong></li></ul><p>Note that the set intersection can be implemented via a pair of set difference operations</p><ul><li>r ∩ s = r - (r - s)</li></ul><h4 id="example-8">Example</h4><p><em>"Find the names of people who are customers and suppliers."</em></p><p>π<sub>name</sub>(<em>customer</em>) ∩ π<sub>name</sub>(<em>supplier</em>)</p><p><img src="/images/DB/0924296.png" /></p><h3 id="natural-join-3625">Natural Join (⋈) 36:25</h3><p><em>r</em> ⋈ <em>s</em> = π<sub>R⋃S</sub> (σ<sub>r.A1 = s.A1 ∧ r.A2 = s.A2 ∧ ... ∧ r.An = s.An</sub> (<em>r</em> × <em>s</em>))</p><p>Keep all tuples of the cartesian product <em>r</em> × <em>s</em> that have the same value for the shared attributes of <em>r</em>(<em>R</em>) and <em>s</em>(<em>S</em>)</p><ul><li>the natural join is an associative operation: <em>r</em> ⋈ <em>s</em> ⋈ <em>t</em> = <em>r</em> ⋈ (<em>s</em> ⋈ <em>t</em>)</li></ul><h4 id="example-9">Example</h4><p><em>"List the name and street of customers whose order is still open."</em></p><p>π<sub>name,street</sub>(σ<sub>status="open"</sub>(<em>order</em> ⋈ <em>customer</em>))</p><p><img src="/images/DB/0924297.png" /></p><p>note that we could do the selection first (more efficient)</p><ul><li>we will review this later when discussing query optimisation</li></ul><h3 id="theta-join-θ-and-equijoin-4749">Theta Join (θ) and Equijoin 47:49</h3><p><em>r</em> ⋈<sub>p</sub> <em>s</em> =σ<sub>p</sub>(<em>r</em> × <em>s</em>)</p><p>where the predicate <em>p</em> is of the form r.A<sub>i</sub> θ s.A<sub>j</sub> and θ is a comparison operator ( =, ≠, &gt;, &lt;, ≥, ≤)</p><h4 id="example-10">Example</h4><p><em>customer</em> ⋈<sub>postcode ≤ duration</sub> (ρ<sub>cd(cdID,cdName,duration,price,year)</sub> (<em>cd</em>))</p><p><img src="/images/DB/0824295.png" /></p><p>An equijoin (<em>r</em> ⋈<sub>p</sub> <em>s</em>) is a special form of a theta join where only the equality operator (=) may be used</p><ul><li>note that a natural join is a equijoin over all common attributes of a relation r and s</li></ul><h3 id="semijoin-4939">Semijoin (⋉) 49:39</h3><p><em>r</em> ⋉ <em>s</em> = π<sub>A1,A2,...,An</sub> (<em>r</em> ⋈ <em>s</em>)</p><ul><li>where <em>A<sub>1</sub></em>, <em>A<sub>2</sub></em>,..., <em>A<sub>n</sub></em> are all the attributes of <em>r</em></li></ul><h4 id="example-11">Example</h4><p><em>"List the customers whose order is still open."</em></p><p><em>customer</em> ⋉ σ<sub>status="open"</sub> (<em>order</em>)</p><p><img src="/images/DB/08242951.png" /></p><h3 id="division-5230">Division (÷) 52:30</h3><p><em>r</em> ÷ <em>s</em> = {<em>t</em> | <em>t</em> ∈ π<sub>R-S</sub>(<em>r</em>) and ∀ <em>u</em> ∈ <em>s</em> → <em>tu</em> ∈ <em>r</em>}</p><ul><li>for the relations <em>r</em>(<em>R</em>) and <em>s</em>(<em>S</em>) and <em>S</em> <strong>⊆</strong> <em>R</em></li><li>suited for queries that include the phrase <strong><em>"for all"</em></strong></li></ul><h4 id="example-12">Example</h4><p><em>r</em> ÷ <em>s</em></p><p><img src="/images/DB/08242952.png" /></p><h3 id="assignment-5537">Assignment (←) 55:37</h3><p><em>variable</em> ← <em>E</em></p><p>Works like an assignment in programming languages</p><p>Assignments must always be made to temporary relation variables</p><ul><li>no database modification</li></ul><h4 id="example-13">Example</h4><ul><li><em>temp<sub>1</sub></em> ← π<sub>name, street</sub>(σ<sub>status = "open"</sub>(<em>order</em> ⋈ <em>customer</em>))</li><li><em>temp<sub>2</sub></em> ← π<sub>name, street</sub>(σ<sub>city = "Brussels"</sub> (<em>customer</em>))</li><li><em>result</em> ← <em>temp<sub>1</sub></em> ∪ <em>temp<sub>2</sub></em></li></ul><p><img src="/images/DB/0824294.png" /></p><h3 id="generalised-projection-π-5916">Generalised Projection (π) 59:16</h3><p>π<sub>F1,F2,...,Fm</sub>(<em>E</em>)</p><p>generalisation of the project operation that supports the projection to arithmetic expressions <em>F<sub>1</sub></em>, <em>F<sub>2</sub></em>,..., <em>F<sub>m</sub></em></p><h4 id="example-14">Example</h4><p><em>"Show a list of the names of all CDs together with a reduced price (80% of the original price)."</em></p><p>π<sub>name, price · 0.8 as reducedPrice</sub> (<em>cd</em>)</p><p><img src="/images/DB/0824293.png" /></p><h3 id="aggregate-function-10116">Aggregate Function 1:01:16</h3><p><img src="/images/DB/0824291.png" /></p><h4 id="examples-2">Examples</h4><p><img src="/images/DB/0824292.png" /></p><h3 id="outer-joins-10920">Outer Joins (⟕) 1:09:20</h3><ul><li>left outer join (⟕)<ul><li>keeps all tuples of the left relation</li><li>non-matching parts filled up with null values</li></ul></li><li>right outer join (⟖)<ul><li>keeps all tuples of the right relation</li><li>non-matching parts filled up with null values</li></ul></li><li>full outer join (⟗)<ul><li>keeps all tuples of both relations</li><li>non-matching parts filled up with null values</li></ul></li></ul><p>The <strong><em>left outer join (⟕)</em></strong>, <strong><em>right outer join (⟖)</em></strong> and <strong><em>full outer join (⟗)</em></strong> are extensions of the natural join operation</p><p>Computes the natural join and then adds the tuples from one relation that do not match the other relation</p><ul><li>filled up with null values</li></ul><h4 id="example-15">Example</h4><p><em>customer</em> ⟕ <em>order</em></p><p><img src="/images/DB/0824290.png" /></p><h3 id="null-values-11709">Null Values 1:17:09</h3><p>A null value means that the value is <strong><em>unknown</em></strong> or <strong><em>non-existent</em></strong></p><p>Primary key attributes can never be null (<strong><em>entity integrity</em></strong>)</p><p>The result of an arithmetic operation that involves a null value is null</p><p>For grouping and duplicate elimination null values are treated like other values (two null values are the same)</p><p>Null values are ignored in aggregate functions</p><h2 id="database-modifications-12022">Database Modifications 1:20:22</h2><p>A database may be modified by using one of the following operations</p><ul><li>insert</li><li>update</li><li>delete</li></ul><p>These operations are defined via the assignment operator</p><h3 id="insert-12128">Insert 1:21:28</h3><p><em>r ← r</em> ∪ <em>E</em></p><p>To insert new data into a relation we can</p><ul><li>explicitly specify the tuples to be inserted</li><li>write a query and insert the result tuple set</li></ul><h4 id="example-16">Example</h4><p><em>cd</em> ← <em>cd</em> ∪ {(3, "Chromatic", 3012, 16.50, 1994)}</p><p><img src="/images/DB/0924290.png" /></p><h3 id="update-12209">Update 1:22:09</h3><p><em>r</em> ← π<sub>F1,F2,...,Fn</sub>(<em>r</em>)</p><p>Update specific values in a tuple <em>r</em></p><p><em>F<sub>i</sub></em> is either the old value of <em>r</em> or a new value if the attribute has to be updated</p><h4 id="example-17">Example</h4><p><em>"Increase the price of all CDs by 10%."</em></p><p><em>cd</em> ← π<sub>cdID, name, duration, price · 1.1, year</sub> (<em>cd</em>)</p><p><img src="/images/DB/0924299.png" /></p><h3 id="delete-12323">Delete 1:23:23</h3><p><em>r ← r - E</em></p><p>A delete is expressed similar to a query except that the result is removed from the database</p><p>Cannot remove single attributes</p><h4 id="example-18">Example</h4><p><em>"Remove the CD with the name 'Carcassonne' from the database."</em></p><p><em>cd</em> ← <em>cd</em> - σ<sub>name="Carcassonne"</sub> (<em>cd</em>)</p><p><img src="/images/DB/0924298.png" /></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Databases </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Input/Output</title>
      <link href="2021/02/19/2021-02-19-InputOutput---OS-basis/"/>
      <url>2021/02/19/2021-02-19-InputOutput---OS-basis/</url>
      
        <content type="html"><![CDATA[<h1 id="basis-of-os---inputoutput">Basis of OS - Input/Output</h1><p><a href="https://vub-my.sharepoint.com/personal/bruno_da_silva_vub_be/_layouts/15/onedrive.aspx?originalPath=aHR0cHM6Ly92dWItbXkuc2hhcmVwb2ludC5jb20vOmY6L2cvcGVyc29uYWwvYnJ1bm9fZGFfc2lsdmFfdnViX2JlL0V1ZWdTdWlYa3JCSWhnNXhVMFgzZ2s4QjhSNlFQYkRFbVZLMFNCUmlIQXVTWVE%5FcnRpbWU9aFliRXdZM1MyRWc&amp;id=%2Fpersonal%2Fbruno%5Fda%5Fsilva%5Fvub%5Fbe%2FDocuments%2FCOURSES%2FOSSEC%2020%20%2D%2021%20Semester%202%2FRecordings%2F%5BOSSEC%5D%20%2D%20operating%20systems%20and%20security%20%2D%20lecture%202%2Emp4&amp;parent=%2Fpersonal%2Fbruno%5Fda%5Fsilva%5Fvub%5Fbe%2FDocuments%2FCOURSES%2FOSSEC%2020%20%2D%2021%20Semester%202%2FRecordings">Video 57:51 ~ 1:54:06</a></p><h2 id="principles-of-io-hardware-5933">Principles of I/O hardware 59:33</h2><h3 id="io-devices">IO devices</h3><p>Different people look at I/O hardware in different ways:</p><ul><li>Electrical engineers look at it in terms of chips, wires, power supplies, motors, and all the other physical components that comprise the hardware.</li><li>Programmers look at the interface presented to the software.</li></ul><p>I/O devices can be divided into two categories:</p><ul><li>block devices</li><li>character devices.</li></ul><p>This classification scheme is not perfect because some devices do not fit in, but the model of block and character devices is general enough that it can be used as a basis.</p><figure><img src="/images/ADVMB/0823180.png" alt="" /><figcaption>Some typical device, network, and data base rates 1:01:13</figcaption></figure><h3 id="device-controllers-10214">Device controllers 1:02:14</h3><p>I/O devices have components:</p><ul><li>mechanical component (the device itself)</li><li>electronic component (device controller)</li></ul><p>The electronic component is the <strong>device controller</strong></p><ul><li>may be able to handle multiple devices</li></ul><p>Controller's tasks:</p><ul><li>convert serial/parallel bit stream to block of bytes</li><li>perform error correction as necessary</li><li>make available to main memory</li></ul><p>I/O Communication:</p><ul><li>Memory-Mapped I/O</li><li>Direct Memory Accesses</li><li>Interruptions</li></ul><h2 id="memory-mapped-io-10341">Memory-mapped I/O 1:03:41</h2><p>How the CPU communicates with the control registers and also with the device data buffers?</p><ol type="1"><li>Separate I/O and memory space (Standard I/O or I/O-mapped I/O)</li><li>Memory-mapped I/O</li><li>Hybrid</li></ol><p><img src="/images/OP/0823181.png" /></p><figure><img src="/images/OP/0823182.png" alt="" /><figcaption>Memory-mapped I/O VS. Standard I/O 1:06:06 - 1:07:55</figcaption></figure><h3 id="x86">x86</h3><ol type="1"><li>A single-bus architecture (old architectures)</li><li>A dual-bus memory architecture (current architectures)</li></ol><p><img src="/images/OP/0823183.png" /></p><h2 id="direct-memory-access-dma-10945">Direct Memory Access (DMA) 1:09:45</h2><figure><img src="/images/OP/0823184.png" alt="" /><figcaption>Operation of a DMA transfer</figcaption></figure><h3 id="dma-features-11425">DMA Features 1:14:25</h3><p>DMA controllers vary considerably in their sophistication.</p><p>More complex DMA controllers can be programmed to <u>handle <strong>multiple</strong> transfers</u> at the same time.</p><p>Many buses can operate in two modes:</p><ul><li>word-at-a-time (former) mode =&gt; <strong>cycle stealing</strong></li><li>block mode =&gt; burst mode</li></ul><p>Not all computers (or embedded systems) use DMA.</p><h2 id="interrupt-driven-io-using-vectored-interrupt-11649">Interrupt-driven I/O using vectored interrupt 1:16:49</h2><h3 id="without-interrupt-controller">Without interrupt controller</h3><p>When an interruption happens, the processor suspends current program, jumps to an <strong>Interrupt Service Routine</strong>, or <strong>ISR</strong></p><p>What is the address (interrupt address vector) of the ISR?</p><p>Vectored interrupt</p><ul><li>Peripheral must provide the address</li><li>Common when microprocessor has multiple peripherals connected by a system bus</li></ul><figure><img src="/images/OP/0823185.png" alt="" /><figcaption>1:18:50</figcaption></figure><p><img src="/images/OP/0823186.png" /></p><p><img src="/images/OP/0823187.png" /></p><p><img src="/images/OP/0823188.png" /></p><p><img src="/images/OP/0828189.png" /></p><p><img src="/images/OP/0828180.png" /></p><p><img src="/images/OP/0823180.png" /></p><h3 id="with-an-interrupt-controller-12120">With an interrupt controller 1:21:20</h3><p>Connections between devices and interrupt controller actually use <strong>interrupt lines</strong> on the bus rather than dedicated wires</p><p><img src="/images/OP/0823189.png" /></p><h2 id="principles-of-io-hardware-12246">Principles of I/O hardware 1:22:46</h2><h3 id="goals-of-io-software">Goals of I/O software</h3><p><strong>Device independence</strong></p><ul><li>programs can access any I/O device</li><li>without specifying device in advance<ul><li>(floppy, hard drive, or CD-ROM)</li></ul></li></ul><p><strong>Uniform naming</strong></p><ul><li>name of a file or device a string or an integer</li><li>not depending on which machine</li></ul><p><strong>Error handling</strong></p><ul><li>handle as close to the hardware as possible</li></ul><p><strong>Synchronous vs. asynchronous transfers.</strong></p><ul><li>Asynchronous (interrupt-driven): CPU starts, but continues processing until the interruption occurs<ul><li>Easier</li><li>High-performance applications</li></ul></li><li>Synchronous (blocking)</li></ul><p><strong>Buffering</strong></p><ul><li>Decouple data rates</li></ul><p><strong>Sharable vs. dedicated devices</strong></p><p>There are three fundamentally different ways that I/O can be performed from the software perspective:</p><ul><li>Programmed I/O (simplest)</li><li>Interrupt-driven I/O</li><li>I/O using DMA</li></ul><h4 id="programmed-io-12626">Programmed I/O 1:26:26</h4><figure><img src="/images/OP/0828181.png" alt="" /><figcaption>Steps in printing a string</figcaption></figure><h4 id="interrupt-driven-io-12843">Interrupt-driven I/O 1:28:43</h4><p>Interrupts allow CPU to do something else while waiting for the I/O device.</p><p><img src="/images/OP/0828182.png" /></p><p>Writing a string to the printer using interrupt-driven I/O.</p><ol type="1"><li>Code executed at the time the print system call is made.</li><li>Interrupt service procedure for the printer</li></ol><h4 id="io-using-dma-12932">I/O using DMA 1:29:32</h4><p>An obvious disadvantage of interrupt-driven I/O is that an interrupt occurs on every character.</p><p>Interrupts take time, so this scheme wastes a certain amount of CPU time.</p><p>DMA controller feed the characters to the printer one at time, without the CPU being bothered.</p><p><img src="/images/OP/0828283.png" /></p><p>Printing a string using DMA.</p><ol type="1"><li>Code executed when the print system call is made.</li><li>Interrupt-service procedure.</li></ol><h2 id="io-software-layers-13038">I/O software layers 1:30:38</h2><p>I/O software is typically organized in four layers</p><ol type="1"><li>Interrupt Handlers</li><li>Device drivers</li><li>Device-independent operating system software</li><li>User-level I/O software</li></ol><figure><img src="/images/OP/0828183.png" alt="" /><figcaption>Layers of the I/O Software System</figcaption></figure><h3 id="interrupt-handlers-13116">Interrupt handlers 1:31:16</h3><p>Interrupt handlers are best hidden</p><ul><li>have driver starting an I/O operation block until interrupt notifies of completion</li></ul><p>Interrupt procedure does its task</p><ul><li>then unblocks driver that started it</li></ul><p>Steps must be performed in software after interrupt completed</p><p><img src="/images/OP/0828184.png" /></p><h3 id="device-drivers-13318">Device drivers 1:33:18</h3><p>Logical position of device drivers is shown here</p><p>Communications between drivers and device controllers goes over the bus</p><p><img src="/images/OP/0828185.png" /></p><ul><li>Operating systems define a standard interface</li><li>Different systems handle loading drivers in different ways.</li><li>A device driver has several functions.<ul><li>Communicate with the device-independent software</li><li>Initialize the device</li><li>Manage its power requirements</li><li>Log events</li></ul></li><li>Device driver functionality<ol type="1"><li>A typical driver starts out by checking the input parameters to see if they are valid.</li><li>The driver may check if the device is currently in use.</li><li>Controlling the device means issuing a sequence of commands to it.</li><li>After the commands have been issued, one of two situations will apply.<ol type="1"><li>the device driver must wait until the controller does some work for it</li><li>the operation finishes without delay, so the driver need not block</li></ol></li><li>After the operation has been completed, the driver must check for errors</li><li>It returns some status information for error reporting back to its caller.</li><li>Finally, driver executes the request or waits for the next one</li></ol></li></ul><h3 id="device-independent-io-software-13758">Device-Independent I/O software 1:37:58</h3><p>Although some of the I/O software is device specific, other parts of it are device independent.</p><p>The basic function of the device-independent software is to perform the I/O functions that are common to all devices and to provide a uniform interface to the user-level software.</p><p>Functions of the device-independent I/O software</p><p><img src="/images/OP/0828186.png" /></p><h4 id="uniform-interfacing-13841">Uniform interfacing 1:38:41</h4><p>A major issue in an operating system is how to make all I/O devices and drivers look similar.</p><p>One aspect of this issue is the interface between the device drivers and the rest of the operating system.</p><p><img src="/images/OP/0828187.png" /></p><ol type="1"><li>Without a standard driver interface</li><li>With a standard driver interface</li></ol><p><strong>Uniform interfacing works as follows</strong>:</p><ul><li><strong>Functions</strong>: For each class of devices the operating system defines a set of functions that the driver must supply.</li><li><strong>Naming</strong>: The device-independent software takes care of mapping symbolic device names onto the proper driver.<ul><li>For example, in UNIX a device name, such as /dev/disk0</li></ul></li><li><strong>Protection</strong>: The system administrator can then set the proper permissions for each device.</li></ul><p><img src="/images/OP/0828188.png" /></p><h4 id="buffering-14235">Buffering 1:42:35</h4><ol type="1"><li>Unbuffered input</li><li>Buffering in user space</li><li>Buffering in the kernel followed by copying to user space</li><li>Double buffering in the kernel</li></ol><p><img src="/images/OP/0828280.png" /></p><p>Networking may involve many copies</p><p><img src="/images/OP/0828281.png" /></p><h4 id="user-space-io-software-14655">User-space I/O software 1:46:55</h4><p>Layers of the I/O system and the main functions of each layer</p><p><img src="/images/OP/0828282.png" /></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Operating Systems and Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Exercise 1</title>
      <link href="2021/02/18/2021-02-18-Exercise-1---Propositional-Calculus-and-First/"/>
      <url>2021/02/18/2021-02-18-Exercise-1---Propositional-Calculus-and-First/</url>
      
        <content type="html"><![CDATA[<h1 id="exercises-1---propositional-calculus-and-first-order-predicate-calculus">Exercises 1 - Propositional Calculus and First Order Predicate Calculus</h1><p><a href="https://vub-my.sharepoint.com/personal/sarah_galal_mohamed_ali_abdraboh_vub_be/Documents/Opnamen/WPO%20Techniques%20of%20AI-20210215_10145%20PM-Meeting%20Recording.mp4">Video</a></p><p><a href="https://yintelligence.tech/2021/02/17/2021-02-17-Knowledge-Representation-and-Reasoning/">Background</a></p><h5 id="use-truth-tables-to-show-that-the-following-equivalences-hold">1. Use truth tables to show that the following equivalences hold:</h5><ol type="1"><li>P ∧ (Q ∨ R) ≡ (P ∧ Q) ∨ (P ∧ R)</li><li>P ∨ (Q ∧ R) ≡ (P ∨ Q) ∧ (P ∨ R)</li><li>¬(P ∧ Q) ≡ ¬P ∨ ¬Q</li><li>¬(P ∨ Q) ≡ ¬P ∧ ¬Q</li><li>P ⇒ Q ≡ ¬P ∨ Q</li></ol><p><strong>Solution</strong>: 58:38 ~ 1:03:23</p><p>Truth tables specify the truth value of a complex sentence for each possible assignment of the truth values of its components. A column in the table represents a Boolean function corresponding to the complex sentence or logical expression.</p><ol type="1"><li><table><thead><tr class="header"><th style="text-align: center;">P</th><th style="text-align: center;">Q</th><th style="text-align: center;">R</th><th style="text-align: center;">(Q ∨ R)</th><th style="text-align: center;">(P ∧ Q)</th><th style="text-align: center;">(P ∧ R)</th><th style="text-align: center;">P ∧ (Q ∨ R)</th><th style="text-align: center;">(P ∧ Q) ∨ (P ∧ R)</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td></tr><tr class="even"><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td></tr><tr class="odd"><td style="text-align: center;">0</td><td style="text-align: center;">1</td><td style="text-align: center;">0</td><td style="text-align: center;">1</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td></tr><tr class="even"><td style="text-align: center;">0</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td></tr><tr class="odd"><td style="text-align: center;">1</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td></tr><tr class="even"><td style="text-align: center;">1</td><td style="text-align: center;">0</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">0</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td></tr><tr class="odd"><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">0</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">0</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td></tr><tr class="even"><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td></tr></tbody></table></li><li><table><thead><tr class="header"><th style="text-align: center;">P</th><th style="text-align: center;">Q</th><th style="text-align: center;">R</th><th style="text-align: center;">(Q ∧ R)</th><th style="text-align: center;">(P ∨ Q)</th><th style="text-align: center;">(P ∨ R)</th><th style="text-align: center;">P ∨ (Q ∧ R)</th><th style="text-align: center;">(P ∨ Q) ∧ (P ∨ R)</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td></tr><tr class="even"><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">1</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">1</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td></tr><tr class="odd"><td style="text-align: center;">0</td><td style="text-align: center;">1</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">1</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td></tr><tr class="even"><td style="text-align: center;">0</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td></tr><tr class="odd"><td style="text-align: center;">1</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td></tr><tr class="even"><td style="text-align: center;">1</td><td style="text-align: center;">0</td><td style="text-align: center;">1</td><td style="text-align: center;">0</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td></tr><tr class="odd"><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td></tr><tr class="even"><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td></tr></tbody></table></li><li><table><thead><tr class="header"><th style="text-align: center;">P</th><th style="text-align: center;">Q</th><th style="text-align: center;">R</th><th style="text-align: center;">(Q ∨ R)</th><th style="text-align: center;">(P ∧ Q)</th><th style="text-align: center;">(P ∧ R)</th><th style="text-align: center;">P ∧ (Q ∨ R)</th><th style="text-align: center;">(P ∧ Q) ∨ (P ∧ R)</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td></tr><tr class="even"><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td></tr><tr class="odd"><td style="text-align: center;">0</td><td style="text-align: center;">1</td><td style="text-align: center;">0</td><td style="text-align: center;">1</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td></tr><tr class="even"><td style="text-align: center;">0</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td></tr><tr class="odd"><td style="text-align: center;">1</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td></tr><tr class="even"><td style="text-align: center;">1</td><td style="text-align: center;">0</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">0</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td></tr><tr class="odd"><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">0</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">0</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td></tr><tr class="even"><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td></tr></tbody></table></li><li><table><thead><tr class="header"><th style="text-align: center;">P</th><th style="text-align: center;">Q</th><th style="text-align: center;">(P ∧ Q)</th><th style="text-align: center;">¬P</th><th style="text-align: center;">¬Q</th><th style="text-align: center;">¬(P ∧ Q)</th><th>¬P ∨ ¬Q</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td>1</td></tr><tr class="even"><td style="text-align: center;">0</td><td style="text-align: center;">1</td><td style="text-align: center;">0</td><td style="text-align: center;">1</td><td style="text-align: center;">0</td><td style="text-align: center;">1</td><td>1</td></tr><tr class="odd"><td style="text-align: center;">1</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td>1</td></tr><tr class="even"><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td>0</td></tr></tbody></table></li><li><table><thead><tr class="header"><th style="text-align: center;">P</th><th style="text-align: center;">Q</th><th style="text-align: center;">P ⇒ Q</th><th style="text-align: center;">¬P</th><th style="text-align: center;">¬P ∨ Q</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td></tr><tr class="even"><td style="text-align: center;">0</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td></tr><tr class="odd"><td style="text-align: center;">1</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td></tr><tr class="even"><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">0</td><td style="text-align: center;">1</td></tr></tbody></table></li></ol><h5 id="formulate-the-following-expression-as-propositional-sentences">2. Formulate the following expression as propositional sentences:</h5><ol type="1"><li>If the unicorn is magical, then it is immortal.</li><li>If the unicorn is not magical, then it is a mortal mammal.</li><li>If the unicorn is either immortal or a mammal, then it is horned.</li></ol><p>Using truth tables, can you prove whether the unicorn is magical? Immortal? Horned?</p><p><strong>Solution</strong>: 1:28:54 - 1:34:36</p><p>We will use G for magical, O for mortal, M for mammal and H for Horned.</p><ol type="1"><li>G ⇒ ¬O</li><li>¬G ⇒ (O ∧ M)</li><li>(¬O ∨ M) ⇒ H</li></ol><p><img src="/images/AI/ex22.png" /></p><p>Look for the rows where all premises hold (grey rows). Then look at the values of the propositions. When all premises hold, only proposition H is always true. Then we can prove that the Unicorn is horned, but not whether it is magical, mortal or a mammal.</p><p><a href="https://vub-my.sharepoint.com/personal/isel_del_carmen_grau_garcia_vub_be/_layouts/15/onedrive.aspx?id=%2Fpersonal%2Fisel%5Fdel%5Fcarmen%5Fgrau%5Fgarcia%5Fvub%5Fbe%2FDocuments%2FOpnamen%2FWPO%20Techniques%20of%20AI%2D20210222%5F135842%2DMeeting%20Recording%2Emp4&amp;parent=%2Fpersonal%2Fisel%5Fdel%5Fcarmen%5Fgrau%5Fgarcia%5Fvub%5Fbe%2FDocuments%2FOpnamen&amp;originalPath=aHR0cHM6Ly92dWItbXkuc2hhcmVwb2ludC5jb20vOnY6L2cvcGVyc29uYWwvaXNlbF9kZWxfY2FybWVuX2dyYXVfZ2FyY2lhX3Z1Yl9iZS9FUlgzRmVqeVExaENuTUNPXzByblBGZ0JnQWxQVmxjc0NlaWh5RXhXbHJMLVBBP3J0aW1lPXZWQ0lYVDdZMkVn">Video 1:23:06</a></p><h5 id="formulate-the-following-expressions-as-propositional-sentences">3. Formulate the following expressions as propositional sentences:</h5><ol type="1"><li>Birds can fly.</li><li>Penguins are birds.</li><li>Penguins cannot fly</li></ol><p>Does the set of those three premises hold when all propositions are true? Prove it with truth tables.</p><p><strong>Solution</strong>:</p><ol type="1"><li>B ⇒ F</li><li>P ⇒ B</li><li>P ⇒ ¬F</li></ol><table><thead><tr class="header"><th style="text-align: center;">P</th><th style="text-align: center;">B</th><th style="text-align: center;">F</th><th style="text-align: center;">B ⇒ F</th><th style="text-align: center;">P ⇒ B</th><th style="text-align: center;">P ⇒ ¬F</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td></tr><tr class="even"><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td></tr><tr class="odd"><td style="text-align: center;">0</td><td style="text-align: center;">1</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td></tr><tr class="even"><td style="text-align: center;">0</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td></tr><tr class="odd"><td style="text-align: center;">1</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">1</td><td style="text-align: center;">0</td><td style="text-align: center;">1</td></tr><tr class="even"><td style="text-align: center;">1</td><td style="text-align: center;">0</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td></tr><tr class="odd"><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td></tr><tr class="even"><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">0</td></tr></tbody></table><p>It does not hold. When all propositions are true, not all premises are true. In addition, if we build a true table for the expression P ∧ B ∧ F ∧ (B ⇒ F)∧(P ⇒ B)∧(P ⇒ ¬F) it will lead to a logical contradiction (all values are false).</p><p>This set is inconsistent since the first sentence “birds can fly” is not always true, only most of the time. That is why formal logic is not always a good tool to model common sense reasoning. Extensions of logic allow automated reasoning in the presence of exceptions.</p><h5 id="for-each-of-the-following-sentences-answer-the-following-question.-how-many-models-for-the-propositions-a-b-and-c-satisfy-the-sentence-remember-that-a-model-is-a-truefalse-assignment-for-all-available-propositions">4. For each of the following sentences, answer the following question. How many models for the propositions A, B and C satisfy the sentence? Remember that a model is a True/False assignment for all available propositions</h5><ol type="1"><li>(A ∧ B) ∨ (B ∧ C)</li><li>A ∨ B</li><li>(A ⇔ B) ⇔ C</li></ol><p><strong>Solution</strong>: ~ 1:41:50</p><h5 id="for-each-of-the-following-sentences-decide-whether-the-sentence-is-valid-satisfiable-or-unsatisfiable.-verify-your-decisions-using-truth-tables-or-the-equivalence-rules.">5. For each of the following sentences, decide whether the sentence is valid, satisfiable, or unsatisfiable. Verify your decisions using truth tables or the equivalence rules.</h5><ol type="1"><li>Smoke ⇒ Smoke</li><li>Smoke ⇒ Fire</li><li>(Smoke ⇒ Fire) ⇒ (¬Smoke ⇒ ¬Fire)</li><li>Smoke ∨ Fire ∨ ¬Fire</li><li>((Smoke ∧ Heat) ⇒ Fire) ⇔ ((Smoke ⇒ Fire) ∨ (Heat ⇒ Fire))</li><li>(Smoke ⇒ Fire) ⇒ ((Smoke ∧ Heat) ⇒ Fire)</li><li>Big ∨ Dumb ∨ (Big ⇒ Dumb)</li><li>(Big ∧ Dumb) ∨ ¬Dumb</li></ol><figure><img src="/images/AI/QSSS.png" alt="" /><figcaption>Equivalence rules</figcaption></figure><p><strong>Solution</strong>: 1:42:52 ~</p><ol type="1"><li>valid</li><li>satisfiable</li><li>satisfiable</li><li>valid</li><li>valid</li><li>valid</li><li>valid</li><li>satisfiable</li></ol><h5 id="formulate-each-of-the-following-proverbs-as-a-first-order-sentence">6. Formulate each of the following proverbs as a first order sentence:</h5><ol type="1"><li>All roads lead to Rome</li><li>All that glitters is not gold</li><li>A rolling stone gathers no moss</li><li>The enemy of my enemy is my friend</li><li>A dog is a man’s best friend</li><li>No man can serve two masters</li></ol><p><strong>Solution</strong>: 1:54:43 - 2:05:07</p><ol type="1"><li>∀x, Road(x) ⇒ GoToRome(x)</li><li>¬(∀x, Glitters(x) ⇒ Gold(x))</li><li>∀x, Stone(x) ∧ Roll(x) ⇒ ¬Moss(x)</li><li>∀x, y, Enemy(Me, x) ∧ Enemy(x, y) ⇒ Friend(Me, y)</li><li>∀x, y, Man(x) ∧ BestFriend(x, y) ⇒ Dog(y)</li><li>∀x, y, z, Serve(x, y) ∧ Serve(x, z) ⇒ y = z</li></ol><p>Note:</p><p>The sentences 2) and 3) share the same syntax in English but the logical meaning is completely different.</p><p>The hypothesis that the masters are different is usually implicit in common language, but variables can take any value.</p>]]></content>
      
      
      <categories>
          
          <category> Exercises </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Techniques of Artificial Intelligence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Some relevant molecular biology</title>
      <link href="2021/02/18/2021-02-18-Some-relevant-molecular-biology/"/>
      <url>2021/02/18/2021-02-18-Some-relevant-molecular-biology/</url>
      
        <content type="html"><![CDATA[<h1 id="some-relevant-molecular-biology">Some relevant molecular biology</h1><p><a href="http://homepages.vub.ac.be/~wvranken/algorithmCBBioinfo.html">Website</a></p><p><a href="https://owncloud.ulb.ac.be/index.php/s/75k0qKi3NFqam0E?path=%2FlectureRecordings">2021-FEB-11 Video 56:35 ~ end</a></p><h2 id="the-cell">The cell</h2><ul><li>The fundamental unit of life</li><li>All cells have very similar internal mechanisms</li><li>Cells reproduce themselves passing along all the necessary information to reproduce all functionality (<strong>heredity</strong>)</li><li>Cells are a bit like computers since they have to respond to all kinds of information: food, threats, ...</li></ul><p><img src="/images/ADVMB/cell.png" /></p><p>There are two big classes: <strong>Procaryotes</strong> and <strong>eukaryotes</strong></p><p><img src="/images/ADVMB/172443.png" /></p><p>All information concerning the functional and structural elements of the cell is encoded in the <strong>DNA</strong> (Deoxyribonucleic Acid)</p><ul><li>Information from one kind of cells can be treated by other kinds of cells</li><li>DNA is part of a <strong>chromosome</strong></li></ul><p>DNA contains information to produce thousands of proteins:</p><ul><li>A <strong>gene</strong> is a part of a DNA string that encodes a particular protein</li><li>The <strong>genome</strong> is the collection of all DNA molecules</li></ul><p><img src="/images/ADVMB/172851.png" /></p><p>A human has <strong>46 DNA molecules</strong> in every cell organised in chromosomes.</p><p>In procaryotes, like bacteria, there is often one circular DNA molecule</p><p><img src="/images/ADVMB/172852.png" /></p><figure><img src="/images/ADVMB/172853.png" alt="" /><figcaption>The size of the genome for different species</figcaption></figure><h2 id="the-structure-of-dna-and-rna-10600">The structure of DNA and RNA 1:06:00</h2><p>DNA and RNA are linear structures that consist of 4 types of nucleotides.</p><p><img src="/images/ADVMB/172850.png" /></p><p>A nucleotide is constructed of 3 parts (Fig. A) : a <strong>base</strong> , a <strong>sugar</strong> and a <strong>phosphate group</strong></p><p>The difference between the four types is in the <strong>base part</strong>, which can be either A,T,G or C.</p><figure><img src="/images/ADVMB/172854.png" alt="" /><figcaption>Fig. A</figcaption></figure><p>DNA molecules consist of millions of these nucleotides</p><p>The beginning of the DNA is annotated with <strong>5</strong>’ and the end with <strong>3</strong>’</p><p><strong>a strand</strong> = a sequence of nucleotides</p><figure><img src="/images/ADVMB/dnastrand.png" alt="" /><figcaption>DNA Strand</figcaption></figure><p>DNA consists of <strong>two</strong> complementary strands</p><p><img src="/images/ADVMB/172855.png" /></p><p>RNA consist of a <strong>single</strong> strand</p><p>These molecules also assume a 3D form, where complementary parts of the RNA strand can interact through hydrogen bonds</p><p>The base-pairing is now between: <strong>A-U</strong> et <strong>C-G</strong> (<u><strong>Uracil (U) replaces Thymine (T) in RNA !!</strong></u>)</p><p><img src="/images/ADVMB/172856.png" /></p><h3 id="the-central-dogma-of-molecular-biology-11842">The central dogma of molecular biology 1:18:42</h3><p><strong>The genes are translated into proteins in two steps</strong></p><ul><li>step 1 : <strong>transcription</strong><ul><li>Parts of the DNA are copied into shorter RNA strands called messenger RNA (mRNA)</li></ul></li><li>step 2 : <strong>translation</strong><ul><li>The mRNA is translated by the RNA-polymerase into a sequence of amino acids = proteins</li></ul></li></ul><p><img src="/images/ADVMB/172857.png" /></p><h3 id="dna-replication-11931">DNA replication 1:19:31</h3><p>During cell division the two DNA strands are separated</p><p>Both strands acts as templates on which the complementary strands are formed</p><p><img src="/images/ADVMB/172858.png" /></p><h2 id="rnas-12538">RNAs 1:25:38</h2><p>Messenger RNA (mRNA)</p><p>Transfer RNA (tRNA)</p><p>Ribosomal RNA (rRNA)</p><p><img src="/images/ADVMB/172858.png" /></p><h3 id="transcription-12708">Transcription 1:27:08</h3><p>mRNA is a strand that is complementary to the noncoding strand of the DNA</p><p>The number of mRNA corresponds to the gene expression level in the cell</p><p><img src="/images/ADVMB/182850.png" /></p><figure><img src="/images/ADVMB/182851.png" alt="" /><figcaption>DNA structure</figcaption></figure><figure><img src="/images/ADVMB/182852.png" alt="" /><figcaption>DNA structure- epigenetics</figcaption></figure><figure><img src="/images/ADVMB/182853.png" alt="" /><figcaption>Gene expression regulation</figcaption></figure><h3 id="translation-13254">Translation 1:32:54</h3><p>Translation from mRNA to proteins</p><ul><li>uses transfer RNA (tRNA) to perform the translation</li></ul><p>the mRNA is read in blocks of 3 nucleic acids (=codon)</p><ul><li>4<sup>3</sup> possibilities = 64 codons</li><li>BUT only 20 amino acids</li></ul><p>The translation is done by the <strong>ribosome</strong></p><p><img src="/images/ADVMB/182854.png" /></p><ul><li>The ribosome starts at the 5’ and moves into the direction of the 3’</li><li>It catches tRNA molecules which can associate with specific codon combinations in the mRNA</li><li>The amino acids linked to the tRNA, become associated through a peptide bond with the already existing sequence</li></ul><p>There is no superposition with the codon</p><p><img src="/images/ADVMB/182855.png" /></p><figure><img src="/images/ADVMB/182856.png" alt="" /><figcaption>The genetic code</figcaption></figure><h2 id="evolution-14016">Evolution 1:40:16</h2><p>The analysis of the different genomes provides information on the evolutionary relationships between the different species</p><figure><img src="/images/ADVMB/182857.png" alt="" /><figcaption>All cells are derived from a common ancestor</figcaption></figure><p><strong>Heredity</strong> = transfer of genetic information from the parent to the offspring</p><p>When a cell divides, the DNA is copied and divided over the two new cells.</p><p>Sometimes this process produces errors (<strong>mutations</strong>) that can</p><ul><li><strong>Improve</strong> the functionality of the cell = selective advantage</li><li><strong>Destroy</strong> the functionality of the cell = cell dies</li><li><strong>Does not change</strong> the functionality of the cell = selectively neutral</li></ul><p>Continuous trial and error allows cells and organisms to evolve</p><p>Certain DNA parts are more prone to evolutionary change than others</p><ul><li>e.g. the non-coding regions in DNA</li></ul><p>Yet regions important for proteins function need to be conserved</p><p><img src="/images/ADVMB/182858.png" /></p><p><strong>New genes are build out of old ones in 2 ways</strong></p><h3 id="duplication-and-divergence-14548"><strong>Duplication and divergence</strong> 1:45:48</h3><p><img src="/images/ADVMB/182859.png" /></p><h2 id="proteins-15654">Proteins 1:56:54</h2><p>The majority of objects inside a cell are proteins</p><p>Proteins are</p><ul><li>the elements that define the structure of a cell</li><li>The robots that perform almost every function inside the cell</li></ul><p>The human genome contains 30000 to 35000 proteins</p><h3 id="structural-levels-15719">Structural levels 1:57:19</h3><p><img src="/images/ADVMB/182869.png" /></p><h3 id="primary-structure-15816">Primary structure 1:58:16</h3><p><img src="/images/ADVMB/182868.png" /></p><p>Like DNA and RNA, proteins are sequences of highly modular building blocks = <strong>amino acids</strong></p><p><img src="/images/ADVMB/182867.png" /></p><h3 id="amino-acids-15906">Amino acids 1:59:06</h3><p>All amino acids (AA) are build out of 3 parts :</p><ul><li>the central Cα</li><li><strong>nitrogen group</strong></li><li><strong>sidechain group</strong></li></ul><p><img src="/images/ADVMB/182866.png" /></p><p>The AA are chained together by peptide bonds</p><p><img src="/images/ADVMB/182865.png" /></p><h3 id="folding-20112"><strong>Folding</strong> 2:01:12</h3><p>The possible conformations of the main chain (backbone) are limited</p><p><img src="/images/ADVMB/182864.png" /></p><p>The sequence of amino acids folds in the <u>lowest energy conformation</u></p><p><strong><u>BUT remember the structure is not static, it breathes !</u></strong></p><p>Binding to another protein or molecule may cause structural changes</p><p><img src="/images/ADVMB/182863.png" /></p><p>The folding of a proteins is orchestrated by three types of interactions between the AA</p><p><img src="/images/ADVMB/182862.png" /></p><h4 id="tertiary-structure-20620">Tertiary structure 2:06:20</h4><p><img src="/images/ADVMB/182861.png" /></p><p>The folded 3D structure is the tertiary structure of a protein</p><h4 id="secondary-structure-20647">Secondary structure 2:06:47</h4><p><img src="/images/ADVMB/182860.png" /></p><p>Analyzing the tertiary structure of proteins has resulted in the discovery of some geometric regularities</p><p>helices and strands in the structure are produced by hydrogen bonds between the NH and CO groups</p><p>Between 50% and 80% of the residues in a protein can be classified in terms of these regular structures</p><h3 id="α-helices-and-β-strands-20747">α helices and β strands 2:07:47</h3><p><img src="/images/ADVMB/183860.png" /></p><p><img src="/images/ADVMB/186131.png" /></p><p><img src="/images/ADVMB/183861.png" /></p><h3 id="protein-domains-21018">Protein domains 2:10:18</h3><p>Proteins can also consist of multiple globular</p><p>parts = <strong>domains</strong></p><p><img src="/images/ADVMB/183862.png" /></p><p>WW domains occur in many different proteins across life 2:11:25</p><p><img src="/images/ADVMB/183863.png" /></p><p>Alignment of WW domains from different proteins 2:13:23</p><p><img src="/images/ADVMB/183864.png" /></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computational Biology and Bioinformatics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Course Introduction</title>
      <link href="2021/02/18/2021-02-18-Course-Introduction/"/>
      <url>2021/02/18/2021-02-18-Course-Introduction/</url>
      
        <content type="html"><![CDATA[<h1 id="course-introduction">Course Introduction</h1><p><a href="https://caliweb.vub.be/?page=course-offer&amp;id=005472&amp;anchor=1&amp;target=pr&amp;year=2021&amp;language=en&amp;output=html">Website</a></p><p><a href="https://owncloud.ulb.ac.be/index.php/s/75k0qKi3NFqam0E?path=%2FlectureRecordings">2021-FEB-11 Video ~ 48:44</a></p><h2 id="bio-what-compu-who">Bio-what? Compu-who?</h2><p>Some definitions</p><p><strong>Bioinformatics</strong> is the research, development, or application of computational tools and approaches for expanding the use of biological, medical, behavioral or health <strong>data</strong>, including those to acquire, store, organize, archive, analyze, or visualize such data.</p><p><strong>Computational Biology</strong> is the development and application of data-analytical and theoretical methods, mathematical modeling and computational simulation techniques to the <strong>study of biological, behavioral, and social systems</strong>.</p><h2 id="course-goals">Course goals</h2><ul><li>Understanding the terminology of this field</li><li>Understanding the biological problems and the algorithms that have been build to solve them</li><li>Being able to explain and reproduce certain algorithms</li><li>Understanding the relation between the data you work with and the results you produce using algorithms</li><li>Understanding articles published in this field</li><li>Increase your interest in other scientific fields and interdisciplinary work</li></ul><h2 id="evaluation">Evaluation</h2><p>3 blocks, contributions:</p><ul><li>Training assignment, sequence alignment<ul><li>Assignment 1, structural bioinformatics, 25%</li><li>Assignment 2, -omics analysis, 25%</li></ul></li><li>Exam presentation, analysis of article, 50%</li></ul><h2 id="evaluation-criteria">Evaluation criteria</h2><ul><li>Quality of the presentation (slides, explanation, examples, clarity, language, ...)</li><li>Link to the course (wherever possible draw relationships with the knowledge you acquired during the course, ...)</li><li>Understanding (Algorithms, methodology, data, biological and medical relevance, ...)</li><li>Originality (extensions by looking up additional papers, critical analysis of the paper, going beyond the paper content, consider improvements, ...)</li></ul><h2 id="biology">Biology</h2><p>Where the telescope ends, the microscope begins. Which of the two has the grander view? (Victor Hugo)</p><p>There's millions and millions of unsolved problems. Biology is so digital, and incredibly complicated, but incredibly useful. Biology easily has 500 years of exciting problems to work on, it's at that level. (Don Knuth)</p><p>Mathematics is Biology’s Next Microscope, only better; Biology is Mathematics’ Next Physics, Only Better. (Joel Cohen)</p><h2 id="typical-bioinformatics-approach">Typical bioinformatics approach</h2><p><img src="/images/ADVMB/125400111.png" /></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computational Biology and Bioinformatics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Entity-Relationship Model</title>
      <link href="2021/02/17/2021-02-17-Exercise-1-Entity-Relationship-Model/"/>
      <url>2021/02/17/2021-02-17-Exercise-1-Entity-Relationship-Model/</url>
      
        <content type="html"><![CDATA[<h1 id="discussion-1-entity-relationship-model">Discussion 1: Entity-Relationship Model</h1><p><a href="https://recordings.reu1.blindsidenetworks.com/vub/01a66c972d350013d08ac8d542b099762219af07-1613134269159/capture/">Video</a></p><p><a href="https://yintelligence.tech/2021/02/12/Introduction-and-Conceptual-Modelling/">Background</a></p><h2 id="recap-003">Recap 0:03</h2><p><img src="/images/DB/191409.png" /></p><figure><img src="/images/DB/1914091.png" alt="" /><figcaption>Entity 2:24</figcaption></figure><figure><img src="/images/DB/1914095.png" alt="" /><figcaption>Attributes 3:06</figcaption></figure><figure><img src="/images/DB/1914093.png" alt="" /><figcaption>Multi-value Attributes 5:14</figcaption></figure><figure><img src="/images/DB/1914094.png" alt="" /><figcaption>Derived Attributes 9:52</figcaption></figure><figure><img src="/images/DB1914092.png" alt="" /><figcaption>Attributes - Primary Key 12:56</figcaption></figure><p>Book has one publisher, publisher can publish multiple books</p><figure><img src="/images/DB/1914096.png" alt="" /><figcaption>Relationships (Original ER) 14:24</figcaption></figure><p>Note: <strong><u>We do not use</u></strong> this notation</p><figure><img src="/images/DB/1914097.png" alt="" /><figcaption>Relationships (Martin Style) 21:52</figcaption></figure><h2 id="example-1-2420">Example 1 24:20</h2><p><img src="/images/DB/1914098.png" /></p><h2 id="example-2-3002">Example 2 30:02</h2><p><img src="/images/DB/1914099.png" /></p><h2 id="example-3-3727">Example 3 37:27</h2><p><img src="/images/DB/1914090.png" /></p><h2 id="twitter-description-4901">Twitter: Description 49:01</h2><p>Twitter is a platform where users can register with a unique username (their Twitter handle). When logged in, they can post messages called ’Tweets’ that are max 120 characters long and optionally can contain an image, video or poll. However, a tweet can only contain one interactive component (either an image, video or poll). These tweets are uniquely identified by a number and can contain likes. Any user can reply to tweets and even ’retweet’/repost the tweet on their own homepage. Users can choose to follow other users to get notified on their activity.</p><h3 id="step-1-find-the-obvious-entities-5119">Step 1: Find the obvious entities 51:19</h3><p><u>Those that you have no doubt about and are clearly identified in your description</u></p><p>Twitter is a platform where <strong>users</strong> can register with a unique username (their Twitter handle). When logged in, they can post messages called ’<strong>Tweets</strong>’ that are max 120 characters long and optionally can contain an image, video or poll. However, a tweet can only contain one <strong>interactive component</strong> (either an image, video or poll). These tweets are uniquely identified by a number and can contain likes. Any user can reply to tweets and even ’retweet’/repost the tweet on their own homepage. Users can choose to follow other users to get notified on their activity.</p><h3 id="step-2-find-the-obvious-relations-5357">Step 2: Find the obvious relations 53:57</h3><p>Twitter is a platform where users can register with a unique username (their Twitter handle). When logged in, they can <strong>post messages</strong> called ’Tweets’ that are max 120 characters long and optionally can <strong>contain</strong> an image, video or poll. However, a tweet can only contain one interactive component (either an image, video or poll). These tweets are uniquely identified by a number and can contain <strong>likes</strong>. Any user can <strong>reply</strong> to tweets and even ’<strong>retweet</strong>’/repost the tweet on their own homepage. Users can choose to <strong>follow</strong> other users to get notified on their activity.</p><h3 id="step-3-find-the-obvious-candidate-keys-5957">Step 3: Find the obvious candidate keys 59:57</h3><p>Twitter is a platform where users can register with a <strong>unique username</strong> (their Twitter handle). When logged in, they can post messages called ’ Tweets ’ that are max 120 characters long and optionally can contain an image, video or poll. However, a tweet can only contain one interactive component (either an image, video or poll). These tweets are <strong>uniquely identified by a number</strong> and can be liked by other users. Any user can reply to tweets and even ’ retweet ’/repost the tweet on their own homepage. Users can choose to follow other users to get notified on their activity.</p><h3 id="step-4-start-with-the-er-with-the-obvious-entities-and-relations-10230">Step 4: Start with the ER with the ’obvious’ entities and relations 1:02:30</h3><ul><li>Entities:<ul><li>Normal/strong entities</li><li>Weak entities</li></ul></li><li>Relations:<ul><li>Binary relations</li><li>n-ary relations</li><li>ISA relations</li></ul></li><li>Attributes:<ul><li>Normal attributes</li><li>Key attributes</li><li>Composite attributes</li><li>Multi value attributes</li><li>Derived attributes</li></ul></li></ul><figure><img src="/images/DB/1924090.png" alt="" /><figcaption>Twitter: ER 1:05:54</figcaption></figure><h3 id="step-5-add-less-obvious-entities-and-relations">Step 5: Add less obvious entities and relations</h3><p>Usually requires some creativity, this is the main reason why we ask you to add a description to your project so you can explain this!</p><h3 id="step-6-add-attributes-to-entities">Step 6: Add attributes to entities</h3><h2 id="er-diagram">ER Diagram</h2><p>In the following exercises, you will receive a description of a database or application.</p><p>Using this description, create an ER diagram that covers the requirements. You can make the ER diagrams on paper or use an online drawing tool such as https://draw.io.</p><h3 id="video-store-12622">Video Store 1:26:22</h3><p>The manager of a video store requires you to create a database to assist with the administration of the store. The data stored on movies includes: catalog-number, title, category, year of release and a daily rental fee. The store can have multiple copies of the same movie (e.g. on DVD or Blu-ray), each of which is uniquely identified by a copy-identification number. For each movie, it should be known how many copies are in stock as well as the status of each particular copy (available or not available). The catalog-number uniquely identifies a particular movie and is used by suppliers in the provisioning of additional copies.</p><p>The data stored on each member of the video store includes their membership number, date joined, name (first and last name), address, date of birth and telephone number. Each member may rent an unlimited number of video copies, each time via a contract. Each contract should have a unique identification number, the checkout-and return date, the number of days rented, the total rental fee and finally the rented copies should be stored for each contract.</p><p>Data on suppliers of movie copies should also be stored, such as the supplier number, name, address, fax-and telephone number as well as the supplied copies.</p><figure><img src="/images/DB/1924091.png" alt="" /><figcaption>1:30:27</figcaption></figure><h3 id="digi-bike">DIGI-BIKE</h3><p>A club of enthusiastic cycling amateurs, called DIGI-BIKE, has a small office to organize participation in cycling tours. They receive announcements of organized tours from different organisations. This means that each tour, identified by a meaningful (and unique) name, is known to happen on a particular date and time. They also keep the length of the tour and the participation fee.</p><p>Members indicate when they want to cycle by giving the office a date, the minimum and maximum number of kilometres and a maximum budget for the participation fee. Members have a name, email and an unique member number. It is also known whether they have paid their annual fee to the club.</p><p>The office tries to find a match between the wishes of a member and the tours offered by the different organizations. In the end, the office employees manually decide when a match is made between such a wish (a) tour(s). For each math, the office sends (and stores) an email to the member. The date of the email is also stored.</p><figure><img src="/images/DB/1924092.png" alt="" /><figcaption>Note: This solution assumes a member can only make one request per day (combination of the id of the member and date)</figcaption></figure>]]></content>
      
      
      <categories>
          
          <category> Discussions </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Databases </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Knowledge Representation and Reasoning</title>
      <link href="2021/02/17/2021-02-17-Knowledge-Representation-and-Reasoning/"/>
      <url>2021/02/17/2021-02-17-Knowledge-Representation-and-Reasoning/</url>
      
        <content type="html"><![CDATA[<h1 id="knowledge-representation-and-reasoning">Knowledge Representation and Reasoning</h1><p><a href="https://www.dropbox.com/s/laigef5adsn3ej4/Techniques%20of%20Artificial%20Intelligence%202021%20Topic%202%20Lecture%201.mov?dl=0">Video</a></p><h2 id="objectives">Objectives</h2><ul><li>Knowledge Representation in Logic<ul><li>The Propositional Calculus</li><li>The First Order Predicate Calculus</li></ul></li><li>Reasoning<ul><li>Inference Rules to Compute with Calculus Expressions</li></ul></li><li>Application</li></ul><h2 id="knowledge-engineering-055">Knowledge Engineering 0:55</h2><p>The role of the Knowledge Engineer is to:</p><ul><li>elicit or otherwise ascertain knowledge</li><li>represent it in the most appropriate way</li><li>use it to derive previously unknown facts<ul><li>follow a chain of reasoning from new data to a conclusion (e.g. medical diagnosis)</li><li>make explicit things that were previously implicit in a system that was too complex for a human to understand all at once</li></ul></li></ul><p>Examples about VUB site map</p><ul><li>Building-M-is-a-building</li><li>Building( M )</li><li>Grey( M )</li><li>Colour( M, Grey )</li></ul><p>Often, in one formalism or another, this will involve maintaining a database of facts that are known to be true and rules that can apply to them</p><figure><img src="/images/AI/164125.png" alt="" /><figcaption>3:24 - 4:30</figcaption></figure><p>Quite often, problem formulation in real-world situations is very difficult</p><ul><li>different experts have different opinions</li><li>the world is continuous and unpredictable</li><li>clients don’t really know what they want from you</li></ul><p>A common approach to understanding the issues involved in KE is to <u>use a highly simplified world, and then to generalise with experience</u></p><ul><li>a common simplification is the “blocks” world</li></ul><h3 id="example-the-blocks-world-535">Example: The Blocks World 5:35</h3><p>There is/are</p><ul><li>a table</li><li>some distinguishable blocks</li><li>a robot hand/arm</li></ul><p>Problems are specified in terms of</p><ul><li>actions by the arm</li><li>with respect to the world</li></ul><p>Predicates</p><ul><li>On, On-table</li><li>Clear</li><li>Empty</li></ul><p><img src="/images/AI/1641251.png" /></p><h2 id="knowledge-representation-and-inference-800">Knowledge Representation and Inference 8:00</h2><p><strong>KR</strong> should allow us, for a given world, to:</p><p><strong>Express facts or beliefs using a formal language</strong></p><ul><li>expressively and unambiguously</li></ul><p>The <strong>inference</strong> procedure should allow us to:</p><p><strong>Determine automatically what follows from these facts</strong></p><ul><li>correctly (sound) and completely (and tractably)</li></ul><p><img src="/images/AI/1641252.png" /></p><p><strong>Example:</strong></p><ul><li>Be able to express formally that:<ul><li>“The red block is above the blue block”</li><li>“The green block is above the red block”</li></ul></li><li>Be able to infer:<ul><li>“The green block is above the blue block”</li><li>“The blocks form a tower”</li></ul></li></ul><h3 id="example-957">Example 9:57</h3><p>Given</p><ul><li>If it is sunny today, then the sun shines on the screen</li><li>If the sun shines on the screen, then the blinds are drawn</li><li>The blinds are not down</li></ul><p>Find out</p><ul><li>Is it sunny today?</li></ul><p>Human reasoning:</p><p>Blinds up, so sun not shining on screen, so not sunny today</p><ul><li>We want a computer to do that, reliably and in general</li></ul><h2 id="components-of-a-logical-calculus-1105">Components of a logical calculus 11:05</h2><p>A <em>formal</em> language</p><ul><li>words and <em>syntactic</em> rules that tell us how to build up sentences<ul><li>so we can build up more complex statements from simple ones</li></ul></li><li><em>semantic</em> mappings that tell us what the words mean</li></ul><p>An <strong><em>inference</em></strong> procedure which allows us to compute which sentences are valid <strong><em>inferences</em></strong> from other sentences</p><p>Many different logical calculus here we study</p><ul><li>The Propositional Calculus</li><li>The First Order Predicate Calculus</li></ul><h3 id="the-propositional-calculus-1335">The Propositional Calculus 13:35</h3><p>Each symbol in the Propositional Calculus is</p><ul><li>a <strong><em>proposition</em></strong>: a basic, smallest unit of meaning in the calculus<ul><li>e.g. “it is raining”</li></ul></li><li>a <strong><em>connective</em></strong>: something combines propositions into more complex sentences</li></ul><p>Two reserved, special propositions</p><ul><li>True and False<ul><li>with the obvious meanings!</li></ul></li></ul><p>Other propositions usually <strong>begun</strong> by <strong>upper case letters</strong></p><ul><li>P, Q, Sunny, etc.</li></ul><p>Connectives use special symbols</p><ul><li>∧ (and) , ∨ (or) , ¬ (not), → (implies), ≡ (is equivalent to)</li></ul><h4 id="sentences-in-the-propositional-calculus-1646">Sentences in the propositional calculus 16:46</h4><p>The Sentence is the syntactic unit to which truth values can be attached</p><ul><li>Sentences are also called <em>Well-Formed Formulae (WFF)</em></li><li>Every propositional symbol is a sentence. E.g.: True, False, P</li><li>The negation of a sentence is a sentence. E.g.: ¬P, ¬ False.</li><li>The conjunction (and) of two sentences is a sentence. E.g.: P ∧ Q</li><li>The disjunction (or) of two sentences is a sentence. E.g.: P ∨ Q</li><li>The implication of one sentence by another is a sentence. E.g.: P → Q</li><li>The equivalence of two sentences is a sentence. E.g.: P ≡ R<ul><li>Note that equivalence can also be expressed as P → Q ∧ Q → P</li><li>≡ is therefore sometimes omitted from the propositional calculus</li></ul></li></ul><h4 id="semantics-meaning-in-pc-1833">Semantics (Meaning) in PC 18:33</h4><p>An interpretation of a set of sentences is the assignment of a truth value, either T or F, to each propositional symbol (and so to each sentence)</p><ul><li>The proposition True is always assigned truth value T</li><li>The proposition False is always assigned truth value F</li><li>The assignment of negation, ¬P, is F iff the assignment of P is T, and vice versa</li><li>The assignment of conjunction, P ∧ Q, is T iff the assignment of both P and Q is T; otherwise it is F</li><li>The assignment of disjunction, P ∨ Q, is F iff the assignment of both P and Q is F; otherwise it is T</li><li>The assignment of implication, P → Q, is F iff the assignment of P is T and the assignment of Q is F; otherwise it is T</li><li>The assignment of equivalence, P ≡ Q, is T iff the assignments of both P and Q is the same for all possible interpretations; otherwise it is F.</li></ul><h4 id="some-useful-laws-and-equivalences-2248">Some useful laws and equivalences 22:48</h4><ul><li>excluded middle: P ∨ ¬ P</li><li>¬ ¬ P ≡ P</li><li>contrapositive: P → Q ≡ ¬ Q → ¬ P</li><li>de Morgan’s laws<ul><li>¬ ( P ∨ Q ) ≡ ¬ P ∧ ¬ Q</li><li>¬ ( P ∧ Q ) ≡ ¬ P ∨ ¬ Q</li></ul></li><li>commutativity ‣ P ∨ Q ≡ Q ∨ P ‣ P ∧ Q ≡ Q ∧ P</li><li>associativity<ul><li>( P ∨ Q ) ∨ R ≡ P ∨ ( Q ∨ R )</li><li>( P ∧ Q ) ∧ R ≡ P ∧ ( Q ∧ R )</li></ul></li><li>distributivity<ul><li>P ∨ ( Q ∧ R ) ≡ ( P ∨ Q ) ∧ ( P ∨ R )</li><li>P ∧ ( Q ∨ R ) ≡ ( P ∧ Q ) ∨ ( P ∧ R )</li></ul></li><li>Note order of operator precedence<ul><li>¬ precedes ∧ precedes ∨</li><li>→ are ≡ are complicated: use brackets</li><li>Compare with arithmetic operators, –, x, +</li></ul></li></ul><h4 id="truth-tables-2524">Truth tables 25:24</h4><p>A truth table has all sentences along its top, usually in increasing order of syntactic complexity</p><ul><li>its columns are all the possible interpretations, one row each</li></ul><p><img src="/images/AI/1641253.png" /></p><p>We can prove things using truth tables</p><ul><li>¬P ∨ Q ≡ P → Q</li></ul><p><img src="/images/AI/1641254.png" /></p><h4 id="proofs-in-propositional-calculus-2755">Proofs in propositional calculus 27:55</h4><p>Problem Description</p><ul><li>If it is sunny today, then the sun shines on the screen.</li><li>If the sun shines on the screen, then the blinds are drawn.</li><li>The blinds are not drawn.</li><li>Is it sunny today?</li></ul><p>Propositions</p><ul><li>P: It is sunny today.</li><li>Q: The sun shines on the screen.</li><li>R: The blinds are down.</li></ul><p>Premises</p><ul><li>P→Q</li><li>Q→R</li><li>¬R</li></ul><p>Question: P? (Given Premises are true, is P true?)</p><h4 id="proof-using-a-truth-table-2931">Proof using a truth table 29:31</h4><figure><img src="/images/1641255.png" alt="" /><figcaption>When all the premises are true, P is false, so “it is not sunny”</figcaption></figure><figure><img src="/images/1641256.png" alt="" /><figcaption>When all the premises are true, P is false, so “it is not sunny”</figcaption></figure><h3 id="first-order-predicate-calculus">First Order Predicate Calculus</h3><p>The Propositional Calculus is not very expressive</p><ul><li>can’t make statements about all of a certain thing</li><li>or about things that don’t exist</li><li>or about whether things exist</li><li>and we can’t give propositions whole interpretation depends on which thing they apply to</li></ul><p>In the “blinds” example, we had to omit the day on which we checked the premises</p><p>How could we make statements to capture the idea that we’d do this procedure each day?</p><ul><li>If it is sunny on Monday ...</li><li>If it is sunny on Tuesday ... etc.</li></ul><p>The First Order Predicate Calculus (FOPC) is a conservative extension of the Propositional Calculus (PC)</p><ul><li>this means that it has all the properties and features of PC</li><li>and some extra ones<ul><li>objects: things which sentences are about, written like propositions</li><li>variables: usually written as lower case single letters, ranging over objects</li><li>predicates: propositions are now predicate symbols which can apply to variables and objects, written like propositions</li><li>arguments: the variables or objects to which predicates and functions apply</li><li>functions: mappings between objects objects</li><li>quantifiers: existential ∃ - “there exists”; universal ∀ - “for all”</li></ul></li></ul><p><strong>In PC, propositions were predicates that had no arguments</strong></p><h4 id="blinds-example-in-fopc">Blinds example in FOPC</h4><p>Problem description</p><ul><li>If it is sunny [on a particular day], then the sun shines on the PC screen [on that day].</li><li>If the sun shines on the PC screen [on a particular day], the blinds are down [on that day].</li><li>The blinds are not down [today].</li><li>Is it sunny [today]?</li></ul><p>Premises:</p><ul><li>∀d.Sunny (d)→Screen-shines(d)</li><li>∀d.Screen-shines(d)→Blinds-down(d)</li><li>¬Blinds-down(Thursday)</li></ul><p>Question: Sunny(Thursday)?</p><p>Note that there are various similar notations for quantifiers</p><h4 id="functions-in-fopc">Functions in FOPC</h4><p>A function maps its arguments to a fixed single value</p><ul><li>note that functions do not have truth values: they map between objects</li><li>functions are denoted in the same way as predicates<ul><li>you can tell which is which from where they appear: Predicates are outermost</li></ul></li><li>functions have an arity: the number of arguments they take</li></ul><p>A person’s mother is that person’s parent</p><ul><li>∀x.Person( x ) → Parent( Mother-of( x ), x )<ul><li>Note that a person can only have one mother, so using a function like this is OK</li></ul></li></ul><p>There is at least one person in this class who thinks</p><ul><li>∃x.Person( x ) ∧ Class( x, AIClass ) ∧ Thinks( x )</li></ul><p>All computers have a mouse connected by USB</p><ul><li>∀x.Computer( x ) → ∃y.Mouse( y ) ∧ Connected( x, y, Usb )</li></ul><h4 id="syntax-of-fopc">Syntax of FOPC</h4><p>Terms: corresponding with things in the world</p><ul><li>Objects<ul><li>e.g., Thursday</li></ul></li><li>Variables<ul><li>e.g., x</li></ul></li><li>Function expressions<ul><li>A function symbol of arity n followed by n terms, enclosed in () and separated by ,</li><li>e.g., Function( var, AnotherFunction( Thing ))</li></ul></li></ul><p>Sentences: statements that can be true or false</p><ul><li>Atomic Sentence<ul><li>A predicate symbol of arity n followed by n terms, enclosed in () and separated by ,</li><li>Note that n can be 0, so True and False are atomic sentences</li></ul></li><li>The result of applying a connective (as in PC) to one or more sentences</li><li>The result of applying a quantifier (∀, ∃) to a sentence</li></ul><h4 id="semantics-of-fopc-interpretation">Semantics of FOPC: Interpretation</h4><p>Let the <strong><em>domain</em></strong> D be a nonempty set of constants, variables, predicate symbols, function symbols and their mappings</p><p>An <strong><em>interpretation</em></strong> over D is an <strong><em>assignment</em></strong> of the entities in D to each of the constant, variable, predicate, and function symbols of a predicate calculus expression</p><ul><li>Each constant is assigned an element of D</li><li>Each variable is assigned to a nonempty subset of D (<strong><em>allowable substitutions</em></strong>)</li><li>Each function of arity m is defined (D<sup>m</sup> ⟼ D)</li><li>Each predicate of arity n is defined (D<sup>n</sup> to {T,F}).</li></ul><h4 id="computing-the-truth-value-of-predicate-calculus-sentences">Computing the truth value of predicate calculus sentences</h4><p>Given an expression E and an interpretation I of E over a nonempty domain D, the truth value for E is determined by</p><ul><li>The value of a constant is the element of D it is assigned to by I</li><li>The value of a variable is a member of the set of elements of D it is assigned to by I</li><li>The value of a function expression is the element of D obtained by evaluating the function for the parameter values assigned by the interpretation</li><li>The value of the predicate “true” is T, and the predicate “false” is F</li><li>The value of an atomic sentence is either T or F, determined by I</li><li>The value of a non-atomic (compound) sentence is either T or F, determined by I</li><li>For a variable x and a sentence S containing x<ul><li>The value of ∀x.S is T if S is T for all assignments to x under I</li><li>The value of ∃x.S is T if there is an assignment to x under I such that S is T</li></ul></li></ul><h4 id="first-second-and-higher-order-pc">First, Second and Higher Order PC</h4><p>This is First Order Predicate Calculus</p><ul><li>variables can range only over objects in D<ul><li>John eats everything: ∀x.Eats( John, x )</li></ul></li></ul><p>In Second Order Predicate Calculus</p><ul><li>variables can range over objects, predicates and functions in D<ul><li>John has all the features that Jim has: ∀P.P( Jim ) → P( John )</li></ul></li></ul><p>In Higher Order Predicate Calculus</p><ul><li>variables can range over objects, predicates, functions in D and over sentences</li></ul><p>In this module, we consider only First Order Predicate Calculus</p><h4 id="order-and-range-of-quantifiers-matters">Order and range of quantifiers matters</h4><p>Every person likes some food</p><ul><li>∀x. Person( x ) → ∃f.Food( f ) ∧ likes( x, f )</li></ul><p>There is a food that every person likes</p><ul><li>∃f. Food( f ) ∧ ∀x.Person( x ) → Likes( x, f )</li></ul><p>Whenever anyone eats some spicy food, they are happy</p><ul><li>∀x.∃f. Eats( x, f ) ∧ Spicy( f ) → Happy( x )<ul><li>allowable substitutions for x are people, for f is food</li></ul></li><li>∀x. Person( x ) → ∃f. Food( f ) ∧ Spicy( f ) ∧ Eats( x, f ) → Happy( x )<ul><li>no need to worry about allowable substitutions</li></ul></li></ul><h4 id="equality">Equality</h4><p>A very useful extra operator that isn’t strictly in FOPC is =</p><ul><li>that’s to say, the TEST for equality, like == in Java, not assignment</li></ul><p>The rule for = is that</p><ul><li>A = A is true for all constants A in the interpretation</li><li>otherwise, it is false</li></ul><p>A very useful extra operator that isn’t strictly in FOPC is =</p><ul><li>that’s to say, the TEST for equality, like == in Java, not assignment</li></ul><p>The rule for = is that</p><ul><li>A = A is true for all constants A in the interpretation</li><li>otherwise, it is false</li></ul><p>We’ll use equality in some of our lab work</p><h4 id="domains">Domains</h4><p><img src="/images/AI/16412555.png" /></p><h2 id="something-to-try">Something to try</h2><p>John’s meals are spicy</p><ul><li>∀x. Meal-of( John, x ) → Spicy( x )</li></ul><p>Every city has a dogcatcher who has been bitten by every dog in town</p><ul><li><p>With domains – what are they?</p><ul><li>∀c.∃t.Dogcatcher( c, t ) ∧ ∀d.Lives-in( d, c ) → Has-bitten( d, t )</li><li>Domains: t: people; c: cities; d: dogs</li></ul></li><li><p>Without domains</p><ul><li>∀c.City( c ) → ∃t.Dogcatcher( c, t ) ∧ ∀d.Dog( d ) ∧ Lives-in( d, c ) → Has-bitten( d, t )</li></ul></li></ul><p>For every set x, there is a set y, such that the cardinality of y is greater than the cardinality of x</p><ul><li>With domains – what are they?<ul><li>∀x.∃y.∀u.∀v.Cardinality( x, u ) ∧ Cardinality( y, v ) → Greater-than( v, u )</li><li>∀x.∃y. Greater-than( Cardinality( x ), Cardinality( y ) )</li><li>Domains: x, y: sets; u,v: integers</li></ul></li><li>Without domains<ul><li>∀x.Set( x ) → ∃y.Set( y ) ∧ ∀u.∀v.Cardinality( x, u ) ∧ Cardinality( y, v ) → Greater-than( v, u )</li><li>∀x.Set( x ) → ∃y.Set( y ) ∧ Greater-than( Cardinality( x ), Cardinality( y ) )</li></ul></li></ul><h2 id="properties-of-sentences">Properties of sentences</h2><p>For a predicate calculus sentence, S, and an interpretation, I,</p><ul><li>I satisfies S, if S has a truth value of T under I and at least one variable assignment</li><li>I is a model of S, if I satisfies S for all possible variable assignments in I</li></ul><p>A sentence is satisfiable iff there is at least one interpretation and variable assignment that satisfy it; otherwise it is unsatisfiable</p><p>A set of sentences, E, is satisfiable iff there is at least one interpretation and variable assignment that satisfies every S ∈ E</p><ul><li>NB quantification! The same interpretation/variable assignment pair satisfies all S</li></ul><p>A set of sentences is inconsistent, iff it is not satisfiable</p><p>A sentence is valid iff it is satisfiable for all possible interpretations</p><h2 id="proof-procedures">Proof procedures</h2><p>A proof procedure consists of</p><ul><li>a set of inference rules</li><li>an algorithm for applying the inference rules to a set of sentences to generate a sequence of set of sentences from or to another set<ul><li>usually, we attempt to start from something we want to prove</li><li>and then work “backwards” to things we already know, such as axioms and theorems</li></ul></li></ul><p>Semantics of logical entailment</p><ul><li>A sentence, S, <em>logically follows</em> from, or <em>is entailed</em> by, a set, E, of sentences iff every interpretation and variable assignment that satisfies E also satisfies S.</li></ul><h2 id="inference-rules">Inference Rules</h2><ul><li><p>Soundness</p><ul><li>An set of inference rules is sound, iff every sentence it infers from a set, E, of sentences logically follows from E</li></ul></li><li><p>Completeness</p><ul><li>An set of inference rules is complete iff it can infer every expression that logically follows from a set of sentences</li></ul></li><li><p>Modus Ponens (implication elimination)</p><ul><li><p>We know that P implies Q, and that P is true, so Q is true</p></li><li><p>( P ∧ ( P → Q )) → Q</p><p><img src="/images/AI/16412556.png" /></p></li></ul></li><li><p>Modus Tollens</p><ul><li><p>We know that P implies Q, and that Q is false, so P is false</p></li><li><p>( ¬ Q ∧ ( P → Q )) → ¬ P</p><p><img src="/images/AI/16412557.png" /></p></li></ul></li><li><p>But we need rules to deal with each connective</p><ul><li>Introduction (adding a connective into a proof sequence)</li><li>Elimination (removing a connective from a proof sequence)</li></ul></li><li><p>Conjunction (And) elimination</p><ul><li><p>P is true and Q is true if P ∧ Q is true</p><p><img src="/images/16412558.png" /></p></li></ul></li><li><p>Conjunction (And) introduction</p><ul><li><p>P ∧ Q is true if P is true and Q is true</p><p><img src="/images/AI/16412559.png" /></p></li></ul></li><li><p>Universal (Forall) elimination</p><ul><li><p>P(a) is true for all constants, a, if ∀x.P(x) is true</p><p><img src="/images/AI/16412553.png" /></p></li></ul></li><li><p>Universal (Forall) introduction</p><ul><li><p>∀x.P(x) is true, if P(ai) is true for all constants, a<sub>i</sub></p><p><img src="/images/AI/16412552.png" /></p></li></ul></li></ul><h2 id="blinds-example-in-fopc-revisited">Blinds example in FOPC revisited</h2><p>Problem description</p><ul><li>If it is sunny [on a particular day], then the sun shines on the screen [on that day].</li><li>If the sun shines on the screen [on a particular day], the blinds are down [on that day].</li><li>The blinds are not down [today].</li><li>Is it sunny [today]?</li></ul><p>Premises:</p><ul><li>∀d.Sunny (d)→Screen-shines(d)</li><li>∀d.Screen-shines(d)→Blinds-down(d)</li><li>¬Blinds-down(Thursday)</li></ul><p>Question: Sunny(Thursday)?</p><p><img src="/images/AI/16412554.png" /></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Techniques of Artificial Intelligence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Extended ER Model and other Modelling Languages</title>
      <link href="2021/02/17/2021-02-17-Extended-ER-Model-and-other-Modelling-Languages/"/>
      <url>2021/02/17/2021-02-17-Extended-ER-Model-and-other-Modelling-Languages/</url>
      
        <content type="html"><![CDATA[<h1 id="extended-er-model-and-other-modelling-languages">Extended ER Model and other Modelling Languages</h1><p><a href="https://recordings.reu1.blindsidenetworks.com/vub/3b0c2525ba56071f1d017b50298d66d1d59e3b10-1613565889329/capture/">Video ~ 41:05</a></p><h2 id="extended-entity-relationship-eer-model">Extended Entity-Relationship (EER) Model</h2><p>Over the years the ER model has been <strong>extended</strong> with additional concepts to <u>increase its expressiveness</u></p><ul><li>specialisation and generalisation (ISA relationship)</li><li>ISA constraints</li><li>aggregation</li></ul><h3 id="specialisation-and-generalisation-243">Specialisation and Generalisation 2:43</h3><p>An entity set can be further subgrouped or <strong><em>specialised</em></strong> into distinctive entity sets</p><ul><li>an entity subset may for example have additional attributes</li><li><strong><em>top-down approach</em></strong></li></ul><p>Parts of multiple entity sets may be <strong><em>generalised</em></strong> in a higher level entity set</p><ul><li><strong><em>bottom-up approach</em></strong></li></ul><p>Specialisations as well as generalisations are represented by the same <strong><em><u>ISA relationship</u></em></strong> construct</p><ul><li>represented by a triangle in the EER model</li><li><em>A</em> <strong><em>ISA</em></strong> <em>B</em> implies that every <em>A</em> entity is also a <em>B</em> entity</li><li>generalisation can be seen as the inversion of specialisation</li></ul><figure><img src="/images/DB/125400.png" alt="" /><figcaption>ISA Relationship 4:30</figcaption></figure><p>The <strong><em>attributes</em></strong> of a higher level entity set (<strong><em>superclass</em></strong>) are <strong><em>inherited</em></strong> by the lower level entity set (<strong><em>subclass</em></strong>) via the <strong><u>ISA relationship</u></strong></p><ul><li>e.g. <em>students</em> inherit the <em>id</em> attribute from <em>persons</em></li></ul><p>A subclass also <strong><em>inherits</em></strong> any <strong><em><u>relationship participation</u></em></strong> from its superclass</p><ul><li>e.g. <em>students</em>, <em>teachers</em> etc. can participate in the <em>LivesAt</em> relationship</li></ul><h3 id="isa-constraints-700">ISA Constraints 7:00</h3><p>To model an application domain more precisely, specific constraints can be defined over an ISA relationship.</p><ul><li><strong><em>Membership</em></strong> constraints 9:25<ul><li>a <strong><em>condition-defined membership constraint</em></strong> assigns an entity to a specific subclass based on one or more attribute values</li><li>a <strong><em>user-defined membership constraint</em></strong> can be used to manually assign entities to a specific subclass (<strong><em>manual classification</em></strong>)</li></ul></li><li><strong><em>Disjointness</em></strong> constraints<ul><li>an <strong><em>overlapping constraint</em></strong> over subclasses specifies that an entity may belong to <strong>multiple</strong> subclasses<ul><li>e.g. a <em>person</em> may be a teacher as well as a student</li><li>by default, subclasses participate in an overlapping constraint</li></ul></li><li>a <strong><em>disjoint constraint</em></strong> specifies that an entity can <strong>only</strong> belong to exactly one subclass<ul><li>e.g. a <em>teacher</em> can be either a <em>PhD</em> <em>student</em> or a <em>professor</em> (but not both)</li><li>expressed by writing the word <em>disjoint</em> next to the triangle</li></ul></li></ul></li><li><strong><em>Completeness</em></strong> constraints<ul><li>a <u><strong><em>partial</em></strong> <em>specialisation (generalisation) constraint</em></u> specifies that some superclass entities may not belong to any subclass - default completeness constraint<ul><li>default completeness constraint</li></ul></li><li>a <u><strong><em>total</em></strong> <em>specialisation (generalisation) constraint</em></u> defines that each superclass entity must belong to a subclass<ul><li>e.g. each teacher must belong to the <em>PhD Students</em> or <em>Professors</em> subclass (or to both of them)</li><li>represented by a <u><strong>double line</strong></u> connection to the triangle (like total participation)</li></ul></li></ul></li></ul><p><img src="/images/DB/1254000.png" /></p><h3 id="aggregation-1311">Aggregation 13:11</h3><p>A limitation of the ER model is that relationships cannot be modelled over other relationship sets.</p><p>What if we would like to introduce a manager for some (employee, company, duration) combinations?</p><p><img src="/images/DB/1254001.png" /></p><figure><img src="/images/DB/1254002.png" alt="" /><figcaption>15:00</figcaption></figure><figure><img src="/images/DB/1254003.png" alt="" /><figcaption>16:07</figcaption></figure><figure><img src="/images/DB/1254004.png" alt="" /><figcaption>Part-Of Hierarchies 18:23</figcaption></figure><h2 id="er-design-issues-1940">ER Design Issues 19:40</h2><p>When do we model something as an attribute and when as an entity set?</p><ul><li>there is <strong><em>no general answer</em></strong> and the choice depends on the specific application domain to be modelled</li></ul><p>When do we model something as a relationship set and when as an entity set?</p><ul><li>a relationship set often corresponds to an action between entities</li></ul><p>In general we should try to <strong><em>avoid higher level n-ary relationship sets</em></strong></p><ul><li><strong>3-ary</strong> relationship sets should be the <strong>maximum</strong> and even these should be used carefully</li></ul><h3 id="attribute-or-entity-2113">Attribute or Entity? 21:13</h3><p>Should the address in the example be modelled as an attribute or as a separate entity?</p><ul><li>depends on the intended use of the address</li><li>if we need an address for different entities (e.g. not just for employees) it is better to model the address as separate entity</li></ul><p><img src="/images/DB/1254005.png" /></p><p>Should the duration be modelled as a <em>from</em> and <em>to</em> attribute or as a separate entity? 22:21</p><p><strong>Depends again on the use</strong></p><ul><li>if we foresee that the same duration period is used by other entity sets, it should be modelled as a separate entity</li></ul><p><img src="/images/DB/1254006.png" /></p><h3 id="n-ary-or-binary-relationships-2317">N-ary or Binary Relationships? 23:17</h3><p>Basically any n-ary relationship can be replaced by a number of binary relationship sets</p><ul><li>"real" 3-ary relationships should not be replaced<ul><li>e.g. <em>WorksFor</em> presented earlier</li></ul></li><li>the <em>Parents</em> relationship is a example of a non-real 3-ary relationship<ul><li>have to use null values if there is either no father or mother</li><li>better to model it as two separate binary relationships</li></ul></li></ul><p><img src="/images/DB/1254007.png" /></p><h2 id="er-design-principles-2350">ER Design Principles 23:50</h2><ul><li>Make sure that you pay attention to <strong><em>all the entities</em></strong>, their <strong><em>relationships</em></strong> and any other <strong><em>constraints</em></strong> mentioned in the description (requirements) of a specific application domain<ul><li>e.g. show cardinality constraints for all relationships</li></ul></li><li><strong><em>Avoid redundancy!</em></strong></li><li>The resulting conceptual model should be <strong><em>as simple as possible, but not simpler</em></strong><ul><li>introduce only necessary entities and relationships</li></ul></li><li>Some constraints (e.g. functional dependencies) cannot be expressed in the ER model<ul><li>also write down any assumptions</li></ul></li><li>In two weeks we will see how the <strong><em>conceptual ER model can be mapped to a logical database schema (e.g. relational database schema)</em></strong></li><li>The resulting relational schema can be further analysed by using functional dependencies and normalisation</li></ul><h2 id="er-summary-2941">ER Summary 29:41</h2><ul><li>Entities and attributes</li><li>Relationships<ul><li>cardinality constraints</li><li>participation constraints</li></ul></li><li>Keys</li><li>Weak entities</li><li>ISA hierarchies</li><li>Aggregation</li></ul><h2 id="classification-and-typing-3006">Classification and Typing 30:06</h2><p>Aristotle (384 BC-322 BC) introduced a biological classification (<em>ontology</em>)</p><ul><li><em>artificial classification system</em></li><li><em>organisms</em> with the two subclasses <em>plants</em> and <em>animals</em></li><li>animals further subclassified into <em>animals with blood</em> and <em>animals without blood</em></li><li>animals also classified into <em>walking animals</em>, <em>flying animals</em> and <em>swimming animals</em> (<em>habitat</em>)</li></ul><p>Characteristics (problems) of Aristotle's classification:</p><ul><li><strong><em>based on behaviour</em></strong> and <u>not on similarities</u> (<em>non-evolutionary</em>)</li><li>animals can belong to multiple classes<ul><li>e.g. a duck belongs to the walking animals as well as swimming animals class</li></ul></li></ul><p>Bertrand Russell defined the <strong><em>type</em></strong> of a given predicate <em>P</em> as the entity set spanned by <em>P</em></p><ul><li><strong><em>intensional</em></strong> notion of <strong><em>type</em></strong></li></ul><p>The notion of type for classifying entities based on a set of conditions was questionned by Wittgenstein</p><ul><li>there exists no precise definition (type) for some general concepts<ul><li>e.g. no definition for the general concept of a <strong><em>game</em></strong></li></ul></li></ul><p>We can have a <strong><em>definitional</em></strong> (e.g. intensional) or <strong><em>prototypical</em></strong> definition of a type</p><h2 id="om-model-3544">OM Model 35:44</h2><p>Data model that integrates concepts from the entity-relationship and object-oriented data models:</p><ul><li>based on <em>objects</em>, <em>collections</em> and <em>associations</em> (binary collections)<ul><li>supports associations over associations</li></ul></li><li>different types of collections<ul><li>sets, bags, rankings and sequences</li></ul></li></ul><p><strong><em>Separates typing and classification (role modelling)</em></strong></p><p>Operational part (algebra) over objects and collections</p><p>A family of object database platforms have been realised based on the OM model (e.g. OMS Java)</p><figure><img src="/images/DB/1254008.png" alt="" /><figcaption>OM Typing and Classification</figcaption></figure><figure><img src="/images/DB/12540009.png" alt="" /><figcaption>OM Example (RSL Link Model)</figcaption></figure><h2 id="the-unified-modelling-language-uml-3724">The Unified Modelling Language (UML) 37:24</h2><p>UML is a standard developed by the <strong><u>Object Management Group</u></strong> (OMG)</p><ul><li>used to specify the components of a software system</li><li>based on earlier work including the <strong><em>object-modelling technique (OMT)</em></strong> by Rumbaugh et al., the <strong><em>Booch method</em></strong> by Booch and <strong><em>objectoriented software engineering (OOSE)</em></strong> by Jacobson</li></ul><p>UML supports different types of diagrams</p><ul><li><strong><em>class diagrams</em></strong>, use case diagrams, package diagrams,...</li></ul><h3 id="uml-class-diagrams-3737">UML Class Diagrams 37:37</h3><p>A UML class diagram is similar to an ER model</p><p>A UML class is "like" an ER entity set</p><ul><li>contains attributes as well as methods</li></ul><p><img src="/images/DB/1254009.png" /></p><p>UML relationship class with attributes can be used like an ER aggregation in other UML relationships</p><ul><li>e.g. locatedAt in the example</li></ul><p>Note that the position of the cardinality constraints are switched in UML</p><p><img src="/images/DB/12540000.png" /></p><p><img src="/images/DB/12540005.png" /></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Databases </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>File System</title>
      <link href="2021/02/16/2021-02-16-File-System---OS-basis/"/>
      <url>2021/02/16/2021-02-16-File-System---OS-basis/</url>
      
        <content type="html"><![CDATA[<h1 id="basis-of-os---file-system">Basis of OS - File System</h1><p><a href="https://vub-my.sharepoint.com/personal/bruno_da_silva_vub_be/_layouts/15/onedrive.aspx?originalPath=aHR0cHM6Ly92dWItbXkuc2hhcmVwb2ludC5jb20vOmY6L2cvcGVyc29uYWwvYnJ1bm9fZGFfc2lsdmFfdnViX2JlL0V1ZWdTdWlYa3JCSWhnNXhVMFgzZ2s4QjhSNlFQYkRFbVZLMFNCUmlIQXVTWVE%5FcnRpbWU9aFliRXdZM1MyRWc&amp;id=%2Fpersonal%2Fbruno%5Fda%5Fsilva%5Fvub%5Fbe%2FDocuments%2FCOURSES%2FOSSEC%2020%20%2D%2021%20Semester%202%2FRecordings%2F%5BOSSEC%5D%20%2D%20operating%20systems%20and%20security%20%2D%20lecture%202%2Emp4&amp;parent=%2Fpersonal%2Fbruno%5Fda%5Fsilva%5Fvub%5Fbe%2FDocuments%2FCOURSES%2FOSSEC%2020%20%2D%2021%20Semester%202%2FRecordings">Video ~57:51</a></p><p>Long-term information storage</p><ul><li>Must store large amounts of data</li><li>Information stored must survive the termination of the process using it</li><li>Multiple processes must be able to access the information concurrently</li></ul><h2 id="files-301">Files 3:01</h2><p>Just a few of the questions that quickly arise are:</p><ol type="1"><li>How do you find information?</li><li>How do you keep one user from reading another user’s data?</li><li>How do you know which blocks are free?</li></ol><p>and there are many more.</p><p><u><strong>Files</strong> are logical units of information created by <strong>processes</strong>.</u></p><p>A disk will usually contain thousands or even millions of them, each one independent of the others.</p><p>Information stored in files must be <strong>persistent</strong>, that is, <u>not be affected by process creation and termination</u>.</p><p><strong>Files are managed by the operating system</strong>. How they are structured, named, accessed, used, protected, implemented, and managed are major topics in operating system design.</p><h3 id="file-naming-550">File naming 5:50</h3><figure><img src="/images/OP/1628366.png" alt="" /><figcaption>Typical file extensions</figcaption></figure><h3 id="file-structures-631">File structures 6:31</h3><p>Three kinds of files:</p><ol type="1"><li>byte sequence</li><li>record sequence</li><li>tree</li></ol><p><img src="/images/OP/1628367.png" /></p><h3 id="file-types-857">File types 8:57</h3><ol type="a"><li><p>An executable file</p></li><li><p>An archive</p></li></ol><p><img src="/images/OP/1638375.png" /></p><h3 id="file-attributes-1057">File attributes 10:57</h3><figure><img src="/images/OP/1628365.png" alt="" /><figcaption>Possible file attributes</figcaption></figure><h3 id="file-operations-1251">File operations 12:51</h3><ol type="1"><li>Create</li><li>Delete</li><li>Open</li><li>Close</li><li>Read</li><li>Write</li><li>Append</li><li>Seek</li><li>Get attributes</li><li>Set Attributes</li><li>Rename</li></ol><h2 id="directories-1438">Directories 14:38</h2><h3 id="single-level-directory-systems">Single-level directory systems</h3><p>A single level directory system</p><ul><li>contains 4 files</li><li>owned by 3 different people, A, B, and C</li></ul><p><img src="/images/OP/1638555.png" /></p><h3 id="hierarchical-directory-systems-1549">Hierarchical directory systems 15:49</h3><figure><img src="/images/OP/1638556.png" alt="" /><figcaption>A hierarchical directory system</figcaption></figure><h3 id="path-names-1631">Path names 16:31</h3><figure><img src="/images/OP/1638455.png" alt="" /><figcaption>A UNIX directory tree</figcaption></figure><h3 id="directory-operations-1713">Directory operations 17:13</h3><ol type="1"><li>Create</li><li>Delete</li><li>Opendir</li><li>Closedir</li><li>Readdir</li><li>Rename</li><li>Link</li><li>Unlink</li></ol><h2 id="file-system-implementation-1940">File system implementation 19:40</h2><h3 id="implementers-perspective">Implementer's perspective</h3><figure><img src="/images/OP/2638455.png" alt="" /><figcaption>A possible file system layout</figcaption></figure><h3 id="implementing-files-2128">Implementing files 21:28</h3><ol type="a"><li><p>Contiguous allocation of disk space for 7 files</p></li><li><p>State of the disk <strong><em>after files D and F</em></strong> have been removed</p></li></ol><p><img src="/images/OP/2638457.png" /></p><p>Storing a file as a linked list of disk blocks: 23:11</p><p><img src="/images/OP/2638456.png" /></p><p>Linked list allocation using a file allocation table in RAM: 24:02</p><p><img src="/images/OP/2638454.png" /></p><figure><img src="/images/OP/2638453.png" alt="" /><figcaption>An example i-node</figcaption></figure><h3 id="implementing-directories-2625">Implementing directories 26:25</h3><ol type="a"><li>A simple directory</li></ol><ul><li>fixed size entries</li><li>disk addresses and attributes in directory entry</li></ul><ol start="2" type="a"><li>Directory in which each entry just refers to an i-node</li></ol><p><img src="/images/OP/2638452.png" /></p><p>In this example we have three files, project-budget, personnel, and foo.</p><p>Two ways of handling long file names in directory:</p><figure><img src="/images/OP/2638441.png" alt="" /><figcaption>(a) In-line</figcaption></figure><figure><img src="/images/OP/2638442.png" alt="" /><figcaption>(b) In a heap</figcaption></figure><h2 id="shared-files-2944">Shared files 29:44</h2><p>File system containing a shared file</p><figure><img src="/images/OP/2638443.png" alt="" /><figcaption>Shared file</figcaption></figure><h3 id="problems-3118">Problems 31:18</h3><ol type="a"><li><p>Situation prior to linking</p></li><li><p>After the link is created</p></li><li><p>After the original owner removes the file</p></li></ol><p><img src="/images/OP/2638444.png" /></p><h2 id="disk-space-management-3305">Disk space management 33:05</h2><p>Files are normally stored on disk, so management of disk space is a major concern to filesystem designers.</p><p><strong>Strategies:</strong></p><ol type="1"><li>n consecutive bytes of disk space are allocated</li><li>the file is split up into a number of (not necessarily) contiguous blocks</li></ol><p>The same trade-off is present in memory-management systems between pure segmentation and paging.</p><p><strong>Problem:</strong> storing a file as a contiguous sequence of bytes has the obvious problem that if a file grows, it may have to be moved on the disk.</p><p>For this reason, nearly all file systems chop files up into <strong>fixed-size blocks</strong> that need not be adjacent</p><h3 id="size-block-3415">Size block 34:15</h3><p>What is the most adequate block size?</p><p>If the allocation unit is too large, we waste space; if it is too small, we waste time.</p><figure><img src="/images/OP/2638445.png" alt="" /><figcaption>Study of the file-size distribution</figcaption></figure><p><img src="/images/OP/2638446.png" /></p><ul><li>Solid line (right hand scale) shows the space efficiency as a function of block size.</li><li>Dashed line (left hand scale) shows the data rate for such a disk as a function of block size.</li><li>For simplicity, let us assume that all files are 4 KB.</li></ul><p>What the curves show, however, is that performance and space utilization are inherently in <strong>conflict</strong>.</p><p>Small blocks are bad for performance but good for diskspace utilization.</p><p><img src="/images/OP/2638447.png" /></p><h3 id="keeping-track-of-free-blocks-3847">Keeping track of free blocks 38:47</h3><p>Once a block size has been chosen, the next issue is how to keep track of free blocks.</p><ol type="1"><li>Storing the free list on a linked list</li><li>A bit map</li></ol><p><img src="/images/OP/2638448.png" /></p><p>Under certain circumstances, this method leads to unnecessary disk I/O.</p><ol type="1"><li>Almost-full block of pointers to free disk blocks in RAM<ul><li>three blocks of pointers on disk</li></ul></li><li>Result of freeing a 3-block file</li><li>Alternative strategy for handling 3 free blocks<ul><li>shaded entries are pointers to free disk blocks</li></ul></li></ol><p><img src="/images/OP/2638449.png" /></p><h3 id="disk-quota">Disk quota</h3><p><u>To prevent people from hogging too much disk space</u>, multiuser operating systems often provide a mechanism for enforcing disk quotas.</p><p>Quotas for keeping track of each user’s disk use:</p><p><img src="/images/OP/2628440.png" /></p><h2 id="file-system-reliability-4217">File system reliability 42:17</h2><h3 id="backups">Backups</h3><ul><li>Destruction of a file system is often a far greater disaster than destruction of a computer.</li><li>Largely sub-estimated.</li><li>Backups to tape are generally made to handle one of two potential problems:<ol type="1"><li>Recover from disaster.</li><li>Recover from stupidity.</li></ol></li><li>Incremental backups or dumps</li><li>Two strategies can be used for dumping a disk to a backup disk:<ul><li>a physical dump<ul><li>Unused blocks</li><li>Bad blocks</li></ul></li><li>a logical dump.</li></ul></li></ul><h3 id="example-of-logical-dumpling-4503">Example of logical dumpling 45:03</h3><p>A file system to be dumped</p><ul><li>squares are directories, circles are files</li><li>shaded items, modified since last dump</li><li>each directory &amp; file labelled by i-node number</li></ul><p><img src="/images/OP/2628441.png" /></p><p>The dump algorithm maintains a bitmap indexed by i-node number with several bits per i-node.</p><p>Bit maps used by the logical dumping algorithm</p><p>Four phases:</p><p><img src="/images/OP/2628442.png" /></p><h3 id="file-system-consistency-4729">File-system consistency 47:29</h3><p><img src="/images/OP/2628443.png" /></p><h2 id="file-system-performance-5027">File system performance 50:27</h2><p>Access to disk is much slower than access to memory.</p><p>Three techniques to improve performance.</p><ul><li>Caching</li><li>Block read Ahead</li><li>Reducing Disk-Arm Motion</li></ul><h3 id="caching-5047">Caching 50:47</h3><p>A cache is a collection of blocks that logically belong on the disk but are being kept in memory for performance reasons.</p><p>The block cache data structures:</p><p><img src="/images/OP/26284443.png" /></p><p><strong>LRU: Least Recent Used</strong></p><p><strong>MRU: Most Recent Used</strong></p><h3 id="block-read-ahead-5240">Block read ahead 52:40</h3><p>A second technique for improving perceived file-system performance is to try to get blocks into the cache <strong>before</strong> they are needed to increase the hit rate.</p><ul><li>This read-ahead strategy works only for files that are actually being read sequentially</li><li>If a file is being randomly accessed, read ahead does not help<ul><li>disk bandwidth reading in useless blocks</li><li>removing potentially useful blocks from the cache</li></ul></li><li>Continuous monitoring of the file access pattern</li></ul><h3 id="another-important-technique-5345">Another important technique 53:45</h3><p>Another important technique is to reduce the amount of disk-arm motion by putting blocks that are likely to be accessed in sequence close to each other, preferably in the same cylinder.</p><ol type="1"><li>I-nodes placed at the start of the disk</li><li>Disk divided into cylinder groups<ul><li>each with its own blocks and i-nodes</li></ul></li></ol><p><img src="/images/OP/26284440.png" /></p><h2 id="summary-5610">Summary 56:10</h2><ul><li>Files and Directories<ul><li>Operations</li><li>Attributes</li><li>Management</li><li>Implementation -&gt; i-nodes</li></ul></li><li>Sharing</li><li>Disk space management</li><li>File System<ul><li>Reliability</li><li>Performance</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Operating Systems and Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Semiconductors</title>
      <link href="2021/02/15/2021-02-15-Electronics-Semiconductors/"/>
      <url>2021/02/15/2021-02-15-Electronics-Semiconductors/</url>
      
        <content type="html"><![CDATA[<h1 id="electronics-semiconductors">Electronics: Semiconductors</h1><p><a href="https://recordings.reu1.blindsidenetworks.com/vub/9c8559b940eb408e35935642178e153556348c81-1613379586002/capture/">Video 28:05</a></p><h2 id="basics-of-semiconductors">Basics of semiconductors</h2><h3 id="understanding-the-underlying-physical-principles">Understanding the underlying physical principles</h3><p><img src="/images/EP/152914.png" /></p><h3 id="what-is-a-semiconductor-3009">What is a semiconductor? 30:09</h3><ul><li>Quantum models on atoms</li><li>Atomic structure, lattices &amp; bandgaps</li><li>Comparison with metals and inductors</li></ul><h3 id="characteristics-of-semiconductors-3031">Characteristics of semiconductors 30:31</h3><ul><li>More detailed quantum model</li><li>Direct and indirect bandgap semiconductors</li></ul><h3 id="doping-3053">Doping 30:53</h3><ul><li>Intrinsic &amp; Extrinsic semiconductors</li><li>Effects on carrier concentration</li></ul><h3 id="modelling-current-3120">Modelling current 31:20</h3><p>Net velocity of charge carriers. Described by thermal motion, drift and diffusion.</p><h2 id="what-is-a-semiconductor-3135">What is a semiconductor? 31:35</h2><figure><img src="/images/EP/modelatoms.png" alt="" /><figcaption>Modelling atoms - Electrons &amp; Energy levels</figcaption></figure><figure><img src="/images/EP/153500.png" alt="" /><figcaption>Orbitals - Energy &amp; shapes 35:45</figcaption></figure><figure><img src="/images/EP/153501.png" alt="" /><figcaption>Lattices - Finitely many possible configurations 37:52</figcaption></figure><figure><img src="/images/EP/153502.png" alt="" /><figcaption>Lattices - 2D “Cartoon” model 39:24</figcaption></figure><h3 id="from-orbitals-to-band-3956">From orbitals to band 39:56</h3><p><strong>Practically continuous energy levels (conceptually like a liquid)</strong></p><p><img src="/images/EP/1538211.png" /></p><h3 id="what-makes-semiconductors-conductive-4205"><strong>What makes semiconductors conductive?</strong> 42:05</h3><p><strong>Thermal energy <u>promotes some electrons to conduction band</u></strong></p><p><img src="/images/EP/1538212.png" /></p><p>Forbidden gap: No electrons.</p><h4 id="electrons-and-holes-in-conduction-4510">Electrons and holes in conduction 45:10</h4><p><strong>Free carriers which will describe current at macro scale</strong></p><p><img src="/images/EP/1540588.png" /></p><h4 id="use-case-silicon-4620">Use case: Silicon 46:20</h4><p><img src="/images/EP/1542311.png" /></p><h4 id="metals-semiconductors-and-inductors-4833">Metals, semiconductors and inductors 48:33</h4><p>Defined by <strong>bandgap – exponential relationship</strong></p><p><img src="/images/EP/1543533.png" /></p><h4 id="many-types-of-semiconductors-5056">Many types of semiconductors 50:56</h4><p>Each having different <strong>bandgaps</strong></p><p><strong>The bandgap is mainly determined by</strong></p><ul><li><strong>Atomic radius</strong> (According to the pic above) -&gt; lattice period 𝑎</li><li>Electronegativity</li></ul><figure><img src="/images/EP/1545428.png" alt="" /><figcaption>Yellow: suitable for semiconductors</figcaption></figure><h4 id="why-silicon-5358">Why Silicon? 53:58</h4><ul><li>Natural oxide at edges</li><li>Abundance in nature</li><li>Low band gap</li><li>Easy doping</li><li>High temperature resistance</li><li>Can be easily formed in regular crystals</li></ul><p><img src="/images/EP/1546527.png" /></p><h4 id="but-what-about-...-5720">But what about ...? 57:20</h4><p><strong>Elementary model is too coarse</strong></p><ul><li>Why can not all semiconductors emit light?</li><li>Why are not all semiconductors suitable for photovoltaics</li><li>What precisely describes currents &amp; resistance in semiconductors?</li><li>How does doping work?</li></ul><p><u><strong>we need more accurate models</strong></u></p><h2 id="energy-state-models-5846">Energy state models 58:46</h2><h3 id="wave-particle-duality-5916">Wave-particle duality 59:16</h3><figure><img src="/images/EP/1549333.png" alt="" /><figcaption>Matter can also behave as a wave</figcaption></figure><h3 id="energy-vs.-momentum-10208">Energy vs. Momentum 1:02:08</h3><figure><img src="/images/EP/1550205.png" alt="" /><figcaption>Free electron</figcaption></figure><h3 id="parabolic-bands-10313">Parabolic bands 1:03:13</h3><figure><img src="/images/EP/1551444.png" alt="" /><figcaption><strong>Near band edges</strong></figcaption></figure><h3 id="direct-band-gap-semiconductors-10819">Direct band gap semiconductors 1:08:19</h3><figure><img src="/images/EP/1551445.png" alt="" /><figcaption>Example: GaAs</figcaption></figure><h3 id="indirect-band-gap-semiconductors-10957">Indirect band gap semiconductors 1:09:57</h3><figure><img src="/images/EP/1551446.png" alt="" /><figcaption>Example: Si</figcaption></figure><h3 id="density-of-states-11127">Density of states 1:11:27</h3><figure><img src="/images/EP/1551447.png" alt="" /><figcaption>k-space vs. E-space</figcaption></figure><figure><img src="/images/EP/15514433.png" alt="" /><figcaption>1:14:34 - 1:18:37</figcaption></figure><h3 id="occupation-statistics">Occupation statistics</h3><p>Carrier density = density of states × probability of occupancy</p><p>𝑛(𝐸) = 𝑔<sub>𝑐</sub>(𝐸) · 𝑓<em><sub>FD</sub></em>(𝐸)</p><p><img src="/images/EP/1557300.png" /></p><h3 id="carrier-density-12051">Carrier Density 1:20:51</h3><p><b>Depending on 𝑬<sub>𝑭</sub></b></p><ul><li><u>Depending on 𝑬<sub>𝑭</sub></u>, we can have a preponderance of electrons or holes.</li><li>This must be tightly controlled for designing active components</li><li>Solution: doping</li></ul><p><img src="/images/EP/157301.png" /></p><h2 id="doping-extrinsic-semiconductors-12332"><a href="https://zh.wikipedia.org/wiki/%E6%8E%BA%E6%9D%82_(%E5%8D%8A%E5%AF%BC%E4%BD%93)">Doping (Extrinsic Semiconductors)</a> 1:23:32</h2><figure><img src="/images/EP/doping.png" alt="" /><figcaption>n-doped and p-doped semiconductors</figcaption></figure><h3 id="n-doped-semiconductors-12529">n-Doped semiconductors 1:25:29</h3><ul><li>Weakly bound electron</li><li>Small binding energies -&gt; Easily broken at room temperature</li><li>Produces an electron in the conduction band</li></ul><figure><img src="/images/EP/1573011.png" alt="" /><figcaption>Ionized donors (Example: Phosphorous)</figcaption></figure><h3 id="p-doped-semiconductors-12702">p-Doped semiconductors 1:27:02</h3><p>Same principle, but with holes: weakly bound holes added to the valence band.</p><figure><img src="/images/EP/1573012.png" alt="" /><figcaption>Ionized acceptors (Example: Boron)</figcaption></figure><h3 id="ionization-12807">Ionization 1:28:07</h3><p><img src="/images/EP/1573013.png" /></p><h3 id="carrier-concentration-vs.-temperature-13117">Carrier concentration vs. Temperature 1:31:17</h3><figure><img src="/images/EP/1573014.png" alt="" /><figcaption>In extrinsic semiconductors</figcaption></figure><h3 id="fermi-level-vs.-𝑇-𝑁d-13509">Fermi level vs. 𝑇 &amp; 𝑁<sub>D</sub> 1:35:09</h3><figure><img src="/images/EP/1573015.png" alt="" /><figcaption>Temperature &amp; doping density</figcaption></figure><h2 id="modelling-currents-13808">Modelling currents 1:38:08</h2><h3 id="main-models-for-currents-in-semiconductors">Main models for currents in semiconductors</h3><h4 id="current-density">Current density</h4><ul><li>Electrons: 𝐽<sub>𝑛</sub> = −𝑞𝑛𝑣<sub>𝑛</sub></li><li>Holes: 𝐽<sub>𝑝</sub> = +𝑞𝑝𝑣<sub>𝑝</sub></li></ul><h4 id="qualitatively-we-need-to-know">Qualitatively, we need to know</h4><ul><li>How many charge carriers are there in each band?</li><li>How fast are they moving?</li></ul><h4 id="determined-mainly-by-two-forces">Determined mainly by two forces:</h4><ul><li><strong>Mobility</strong>: How fast do electrons/holes move upon application of electric fields?</li><li><strong>Diffusion</strong>: How fast do electrons/holes diffuse?</li></ul><h4 id="related-to-thermal-motion-of-lattice-carriers">Related to thermal motion of lattice &amp; carriers</h4><h3 id="thermal-motion-of-carriers-14107">Thermal motion of carriers 1:41:07</h3><p><strong>No net current</strong></p><ul><li>Thermal equilibrium -&gt; carriers move randomly due to thermal energy</li><li><strong>Collisions happen with</strong><ul><li><strong>Impurities</strong> (lattice irregularities, doping)</li><li>Lattic vibrations (=phonons)</li></ul></li><li>Collisions = inelastic scattering event (Energy loss)</li><li>Average time between collisions: 𝛕<sub>𝒄</sub> (mean collision/scattering time)</li><li>For Si, average thermal velocity ≈ 2.3 * 10<sup>5</sup> 𝒎/𝒔 <span class="citation" data-cites="300K">@300K</span></li><li>Thermal motion is completely random -&gt; averages out to zero -&gt; no current</li></ul><h3 id="carrier-drift-14525">Carrier Drift 1:45:25</h3><p><strong>Electrons &amp; holes get accelerated by electric field</strong>s</p><p><img src="/images/EP/1606077.png" /></p><p>Mobility 1:51:39</p><figure><img src="/images/EP/1607201.png" alt="" /><figcaption><strong>Effects of temperature and doping concentrations</strong></figcaption></figure><figure><img src="/images/EP/1607202.png" alt="" /><figcaption>Effects of strained lattices on mobility 1:54:42</figcaption></figure><h3 id="diffusion-15647">Diffusion 1:56:47</h3><p>Anisotropic carrier densities lead to net current</p><p><img src="/images/EP/1609344.png" /></p><h2 id="summary-20046">Summary 2:00:46</h2><p><strong>Basics of semiconductors</strong></p><ul><li><strong>Semiconductors</strong><ul><li>Discrete energy levels + lattice = bands</li><li>Semiconductors are characterized by a “medium”-sized bandgap</li></ul></li><li><strong>Carrier densities</strong><ul><li>Density of states + occupancy probability = carrier distribution</li><li>Fermi level is the main variable determining free electron &amp; hole quantities.</li></ul></li><li><strong>Extrinsic semiconductors</strong><ul><li>Doping can alter the Fermi level to change the free carrier makeup of the semiconductor</li><li>Core mechanism used for fabrication of active components (n-doping, p-doping)</li></ul></li><li><strong>Modelling current</strong><ul><li>Net motion of carriers. Described by diffusion, drift and (indirectly) by thermal motion.</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Technology and Applications of Electronics and Photonics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Memory management</title>
      <link href="2021/02/15/2021-02-10-Memory-management---OS-basis/"/>
      <url>2021/02/15/2021-02-10-Memory-management---OS-basis/</url>
      
        <content type="html"><![CDATA[<h1 id="basis-of-os---memory-management">Basis of OS - Memory management</h1><p><a href="https://vub-my.sharepoint.com/personal/bruno_da_silva_vub_be/_layouts/15/onedrive.aspx?originalPath=aHR0cHM6Ly92dWItbXkuc2hhcmVwb2ludC5jb20vOmY6L2cvcGVyc29uYWwvYnJ1bm9fZGFfc2lsdmFfdnViX2JlL0V1ZWdTdWlYa3JCSWhnNXhVMFgzZ2s4QjhSNlFQYkRFbVZLMFNCUmlIQXVTWVE%5FcnRpbWU9U1pBOVNQVE4yRWc&amp;id=%2Fpersonal%2Fbruno%5Fda%5Fsilva%5Fvub%5Fbe%2FDocuments%2FCOURSES%2FOSSEC%2020%20%2D%2021%20Semester%202%2FRecordings%2F%5BOSSEC%5D%20%2D%20operating%20systems%20and%20security%20%2D%20lecture%201%2Emp4&amp;parent=%2Fpersonal%2Fbruno%5Fda%5Fsilva%5Fvub%5Fbe%2FDocuments%2FCOURSES%2FOSSEC%2020%20%2D%2021%20Semester%202%2FRecordings">Video 2:11:37</a></p><p>Parkinson’s Law: ‘‘Programs expand to fill the memory available to hold them.’’</p><p>Ideally programmers want memory that is</p><ul><li>private</li><li>large</li><li>fast</li><li>non volatile</li></ul><p>Memory hierarchy</p><ul><li>small amount of fast, expensive memory – cache</li><li>some medium-speed, medium price main memory</li><li>gigabytes of slow, cheap disk storage</li></ul><p>O.S. abstracts the memory management</p><p>A memory manager handles the memory hierarchy.</p><p><img src="/images/OP/045041.png" /></p><h2 id="memory-abstraction">Memory Abstraction</h2><h3 id="monoprogramming-without-memory-abstraction-21546">Monoprogramming without memory abstraction 2:15:46</h3><ul><li>No abstraction (early technologies)<ul><li>Every program simply see the physical memory</li><li>It is not possible to have two running programs in memory at the same time!</li></ul></li><li>Basic memory organization (an operating system with one user process)</li></ul><p><img src="/images/OP/045042.png" /></p><ol type="1"><li>The operating system may be at the bottom of memory in RAM -&gt; Early mainframes</li><li>At the top of memory in ROM -&gt; Embedded systems</li><li>The device drivers may be at the top of memory in a ROM and the rest of the system in RAM down below -&gt; early PCs</li></ol><p>The core problem is <u>the use of absolute physical memory addresses</u>, which needs to be considered when running to programs</p><ul><li>First, if user programs can address every byte of memory, they can <strong>easily trash</strong> the operating system, intentionally or by accident, bringing the system to a grinding halt.</li><li>Second, with this model, it is difficult to have multiple programs running <strong>at once</strong> (taking turns, if there is only one CPU).</li></ul><p>Nonetheless, the lack of a memory abstraction is still common in embedded and smart card systems.</p><h3 id="solution-address-space-21800">Solution :Address Space 2:18:00</h3><p>An <strong>address space</strong> is <u>the set of addresses that a process can use to address memory</u>.</p><p>Each process has its own address space, independent of those belonging to other processes</p><p>Basic solution: <strong>Base</strong> and <strong>limit</strong> registers</p><p><img src="/images/OP/045800.png" /></p><h3 id="swapping-and-virtual-memory-21944">Swapping and virtual memory 2:19:44</h3><p><strong>Problem</strong>: The total amount of RAM needed by all the processes is often much more than can fit in physical memory.</p><p>Two general approaches to dealing with memory overload have been developed over the years.</p><ul><li><strong>Swap memory</strong>: consists of bringing in each process in its entirety, running it for a while, then putting it back on the disk.</li><li><strong>Virtual memory</strong>: allows programs to run even when they are only partially in main memory.</li></ul><h4 id="swapping-22047">Swapping 2:20:47</h4><p>Memory allocation changes as</p><ul><li>processes come into memory</li><li>leave memory</li></ul><p>Shaded regions are unused memory</p><p><img src="/images/OP/050227.png" /></p><p><strong>Problem</strong>: If processes are created with a fixed size that never changes, then the allocation is simple. This is usually not the case!</p><p>By dynamically allocating memory from a heap, as in many programming languages, a problem occurs whenever a process tries to grow.</p><p>If a process cannot grow in memory and the swap area on the disk is full, the process will have to suspended until some space is freed up (or it can be killed)</p><p><strong>Solution</strong>:</p><ol type="1"><li>Allocating space for a <strong>growing</strong> data segment.</li><li>Allocating space for a <strong>growing</strong> stack and a growing data segment.</li></ol><p><img src="/images/OP/050452.png" /></p><h4 id="managing-free-memory-22320">Managing free memory 2:23:20</h4><p>When memory is assigned <strong>dynamically</strong>, the operating system must manage it.</p><p>In general terms, there are two ways to keep track of memory usage:</p><ul><li>Bitmaps</li><li>Linked Lists</li></ul><h5 id="managing-memory-management-with-bitmaps">Managing memory management with bitmaps</h5><ul><li>Memory is divided into allocation units as small as a few words and as large as several kilobytes</li><li>The size of the allocation unit is an important design issue. <strong>The smaller the allocation unit, the larger the bitmap.</strong></li><li>Searching a bitmap for a run of a given length is <u>a <strong>slow</strong> operation</u>!</li></ul><p><img src="/images/OP/050751.png" /></p><ol type="1"><li>Part of memory with 5 processes, 3 holes<ul><li>tick marks show allocation units</li><li>shaded regions are free</li></ul></li><li>Corresponding bit map</li><li>Same information as a list</li></ol><h5 id="managing-memory-management-with-linked-lists">Managing memory management with linked lists</h5><p>An <strong>linked list</strong> of allocated and free memory segments: each segment either contains a process or is an empty hole between two processes</p><p>When the processes and holes are kept on a list sorted by address, <strong>several algorithms</strong> can be used to allocate memory for a created process (or an existing process being swapped in from disk).</p><ul><li>First fit</li><li>Next fit</li><li>Best fit</li><li>Worst it</li><li>Quick fit</li></ul><figure><img src="/images/OP/051124.png" alt="" /><figcaption>Four neighbour combinations for the terminating process X</figcaption></figure><h4 id="virtual-memory-22817">Virtual Memory 2:28:17</h4><ul><li>There is a need to run programs that are too large to fit in memory</li><li>Swapping can be <strong><u>too slow</u></strong> for certain applications</li><li>The basic idea behind <strong>virtual memory</strong> is that each program has its own address space, which is broken up into chunks of fixed-size called <strong>pages</strong></li><li>Each <strong>page</strong> is a contiguous range of addresses.</li><li>These pages are mapped onto physical memory, but not all pages have to be in physical memory at the same time to run the program</li><li>MMU (Memory Management Unit) that maps the <strong>virtual addresses</strong> onto the physical memory addresses</li></ul><figure><img src="/images/OP/051513.png" alt="" /><figcaption>2:29:30 - 2:29:49</figcaption></figure><p>Divides physical memory and logical address space into fixed-size fragments called <strong>pages</strong>.</p><p>The first 64 KB of <strong>virtual /logical address</strong> space divided into 16 pages, with each page being 4K.</p><p>A 32 KB main memory divided up into eight <strong>page</strong> frames of 4 KB each.</p><p><strong>Allow the use of more memory than the amount of physical memory in the machine</strong></p><p><img src="/images/OP/0515131.png" /></p><h5 id="mapping-virtual-memory-pages-to-physical-memory-pages-23210">Mapping virtual memory pages to <strong>physical</strong> memory pages 2:32:10</h5><ul><li>Page table maps virtual/logical page numbers to physical page numbers.</li><li>Contains for each logical page number:<ul><li>status flag: in physical memory (1) or on disk (0).</li><li>if in memory, corresponding physical page number.</li></ul></li><li>Code/programs reference logical addresses</li><li>OS translates to physical addresses using <strong>page table</strong></li><li>If virtual page is unmapped and it is referenced (a logical address lying in the logical page is referenced), <strong>the page is loaded from disk (page file)</strong> into a free physical memory page in a transparent way.</li></ul><p><img src="/images/OP/051959.png" /></p><h5 id="demand-paging-23250">Demand paging 2:32:50</h5><p><img src="/images/OP/052205.png" /></p><h5 id="address-translation-23326">Address translation 2:33:26</h5><p><img src="/images/OP/052426.png" /></p><h5 id="page-replacement-23352">Page replacement 2:33:52</h5><p>Which page to be swapped out if there is a page fault and all physical pages are already in use?</p><p>Algorithm</p><ul><li>The longest in the memory (First Come First Serve - FCFS)</li><li>The least recently used (Least Recently Used - LRU) – the basis is locality</li></ul><p>Information on each page required (represented by bits)</p><ul><li>Reference – being referred or not in the last time slot (timer interrupt driven) -&gt; LRU</li><li>Usage count -&gt; FCFS</li></ul><p><img src="/images/OP/052630.png" /></p><h4 id="segmented-memory-23645">Segmented memory 2:36:45</h4><p><img src="/images/OP/052818.png" /></p><p>Provides each Program / Process with one or more (code, data, stack) independent logical address spaces.</p><ul><li>Allows easy relocation of data and code in physical memory by moving segment (code accesses memory using logical addresses, so no change needed)</li><li>Can be used to enforce memory protection<ul><li>Can be used to protect processes from writing in each others memory.</li><li>Can protect segments from being written to/read from. E.g. no writing in code segments</li><li>Can provide layered access to memory (e.g. kernel mode can access all types of segments, when in user mode can only access user mode segments)</li></ul></li></ul><p><img src="/images/OP/052945.png" /></p><h5 id="segmentation-vs.-paging-23927">Segmentation VS. paging 2:39:27</h5><p><img src="/images/OP/053046.png" /></p><h5 id="swapping-pure-segmentation-24011">Swapping (Pure segmentation) 2:40:11</h5><p><img src="/images/OP/053152.png" /></p><p>Issues:</p><ul><li>Management of free memory (bitmaps or linked lists)</li><li>Memory compaction needed</li><li>Slow mechanism -&gt; solution: combine with paging virtual memory</li></ul>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Operating Systems and Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Health information systems</title>
      <link href="2021/02/14/2021-02-14-HMS/"/>
      <url>2021/02/14/2021-02-14-HMS/</url>
      
        <content type="html"><![CDATA[<h1 id="health-information-systems">Health information systems</h1><p><a href="https://caliweb.vub.be/?page=course-offer&amp;id=010444&amp;anchor=1&amp;target=pr&amp;year=2021&amp;language=en&amp;output=html">Website</a></p><p><a href="https://vub.cloud.panopto.eu/Panopto/Pages/Viewer.aspx?id=89839ce1-6fd5-4822-b859-acd20112879b">Video 44:10 ~ 1:57:02</a></p><p><strong>An introduction to hospital IT, electronic medical and patient records, eHealth and emerging technologies</strong></p><figure><img src="/images/HMS/215459.png" alt="" /><figcaption>From data to wisdom 46:20</figcaption></figure><p><strong>Data</strong> are symbols or observations reflecting differences in the world.</p><ul><li>Example = 250.00 (Note: data is the plural of datum)</li></ul><p><strong>Information</strong> is data with meaning.</p><ul><li>Example = ICD-9 code of 250.00 means type 2 diabetes</li></ul><p><strong>Knowledge</strong> is information that is justifiably believed to be true.</p><ul><li>Example = obese patients are more likely to develop type 2 diabetes</li></ul><figure><img src="/images/HMS/215836.png" alt="" /><figcaption>Increasingly Sophisticated and Standardized Data</figcaption></figure><h2 id="problem-setting-5531">Problem setting 55:31</h2><p>Patient is <strong>free</strong> to choose</p><ul><li>The GP, specialist or hospital he prefers</li><li>Whether he changes doctor or institute</li><li>…</li></ul><figure><img src="/images/HMS/220223.png" alt="" /><figcaption>An example of a simple health care system</figcaption></figure><p><strong>Not included in this scheme</strong></p><ul><li>Billing and reimbursement</li><li>Social security and health insurance</li><li>Screening</li><li>…</li></ul><h2 id="in-an-ideal-world-10957">In an ideal world 1:09:57</h2><p>An efficient and effective system should</p><ol type="1"><li><p><u>Maintain and share information</u> between all stakeholders</p><ul><li><p>Demographics, allergies, prior conditions</p></li><li><p>Blood pressure, taken medication, family conditions</p></li><li><p>Prior imaging, laboratory analysis, biopsy results</p></li><li><p>….</p></li></ul><p><strong>Health information systems</strong></p></li><li><p>Maximally exploit that prior health data</p><ul><li>To improve patient diagnosis and outcomes</li><li>Optimize regulations and reimbursement rules</li><li>Discover new relations between conditions-drugs-analyses</li><li>…</li></ul><p><strong>Clinical research and decision support</strong></p></li></ol><h2 id="current-status-11152">Current status 1:11:52</h2><figure><img src="/images/HMS/222339.png" alt="" /><figcaption>In practice</figcaption></figure><h2 id="why-is-health-informatics-challenging-12435">Why is Health informatics challenging? 1:24:35</h2><p>Huge amounts of data</p><ul><li><p>Text files, protocols, lab results</p></li><li><p>Images, biological tissues, DNA sequences</p><p><strong>No central storage system</strong></p></li></ul><p>Health data challenges</p><ul><li><p>Privacy laws limit the exchange of data</p></li><li><p>Issues with security, authorization, authentication</p><p><strong>Who can access what?</strong></p></li></ul><h2 id="why-is-mining-medical-data-challenging-12612">Why is mining medical data challenging? 1:26:12</h2><p>Complex modelling task</p><ul><li><p>Healthcare processes involve many actors</p></li><li><p>Vary across institutions and change constantly</p><p><strong>Systems should be <u>integrated and evolve flexibly over time</u></strong></p></li></ul><p>Difficulty of data interpretation</p><ul><li><p>Larger semantic gap</p></li><li><p>With other industries, <strong>“data” and “information”</strong> are much closer</p><ul><li>Banking data<ul><li>“$100.50” is close to “an account balance of $100.50”</li><li>Little room for a different interpretation</li></ul></li><li>Healthcare data<ul><li><strong>More subjective</strong>: “I feel sick”, difficult to measure</li></ul></li></ul><p><strong>Need for conventions and standardization</strong></p></li></ul><h2 id="establishing-a-health-information-system-his-12742">Establishing a health information system (HIS) 1:27:42</h2><p><strong>Need for strategy, architectures, education and research in HIS</strong></p><ol type="1"><li>Shift from paper-based to computer-based processing and storage</li><li>Shift from institution-centered towards regional and global HIS</li><li>Inclusion of patients and health consumers</li><li>Use of HIS data for health care planning and clinical and epidemiological research</li><li>Shift from focusing on technical HIS problems to strategic information management</li><li>Inclusion of new types of data</li><li>Inclusion of new technologies</li></ol><h2 id="different-concepts-and-interpretations-12950">Different concepts and interpretations 1:29:50</h2><p><img src="/images/HMS/223522.png" /></p><h2 id="electronic-medical-record-emr-13834">Electronic Medical Record (EMR) 1:38:34</h2><h3 id="purposes">Purposes</h3><ul><li>Collecting relevant data</li><li>Reporting</li><li>Management of medical data</li><li>Administrative management</li><li>Attestation</li><li>Correspondence</li><li>…</li></ul><h3 id="what-should-be-in-the-emr">What should be in the EMR?</h3><h4 id="step-1-simplifying-in-a-ridiculous-way">STEP 1: Simplifying in a ridiculous way</h4><ul><li><p>One doctor only, for instance a general practitioner</p></li><li><p>Not part of any hospital, center, …</p></li><li><p>No shared information, …</p></li><li><p>Patients don’t visit multiple doctors</p></li><li><p>…</p></li><li><p>Doctor keeps track of patients and encounters with the patient</p></li><li><p>1 patient + 1 doctor + 1 encounter = 1 “case”</p></li><li><p>EMR = System to store cases, but <strong>what is a case</strong>?</p></li></ul><p><strong>Defining the elements of a “case”</strong>: <strong><u>1 patient, 1 doctor, 1 encounter</u></strong></p><ul><li>Invent a very simple scenario of a patient with a simple problem.</li><li>Invent a patient with multiple chronic diseases.</li><li>What data does the doctor need to document these two cases?</li><li>What is the same and what is different for both cases and WHY is it?</li></ul><h4 id="step-2-cluster-14342">STEP 2: Cluster 1:43:42</h4><p>Cluster according to <strong>SOAP</strong></p><ul><li>1 patient + 1 physician + 1 contact = 1 case<ul><li><strong>S</strong>ubjective element<ul><li>Patient's complaint</li></ul></li><li><strong>O</strong>bjective measurement<ul><li>From investigation, blood work, imaging</li></ul></li><li><strong>A</strong>ssessment<ul><li>E.g. renal failure</li></ul></li><li><strong>P</strong>lanning<ul><li>30mg Abc /day, X-ray ordered</li></ul></li></ul></li></ul><h5 id="soap-in-a-nutshell-14904">Soap in a nutshell 1:49:04</h5><h6 id="subjective">Subjective</h6><ul><li>The chief complaint (CC) or the history of present illness (HPI).</li><li>This is the main reason of the patient’s visit</li><li><strong>OLD CARTS</strong><ul><li><strong>O</strong>nset</li><li><strong>L</strong>ocation</li><li><strong>D</strong>uration</li><li><strong>C</strong>haracter</li><li><strong>A</strong>lleviating / Aggravating factors</li><li><strong>R</strong>adiation</li><li><strong>T</strong>emporal Pattern</li><li><strong>S</strong>everity</li></ul></li></ul><h6 id="objective">Objective</h6><p>Information gathered by the doctor, through observation or measurement, including:</p><ul><li>Vital signs (height, weight, temperature, BP, …)</li><li>Physical exam</li><li>Laboratory tests</li><li>Prescriptions</li></ul><h6 id="assessment">Assessment</h6><p>This is the medical diagnosis</p><ul><li>Assessment of the situation, even if obvious</li><li>Includes possible and objective statements</li><li>Does not repeat the subjective and objective data, but key points reaching a conclusion</li></ul><h6 id="plan">Plan</h6><p>What the doctor will do treat the patient’s concerns and based on the assessments:</p><ul><li>Ordering lab tests, radiological work-ups</li><li>Referrals, discharge, future appointments, etc.</li><li>Prescriptions, monitoring</li><li>Numbered by severity and urgency</li></ul><h6 id="how-does-a-real-soap-look-like">How does a real SOAP look like?</h6><p><img src="/images/HMS/SOAP1.png" /></p><p><img src="/images/HMS/SOAP2.png" /></p><p><img src="/images/HMS/SOAP3.png" /></p><h2 id="electronic-health-record-ehr"><a href="https://en.wikipedia.org/wiki/Electronic_health_record">Electronic health record (EHR)</a></h2><p>Also wrongly referred to as</p><ul><li>Electronic medical record (EMR), USA</li><li>Electronisch medisch dossier (EMD-&gt;hospital), Globaal medisch dossier (GMD-&gt;GP), BE</li></ul><p>Definition</p><ul><li><em>The systematized collection of patient and population electronically-stored health information in a digital format (Wikipedia)</em></li><li><em>An electronic version of a patients medical history, that is maintained by the provider over time, and may include all of the key administrative clinical data <u>relevant to that person’s care under a particular provider</u>, including demographics, progress notes, problems, medications, past medical history, radiology reports… (Medicare, USA)</em></li></ul><p>In practice</p><ul><li>Work in progress, reality is yet to meet our ambitions</li></ul><h2 id="the-ehr-is-more-than-simple-cases">The EHR is more than “simple” cases</h2><p>We defined earlier an EMR as a system to store cases: 1 patient, 1 doctor, 1 encounter.</p><p>This approach does not reflect typical healthcare organization</p><ul><li>Patient relationships</li><li>Patient’s history</li><li>Multiple treating physicians</li><li>…</li></ul><p>EHR = EMR that <strong>conforms to nationally recognized interoperability standards</strong> and that can be created, managed, and consulted by authorized clinicians and staff <u>across more than one health care organization</u></p><h2 id="the-ehr-is-typically-part-of-a-practice-management-system-pms">The EHR is typically part of a practice management system (PMS)</h2><p><img src="/images/HMS/225118.png" /></p><h2 id="recall">Recall</h2><p>An Electronic Health Record could be structured on a case basis:</p><ul><li>One patient + one doctor + one visit = 1 case</li></ul><p>Information could be structured according to the “SOAP” principle</p><ul><li><strong>S</strong>ubjective</li><li><strong>O</strong>bjective</li><li><strong>A</strong>ssessment</li><li><strong>P</strong>lan</li></ul><p>Even if we consider an individual doctor that does not share any information with any organisation, free text of each of the SOAP fields is far from optimal …</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Analytics in Health Care and Connected Care </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Philosophy of Artificial Intelligence</title>
      <link href="2021/02/14/2021-02-12-Introduction/"/>
      <url>2021/02/14/2021-02-12-Introduction/</url>
      
        <content type="html"><![CDATA[<h1 id="what-is-ai">What is AI?</h1><p><a href="https://caliweb.vub.be/?page=course-offer&amp;id=001600&amp;anchor=1&amp;target=pr&amp;year=2021&amp;language=en&amp;output=html">Website</a></p><p><a href="https://www.dropbox.com/s/guvn1qlsl6wq2cd/Techniques%20of%20Artificial%20Intelligence%202021%20Topic%201.mov?dl=0">Video 12:11</a></p><h2 id="what-is-meant-by-human-intelligence">What is meant by human intelligence?</h2><ul><li>exams, education...perform well in intelligence tests</li><li>skills – languages, chess, mathematical reasoning</li><li>cognitive, conative, emotional/affective intelligence</li><li>speed, efficiency and creativity of information processing</li></ul><h2 id="what-is-artificial-intelligence-1411">What is Artificial Intelligence? 14:11</h2><p>What might make computers smart...clever....intelligent... intellectual?</p><ul><li>Beat human at chess <strong>✓</strong> IBM’s Deep Blue beat Gary Kasparov in 1997</li><li>Discover mineral fields <strong>✓</strong> PROSPECTOR closely matched human experts in 1978</li><li>Diagnose disease <strong>✓</strong> MYCIN diagnosed 68% of cases acceptably in 1975</li><li>Hold a convincing conversation, social interaction <strong>✘</strong> <u>Turing “test”</u></li></ul><p>Marvin Minsky : "The science of making machines do things that would require intelligence if done by men."</p><p>Eugene Charniak: "The study of mental faculties through the use of computational models."</p><p>John L. Gordon: "The aim of Artificial Intelligence is to create intelligent machines and through this, to understand the principles of intelligence. At the moment, we can settle for creating less stupid machines."</p><h2 id="two-kinds-of-artificial-intelligence-2021">Two kinds of Artificial Intelligence 20:21</h2><p><strong>Weak AI</strong>: Machines can be made to act <em>as though</em> they were intelligent</p><p><strong>Strong AI</strong>: Machines that act intelligently and have real, <a href="https://www.dictionary.com/browse/conscious#:~:text=adjective,was%20conscious%20during%20the%20operation."><em>conscious</em></a> minds</p><h2 id="four-categories-of-ai-2415">Four categories of AI 24:15</h2><ul><li>Thinking Humanly<ul><li>“The exciting new effort to make computers think ... machines with minds, in the full and literal sense‘” (Haugeland, 1985)</li><li>“[The automation of] activities that we associate with human thinking, activities such as decision-making, problem solving, learning ...” (Bellman, 1978)</li></ul></li><li>Thinking Rationally<ul><li>“The study of mental faculties through the use of computational models” (Charniak and McDermott,1985)</li><li>“The study of the computations that make it possible to perceive, reason, and act” (Winston, 1992)</li></ul></li><li>Acting Humanly<ul><li>“The art of creating machines that perform functions that require intelligence when performed by people” (Kurzweil, 1990)</li><li>“The study of how to make computers do things at which, at the moment, people are better” (Rich and Knight, 1991)</li></ul></li><li>Acting Rationally<ul><li>“A field of study that seeks to explain and emulate intelligent behaviour in terms of computational processes” (Schalkoff, 1990)</li><li>“The branch of computer science that is concerned with the automation of intelligent behaviour” (Luger and Stubblefield, 1993)</li></ul></li></ul><h3 id="acting-humanly-2831">Acting Humanly 28:31</h3><p>"Instead of asking if machines can think, ask whether can pass a behavioural intelligence test."</p><p>Turing asked the question “<b>Can machines think?</b>”</p><ul><li><p>but because “think” is an ill-defined term, he proposed a thought experiment instead: The <strong>Imitation Game</strong></p></li><li><p>based on Victorian parlour game where interrogator guesses gender of unseen person</p><figure><img src="/images/AI/690654.png" alt="" /><figcaption>The Imitation Game</figcaption></figure></li></ul><p>In Tuning’s Game, human interrogator must decide if unseen chat partner is <strong>a human or a computer.</strong></p><p><strong>To convince the interrogator of its intelligence, the computer must:</strong></p><ul><li>understand and generate language</li><li>know about the world</li><li>reason about the world</li><li>learn about the dialogue and the interrogator</li><li>combine all this knowledge and reasoning instantaneously</li></ul><p>Turing’s paper is usually interpreted as though he is proposing a test for intelligence: <strong>The Turing Test</strong>, However, he doesn’t actually say that in his paper: Another interpretation is that this is a thought experiment intended to demonstrate that you can’t answer the question “<strong>is a machine thinking?</strong>”</p><p>To build a machine that thinks like a human we must first know how we think, e.g.,</p><ul><li>through introspection (thinking about how we do it – unscientific)</li><li>through psychological experiments (proper science)</li></ul><p>A precise theory of mind can be expressed as a computer program:</p><ul><li>similar I/O and timing behaviour to humans is evidence that similar mechanisms to the program are operating in humans</li><li>compare trace of reasoning steps of program to that of humans, e.g., the “General Problem Solver” (Newell and Simon, 1961)</li></ul><h3 id="thinking-humanly-3436">Thinking Humanly 34:36</h3><p>To build a machine that thinks like a human we must first know how we think, e.g.,</p><ul><li>through introspection (thinking about how we do it – unscientific)</li><li>through psychological experiments (proper science)</li></ul><p>A precise theory of mind can be expressed as a computer program:</p><ul><li>similar I/O and timing behaviour to humans is evidence that similar mechanisms to the program are operating in humans</li><li>compare trace of reasoning steps of program to that of humans, e.g., the “General Problem Solver” (Newell and Simon, 1961)</li></ul><h4 id="cognitive-science-and-the-ai-diaspora-3619">Cognitive Science and the AI Diaspora 36:19</h4><ul><li><p>Cognitive science unites</p><ul><li>computer models from AI</li><li>experimental techniques from psychology</li></ul><p>to try to construct precise and testable theories of how the mind works.</p></li><li><p>Now a distinct subject from AI</p><p>Indeed, what once was a unified subject is now a collection of specialised subfields, e.g.</p><ul><li>machine vision</li><li>computational creativity</li><li>automated reasoning</li><li>etc.</li></ul></li></ul><h3 id="thinking-rationally-3729">Thinking Rationally 37:29</h3><p>Aristotle’s syllogisms provided patterns for argument structure that always gave correct conclusions from correct premises, e.g.,</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Socrates is a man</span><br><span class="line">All men are mortal</span><br><span class="line">∴ Socrates is mortal</span><br></pre></td></tr></table></figure><p>Precursor of formal logic that provides a precise notation for statements about things in the world and relations between them.</p><h4 id="laws-of-thought-3910">“Laws” of Thought 39:10</h4><p>By 1965, programs existed that could solve soluble logical problems, given enough time.</p><p>Logicist tradition in AI hopes to build on such programs to create intelligent systems : logicist emphasis in this module</p><p>Emphasis is on correct inferences. However,</p><ul><li>formalising knowledge into logic is not easy, especially if that knowledge is uncertain</li><li>soluble in principle but, in practice, time and memory are limited</li><li>some problems are undecidable, or only <em>semi-decidable</em>, and can only be solved by search</li></ul><h3 id="thinking-and-acting-rationally-4306">Thinking and Acting Rationally 43:06</h3><ul><li><strong>To act rationally means</strong>: <u>to act so as to achieve one’s goals, given one’s beliefs</u></li><li>An agent is something that acts (i.e. does things) in the world: to do so usefully it also needs to <strong><em>perceive</em></strong> the world</li><li>AI can be viewed as the <strong>study and construction of rational agents</strong>: many connections to economics and control theory</li><li><strong>What is the impact of self-consciousness, emotions, desires, love of music, fear of dying, etc ... on human intelligence?</strong></li></ul><p>When trying to understand someone's intentions, nonhuman primates expect others to <strong>act rationally</strong> by performing the most appropriate action allowed by the environment</p><h4 id="the-rationality-experiment-4700">The rationality experiment 47:00</h4><p>Primates were presented with two potential food containers, Two scenarios: an experimenter:</p><ul><li>touched a container with his elbow when his hands were full</li><li>touched a container with his elbow when his hands were empty</li></ul><p>The primates looked for the food in the container indicated with the elbow more often when the experimenter's hands were full.</p><p>The monkeys considered, just as a human being would, that if someone's hands are full then it is rational for them to use their elbow to indicate the container with food, whereas if their hands are empty it is not rational for them to use their elbow, because they could have used their unoccupied hand.</p><h4 id="rational-agents-in-ai-4820">Rational Agents in AI 48:20</h4><p><strong>Extends laws of thought approach</strong>: one way to act rationally is to reason logically that a particular action will achieve one’s goals and then to perform it</p><p><strong>But acting rationally goes further:</strong></p><ul><li>when no action is provably correct but some action must be taken</li><li>logical reasoning is unnecessary (reflex actions, e.g., pulling hand away from hot stove)</li><li>not all cognitive skills are purely logical (e.g., visual perception, language comprehension)</li></ul><p><strong>Cognitive skills</strong> needed in Turing’s Imitation game allow rational actions:</p><ul><li>communicating effectively helps an agent get by in a complex society</li><li>representing knowledge and reasoning with it enables good decision-making in a wide variety of situations</li><li>learning about how the world works enables agents to generate more efficient strategies for dealing with it</li></ul><p>This approach sums up AI, because:</p><ul><li>it generalises thinking rationally, which is useful but not always necessary</li><li>it is scientifically easier than reproducing human thought or human behaviour</li><li>it equates AI with rational behaviour (clearly defined), rather than human intelligence (much harder to define)</li></ul><p>This module focuses mostly on <strong>rational agent capabilities</strong></p><h2 id="origins-of-ai-as-a-research-field-5200">Origins of AI as a research field 52:00</h2><ul><li>Philosophy<ul><li>logic, methods of reasoning, mind as physical system, foundations of learning, language, rationality</li></ul></li><li>Mathematics<ul><li>formal representation and proof, algorithms, computation, decidability, tractability, probability</li></ul></li><li>Psychology<ul><li>adaptation, phenomena of perception and motor control, experimental techniques (psychophysics, etc.)</li></ul></li><li>Linguistics<ul><li>knowledge representation, grammar</li></ul></li><li>Neuroscience<ul><li>physical substrate for mental activity</li></ul></li><li>Control theory<ul><li>stability, simple optimal agent designs, homeostatic* systems<br /></li></ul></li></ul><h2 id="coming-of-age">Coming of Age</h2><p>The maturing of AI came through the development of knowledge-based systems that use:</p><ul><li>knowledge more suited to making larger reasoning steps</li><li>more problem-specific domain knowledge</li><li>narrow area of expertise</li><li>rules obtained from expert practitioners</li></ul><p>It continues in the various sub-fields mentioned earlier</p><p>Some older AI technology is now considered mainstream computer science</p><ul><li>e.g., machine learning</li></ul><h2 id="recent-events">Recent events</h2><p>The ups and downs of AI have resulted in changes to both content and methodology of AI research.</p><p>There is now more emphasis on</p><ul><li>building on existing theories rather than proposing brand new ones</li><li>basing claims on rigorous theorems or hard experimental evidence rather than intuitions</li><li>showing relevance to real world applications rather than toy examples</li></ul><h2 id="artificial-intelligence-futures">Artificial Intelligence Futures</h2><ul><li>Everyday applications<ul><li>cars – cruise control, fuel injection</li><li>planes – autopilots and lower-level control systems</li><li>lawnmowers &amp; vacuum cleaners</li><li>washing machines</li><li>environmental control - light, thermostats, etc</li></ul></li><li>Large scale applications<ul><li>military strategy planning – Desert Storm</li><li>prevention of mid-air collisions between planes</li><li>disaster recovery services – 9/11</li><li>Deep Space 1 – remote agent experiment</li></ul></li></ul><h3 id="the-big-questions">The Big Questions</h3><ul><li><strong>What is AI, really?</strong><ul><li>Can machines really be said to think?</li><li>What does an intelligent system look like?</li><li>Does an AI need—and can it have—emotions and consciousness?</li></ul></li><li><strong>Can we ever achieve AI, even in principle?</strong><ul><li>How will we know if we’ve done it?</li><li>If we can do it, should we?</li></ul></li></ul><p>A warning?</p><ul><li>In many sci-fi stories, the robots take over</li><li>But we can always unplug...</li></ul>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Techniques of Artificial Intelligence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Introduction and Conceptual Modelling</title>
      <link href="2021/02/12/2021-02-12-Introduction-and-Conceptual-Modelling/"/>
      <url>2021/02/12/2021-02-12-Introduction-and-Conceptual-Modelling/</url>
      
        <content type="html"><![CDATA[<h1 id="introduction-and-conceptual-modelling">Introduction and Conceptual Modelling</h1><p><a href="https://recordings.reu1.blindsidenetworks.com/vub/785a6d4625e12df097a070aca142abecb520cf6e-1612960645104/capture/">Video 2:28 ~ end</a></p><p><a href="https://yintelligence.tech/2021/02/17/2021-02-17-Exercise-1-Entity-Relationship-Model/">Exercise</a></p><h2 id="basic-terminology">Basic Terminology</h2><h3 id="database">Database</h3><ul><li>collection of logically related data</li><li>database <strong><em>schema</em></strong> describes the database design (blueprint)<ul><li>format and relationships between stored data (often rather static)</li></ul></li><li>collection of data stored in a database at <strong>a given time</strong> is called an <strong><em>instance</em></strong> of the database (Database change over time)</li></ul><h3 id="database-management-systems-dbms">Database Management Systems (DBMS)</h3><p>tools (programs) to efficiently store, maintain and retrieve information from a database</p><ul><li>support of <strong><em>c</em></strong>reate, <strong><em>r</em></strong>ead, <strong><em>u</em></strong>pdate and <strong><em>d</em></strong>elete data (<em>CRUD</em> operations)</li><li><em>data definition language (DDL)</em> to define the database schema</li><li><em>data manipulation language (DML)</em> to query and update the data<ul><li>often declarative fourth generation languages (4GLs) such as SQL</li></ul></li><li>data access control, <em>transactions</em> and concurrency control</li></ul><p>A <em>database</em> is an organized collection of inter-related data that models some aspect of the real-world (e.g., modeling the students in a class or a digital music store).</p><p>People often confuse “databases” with “database management systems” (e.g., MySQL, Oracle, MongoDB). <u>A database management system (DBMS) is the software that manages a database.</u> Consider a database that models a digital music store (e.g., Spotify). Let the database hold information about the artists and which albums those artists have released.</p><h2 id="file-processing-system-513">File Processing System 5:13</h2><p>Why should we not just use multiple files in a file system to store our data?</p><p>There are various disadvantages of such an approach:</p><ul><li>data redundancy and inconsistency<ul><li>different file formats over time</li><li>duplication of information in different files</li></ul></li><li>limited data access<ul><li>we have to write new programs to carry out new tasks</li><li>data cannot be retrieved in a convenient and efficient manner</li></ul></li><li>data isolation<ul><li>data may be distributed over different files without a common format</li></ul></li><li>integrity<ul><li>integrity constraints (e.g. balance &gt; 0) are hidden in the program code and not explicitly stated and checked</li></ul></li><li>missing atomic operations<ul><li>system failures and crashes may leave the data in an <strong>inconsistent state</strong> (e.g. only parts of a operation have been carried out)</li><li>example: transfer of money from one account to another account</li><li>we later discuss <strong><em>transaction management</em></strong> as a solution</li></ul></li><li>concurrent update anomalies<ul><li>concurrent updates may leave the data in an <strong>inconsistent state</strong></li><li>example: two programs simultaneously removing money from a single account</li><li>we later discuss <strong><em>scheduling</em></strong> as a solution</li></ul></li><li>limited security control<ul><li>difficult to give a user only access to parts of a file</li></ul></li></ul><p><strong>DBMSs offer solutions to all these problems</strong></p><ul><li><strong><em>concepts and algorithms</em></strong> to solve the problems with file processing systems</li></ul><h2 id="database-management-system-dbms-1325">Database Management System (DBMS) 13:25</h2><p><img src="/images/DB/040226.png" /></p><h2 id="data-abstraction-1441">Data Abstraction 14:41</h2><p><img src="/images/DB/040227.png" /></p><ul><li>DBMS <strong><em>provides abstract view of data</em></strong><ul><li>hide some details how data is stored</li></ul></li><li>Physical level<ul><li><em>physical schema</em> describes <u><em>how</em> the data is stored</u> (complex low-level data structures)</li></ul></li><li>Logical level<ul><li><em>logical schema</em> describes <u><em>what</em> data is stored</u><ul><li>simple structures: attribute names, data types and relationships between data</li><li>implementation of simple structures might be based on complex physical-level structures but the user of the logical level should not be aware of that -&gt; <strong><em>physical data independence</em></strong></li></ul></li></ul></li><li>View level<ul><li><strong><em>subschemas</em></strong> provide only access to <strong><em>parts of the database</em></strong> - reduce complexity and introduce security</li></ul></li></ul><h2 id="duality-of-the-database-schema-1750">Duality of the Database Schema 17:50</h2><p><img src="/images/DB/040756.png" /></p><h2 id="data-models-and-history-of-dbmss-1856">Data Models and History of DBMSs 18:56</h2><ul><li>A <strong><em>data model</em></strong> is a collection of conceptual tools<ul><li>describes data, data relationships, data semantics and constraints</li></ul></li><li>A <strong><em>schema</em></strong> is a description of a particular collection of data, using a given data model.</li><li>Hierarchical model<ul><li>data organised in a <strong>tree structure</strong></li><li>used in early mainframe DBMS<ul><li>e.g. IBM's Information Management System (IMS)</li></ul></li><li>XML documents also described by a hierarchical model</li></ul></li><li>Network model<ul><li>generalised <strong>graph structure</strong></li><li>two main constructs<ul><li><strong><em>records</em></strong> contain fields and <strong><em>sets</em></strong> define relationships between records</li></ul></li><li>navigational operations<ul><li>follow the relationship from one record to another record</li></ul></li></ul></li><li>Relational model<ul><li>collection of tables (<strong><em>relations</em></strong>) containing records</li><li>described in a paper by Edgar F. Codd in 1970</li></ul></li><li>1970s: Relational DBMS<ul><li>IBM's System R (1974) "based" on Codd's paper; SQL added later</li></ul></li><li>Entity-Relationship (ER) model<ul><li>representation of basic objects (<strong><em>entities</em></strong>) and their <strong><em>relationships</em></strong></li><li>widely used in conceptual database design</li></ul></li><li>Object-based data model<ul><li>introduces object identity, encapsulation and methods</li></ul></li><li>1980s: Object Databases<ul><li>seminal work on object databases</li></ul></li><li>1990s: Web Interfaces to Databases<ul><li>databases deployed much more extensively</li></ul></li><li>Semistructured data model<ul><li>no clear separation between data and the schema ("self-describing" data)</li><li>individual data items of the same type may have different attributes</li><li>XML is widely used to represent semistructured data</li></ul></li><li>2000s: XML and XQuery<ul><li>relational databases often still form the core</li></ul></li><li>Later 2000s: Extremely large-scale distributed DBMS<ul><li>BigTable or Hadoop and Hbase</li><li>"NoSQL databases"</li></ul></li></ul><h2 id="database-design-3144">Database Design 31:44</h2><p>Conceptual Design</p><ul><li>define an abstract <strong><em>conceptual</em></strong> application <strong><em>model</em></strong> containing the main domain concepts<ul><li>interact with domain experts to get the requirements</li></ul></li><li>describe the <strong><em>entities</em></strong> (with attributes) and their <strong><em>relationships</em></strong><ul><li>e.g. via ER model</li></ul></li><li>specify the <strong><em>functional requirements</em></strong> (operations)<ul><li>ensure that operations can be realised based on the conceptual model</li></ul></li></ul><p>Database implementation based on conceptual model</p><ul><li><strong><em>logical design phase</em></strong><ul><li>mapping of the conceptual schema to the implementation data model<ul><li>e.g. <strong><em>reduction</em></strong> from the ER model to the relational data model</li></ul></li><li>define the logical database schema</li></ul></li><li><strong><em>physical design phase</em></strong><ul><li>define the physical database layout based on the logical database schema</li></ul></li></ul><p>Two major database design pitfalls have to be avoided 34:08</p><ul><li>we should avoid any <strong><em>redundancy</em></strong> where information is repeated at multiple places since this might lead to <strong><em>inconsistent data</em></strong><ul><li>e.g. a lecture management system where a student's name is stored for each lecture they are attending instead of storing it in a separate student entity</li></ul></li><li>a database design may be <strong><em>incomplete</em></strong> and not enable the representation of certain aspects of the application domain<ul><li>e.g. in a shopping application where the customer information is stored as part of an order we cannot enter new customer data without having an order</li></ul></li></ul><p>There is often <strong>more than one "good design"</strong></p><ul><li>e.g. when do we model something as a relationship and when as a separate entity?</li><li>modelling is a challenging task that requires a combination of engineering skills and "good taste"</li></ul><h2 id="entity-relationship-er-model-3627">Entity-Relationship (ER) Model 36:27</h2><ul><li><strong><em>Conceptual model</em></strong> based on a set of entities and relationships</li><li>An <strong><em>entity</em></strong> is a "thing" or "object" that can be distinguished from other objects</li><li>A <strong><em>relationship</em></strong> describes an association between multiple entities</li><li>Introduced and formalised by Peter Chen</li></ul><h3 id="entities-3722">Entities 37:22</h3><ul><li>An entity represents a <strong><em>distinguishable object</em></strong><ul><li>e.g. specific person, car or company</li></ul></li><li>An entity is described by a <strong><em>number of attributes</em></strong><ul><li>has to be uniquely identifiable by its attributes (<em>ovals</em>)</li></ul></li><li>An <strong><em>entity set</em></strong> is a set of entities with the same type<ul><li>the <strong><em>extension</em></strong> of the entity set (<em>rectangle</em>) are its entities</li></ul></li></ul><p><img src="/images/DB/042029.png" /></p><h3 id="attributes-4035">Attributes 40:35</h3><p>The set of permitted attribute values is called the <strong><em>domain</em></strong> or <strong><em>value set</em></strong></p><ul><li>entity instances can be described by a set of (name,value) pairs</li><li>e.g. {(id, 1576),(name, Lode Hoste)}</li></ul><p>The ER model supports the following attribute types</p><ul><li>simple attributes</li><li><strong><em>composite attributes</em></strong><ul><li>hierarchy of sub-attributes</li></ul></li><li><strong><em>multivalued attributes</em></strong><ul><li>optional lower and upper bounds</li></ul></li><li><strong><em>derived attributes</em></strong><ul><li>computed via relationships or other attribute values</li></ul></li></ul><p>A <strong>multivalued attribut</strong>e is represented by a <strong><em>double ellipse</em></strong></p><p><strong>Derived attributes</strong> are indicated by <strong><em>dashed ellipses</em></strong></p><p><u>address</u> is an example of composite attribute</p><figure><img src="/images/DB/04242911.png" alt="" /><figcaption>44:36 - 50:05</figcaption></figure><h3 id="keys-5237">Keys 52:37</h3><ul><li>An entity's attribute values must uniquely identify the entity</li><li>A subset of attributes that uniquely identify an entity is called <strong><em>superkey</em></strong></li><li>A minimal superkey without any unnecessary attributes is called a <strong><em>candidate key</em></strong></li><li>The <strong><em>primary key</em></strong> is one of the candidate keys chosen by the database designer for unique entity identification<ul><li>in the ER model, the primary key is highlighted by the set of <strong><em>underlined attributes</em></strong></li><li>the value of a primary key should change very rarely</li></ul></li></ul><h3 id="relationships-10002">Relationships 1:00:02</h3><ul><li>A relationship is an association between multiple entities</li><li>A <strong><em>relationship set</em></strong> (<em>diamond</em>) is a set of relationships of the same type</li></ul><figure><img src="/images/DB/042817.png" alt="" /><figcaption>~ 1:05:00</figcaption></figure><ul><li>We can have <strong><em>binary</em></strong> or <strong><em>n-ary relationship sets</em></strong><ul><li>{(e<sub>1</sub>, e<sub>2</sub>,..., e<sub>n</sub>) | e<sub>1</sub> ∈ E<sub>1</sub>, e<sub>2</sub> ∈ E<sub>2</sub>,..., e<sub>n</sub> ∈ E<sub>n</sub>}</li></ul></li><li>Each <strong><em>relationship instance</em></strong> in an ER schema represents an association between the involved entities</li><li>The <strong><em>role</em></strong> defines an entity's function in a relationship<ul><li>has to be explicitly defined if the same entity set participates more than once in a relationship set (<strong><em>recursive</em></strong> relationship)</li></ul></li><li>A relationship may contain <strong><em>descriptive attributes</em></strong></li><li>A relationship instance must be uniquely identifiable by its entities (without any descriptive attributes)<ul><li>i.e. a relationship set cannot contain two relationship entities that only differ in their descriptive attributes</li></ul></li></ul><figure><img src="/images/DB/643251.png" alt="" /><figcaption>Relationship with Roles and Attributes 1:07:27 ~ 1:08:45</figcaption></figure><figure><img src="/images/DB/643252.png" alt="" /><figcaption>Example of a 3-ary Relationship 1:09:06 ~ 1:10:15</figcaption></figure><h3 id="cardinality-constraints-11016">Cardinality Constraints 1:10:16</h3><p>A relationship can be <em>one-to-one</em>, <em>one-to-many</em>, <em>many-to-one</em> or <em>many-to-many</em></p><p>An <strong><em>arrow</em></strong> indicates a to-one relationship</p><ul><li>cardinality constraints may also be expressed by numbers<ul><li>e.g. 0..<em>, 1..</em>, 0..1, 1..1, 2..5</li></ul></li><li>a <strong><em>double line</em></strong> or 1..* indicates a <strong>total participation</strong> constraint</li></ul><p><img src="/images/DB/643222.png" /></p><h3 id="weak-entity-sets-10509--12410">Weak Entity Sets 1:05:09 -1:24:10</h3><p>An entity set with a primary key is called a <strong><em>strong</em></strong> entity set</p><p>A <strong><em>weak</em></strong> entity set (<em>double rectangle</em>) does not have enough attributes to form a primary key</p><p><img src="/images/DB/643224.png" /></p><p>A weak entity set must be associated with <strong>an identifying entity</strong> set via an <strong>identifying relationship</strong> (<em>double diamond</em>)</p><ul><li>a weak entity set is <strong><em>existence dependent</em></strong> on an identifying entity set<ul><li>can also participate in other non-identifying relationships</li></ul></li><li>a weak entity set must relate to the identifying entity set via a <strong><em>total participation</em></strong> constraint and each weak entity instance can only be related to one identifying entity instance</li><li>a <strong><em>discriminator</em></strong> or <strong><em>partial key</em></strong> (<em>underlined dashed attributes</em>) uniquely identifies a weak entity relative to a strong entity</li></ul><p>In some cases a weak entity may also be expressed as a multivalued composite attribute</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Databases </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Course overview</title>
      <link href="2021/02/12/2021-02-12-overview/"/>
      <url>2021/02/12/2021-02-12-overview/</url>
      
        <content type="html"><![CDATA[<h1 id="overview">Overview</h1><p><a href="https://caliweb.vub.be/?page=course-offer&amp;id=009097&amp;anchor=1&amp;target=pr&amp;year=2021&amp;language=en&amp;output=html">Website</a></p><p><a href="https://recordings.reu1.blindsidenetworks.com/vub/785a6d4625e12df097a070aca142abecb520cf6e-1612960645104/capture/">Video ~ 2:28</a></p><ol type="1"><li>Introduction and conceptual modelling</li><li>Extended ER Model and other Modelling Languages</li><li>Relational Model and Relational Algebra</li><li>Relational Database Design<ol type="1"><li>reduction</li><li>functional dependencies and normalisation</li></ol></li><li>Structured Query Language (SQL)</li><li>Advanced SQL</li><li>DBMS Architectures and Features<ol type="1"><li>DBMS components</li><li>client-server architecture</li><li>parallelisation and distribution</li></ol></li><li>Storage Management</li><li>Access Methods<ol type="1"><li>indexing and hashing</li></ol></li><li>Query Processing and Optimisation</li><li>Transaction Management<ol type="1"><li>transactions</li><li>concurrency and recovery</li></ol></li><li>NoSQL Databases</li><li>Current Trends and Review</li></ol>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Databases </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Process management</title>
      <link href="2021/02/10/2021-02-10-Basis-of-Operating-Systems-Process-management/"/>
      <url>2021/02/10/2021-02-10-Basis-of-Operating-Systems-Process-management/</url>
      
        <content type="html"><![CDATA[<h1 id="basis-of-os---process-management">Basis of OS - Process management</h1><p><a href="https://vub-my.sharepoint.com/personal/bruno_da_silva_vub_be/_layouts/15/onedrive.aspx?originalPath=aHR0cHM6Ly92dWItbXkuc2hhcmVwb2ludC5jb20vOmY6L2cvcGVyc29uYWwvYnJ1bm9fZGFfc2lsdmFfdnViX2JlL0V1ZWdTdWlYa3JCSWhnNXhVMFgzZ2s4QjhSNlFQYkRFbVZLMFNCUmlIQXVTWVE%5FcnRpbWU9U1pBOVNQVE4yRWc&amp;id=%2Fpersonal%2Fbruno%5Fda%5Fsilva%5Fvub%5Fbe%2FDocuments%2FCOURSES%2FOSSEC%2020%20%2D%2021%20Semester%202%2FRecordings%2F%5BOSSEC%5D%20%2D%20operating%20systems%20and%20security%20%2D%20lecture%201%2Emp4&amp;parent=%2Fpersonal%2Fbruno%5Fda%5Fsilva%5Fvub%5Fbe%2FDocuments%2FCOURSES%2FOSSEC%2020%20%2D%2021%20Semester%202%2FRecordings">Video 50:30 ~ 2:11:37</a></p><h2 id="processes">Processes</h2><h2 id="whats-in-a-process">What’s in a Process?</h2><p><strong>A process consists of:</strong></p><ul><li>Address Space</li><li>One or more threads of control executing in that address space</li><li>Additional system state associated with it<ul><li>Open files</li><li>Open sockets (network connections)</li><li>…</li></ul></li></ul><h3 id="the-process-model">The process model</h3><p><strong>A (sequential) process</strong> = an instance of an executing program, including the current values of the program counter, registers and variables.</p><p>A sequential program, typically an <strong>infinite loop</strong></p><ul><li><p>Executes concurrently with other processes</p></li><li><p>We are about to enter the world of “concurrent programming”</p><p><img src="/images/OP/052316.png" /></p></li></ul><h3 id="basic-operations-on-processes-5823">Basic operations on processes 58:23</h3><ul><li>Create and terminate<ul><li>Create is like a procedure call but caller doesn’t wait</li><li>Terminate kills a process, destroying all data</li></ul></li><li>Suspend and resume<ul><li>Suspend puts a process on hold, saving state for later execution</li><li>Resume starts the process again where it left off</li></ul></li><li>Join<ul><li>A process <strong>suspends</strong> until a particular child process finishes execution</li></ul></li></ul><h4 id="process-creation-and-termination">Process creation and termination</h4><h5 id="events-which-cause-process-creation">Events which cause process creation:</h5><ul><li>System initialization: launches <strong>foreground processes</strong> (interacting with users) and <strong>background processes</strong> (typically called daemons)</li><li>Execution of a process creation system call by a running process.</li><li>A user request to create a new process.</li><li>Initiation of a batch job.</li></ul><h5 id="events-which-cause-process-termination">Events which cause process termination:</h5><ul><li>Normal exit (voluntary).</li><li>Error exit (voluntary).</li><li>Fatal error (involuntary).</li><li>Killed by another process (involuntary).</li></ul><h3 id="process-states-10536">Process states 1:05:36</h3><ul><li><p><strong>Running state</strong>: actually using the CPU at that instant</p></li><li><p><strong>Ready state</strong>: runnable; temporarily stopped to let another process run</p></li><li><p><strong>Blocked state</strong>: unable to run until some external event happens</p></li></ul><p><img src="/images/OP/053319.png" /></p><h3 id="implementation-of-processes-1-0924">Implementation of processes 1: 09:24</h3><p>The lowest layer of a process-structured operating system handles <strong>interrupts and scheduling</strong>.</p><p>Above that layer are <strong>sequential processes</strong>.</p><p><img src="/images/OP/053844.png" /></p><p>The operating system maintains a table, called the <strong>process table</strong>.</p><p>Contains one <strong>entry</strong> per process.</p><p>Skeleton of what the lowest level of the operating system does when an <strong>interrupt</strong> occurs.</p><h2 id="threads-11236">Threads 1:12:36</h2><p><strong>Thread</strong> = light-weight processes, created by a mother process (program) for pseudo-parallel processing.</p><p><strong>No memory protection</strong>: share memory with each other and the mother process.</p><h3 id="thread-usage">Thread usage</h3><p><img src="/images/OP/183428.png" /></p><h3 id="the-classical-thread-model-11833">The classical thread model 1:18:33</h3><p><img src="/images/OP/83548.png" /></p><p>The first column lists some items shared by all threads in a process.</p><p>The second one lists some items private to each thread.</p><p><img src="/images/OP/183727.png" /></p><p><strong>Each thread has its own stack.</strong></p><p><img src="/images/OP/183916.png" /></p><h3 id="posix-threads-how-to-make-a-thread-12442">Posix Threads (How to make a thread? 1:24:42)</h3><p>IEEE standard 1003.1c: enables writing of portable threaded programs</p><p>The threads package it defines is called <strong>Pthreads</strong></p><p>The standard defines over 60 function calls, which is far too many to go over here.</p><h3 id="implementing-threads-in-user-space-or-in-kernel-12917">Implementing threads in user space or in kernel 1:29:17</h3><ol type="1"><li><p>A user-level threads package.</p></li><li><p>A threads package managed by the kernel.</p><p><img src="/images/OP/185004.png" /></p></li></ol><h3 id="processes-vs-threads"><strong>Processes vs Threads</strong></h3><h4 id="regular-processes">Regular processes</h4><ul><li>Heavyweight process</li><li>Own virtual address space (stack, data, code)</li><li>System resources (e.g., open files)</li></ul><h4 id="threads">Threads</h4><ul><li>Lightweight process</li><li>Sub-process within process</li><li>Only program counter, stack, and registers</li><li>Shares <strong>address space, system resources</strong> with other threads<ul><li>Allows <u><strong>quicker</strong></u> communication between threads</li></ul></li><li><u>Small compared to heavyweight processes</u><ul><li>Can be created quickly</li><li>Low cost switching between threads</li></ul></li></ul><h2 id="interprocess-communication-ipc-13636">Interprocess communication (IPC) 1:36:36</h2><h3 id="race-conditions">Race conditions</h3><p>Two processes want to access shared memory at the same time.</p><p><strong>Race condition if the CPU decides to switch from the just initiated Process A</strong>, that has just received the information that in=7, <strong>to Process B</strong> that will also observe in=7. Both will write their file at the same location in the printer spooler directory.</p><p><img src="/images/OP/185758.png" /></p><h3 id="critical-regions">Critical regions</h3><p>Conditions required to <u>avoid race condition</u>:</p><ul><li>No two processes may be simultaneously inside their <strong>critical regions</strong>.</li><li>No assumptions may be made about <strong>speeds or the number of CPUs</strong>.</li><li>No process running outside its critical region may block other processes.</li><li>No process should have to wait forever to enter its critical region.</li></ul><figure><img src="/images/OP/190129.png" alt="" /><figcaption>1:40:37-1:41:13</figcaption></figure><h3 id="mutual-exclusion-with-busy-waiting">Mutual exclusion with busy waiting</h3><p>Proposals for achieving mutual exclusion:</p><ul><li>Disabling interrupts<ul><li>Problems: race conditions, too much control to the user, multicore systems (interrupts handled per core)</li></ul></li><li>Lock shared variables<ul><li>lock=0: no process in critical region; lock=1: process in critical region</li><li>Problem: race conditions remain (cfr. spooler directory)</li></ul></li></ul><p>Several alternatives:</p><ul><li>Strict alternation</li><li>Peterson's solution</li><li>The Test and Set Lock (TSL) instruction</li></ul><h3 id="communication-among-processes">Communication among processes</h3><ul><li><p>Processes need to communicate data and signals to <u>solve their computation problem</u>.</p><p>​ -&gt; Processes that don’t communicate are just independent programs solving separate problems</p></li><li><p>Basic example: <strong>producer/consumer</strong></p><ul><li>Process A produces data items, Process B consumes them</li><li>E.g., A decodes video packets, B display decoded packets on a screen</li></ul></li></ul><p><img src="/images/OP/91949.png" /></p><p>The producer-consumer problem (or bounded-buffer problem) with a fatal race condition -&gt; Possible solution = wake-up waiting bits</p><p><img src="/images/OP/92317.png" /></p><h3 id="how-do-we-achieve-this-communication"><strong>How do we achieve this communication?</strong></h3><h5 id="shared-memory-processes-read-and-write-shared-variables">Shared memory: Processes read and write shared variables</h5><ul><li>No time overhead, easy to implement</li><li>But, hard to use – mistakes are common</li></ul><p><strong>Example</strong>: Producer/consumer with a mistake 1:46:14 -1:47:47</p><ul><li><p>Share buffer[N], count</p><p>▶ <em>count</em> = # of valid data items in <em>buffer</em></p></li><li><p><em>process</em>A produces data items and stores in <em>buffer</em></p><p>▶ If <em>buffer</em> is full, must wait</p></li><li><p><em>process</em>B consumes data items from <em>buffer</em></p><p>▶ If <em>buffer</em> is empty, must wait</p></li><li><p>Error when both processes try to update count concurrently (lines 10 and 19) and the following execution sequence occurs. Say “count” is 3.</p><ol type="1"><li>A loads count (count = 3) from memory into register R1 (R1 = 3)</li><li>A increments R1 (R1 = 4)</li><li>B loads count (count = 3) from memory into register R2 (R2 = 3)</li><li>B decrements R2 (R2 = 2)</li><li>A stores R1 back to count in memory (count = 4)</li><li>B stores R2 back to count in memory (count = 2)</li></ol></li><li><p>count now has incorrect value of 2</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data_type buffer[N];</span><br><span class="line">int count &#x3D; 0;</span><br><span class="line">void processA() &#123;</span><br><span class="line">  int i;</span><br><span class="line">  while( 1 ) &#123;</span><br><span class="line">    produce(&amp;data);</span><br><span class="line">    while( count &#x3D;&#x3D; N );&#x2F;*loop*&#x2F;</span><br><span class="line">    buffer[i] &#x3D; data;</span><br><span class="line">    i &#x3D; (i + 1) % N;</span><br><span class="line">    count &#x3D; count + 1;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line">void processB() &#123;</span><br><span class="line">  int i;</span><br><span class="line">  while( 1 ) &#123;</span><br><span class="line">    while( count &#x3D;&#x3D; 0 );&#x2F;*loop*&#x2F;</span><br><span class="line">    data &#x3D; buffer[i];</span><br><span class="line">    i &#x3D; (i + 1) % N;</span><br><span class="line">    count &#x3D; count - 1;</span><br><span class="line">    consume(&amp;data);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">void main() &#123;</span><br><span class="line">  create_process(processA);</span><br><span class="line">  create_process(processB);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="message-passing-data-explicitly-sent-from-one-process-to-another">Message passing: Data explicitly sent from one process to another</h5><p><strong>Safer model, but less flexible</strong></p><ul><li><p>Sending process performs special operation, <strong><em>send</em></strong></p></li><li><p>Receiving process must perform special operation, <strong><em>receive</em></strong>, to receive the data</p></li><li><p>Both operations must explicitly specify which process it is sending to or receiving from</p></li><li><p><strong><em>Receive</em></strong> is blocking, <strong><em>send</em></strong> may or may not be blocking</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void processA() &#123;</span><br><span class="line">  while( 1 ) &#123;</span><br><span class="line">    produce(&amp;data)</span><br><span class="line">    send(B, &amp;data);</span><br><span class="line">    &#x2F;* region 1 *&#x2F;</span><br><span class="line">    receive(B, &amp;data);</span><br><span class="line">    consume(&amp;data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void processB() &#123;</span><br><span class="line">  while( 1 ) &#123;</span><br><span class="line">    receive(A, &amp;data);</span><br><span class="line">    transform(&amp;data)</span><br><span class="line">    send(A, &amp;data);</span><br><span class="line">    &#x2F;* region 2 *&#x2F;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/OP/195747.png" /></p></li></ul><h5 id="shared-memory-and-mutexes">Shared memory and mutexes</h5><h6 id="mutual-exclusion">Mutual exclusion</h6><ul><li><p>Certain sections of code should not be performed concurrently</p><p>Critical section:</p><p>​ Possibly noncontiguous section of code where simultaneous updates, by multiple processes to a shared memory location, can occur</p></li><li><p>When a process enters the critical section, all other processes must be locked out until it leaves the critical section</p><p><strong>Mutex</strong></p><ul><li>A shared object used for locking and unlocking segment of shared data</li><li>Disallows read/write access to memory it guards</li><li>Multiple processes can perform lock operation simultaneously, but only one process will acquire lock</li><li>All other processes trying to obtain lock will be put in blocked state until unlock operation performed by acquiring process when it exits critical section</li><li>These processes will then be placed in runnable state and will compete for lock again</li></ul></li></ul><h6 id="correct-solution-15132--15329">Correct solution 1:51:32 -1:53:29</h6><p>The primitive <strong><em>mutex</em></strong> is used to ensure critical sections are executed in mutual exclusion of each other</p><p>Following the same execution sequence as before:</p><ol type="1"><li>A/B execute lock operation on count_mutex</li><li>Either A or B will acquire lock<ol type="1"><li>Say B acquires it</li><li>A will be put in blocked state</li></ol></li><li>B loads count (count = 3) from memory into register R2 (R2 = 3)</li><li>B decrements R2 (R2 = 2)</li><li>B stores R2 back to count in memory (count = 2)</li><li>B executes unlock operation<ol type="1"><li>A is placed in runnable state again</li></ol></li><li>A loads count (count = 2) from memory into register R1 (R1 = 2)</li><li>A increments R1 (R1 = 3)</li><li>A stores R1 back to count in memory (count = 3)</li><li>Count now has correct value of 3</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data_type buffer[N];</span><br><span class="line">int count &#x3D; 0;</span><br><span class="line">mutex count_mutex;</span><br><span class="line">void processA() &#123;</span><br><span class="line">  int i;</span><br><span class="line">  while( 1 ) &#123;</span><br><span class="line">    produce(&amp;data);</span><br><span class="line">      while( count &#x3D;&#x3D; N );&#x2F;*loop*&#x2F;</span><br><span class="line">      buffer[i] &#x3D; data;</span><br><span class="line">      i &#x3D; (i + 1) % N;</span><br><span class="line">      count_mutex.lock();</span><br><span class="line">      count &#x3D; count + 1;</span><br><span class="line">      count_mutex.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void processB() &#123;</span><br><span class="line">  int i;</span><br><span class="line">  while( 1 ) &#123;</span><br><span class="line">    while( count &#x3D;&#x3D; 0 );&#x2F;*loop*&#x2F;</span><br><span class="line">    data &#x3D; buffer[i];</span><br><span class="line">    i &#x3D; (i + 1) % N;</span><br><span class="line">    count_mutex.lock();</span><br><span class="line">    count &#x3D; count - 1;</span><br><span class="line">    count_mutex.unlock();</span><br><span class="line">    consume(&amp;data);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">void main() &#123;</span><br><span class="line">  create_process(processA);</span><br><span class="line">  create_process(processB);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="semaphore">Semaphore</h6><p>A <strong>semaphore</strong> is a variable or abstract data type that provides a simple but useful abstraction for controlling access by multiple processes to a common resource in a parallel programming environment.</p><p><img src="/images/OP/195243.png" /></p><h6 id="mutex-vs-semaphore">Mutex VS Semaphore</h6><ul><li><p>A Mutex is different than a semaphore as it is a <strong>locking mechanism</strong> while a semaphore is a <strong>signaling mechanism</strong>.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wait (mutex);</span><br><span class="line">...</span><br><span class="line">Critical section</span><br><span class="line">...</span><br><span class="line">signal (mutex);</span><br></pre></td></tr></table></figure></li><li><p>A binary semaphore can be used as a Mutex but a Mutex can never be used as a semaphore.</p></li><li><p>• A semaphore is a signalling mechanism and a thread that is waiting on a semaphore can be signaled by another thread. • This is different than a mutex as the mutex can be signaled only by the thread that called the wait function.</p></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wait(S)</span><br><span class="line">&#123;</span><br><span class="line">  while (S&lt;&#x3D;0);</span><br><span class="line">  S--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">signal(S)</span><br><span class="line">&#123;</span><br><span class="line">  S++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="synchronization-among-processes">Synchronization among processes</h2><p>Sometimes concurrently running processes must synchronize their execution:</p><p>​ When a process must wait for:</p><ul><li>another process to compute some value</li><li>reach a known point in their execution</li><li>signal some condition</li></ul><p>Recall producer-consumer problem:</p><ul><li><em>process</em>A must wait if <em>buffer</em> is full</li><li><em>process</em>B must wait if <em>buffer</em> is empty</li><li>This is called busy-waiting<ul><li>Process executing loops instead of being blocked</li><li>CPU time wasted</li></ul></li></ul><p>More efficient methods:</p><ul><li>Join operation, and blocking send and receive discussed earlier<ul><li>Both block the process so it doesn’t waste CPU time</li></ul></li><li>Condition variables and monitors</li></ul><h3 id="condition-variables-15650">Condition variables 1:56:50</h3><p>Condition variables are a synchronization mechanism available in Pthreads.</p><p>A condition variable is an object that has 2 operations, signal and wait.</p><p>When process performs a wait on a condition variable, the process is blocked until another process performs a signal on the same condition variable.</p><h4 id="how-is-this-done">How is this done?</h4><ul><li>Process A acquires lock on a mutex</li><li>Process A performs wait, passing this mutex<ul><li>Causes mutex to be unlocked</li></ul></li><li>Process B can now acquire lock on same mutex</li><li>Process B enters critical section<ul><li>Computes some value and/or make condition true</li></ul></li><li>Process B performs signal when condition true<ul><li>Causes process A to implicitly reacquire mutex lock</li><li>Process A becomes runnable</li></ul></li></ul><h4 id="example-15856">Example 1:58:56</h4><p>2 condition variables:</p><ol type="1"><li><strong><em>buffer_empty</em></strong> : Signals at least 1 free location available in buffer</li><li><strong><em>buffer_full</em></strong> : Signals at least 1 valid data item in buffer</li></ol><p><em>process</em>A:</p><ul><li><p>produces data item</p></li><li><p>acquires lock (<em>cs_mutex</em>) for critical section</p></li><li><p>checks value of <em>count</em></p></li><li><p>if <em>count</em> = N, <em>buffer</em> is full</p><ul><li>performs wait operation on <em>buffer_empty</em></li><li>this releases the lock on <em>cs_mutex</em> allowing <em>process</em>B to enter critical section, consume data item and free location in <em>buffer</em></li><li><em>process</em>B then performs signal</li></ul></li><li><p>if <em>count</em> &lt; N, <em>buffer</em> is not full</p><ul><li><p><em>process</em>A inserts data into <em>buffer</em></p></li><li><p>increments <em>count</em></p></li><li><p>signals <em>process</em>B making it runnable if it has performed a wait operation on <em>buffer_full</em></p></li></ul></li></ul><figure class="highlight plain"><figcaption><span>using condition variables</span></figcaption><table><tr><td class="code"><pre><span class="line">data_type buffer[N];</span><br><span class="line">int count &#x3D; 0;</span><br><span class="line">mutex cs_mutex;</span><br><span class="line">condition buffer_empty, buffer_full;</span><br><span class="line">void processA() &#123;</span><br><span class="line">  int i;</span><br><span class="line">  while( 1 ) &#123;</span><br><span class="line">    produce(&amp;data);</span><br><span class="line">    cs_mutex.lock();</span><br><span class="line">    if( count &#x3D;&#x3D; N ) buffer_empty.wait(cs_mutex);</span><br><span class="line">    buffer[i] &#x3D; data;</span><br><span class="line">    i &#x3D; (i + 1) % N;</span><br><span class="line">    count &#x3D; count + 1;</span><br><span class="line">    cs_mutex.unlock();</span><br><span class="line">    buffer_full.signal();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">void processB() &#123;</span><br><span class="line">  int i;</span><br><span class="line">  while( 1 ) &#123;</span><br><span class="line">    cs_mutex.lock();</span><br><span class="line">    if( count &#x3D;&#x3D; 0 ) buffer_full.wait(cs_mutex);</span><br><span class="line">    data &#x3D; buffer[i];</span><br><span class="line">    i &#x3D; (i + 1) % N;</span><br><span class="line">    count &#x3D; count - 1;</span><br><span class="line">    cs_mutex.unlock();</span><br><span class="line">    buffer_empty.signal();</span><br><span class="line">    consume(&amp;data);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">void main() &#123;</span><br><span class="line">  create_process(processA); create_process(processB);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="monitors-20037">Monitors 2:00:37</h3><p>Definition: Collection of data and methods or subroutines that operate on data similar to an object-oriented paradigm</p><p>Monitor guarantees only 1 process can execute inside monitor at a time</p><ol type="1"><li>Process X executes while Process Y has to wait</li><li>Process X performs wait on a condition<ul><li>Process Y allowed to enter and execute</li></ul></li><li>Process Y signals condition Process X waiting on<ul><li>Process Y blocked</li><li>Process X allowed to continue executing</li></ul></li><li>Process X finishes executing in monitor or waits on a condition again<ul><li>Process Y made runnable again</li></ul></li></ol><p><img src="/images/OP/200611.png" /></p><h4 id="example-20257-20437">Example 2:02:57-2:04:37</h4><p>Single monitor encapsulates both processes along with <em>buffer</em> and <em>count</em></p><p>One process will be allowed to begin executing firs</p><p>If process B allowed to execute first:</p><ol type="1"><li>Will execute until it finds <em>count</em> = 0</li><li>Will perform wait on <em>buffer_full</em> condition variable</li><li><em>process</em>A now allowed to enter monitor and execute</li><li><em>process</em>A produces data item</li><li>finds <em>count</em> &lt; N so writes to <em>buffer</em> and increments <em>count</em></li><li><em>process</em>A performs signal on <em>buffer_full</em> condition variable</li><li><em>process</em>A blocked</li><li><em>process</em>B reenters monitor and continues execution, consumes data, etc.</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Monitor &#123;</span><br><span class="line">  data_type buffer[N];</span><br><span class="line">  int count &#x3D; 0;</span><br><span class="line">  condition buffer_full, condition buffer_empty;</span><br><span class="line">  void processA() &#123;</span><br><span class="line">    int i;</span><br><span class="line">    while ( 1 ) &#123;</span><br><span class="line">    produce(&amp;data);</span><br><span class="line">    if( count &#x3D;&#x3D; N ) buffer_empty.wait();</span><br><span class="line">    buffer[i] &#x3D; data;</span><br><span class="line">    i &#x3D; (i + 1) % N;</span><br><span class="line">    count &#x3D; count + 1;</span><br><span class="line">    buffer_full.signal();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">void processB() &#123;</span><br><span class="line">  int i;</span><br><span class="line">  while( 1 ) &#123;</span><br><span class="line">    if( count &#x3D;&#x3D; 0 ) buffer_full.wait();</span><br><span class="line">    data &#x3D; buffer[i];</span><br><span class="line">    i &#x3D; (i + 1) % N;</span><br><span class="line">    count &#x3D; count - 1;</span><br><span class="line">    buffer_empty.signal();</span><br><span class="line">    consume(&amp;data);</span><br><span class="line">    buffer_full.signal();</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125; &#x2F;* end monitor *&#x2F;</span><br><span class="line">void main() &#123;</span><br><span class="line">  create_process(processA); create_process(processB);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="scheduling">Scheduling</h2><p><a href="https://vub-my.sharepoint.com/personal/bruno_da_silva_vub_be/_layouts/15/onedrive.aspx?originalPath=aHR0cHM6Ly92dWItbXkuc2hhcmVwb2ludC5jb20vOmY6L2cvcGVyc29uYWwvYnJ1bm9fZGFfc2lsdmFfdnViX2JlL0V1ZWdTdWlYa3JCSWhnNXhVMFgzZ2s4QjhSNlFQYkRFbVZLMFNCUmlIQXVTWVE%5FcnRpbWU9aFliRXdZM1MyRWc&amp;id=%2Fpersonal%2Fbruno%5Fda%5Fsilva%5Fvub%5Fbe%2FDocuments%2FCOURSES%2FOSSEC%2020%20%2D%2021%20Semester%202%2FRecordings%2F%5BOSSEC%5D%20%2D%20operating%20systems%20and%20security%20%2D%20lecture%202%2Emp4&amp;parent=%2Fpersonal%2Fbruno%5Fda%5Fsilva%5Fvub%5Fbe%2FDocuments%2FCOURSES%2FOSSEC%2020%20%2D%2021%20Semester%202%2FRecordings">Video 1:54:50 ~ 2:07:00</a></p><h3 id="process-behaviour-15632">Process behaviour 1:56:32</h3><ol type="a"><li><p>A CPU/Compute-bound process.</p></li><li><p>An I/O-bound process.</p></li></ol><figure><img src="/images/OP/093428.png" alt="" /><figcaption>Bursts of CPU usage alternate with periods of waiting for I/O.</figcaption></figure><p>Must meet timing requirements when multiple concurrent processes implemented on single general-purpose processor.</p><ul><li>Not true multitasking</li></ul><p><strong>Scheduler</strong> 1:58:08</p><ul><li>Special is a special process that decides when and for how long each process is executed.</li><li>The main role of processes scheduling refers to identifying the order in which processes should execute in a system.</li><li>A schedule for a given set of processes is thus an assignment of time-frames and resources to individual processes</li></ul><p>A task scheduler can be implemented as preemptive or non-preemptive scheduler based on the tasks</p><ul><li><strong>Preemptive</strong><ul><li>Determines how long a process executes before preempting to allow another process to execute</li><li>Time quantum: predetermined amount of execution time preemptive scheduler allows each process (may be 10 to 100s of milliseconds long)</li><li>It allows that the execution of an executing processes may be stopped if a higher priority process requires service.</li><li>Determines which process will be next to run</li></ul></li><li><strong>Non-preemptive</strong><ul><li>Once a process has been scheduled for execution, it runs to completion or until it is blocked for some reason (e.g. waiting for I/O).</li><li>Only determines which process is next after current process finishes execution</li></ul></li></ul><h3 id="scheduling-algorithms-and-their-goals-20041">Scheduling algorithms and their goals 2:00:41</h3><p>Some goals of different scheduling algorithms under different circumstances.</p><p><img src="/images/OP/0934281.png" /></p><h4 id="scheduling-in-batch-systems-20206">Scheduling in batch systems 2:02:06</h4><p>First-come first-served</p><p>Shortest job first</p><p>Shortest remaining time next</p><figure><img src="/images/OP/0934282.png" alt="" /><figcaption>An example of shortest job first scheduling</figcaption></figure><ol type="a"><li><p>Running four jobs in the original order</p></li><li><p>Running them in shortest job first order.</p></li></ol><h4 id="scheduling-in-interactive-systems-20312">Scheduling in interactive systems 2:03:12</h4><h5 id="round-robin-scheduling">Round-robin scheduling</h5><p><img src="/images/OP/0934283.png" /></p><ol type="a"><li><p>The list of runnable processes</p></li><li><p>The list of runnable processes after B uses up its quantum</p></li></ol><h5 id="priority-scheduling-20410">Priority scheduling 2:04:10</h5><p>Process with highest priority always selected first by scheduler</p><ul><li>Typically determined statically during creation and dynamically during execution</li></ul><p>First-In-First-Out (FIFO)</p><ul><li>Runnable processes added to end of FIFO as created or become runnable</li><li>Front process removed from FIFO when time quantum of current process is up or process is blocked</li></ul><p><strong>Priority queue</strong></p><p>Runnable processes again added as created or become runnable</p><p>Process with highest priority chosen when new process needed</p><p>If multiple processes with same highest priority value then selects from them using first-come firstserved</p><ul><li>Called priority scheduling when non-preemptive</li><li>Called round-robin when preemptive</li></ul><figure><img src="/images/OP/0934284.png" alt="" /><figcaption>A scheduling algorithm with four priority classes.</figcaption></figure><h4 id="scheduling-in-real-time-systems">Scheduling in real-time systems</h4>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Operating Systems and Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Introduction to operating systems</title>
      <link href="2021/02/10/2021-02-10-Introduction%20to%20operating%20systems/"/>
      <url>2021/02/10/2021-02-10-Introduction%20to%20operating%20systems/</url>
      
        <content type="html"><![CDATA[<h1 id="introduction-to-operating-systems">Introduction to Operating Systems</h1><p><a href="https://caliweb.vub.be/?page=course-offer&amp;id=004342&amp;anchor=2&amp;target=pr&amp;year=2021&amp;language=en&amp;output=html">Website</a></p><p><a href="https://vub-my.sharepoint.com/personal/bruno_da_silva_vub_be/_layouts/15/onedrive.aspx?originalPath=aHR0cHM6Ly92dWItbXkuc2hhcmVwb2ludC5jb20vOmY6L2cvcGVyc29uYWwvYnJ1bm9fZGFfc2lsdmFfdnViX2JlL0V1ZWdTdWlYa3JCSWhnNXhVMFgzZ2s4QjhSNlFQYkRFbVZLMFNCUmlIQXVTWVE%5FcnRpbWU9U1pBOVNQVE4yRWc&amp;id=%2Fpersonal%2Fbruno%5Fda%5Fsilva%5Fvub%5Fbe%2FDocuments%2FCOURSES%2FOSSEC%2020%20%2D%2021%20Semester%202%2FRecordings%2F%5BOSSEC%5D%20%2D%20operating%20systems%20and%20security%20%2D%20lecture%201%2Emp4&amp;parent=%2Fpersonal%2Fbruno%5Fda%5Fsilva%5Fvub%5Fbe%2FDocuments%2FCOURSES%2FOSSEC%2020%20%2D%2021%20Semester%202%2FRecordings">Video: 10:45 ~ 50:29</a></p><h2 id="overview">Overview</h2><ul><li>Basis of Operating Systems (~3-4h)<ul><li>Process management</li><li>Memory management</li><li>File management</li><li>I/O Control</li></ul></li><li>Virtualization and Cloud (~3h)</li><li>Embedded OS and RTOS (~2h)</li><li>Security (~3h)</li></ul><h2 id="what-is-an-operating-system">What is an operating system?</h2><p><img src="/images/OP/205634.png" /></p><p>Managing all hardware requires a layer of software – <strong>the operating system</strong>.</p><ul><li><p>Provide <strong>consistent abstractions</strong> to applications, even on different hardware</p></li><li><p>Manage <strong>sharing of resources</strong> among multiple applications</p></li></ul><p>The one program running at all times on the computer” is the <u><strong>kernel</strong></u> – Everything else is either a system program (ships with the operating system) or an application program</p><h2 id="os-abstracts-underlying-hardware-to-help-tame-complexity">OS Abstracts Underlying Hardware to help Tame Complexity</h2><ul><li>Processor → Thread</li><li>Memory → Address Space</li><li>Disks, SSDs, … → Files</li><li>Networks → Sockets</li><li>Machines → Processes</li></ul><p><img src="/images/OP/201621.png" /></p><ul><li>What hardware interface to handle? (physical reality)</li><li>What’s software interface to provide? (nicer abstraction)</li></ul><h2 id="where-is-the-software">Where is the software?</h2><p>Two modes: User mode and Kernel mode</p><p><img src="/images/OP/whereislocation.png" /></p><h2 id="why-do-you-need-an-operating-system">Why do you need an operating system?</h2><ul><li>Allow multiple programs to run at the same time</li><li>Manage and protect memory, I/O devices, and other resources</li><li>Multiplexes (shares) resources in two different ways<ul><li>In time</li><li>In space</li></ul></li></ul><h2 id="operating-system">Operating system</h2><p>This software layer provides low-level services to a program (application).</p><ul><li>Platform-specific hardware abstraction layers</li><li>File management, disk access</li><li>Keyboard/display interfacing</li><li>Integrated power-management systems</li><li>Device drivers for common peripherals</li><li>Scheduling multiple programs for execution<ul><li>Or even just multiple threads from one program</li></ul></li><li>Program makes system calls to the OS</li></ul><p><img src="/images/OP/203504.png" /></p><p>Pic: 29:14 - 30:27</p><h1 id="four-fundamental-os-concepts">Four Fundamental OS Concepts</h1><p><a href="https://www.youtube.com/watch?v=iFBwI3ZMn3o&amp;list=PLIMsSuI81pxq7c91oQMpmXgmGICbuDA_c&amp;index=2">CS162 UCB VIDEO</a></p><h3 id="thread-of-control-2302-3936">1. Thread of Control 23:02 ~ 39:36</h3><ul><li><strong>Thread</strong>: <strong><u>Single unique execution context</u></strong><ul><li>Program Counter, Registers, Execution Flags, Stack, Memory State</li></ul></li><li>A thread is <strong><em>executing</em></strong> on a processor (core) when it is <strong><em>resident</em></strong> in the processor registers</li><li>A thread is <strong><em>suspended</em></strong> (not executing) when its state <strong><em>is not</em></strong> loaded (resident) into the processor<ul><li>Processor state pointing at some other thread</li><li>Program counter register <strong><em>is not</em></strong> pointing at next instruction from this thread</li><li>Often: a copy of the last value for each register stored in memory</li></ul></li></ul><h4 id="illusion-of-multiple-processors-3138">Illusion of Multiple Processors 31:38</h4><p><img src="/images/OP/204910.png" /></p><ul><li><p>Multiplex in time!</p><p><img src="/images/OP/205354.png" /></p></li><li><p>Threads are <strong><em>virtual cores</em></strong></p></li><li><p>Contents of virtual core (thread):</p><ul><li>Program counter, stack pointer</li><li>Registers</li></ul></li><li><p>Where is “it” (the thread)?</p><ul><li>On the real (physical) core, or</li><li>Saved in chunk of memory – called the <strong>Thread Control Block (TCB)</strong></li></ul></li></ul><p>Consider: At T1: vCPU1 on real core, vCPU2 in memory and at T2: vCPU2 on real core, vCPU1 in memory, what happened? 38:21</p><p><img src="/images/OP/205355.png" /></p><ul><li>OS Ran, triggering a <em>context switch</em></li><li>Saved PC, SP, … in vCPU1's thread control block (memory)</li><li>Loaded PC, SP, … from vCPU2's TCB, jumped to PC</li></ul><h3 id="address-space-4356">2. Address Space 43:56</h3><ul><li><p><strong>Address space</strong> ⇒ the set of accessible addresses + state associated with them</p><ul><li>For 32-bit processor: 2<sup>32</sup> = 4 billion (10<sup>9</sup>) addresses</li><li>For 64-bit processor: 2<sup>64</sup> = 18 quintillion (10<sup>18</sup>) addresses</li></ul></li><li><p>What happens when you read or write to an address?</p><ul><li><p>Perhaps acts like regular memory</p></li><li><p>Perhaps causes I/O operation</p><p>» (Memory-mapped I/O)</p></li><li><p>Perhaps causes exception (fault)</p></li><li><p>Communicates with another program</p></li><li><p>….</p></li></ul></li></ul><figure><img src="/images/OP/addressspace.png" alt="" /><figcaption>47:04 - 49:46</figcaption></figure><h4 id="very-simple-multiprogramming">Very Simple Multiprogramming</h4><ul><li>All vCPU's share non-CPU resources<ul><li>Memory, I/O Devices</li></ul></li><li>Each thread can read/write memory<ul><li>Perhaps data of others, including OS!</li><li>can overwrite OS</li></ul></li><li>Used in early days of computing or embedded systems.</li><li>However it is <strong>risky</strong>!</li></ul><h4 id="simple-multiplexing-has-no-protection">Simple Multiplexing has no Protection!</h4><ul><li>OS must protect user programs from one another<ul><li>Prevent threads owned by one user from impacting threads owned by another user</li><li>Example: prevent one user from stealing secret information from another user</li></ul></li><li>OS must protect itself from user programs<ul><li>Reliability: compromising the operating system generally causes it to crash</li><li>Security: limit the scope of what threads can do</li><li>Privacy: limit each thread to the data it is permitted to access</li><li>Fairness: each thread should be limited to its appropriate share of system resources (CPU, memory)</li></ul></li></ul><h4 id="what-can-the-hardware-do-to-help-the-os-protect-itself-from-programs-5420">What can the hardware do to help the OS protect itself from programs? 54:20</h4><ul><li>Simple Protection: Base and Bound (B&amp;B) 55:48 - 1:06:06</li><li>Address Space Translation 1:06:07 - 1:07:36</li></ul><h3 id="process-11057">3. Process 1:10:57</h3><h4 id="definition-execution-environment-with-restricted-rights">Definition: execution environment with restricted rights</h4><ul><li><strong>(Protected) Address Space with One or More Threads</strong></li><li>Owns memory (address space), file descriptors, sockets</li><li>Encapsulate one or more threads sharing process resources</li></ul><h4 id="why-processes-11219">Why processes? 1:12:19</h4><ul><li><strong>Protected from each other! </strong></li><li><strong>OS Protected from them</strong></li><li>Processes provides memory protection</li><li>Threads more efficient than processes for parallelism</li></ul><p>A process is a running program, with <strong>protection</strong>!</p><h4 id="single-and-multithreaded-processes">Single and Multithreaded Processes</h4><figure><img src="/images/OP/214705.png" alt="" /><figcaption>1:14:26 - 1:15:25</figcaption></figure><ul><li>Threads encapsulate <strong>concurrency</strong> : "Active" component</li><li>Address spaces encapsulate <strong>protection</strong>: "Passive" component<ul><li>Keeps buggy program from trashing the system</li></ul></li><li>Why have multiple threads per address space?<ul><li>Parallelism: take advantage of actual hardware parallelism (e.g. multicore)</li><li>Concurrency: ease of handling I/O and other simultaneous events</li></ul></li></ul><h4 id="protection-and-isolation">Protection and Isolation</h4><ul><li>Processes provide protection and isolation<ul><li>Reliability: bugs can only overwrite memory of process they are in</li><li>Security and privacy: malicious or compromised process can’t read or write other process’ data</li></ul></li><li>Mechanisms:<ul><li>Address translation: address space only contains its own data</li><li>BUT: why can’t a process change the page table pointer?<ul><li>Or use I/O instructions to bypass the system?</li></ul></li><li>Hardware must support privilege levels</li></ul></li></ul><h3 id="dual-mode-operation-11923">4. Dual Mode Operation 1:19:23</h3><p><img src="/images/OP/twomodes.png" /></p><p>Hardware provides at least <strong>two modes</strong>:</p><ol type="1"><li>Kernel Mode (or “supervisor” mode)</li><li>User Mode</li></ol><p>Certain operations are <strong>prohibited</strong> when running in user mode (privileged instructions).</p><p>Carefully controlled transitions between user mode and kernel mode.</p><figure><img src="/images/OP/UserKernelMode.png" alt="" /><figcaption>User/Kernel (Privileged) Mode</figcaption></figure><p>Pic: 1:20:31 - 1:22:07</p><h3 id="conclusion">Conclusion</h3><ul><li>Thread: Execution Context<ul><li>Single thread of execution</li></ul></li><li>Address space (with or w/o translation)<ul><li>Set of memory addresses accessible to program (for read or write)</li></ul></li><li>Process: an instance of a running program<ul><li>Protected Address Space + One or more Threads</li></ul></li><li>Dual mode operation / Protection<ul><li>Only the “system” has the ability to access certain resources</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Operating Systems and Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Electronics Introduction</title>
      <link href="2021/02/10/2021-02-10-Electronics%20Introduction/"/>
      <url>2021/02/10/2021-02-10-Electronics%20Introduction/</url>
      
        <content type="html"><![CDATA[<h1 id="electronics-introduction">Electronics: Introduction</h1><p><a href="https://caliweb.vub.be/?page=course-offer&amp;id=006502&amp;anchor=1&amp;target=pr&amp;year=2021&amp;language=en&amp;output=html">Website</a></p><p><a href="https://recordings.reu1.blindsidenetworks.com/vub/aea8224417ee95f14ee97f58e2aac601ab0334b7-1612774456578/capture/">Video</a></p><h2 id="technological-point-of-view">Technological point of view</h2><h3 id="definition">Definition：</h3><p>The field of <strong>electronics</strong> refers to the study, design and use of systems that operate by controlling the flow of <strong>electrons</strong> (or other <strong>charge carriers</strong>) in <strong>active</strong> (semiconductor) and <strong>passive</strong> devices.</p><ul><li>Passive components: <strong>Limited</strong>: dissipate energy and exhibit <strong>linear</strong> behaviours</li><li>Active components: <strong>Semiconductors</strong>; amplify incoming signals. exhibit complex, <strong>non-linear</strong> behaviour.</li></ul><p>The difference between electricity/electrical circuits and electronics is the use of <strong>active components</strong>.</p><h2 id="users-point-of-view">User’s point of view</h2><p>Most deal only with information: capturing, transmission, processing, representation, visualization, and storage of information or power.</p><p><img src="/images/EP/221323.png" /></p><h2 id="designers-point-of-view">Designer’s point of view</h2><h5 id="what-are-the-inputsoutputs-what-parameters-can-be-optimized-for">What are the inputs/outputs? What parameters can be optimized for?</h5><p><img src="/images/EP/221429.png" /></p><p>Pic : 24:52 - 26:20 Video</p><h3 id="processing">Processing</h3><ul><li><p>Analog processing</p><ul><li>Sensitive to noise</li><li>Constrained dynamical range</li><li>Important on input/output, but generally <strong>unfavourable for computation</strong></li></ul></li><li><p>Digital processing 28:30</p><p><img src="/images/EP/Digital_Processing.png" /></p><ul><li>Range: mostly fixed-point (integer) or floating-point</li><li>Saturation / Overflow</li><li>Noise also also <u>depends on quantization</u></li><li>Flexible for (micro-)programming</li><li><u>High</u> dynamic range</li><li>Generic components</li><li>Structured design methods, even for complex systems</li></ul></li></ul><h4 id="conversion-between-analog-and-digital-3234">Conversion between analog and digital 32:34</h4><ul><li><p>Sampling</p></li><li><p>Dynamic range</p></li><li><p>Quantization</p></li><li><p>Noise, dependencies on environment</p></li><li><p><strong>(Non-)linearity?</strong>36:03 - 37:45</p><p><img src="/images/EP/strain_gauge.png" /></p></li></ul><h2 id="micro-electronics">Micro-electronics</h2><p><strong>Electronics</strong>: discrete components = building blocks for <strong><u>simple</u></strong> systems (specialized components: examples for implementation)</p><p><strong>Micro-electronics</strong>: bigger building blocks on one chip (IC)= building blocks for <u><strong>complex</strong></u> systems</p><h3 id="why-semiconductors-4048"><strong>Why semiconductors</strong>? 40:48</h3><p>Characteristics of both conductors (resistors) and isolators (capacitors)</p><h4 id="conductor-characteristics">Conductor characteristics</h4><ul><li>Transport of charge carriers through (low) resistance</li><li>Information and signal <strong>transport</strong></li><li>Voltage -&gt; modulated conduction -&gt; information and signal <strong>processing</strong></li></ul><h4 id="isolator-characteristics">Isolator characteristics</h4><ul><li>Storage of charge carriers</li><li>Controlled access to capacitors -&gt; controlled voltage -&gt; <strong>memory</strong></li></ul><h2 id="electronics-for-computing">Electronics for computing</h2><h3 id="computing-speed-does-not-scale-linearly-with-the-number-of-cores-2-x-3-ghz-6ghz"><strong>Computing speed does not scale linearly with the number of cores!</strong> 2 x 3 Ghz &lt; 6Ghz</h3><ul><li>Coordination overhead, cache coherency</li><li>Not all problems lend themselves to (much) parallelization</li><li>Programming difficulty (harder to reason about, complex dependencies)</li></ul><h2 id="solutions-increased-processor-complexity">Solutions: increased processor complexity</h2><p>Modern processors are not just “faster” clones of older processor generations</p><p>Some notable advances:</p><ul><li>High core count (“AMD Threadripper” goes up to 64 cores as of 2020)</li><li>Multi-threading within cores, context switching registers</li><li>Write-combine on bus</li><li>Instruction-level parallelism (pipelining, superscalar)</li><li>Speculative execution (branch prediction)</li><li>Out-of-order execution</li><li>Single instruction, multiple data (SIMD)</li><li>Advanced power management, even within chip regions</li><li>Complex cache hierarchy</li></ul><h2 id="solutions-different-hardware-topologies-5852">Solutions: different hardware topologies 58:52</h2><h4 id="gpu-graphics-processing-units--10201">GPU (Graphics Processing Units) -1:02:01</h4><p>many tasks, especially involving signals, lend themselves to <strong>extreme parallelization</strong> (graphics, light transport, sound, weather systems, ...)</p><h4 id="tpu-tensor-processing-units---10254">TPU (Tensor Processing Units) - 1:02:54</h4><p>deep learning requires large amounts of multiply-adds for computing convolutions -&gt; specialized hardware.</p><p><img src="/images/EP/GPUTPU.png" /></p><h2 id="future-of-computing">Future of computing</h2><p><strong>As complexity increases, optimization becomes increasingly important!</strong></p><ul><li>• Performance = Saving energy</li><li>Tight feedback between software and hardware design</li><li>Tune algorithms to specific architecture (Big-O analysis alone won’t do)</li><li>New paradigms (quantum, neuromorphic, FPGA)</li><li>Robustness and errors in algorithms (loss of determinism), Statistical analysis of run-time</li></ul><h3 id="new-manufacturing-technologies"><strong>New manufacturing technologies</strong></h3><h3 id="extreme-ultra-violet-euv-lithography">Extreme Ultra-Violet (EUV) Lithography</h3><h3 id="wafer-scale-integration">Wafer-scale integration</h3><p>Shrinking transistors reaches fundamental limits(1:22:48), Atomic-level manufacturing variations</p><p><em>As a metal oxide–semiconductor field effect transistor (MOSFET) shrinks, the gate dielectric (yellow) thickness approaches several atoms (0.5 nm at the 22-nm technology node).</em></p><h3 id="heterogeneous-computing-at-all-scales">Heterogeneous computing at all scales</h3><p>Arrange GPU CPU together: At chip-level, node-level, cluster-level and network-level</p><p><img src="/images/EP/HETRO.png" /></p><h3 id="quantum-computing">Quantum computing</h3><ul><li>Series of bits are encoded as quantum superpositions of 0 and 1, denoted qubits</li><li>Myth: quantum computers can perform calculations exponentially faster than classical computers.</li><li>Fact: they can solve specific problem classes highly efficiently, but not others. (Applications in cryptography, optimization, accurate physical simulations of quantum systems)</li><li>Prediction: quantum computers will become a specialized unit for certain problem classes, like the GPU. (QPU?)</li></ul><h2 id="neuromorphic-computing-13434">Neuromorphic computing 1:34:34</h2><p>Departure from von Neumann architecture</p><p><img src="/images/EP/vonneu.png" /></p><h2 id="new-types-of-memory-13700">New types of memory 1:37:00</h2><p>Beyond simple caches, RAM and HDD</p><p><img src="/images/EP/new_type_me.png" /></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Technology and Applications of Electronics and Photonics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Should trees have rights?</title>
      <link href="2019/06/27/2019-06-27-Should-trees-have-rights/"/>
      <url>2019/06/27/2019-06-27-Should-trees-have-rights/</url>
      
        <content type="html"><![CDATA[<h1 id="should-trees-have-rights">Should trees have rights?</h1><p><em>Kaidi Wang &amp; Chaoqun Yin</em></p><h2 id="introduction">Introduction</h2><p>In the legal tradition, we have generally treated nature as property and entrusted governments with its protection. We instructed agencies to manage natural resources and wildlife in public interest. But nowadays, with the increase of natural disasters such as global warming, drought, melting of the polar glaciers, climate change has attracted the attention around the world, which forces the governments to develop comprehensive regulations to response the challenges.</p><p>Meanwhile, rights of nature have been focused and discussed in recent decades of years. In the widely cited and influential article, 'Should Trees Have Standing?', Christopher Stone argued for conferring legal personality and rights on the environment because, as a rights-holder, the natural object would “have a legally recognized worth and dignity in its own right, and not merely to serve as a means to benefit ‘us’....”.</p><p>Legal recognition of nature or some part of the natural world as having legal personality can be seen emerging in various doctrines and developments around the world. The historical concept of public trust has been expanded to make the natural world or parts of it the beneficiary of protection, while various "rights of nature" have been incorporated into the constitutions of several countries.</p><h2 id="the-history-of-the-rights-of-nature-paradigm">The history of the rights of nature paradigm</h2><p>The idea of granting Nature legal rights originated in a court case decided in 1972 by the United States Supreme Court, <em>Sierra Club versus Morton</em>. Based on this case, Christopher Stone, a professor at the University of California School of Law, authored a law review article arguing that natural areas and objects should have legal rights to defend their ecological integrity from harms that would damage them. The article, named as “Should trees have rights” caught attention of Supreme Court Justice William O. Douglas, who said, “Contemporary public concern for protecting nature’s ecological equilibrium should lead to the conferral of standing upon environmental objects to sue for their own preservation.”</p><p>The country of Ecuador was the first to place Rights of Nature in its governing laws. Section 7 of the new Constitution of Ecuador adopted in 2008 says, “Nature, or Pacha Mama, where life is reproduced and occurs, has the right to integral respect for its existence and for the maintenance and regeneration of its life cycles, structure, functions and evolutionary processes.”</p><p>Bolivia subsequently, in 2010, enacted a comprehensive Rights of Nature statute, and also hosted an international gathering of concerned organizations from around the world, which led to the founding of the Global Alliance for the Rights of Nature.</p><p>Other recent efforts include a state court in India granting legal personhood to the heavily polluted Ganges and Yamuna Rivers, and local Rights of Nature legislation in various regions of the United States. Most recently (in February 2019), the people of Toledo, Ohio passed a Bill of Community Rights and Nature’s Rights to protect Lake Erie, subject to nearly annual toxic algal blooms, mainly as a result of industrial agricultural practices in the lake’s watershed.</p><p>Rights of Nature is less a specific template than an overarching ideal of ecological governance, the details of which are fashioned in unique ways in each culture that is seeking to enhance or restore sustainable living within Nature’s limits. This requires that Nature be granted the same rights to flourish and maintain itself as humans grant themselves in their legal structures. But underlying the need for legal protections is the concept that humans and Nature are in a relationship, rather than Nature merely providing a hoard of natural resources for indiscriminate human use. The legal structures discussed in Rights of Nature literature codifies the details of this restored relationship, rather than creating it.</p><h2 id="should-trees-have-rights-1">Should trees have rights？</h2><h3 id="subjects-of-law">Subjects of law</h3><p>As the “Declaration of tree rights” which was adopted in a meeting room of the French National Assembly in Paris said, “A tree should be considered as a subject of law, including when laws regarding human property are involved.”</p><p>The concept of nature’s rights and legal personality has been proposed in a variety of formulations, from legally enforceable rights, to “biotic rights” as moral imperatives, to human responsibilities and duties towards nature. Giving legal recognition to the intrinsic value of nature, by adding new “subjects” of law, is one far-reaching proposal. Some argue that this has already occurred while others object that the ascription of rights to nature anthropomorphizes it to its detriment. Still others view rights-conferring as one tool to enhance the value of nature.</p><p>When the trees are given “legal personality” and become “personhood” in the law system, the first question that must be considered is the scope of granting legal person status to trees. Should all the trees become the subject of law or just a part of trees? If we only focus on some of trees that are thought to be precious and valuable such as endangered species and rare plants and give them rights to spend their whole life. Here, let us think them as extra value. Then in this case, it is unfair to the common trees. Why cannot the trees near my house get the right and why do they have lower status in the low, only because they are too extraordinary and can’t do contributions to biodiversity? In fact, they all produce oxygen and energy and reduce carbon dioxide, do the same to improve the environment. What about another group of trees, which are mainly used for timber purposes and as a source of sustenance: food, sugars, fatty oils and vegetable fats, bioenergy or biofuel<sup>[3]</sup>? If we never treat all the trees as same status, we should not easily decide the rights for them.</p><h3 id="rights-and-obligations">Rights and obligations</h3><p>Secondly, according to the definition of a legal or “juridical” person refers generally to an entity that is not a human being, but one on which society has decided to confer specific rights and obligations.</p><p>As is mentioned before, Bolivia passed constitutional amendment that gives nature equal rights to humans in 2009 and established new rights for nature and grants it comprehensive legal rights that are comparable to human rights in 2012. The rights include: the right to life and to exist; the right to continue vital cycles and processes free from human alteration; the right to pure water and clean air; the right to ecological balance; the right to the effective and opportune restoration of life systems affected by direct or indirect human activities, and the right for preservation of Mother Earth and any of its components with regards to toxic and radioactive waste generated by human activities.</p><p>But if we observe these rights, we can easily find that these rights are the instinct of trees, they will be born to do so, we don’t need to re-grant them these rights at all. Similarly, with the existing environmental protection laws, strengthening the protection of trees can also let the trees grow healthily do the same thing simply.</p><p>French recently declared that a tree “should be respected throughout its life and have the right to develop and to reproduce freely, from its birth to its natural death, whether it be a town tree or a country tree.”</p><p>Previous research and the law are more focus on the rights of nature or trees, as opposed to the obligations. But from the perspective of the legal person system, “A legal person in legal context typically is a person (or less ambiguously, a legal entity)—whether human or non-human—that is recognized as having certain privileges and obligations such as the legal capacity to enter into contracts, to sue, and to be sued.” (from Wikipedia) Rights and obligations are closely linked. How do these trees fulfil their obligations and what are the obligations that must be obeyed? Obviously, it is hard for us to let the trees fulfil obligations.</p><p>Furthermore, trees are a group of the voiceless, so how do we protect their rights from infringement? What rights should a tree have? What happens when a tree infringes on the rights of another tree or a property?</p><h3 id="the-idea-of-guardship">The idea of guardship</h3><p>“Stone advocates the idea of guardship as the best way to protect their interests, as well as the best the ways to protect the global commons.” In 2017, parliament passed a historic bill to recognize the special relationship between the Whanganui River and Whanganui iwi. Conferring legal personality on the Wanganui River or any other part of nature should allow legal action to be brought in the name of the person through a litigation guardian, or “guardian ad litem”.</p><p>As is discussed in Stone’s essay, the problem of how to choose the right guardian for the objects, and how to resolve conflicts that may between them. For the first problem, the court needs to entrust the related departments, organizations or individuals as the regulator to give a voice to the voiceless. Here, do we treat forest in a whole, or just focus on the specific objects within it? When it comes to cash crops, if we should be different? They have the same rights to live their life but in fact, we can never treat them legally.</p><p>Moreover, if the rights of trees are invaded, what kind of measurements should be done as a punishment? Fine them or do social work to make up for their mistakes? After all, all the measures are just remediation, we have not fundamentally solved the problem, so it is meaningless to give the trees rights or not. On the contrary, what if the trees do not fulfil the so-called obligations which are not so clear now or invade others’ right? The only way is to give the guardians or legal representative administrative punishment. But the original purpose of guardianship system is to protect the trees’ right, now how should we explain the legal effect of guardship?</p><p>Let us come back to guardship system for the trees. Landowners have custody of trees in their field, government departments have jurisdiction over trees on the street and state has the right to protect the forests. But it is impossible to arrange guardians for each tree and to define the scope of the guardian's power.</p><p>Considering all the facts, the existing system is not enough to support the problems that will be faced in the future. For the rights of trees and the qualifications of legal persons, once the existing laws are expanded, it is difficult to predict whether they will conflict with existing laws.</p><h2 id="trees-and-humans">Trees and humans</h2><p>All kinds of trees have an incalculable role in maintaining ecological balance and biodiversity. All trees should be fully protected in principle, the concept of protecting endangered species should be abandoned, and the concept of comprehensive protection and all-round protection should be adhered to protect both species diversity and ecological diversity and genetic diversity.</p><p>The IUCN Red List of Threatened Species is widely recognized as the most authoritative global assessment of the conservation status of species. Currently, more than 9,500 trees have been assessed and published on the IUCN Red List, over 6,400 of which are assessed as globally threatened (CR, EN, VU). Over 1,100 trees are assessed as Critically Endangered (CR) on the IUCN Red List and in urgent need of conservation action. If trees are endowed with rights, are protected species more precious than ordinary trees?</p><p>It is derived from the concept of “species protection”, that is, to prevent the extinction of species by human or natural factors, to evaluate and confirm “precious and endangered” species through specific procedures, and then to strengthen key prevention and protection to achieve the sustainability of such species. However, “The INCU Red List” is a utilitarian concept. The classification of protected trees should not be based on whether are useful to human or quantitatively endangered. The definition of “Red List” artificially promotes the reproduction and development of specific species, but it also destroys the integrity and unity of the ecological environment, and the “valuable theory” of species has emerged. This creates a “separation” of “endangered” and “ordinary” species.</p><p>In the case of limited administrative resources, it is necessary to form a comprehensive protection system, and establish a certain priority protection system according to the priorities of the matter, so as to achieve the priority and priority protection of "precious and endangered" species. If each tree is given rights, they should be treated equally, which is obviously unrealistic to provide enough resources in the current stage of social development.</p><h3 id="cash-crop">Cash Crop</h3><p>A cash crop or profit crop is an agricultural crop which is grown to sell for profit. As a natural resource, trees have been exploited and exploited for thousands of years. Many farmers make a living by planting cash crops and carrying out related production and management. If trees are granted with rights, these behaviours should be abolished. The survival and employment transformation of these people will become a big problem which will not conducive to social stability.</p><h3 id="trees-and-human-beings">Trees and human beings</h3><p>The law is made by people and it is difficult to avoid consideration of human interests. If trees are given rights, they are the same rights as human beings, and humans have no reason to develop trees. While trees and their fruits are important sources of human food, it seems that giving trees rights is unrealistic. In the ancient Chinese civilization, the profound philosophical thoughts of "Heaven and Man are one" are sometimes simply used to illustrate a harmonious state of human and natural environment, including trees, which is the goal pursued by world civilization.</p><p>In Europe, tree protection and welfare issues are deeply rooted in legislation and education, some of which go even to extremes.</p><p>In China, with the environmental damage and serious pollution, the public's awareness of environmental protection has increased in recent years, but the understanding of the protection of trees still needs to be further improved.</p><h2 id="conferring-rights-of-trees-can-really-protect-trees">Conferring rights of trees can really protect trees?</h2><p>Sustainable development is a topic of common concern to the world today. Whether it is by law giving trees rights or establishing a guardian system, no matter what form of measures are taken, the final objective is to reduce the damage to the nature and protect the forests, urge people to make good use of resources and protect the natural environment and ecosystems, and try to keep a beautiful home for the next generation.</p><p>Conferring rights of trees can really protect the interests of trees? As a matter of fact, we are defending our own interests and the benefits of the next generation. Since then, why do we protect our own interests in the name of protecting the rights of trees?</p><p>First, we never treat all trees equally. We cannot deny the precious species and the natural forest are far more important than the trees on the road or behind the house in our subconscious. In fact, we do treat them like this, that is, what is the meaning of giving trees rights?</p><p>Secondly, we never treat trees as “real persons”. Whether the trees or animals, or anything else except human being themselves., all what we have done and what we will do is to maintain our own interests. We obtain food and trees, we cut down trees to build houses and furniture. And now how do we give them rights to live a whole life.</p><p>Finally, what we are talking about here is to grant the trees rights to let them live their whole life, that is, people should not deliberately destroy and cut down trees, in another word, trees should be protected. Then the question is converted to the landowners’ duties and whether some or all trees are protected and how such protections are given force. Based on this, it is difficult to define how much everyone’s duty is and how much protection should be given to the trees in law.</p><p>Protection of trees can be ensured within the human right in the environment. But as to the recognition of rights to the tree, what is the benefit behind it? Can it really protect the trees? Nobody can answer the question, but what we can be sure of is that if trees are granted legal personality and rights, this will undoubtedly challenge the existing legal system and add a series of troubles.</p><p>Compared to giving trees rights., human protection seems to be a simpler and more effective means.</p><h2 id="reference">Reference</h2><p>1.Stone CD “Should Trees Have Standing? Toward Legal Rights for Natural Objects. Southern California Law Review” 1972; 45:450; W Kaufmann, Los Altos, 1974; p8.</p><p>2.Juridical persons are also referred to as “artificial,” “juristic,” and “fictitious/fictional” persons. See Trs. of Dartmouth Coll. v. Woodward, 17 U.S. (4 Wheat) 518, 636 (1819) (“corporation is an artificial being”); Sanford A. Schane, The Corporation Is a Person: The Language of a Legal Fiction, 61 Tul. L. Rev. 563, 563-65 (1987) (referring to corporations as fictional persons).</p><p>3.Shelton, Dinah. "Nature as a legal person." VertigO-la revue électronique en sciences de l'environnement Hors-série 22 (2015).</p><p>4.M. K. Seth "Trees and Their Economic Importance," The Botanical Review 69(4), 321-376, (1 October 2003).</p><p>5.Eg Supreme Court (General Civil Procedure) Rules (Vic), O 15, and Guardianship and Administration Act 1986 (Vic), s 66</p><p>6.Cameron La Follette “Rights of Nature: The New Paradigm” AAG/6 de marzo del 2019</p><p>7.Emmenegger, Susan, and Axel Tschentscher. "Taking nature's rights seriously: the long way to biocentrism in environmental law." Geo. Int'l Envtl. L. Rev. 6 (1993): 545.</p>]]></content>
      
      
      <categories>
          
          <category> Reports </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Environmental Law </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
